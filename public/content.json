{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://blog.caiplus.pro","root":"/"},"pages":[{"title":"tags","date":"2023-07-22T16:24:49.000Z","updated":"2023-07-22T16:34:49.854Z","comments":true,"path":"tags/index.html","permalink":"http://blog.caiplus.pro/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"快速开启http服务","slug":"linux/快速开启http服务","date":"2023-08-07T09:22:35.000Z","updated":"2023-08-07T09:23:38.137Z","comments":true,"path":"2023/08/07/linux/快速开启http服务/","link":"","permalink":"http://blog.caiplus.pro/2023/08/07/linux/%E5%BF%AB%E9%80%9F%E5%BC%80%E5%90%AFhttp%E6%9C%8D%E5%8A%A1/","excerpt":"","text":"快速开启http服务这将监听本地 80 端口，响应 OK 1echo -e &#x27;HTTP/1.1 200 OK\\r\\n\\r\\nOK&#x27; | sudo socat - TCP-LISTEN:80","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"进入pod网络命名空间","slug":"k8s/进入pod网络命名空间","date":"2023-08-03T08:35:39.000Z","updated":"2023-08-03T09:01:02.876Z","comments":true,"path":"2023/08/03/k8s/进入pod网络命名空间/","link":"","permalink":"http://blog.caiplus.pro/2023/08/03/k8s/%E8%BF%9B%E5%85%A5pod%E7%BD%91%E7%BB%9C%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/","excerpt":"","text":"1. 找到 pod 所在节点123k get po -owidessh root@xx.xx.xx.xx 2. 获取容器 pid12345# dockerdocker inspect --format &#x27;&#123;&#123; .State.Pid &#125;&#125;&#x27; 容器名/ID# containerdcrictl inspect 容器ID | grep pid 3. 进入容器网络1nsenter -t $PID -n","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"解压、压缩","slug":"linux/解压、压缩","date":"2023-08-03T07:43:09.000Z","updated":"2023-08-03T07:53:51.599Z","comments":true,"path":"2023/08/03/linux/解压、压缩/","link":"","permalink":"http://blog.caiplus.pro/2023/08/03/linux/%E8%A7%A3%E5%8E%8B%E3%80%81%E5%8E%8B%E7%BC%A9/","excerpt":"","text":"tar12345678# 压缩tar -czvf test.tar.gz README.md# 解压tar -xzvf test.tar.gz# 列出压缩文件内容tar -tzvf test.tar.gz 参数说明 -v 显示指令执行过程。 -c 建立新的备份文件。 -f 指定备份文件。 -z 通过gzip指令处理备份文件。 -x 从备份文件中还原文件。 加密压缩12345# 将当前目录下的files文件夹打包压缩，密码为passwordtar -czvf - files | openssl des3 -salt -k password -out files.tar.gz# 将当前目录下的files.tar.gz进行解密解压openssl des3 -d -k password -salt -in files.tar.gz | tar xzvf -","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"buildx构建多版本镜像","slug":"docker/buildx构建多版本镜像","date":"2023-08-03T07:23:18.000Z","updated":"2023-08-03T07:37:35.288Z","comments":true,"path":"2023/08/03/docker/buildx构建多版本镜像/","link":"","permalink":"http://blog.caiplus.pro/2023/08/03/docker/buildx%E6%9E%84%E5%BB%BA%E5%A4%9A%E7%89%88%E6%9C%AC%E9%95%9C%E5%83%8F/","excerpt":"","text":"参考资料 目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行 新版本的docker默认自带 创建buildx 查看当前buildx实例 1234$ docker buildx lsNAME/NODE DRIVER/ENDPOINT STATUS BUILDKIT PLATFORMSdefault * docker default default running 23.0.5 linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386 默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型 创建buildx 1docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use 使用这个实例 1docker buildx use all 当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像 编译 –platform执行要编译的平台，其他的参数和普通的build差不多 1234567891011# 直接上传到仓库docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .# 输出本地docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .# tar包docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .# 直接导入到本地 docker 中，只支持单平台架构docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load .","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.caiplus.pro/tags/docker/"}]},{"title":"cronjob 定时任务","slug":"linux/cronjob 定时任务","date":"2023-08-01T07:49:05.000Z","updated":"2023-08-03T07:43:02.604Z","comments":true,"path":"2023/08/01/linux/cronjob 定时任务/","link":"","permalink":"http://blog.caiplus.pro/2023/08/01/linux/cronjob%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/","excerpt":"","text":"cronjob 定时任务12345# crontab -e 命令以编辑当前用户的cron表。crontab -e# 每分钟执行一次 ls*/1 * * * * ls","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"grpc如何使用","slug":"golang/grpc如何使用","date":"2023-07-31T09:04:16.000Z","updated":"2023-08-01T07:59:35.124Z","comments":true,"path":"2023/07/31/golang/grpc如何使用/","link":"","permalink":"http://blog.caiplus.pro/2023/07/31/golang/grpc%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"安装grpc1go get google.golang.org/grpc@latest 安装Protocol Buffers v3protoc 下载 安装插件12go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2 入门示例代码实现 服务端编写proto代码123456789101112131415161718192021222324cat &lt;&lt;EOF &gt; pb/hello.protosyntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本option go_package = &quot;server/pb&quot;; // 指定生成的Go代码在你项目中的导入路径package pb; // 包名// 定义服务service Greeter &#123; // SayHello 方法 rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;&#125;// 请求消息message HelloRequest &#123; string name = 1;&#125;// 响应消息message HelloResponse &#123; string reply = 1;&#125;EOF 执行命令：1protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto 编写Server端Go代码12345678910111213141516171819202122232425262728293031323334353637package mainimport ( &quot;context&quot; &quot;fmt&quot; &quot;hello_server/pb&quot; &quot;net&quot; &quot;google.golang.org/grpc&quot;)// hello servertype server struct &#123; pb.UnimplementedGreeterServer&#125;func (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, error) &#123; return &amp;pb.HelloResponse&#123;Reply: &quot;Hello &quot; + in.Name&#125;, nil&#125;func main() &#123; // 监听本地的8972端口 lis, err := net.Listen(&quot;tcp&quot;, &quot;:8972&quot;) if err != nil &#123; fmt.Printf(&quot;failed to listen: %v&quot;, err) return &#125; s := grpc.NewServer() // 创建gRPC服务器 pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) // 在gRPC服务端注册服务 // 启动服务 err = s.Serve(lis) if err != nil &#123; fmt.Printf(&quot;failed to serve: %v&quot;, err) return &#125;&#125; 代码结构12345678server├── go.mod├── go.sum├── main.go└── pb ├── hello.pb.go ├── hello.proto └── hello_grpc.pb.go 运行1go run main.go 客户端编写proto代码新建 client 项目 将 go_package 改为 “client&#x2F;db” 123456789101112131415161718192021222324cat &lt;&lt;EOF &gt; pb/hello.protosyntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本option go_package = &quot;client/pb&quot;; // 指定生成的Go代码在你项目中的导入路径package pb; // 包名// 定义服务service Greeter &#123; // SayHello 方法 rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;&#125;// 请求消息message HelloRequest &#123; string name = 1;&#125;// 响应消息message HelloResponse &#123; string reply = 1;&#125;EOF 执行命令1protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto client 端代码1234567891011121314151617181920212223242526272829303132333435363738394041424344package mainimport ( &quot;context&quot; &quot;flag&quot; &quot;log&quot; &quot;time&quot; &quot;hello_client/pb&quot; &quot;google.golang.org/grpc&quot; &quot;google.golang.org/grpc/credentials/insecure&quot;)// hello_clientconst ( defaultName = &quot;world&quot;)var ( addr = flag.String(&quot;addr&quot;, &quot;127.0.0.1:8972&quot;, &quot;the address to connect to&quot;) name = flag.String(&quot;name&quot;, defaultName, &quot;Name to greet&quot;))func main() &#123; flag.Parse() // 连接到server端，此处禁用安全传输 conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials())) if err != nil &#123; log.Fatalf(&quot;did not connect: %v&quot;, err) &#125; defer conn.Close() c := pb.NewGreeterClient(conn) // 执行RPC调用并打印收到的响应数据 ctx, cancel := context.WithTimeout(context.Background(), time.Second) defer cancel() r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;) if err != nil &#123; log.Fatalf(&quot;could not greet: %v&quot;, err) &#125; log.Printf(&quot;Greeting: %s&quot;, r.GetReply())&#125; 代码结构12345678http_client├── go.mod├── go.sum├── main.go└── pb ├── hello.pb.go ├── hello.proto └── hello_grpc.pb.go 结果12$ go run main.go -name=李四Greeting: Hello 李四","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]},{"title":"golang细节","slug":"golang/golang细节","date":"2023-07-29T05:20:35.000Z","updated":"2023-07-29T05:59:21.089Z","comments":true,"path":"2023/07/29/golang/golang细节/","link":"","permalink":"http://blog.caiplus.pro/2023/07/29/golang/golang%E7%BB%86%E8%8A%82/","excerpt":"","text":"目录1. 结构体打印时，%v 和 %+v 的区别2. new和make的区别3. slice扩容机制？ 结构体打印时，%v 和 %+v 的区别12345678910111213func printStruct()&#123; people := People&#123; Name: &quot;lisi&quot;, Age: 18, &#125; fmt.Printf(&quot;%v\\n&quot;, people) fmt.Printf(&quot;%+v\\n&quot;, people) fmt.Printf(&quot;%#v\\n&quot;, people)&#125;// 输出:// &#123;lisi 18&#125;// &#123;Name:lisi Age:18&#125;// People&#123;Name:&quot;lisi&quot;, Age:18&#125; new 和 make的区别 new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{} make只可用于slice,map,channel的初始化,返回的是引用。 slice扩容机制？Go &lt;&#x3D; 1.17 如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。 如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap&#x2F;4。 Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]},{"title":"viper配置文件","slug":"golang/viper配置文件","date":"2023-07-29T05:08:23.000Z","updated":"2023-07-29T05:10:06.008Z","comments":true,"path":"2023/07/29/golang/viper配置文件/","link":"","permalink":"http://blog.caiplus.pro/2023/07/29/golang/viper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/","excerpt":"","text":"配置文件1234mysql: url: 127.0.0.1 port: 3306isvalid: true 代码示例123456789101112131415161718192021222324package mainimport ( &quot;fmt&quot; &quot;github.com/spf13/viper&quot;)func main() &#123; // 设置配置文件的名字 viper.SetConfigName(&quot;config&quot;) // 设置配置文件的类型 viper.SetConfigType(&quot;yaml&quot;) // 添加配置文件的路径，指定 config 目录下寻找 viper.AddConfigPath(&quot;./config&quot;) // 寻找配置文件并读取 err := viper.ReadInConfig() if err != nil &#123; panic(fmt.Errorf(&quot;fatal error config file: %w&quot;, err)) &#125; fmt.Println(viper.Get(&quot;mysql&quot;)) fmt.Println(viper.GetString(&quot;mysql.url&quot;)) fmt.Println(viper.GetInt(&quot;mysql.port&quot;)) fmt.Println(viper.GetBool(&quot;isvalid&quot;))&#125;","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]},{"title":"xui客户端配置","slug":"工具/xui客户端配置","date":"2023-07-28T07:46:40.000Z","updated":"2023-07-29T05:47:42.238Z","comments":true,"path":"2023/07/28/工具/xui客户端配置/","link":"","permalink":"http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/xui%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/","excerpt":"","text":"注意: 只适用于linux环境，下载 v2ray-core，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&#123; &quot;log&quot;: &#123; &quot;loglevel&quot;: &quot;warning&quot; &#125;, &quot;routing&quot;: &#123; &quot;domainStrategy&quot;: &quot;AsIs&quot;, &quot;rules&quot;: [ &#123; &quot;ip&quot;: [ &quot;geoip:private&quot; ], &quot;outboundTag&quot;: &quot;direct&quot;, &quot;type&quot;: &quot;field&quot; &#125; ] &#125;, &quot;inbounds&quot;: [ &#123; &quot;port&quot;: 1080, &quot;protocol&quot;: &quot;socks&quot;, &quot;settings&quot;: &#123; &quot;auth&quot;: &quot;noauth&quot;, &quot;udp&quot;: true &#125;, &quot;tag&quot;: &quot;socks&quot; &#125; ], &quot;outbounds&quot;: [ &#123; &quot;protocol&quot;: &quot;vmess&quot;, &quot;settings&quot;: &#123; &quot;vnext&quot;: [ &#123; &quot;users&quot;: [ &#123; &quot;id&quot;: &quot;&lt;uuid&gt;&quot; &#125; ], &quot;port&quot;: &lt;服务端端口&gt;, &quot;address&quot;: &quot;&lt;服务端IP&gt;&quot; &#125; ] &#125; &#125;, &#123; &quot;protocol&quot;: &quot;freedom&quot;, &quot;tag&quot;: &quot;direct&quot; &#125; ]&#125;","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"chatgpt","slug":"工具/chatgpt","date":"2023-07-28T03:00:52.000Z","updated":"2023-07-28T05:38:09.860Z","comments":true,"path":"2023/07/28/工具/chatgpt/","link":"","permalink":"http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/chatgpt/","excerpt":"","text":"测试 key123456789101112curl https://api.openai.com/v1/chat/completions \\-H &quot;Content-Type: application/json&quot; \\-H &quot;Authorization: Bearer $1&quot; \\-d &#x27;&#123; &quot;model&quot;: &quot;gpt-3.5-turbo&quot;, &quot;messages&quot;: [ &#123; &quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;Hello!&quot; &#125; ]&#125;&#x27;","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"oh my zsh 让终端飞","slug":"工具/oh-my-zsh-让终端飞","date":"2023-07-27T10:31:40.000Z","updated":"2023-07-28T11:05:32.600Z","comments":true,"path":"2023/07/27/工具/oh-my-zsh-让终端飞/","link":"","permalink":"http://blog.caiplus.pro/2023/07/27/%E5%B7%A5%E5%85%B7/oh-my-zsh-%E8%AE%A9%E7%BB%88%E7%AB%AF%E9%A3%9E/","excerpt":"","text":"12345678910111213# yum先安装，如果是ubuntu使用 apt-get install zsh yum -y install zsh# 安装脚本sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;# 插件安装## 高亮插件git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting## 自动补全git clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions 手动更改插件配置1234567891011121314$ vim ~/.zshrc# plugins 更改如下plugins=( git zsh-autosuggestions zsh-syntax-highlighting)# 更换主题ZSH_THEME=&quot;ys&quot;# 重新加载source ~/.zshrc","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Dockerfile模版","slug":"docker/Dockerfile模版","date":"2023-07-27T07:34:10.000Z","updated":"2023-08-03T07:36:47.672Z","comments":true,"path":"2023/07/27/docker/Dockerfile模版/","link":"","permalink":"http://blog.caiplus.pro/2023/07/27/docker/Dockerfile%E6%A8%A1%E7%89%88/","excerpt":"","text":"1. 一个适用于我自己的模板1234567891011121314151617181920212223242526FROM golang:1.20 as builderWORKDIR /root/COPY . .RUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go# =================================== 分层编译 ==============================================FROM alpine AS final# 国内使用的goproxyENV GOPROXY=https://goproxy.cn# 设置时区ENV TZ=Asia/ShanghaiRUN apk add --update tzdata \\ &amp;&amp; cp /usr/share/zoneinfo/$TZ /etc/localtime \\ &amp;&amp; echo $TZ &gt; /etc/timezone \\ &amp;&amp; rm -rf /var/cache/apk/*WORKDIR /root/COPY --from=builder /root/app .COPY ./mydir/ ./mydir/RUN chmod +x app \\ &amp;&amp; wget https://storage.googleapis.com/kubernetes-release/release/v1.14.7/bin/linux/amd64/kubectl \\ &amp;&amp; chmod +x kubectlEXPOSE 8080ENTRYPOINT [&quot;/root/app&quot;] 2. COPY vs ADD没有特殊需求情况下，建议使用COPY 1. ADD 会自动解压压缩文件。2. ADD 支持源文件URL形式。1ADD http://example.com/example.txt /app/ 3. CMD vs ENTRYPOINT1. docker run 如果指定了命令会覆盖2. 下面是等价的1CMD [&quot;python&quot;, &quot;app.py&quot;] 1ENTRYPOINT [&quot;python&quot;, &quot;app.py&quot;] 123# 由 CMD 指令指定默认的可选参数：ENTRYPOINT [&quot;python&quot;]CMD [&quot;app.py&quot;]","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.caiplus.pro/tags/docker/"}]},{"title":"golang time包用法","slug":"golang/golang-time包用法","date":"2023-07-27T07:33:31.000Z","updated":"2023-07-27T07:33:50.769Z","comments":true,"path":"2023/07/27/golang/golang-time包用法/","link":"","permalink":"http://blog.caiplus.pro/2023/07/27/golang/golang-time%E5%8C%85%E7%94%A8%E6%B3%95/","excerpt":"","text":"时间格式123456timelocal, err := time.LoadLocation(&quot;Asia/Shanghai&quot;)if err != nil &#123; panic(err)&#125;time.Local = timelocalfmt.Println(time.Now().Local().Format(&quot;2006-01-02 15:04:05&quot;)) 超时处理 使用select123456789101112c1 := make(chan string, 1)go func() &#123; time.Sleep(time.Second * 2) c1 &lt;- &quot;result 1&quot;&#125;()select &#123;case res := &lt;-c1: fmt.Println(res)case &lt;-time.After(time.Second * 1): fmt.Println(&quot;timeout 1&quot;)&#125; 使用 time.Since12345678startTime := time.Now()timeout := 5 * time.Second time.Sleep(10 * time.Second) if time.Since(startTime) &gt; timeout &#123; return fmt.Errorf(&quot;timeout&quot;) &#125; 定时器 timer123456789101112131415161718192021222324func main() &#123; // NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间 timer1 := time.NewTimer(5 * time.Second) fmt.Println(&quot;开始时间：&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;)) go func(t *time.Timer) &#123; times := 0 for &#123; &lt;-t.C fmt.Println(&quot;timer&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;)) times++ fmt.Println(&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;) t.Reset(2 * time.Second) if times &gt; 3 &#123; fmt.Println(&quot;调用 stop 停止定时器&quot;) t.Stop() &#125; &#125; &#125;(timer1) time.Sleep(30 * time.Second) fmt.Println(&quot;结束时间：&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;))&#125; ticker 1234567891011121314func main() &#123; ticker1 := time.NewTicker(5 * time.Second) defer ticker1.Stop() // 一定要调用Stop()，回收资源 go func(t *time.Ticker) &#123; for &#123; // 每5秒中从chan t.C 中读取一次 &lt;-t.C fmt.Println(&quot;Ticker:&quot;, time.Now().Format(&quot;2006-01-02 15:04:05&quot;)) &#125; &#125;(ticker1) time.Sleep(30 * time.Second) fmt.Println(&quot;ok&quot;)&#125;","categories":[],"tags":[]},{"title":"flannel、calico","slug":"k8s/flannel、calico","date":"2023-07-27T06:31:00.000Z","updated":"2023-07-27T06:34:40.717Z","comments":true,"path":"2023/07/27/k8s/flannel、calico/","link":"","permalink":"http://blog.caiplus.pro/2023/07/27/k8s/flannel%E3%80%81calico/","excerpt":"","text":"flannel3种封装和路由模式 UDP VXLAN host-gateway UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"使用kubeadm安装集群","slug":"k8s/使用kubeadm安装集群","date":"2023-07-26T02:09:12.000Z","updated":"2023-08-03T09:02:18.666Z","comments":true,"path":"2023/07/26/k8s/使用kubeadm安装集群/","link":"","permalink":"http://blog.caiplus.pro/2023/07/26/k8s/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4/","excerpt":"","text":"containerd下载地址 1234567wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gztar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gzmkdir -p /usr/local/lib/systemd/systemwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.servicemv containerd.service /usr/local/lib/systemd/system/containerd.servicesystemctl daemon-reloadsystemctl enable --now containerd runc下载地址 12https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64install -m 755 runc.amd64 /usr/local/sbin/runc kubeadm、kubelet、kubectl12345678910RELEASE=&quot;$(curl -sSL https://dl.k8s.io/release/stable.txt)&quot;ARCH=&quot;amd64&quot;cd $DOWNLOAD_DIRsudo curl -L --remote-name-all https://dl.k8s.io/release/$&#123;RELEASE&#125;/bin/linux/$&#123;ARCH&#125;/&#123;kubeadm,kubelet&#125;sudo chmod +x &#123;kubeadm,kubelet&#125;RELEASE_VERSION=&quot;v0.15.1&quot;curl -sSL &quot;https://raw.githubusercontent.com/kubernetes/release/$&#123;RELEASE_VERSION&#125;/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot; | sed &quot;s:/usr/bin:$&#123;DOWNLOAD_DIR&#125;:g&quot; | sudo tee /etc/systemd/system/kubelet.servicesudo mkdir -p /etc/systemd/system/kubelet.service.dcurl -sSL &quot;https://raw.githubusercontent.com/kubernetes/release/$&#123;RELEASE_VERSION&#125;/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot; | sed &quot;s:/usr/bin:$&#123;DOWNLOAD_DIR&#125;:g&quot; | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf 激活并启动 kubelet 1systemctl enable --now kubelet ctrctl下载地址 12345# 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tagsVERSION=&quot;v1.26.0&quot; # check latest version in /releases pagecurl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-$&#123;VERSION&#125;-linux-amd64.tar.gz --output crictl-$&#123;VERSION&#125;-linux-amd64.tar.gzsudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/binrm -f crictl-$VERSION-linux-amd64.tar.gz ctrctl 报错文件找不到 不同的部署方式，文件路径可能不同。 12# 以 k3s 为例，指定 .sock 文件crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a 查看配置1cat /etc/crictl.yaml conntrack1yum install conntrack-tools -y 测试 1conntrack -L 内核参数如果不设置参数，使用 kubeadm join 时可能会导致报错 12345678W0726 10:29:26.474684 8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH [WARNING FileExisting-socat]: socat not found in system patherror execution phase preflight: [preflight] Some fatal errors occurred: [ERROR FileExisting-crictl]: crictl not found in system path [ERROR FileExisting-conntrack]: conntrack not found in system path [ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist [ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...` 启用 IP 转发 12echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.confsysctl -p 打开 &#x2F;etc&#x2F;sysctl.conf 文件，更改内核参数 12net.bridge.bridge-nf-call-iptables = 1net.bridge.bridge-nf-call-ip6tables = 1 加载 bridge 内核模块 123lsmod | grep br_netfiltersudo modprobe br_netfiltersysctl -p 重新加载 sysctl 配置 1sysctl -p 未完。。。","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"使用client-go操作自定义CRD","slug":"k8s/使用client-go操作自定义CRD","date":"2023-07-25T09:18:17.000Z","updated":"2023-07-28T03:26:12.458Z","comments":true,"path":"2023/07/25/k8s/使用client-go操作自定义CRD/","link":"","permalink":"http://blog.caiplus.pro/2023/07/25/k8s/%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89CRD/","excerpt":"","text":"介绍简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。 个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。 代码实现12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697package mainimport ( &quot;context&quot; &quot;fmt&quot; &quot;path/filepath&quot; metav1 &quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot; &quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot; &quot;k8s.io/apimachinery/pkg/runtime/schema&quot; &quot;k8s.io/client-go/dynamic&quot; &quot;k8s.io/client-go/tools/clientcmd&quot; &quot;k8s.io/client-go/util/homedir&quot;)type KubernetesCrdExec interface &#123; Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error&#125;type Alertmanager struct&#123;&#125;func main() &#123; resource := schema.GroupVersionResource&#123; Group: &quot;monitoring.coreos.com&quot;, Version: &quot;v1&quot;, Resource: &quot;alertmanagers&quot;, // 这里必须是复数形式 &#125; namespace := &quot;default&quot; name := &quot;my-alertmanager&quot; dynamicClient, err := getClient() if err != nil &#123; panic(err.Error()) &#125; var crd KubernetesCrdExec crd = Alertmanager&#123;&#125; result, err := crd.Get(dynamicClient, resource, namespace, name) if err != nil &#123; panic(err) &#125; fmt.Println(result.Object[&quot;spec&quot;].(map[string]interface&#123;&#125;)[&quot;externalUrl&quot;]) resultLists, err := crd.List(dynamicClient, resource, namespace) if err != nil &#123; panic(err) &#125; for _, item := range resultLists.Items &#123; name := item.Object[&quot;metadata&quot;].(map[string]interface&#123;&#125;)[&quot;name&quot;] namespace := item.Object[&quot;metadata&quot;].(map[string]interface&#123;&#125;)[&quot;namespace&quot;] fmt.Printf(&quot;%v/%v\\n&quot;, namespace, name) &#125; // 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093 result.Object[&quot;spec&quot;].(map[string]interface&#123;&#125;)[&quot;externalUrl&quot;] = &quot;http://127.0.0.1:9093&quot; result, err = crd.Update(dynamicClient, resource, result, namespace, name) if err != nil &#123; panic(err) &#125; err = crd.Delete(dynamicClient, resource, namespace, name) if err != nil &#123; panic(err) &#125;&#125;func (Alertmanager) Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) &#123; return dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)&#125;func (Alertmanager) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) &#123; return dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)&#125;func (Alertmanager) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) &#123; return dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)&#125;func (Alertmanager) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error &#123; return dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)&#125;func getClient() (dynamic.Interface, error) &#123; kubeconfig := filepath.Join(homedir.HomeDir(), &quot;.kube&quot;, &quot;config&quot;) config, err := clientcmd.BuildConfigFromFlags(&quot;&quot;, kubeconfig) if err != nil &#123; return nil, err &#125; return dynamic.NewForConfig(config)&#125;","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"文件、磁盘相关命令","slug":"linux/文件、磁盘相关命令","date":"2023-07-25T08:03:37.000Z","updated":"2023-07-25T08:39:20.998Z","comments":true,"path":"2023/07/25/linux/文件、磁盘相关命令/","link":"","permalink":"http://blog.caiplus.pro/2023/07/25/linux/%E6%96%87%E4%BB%B6%E3%80%81%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/","excerpt":"","text":"查看某个目录下所有文件夹大小123456789101112# 只能查看文件夹# 查看当前目录du -h --max-depth=1 | sort -h# 查看指定目录du -h $DIR --max-depth=1 | sort -h# 参数解析# --max-depth 深度# sort -h 从小到大排序# sort -rh 从大到小排序 查看磁盘 显示系统中每个文件系统的磁盘使用情况 1df -h 显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。 1lsblk 显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。1cat /etc/fstab","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"如何分配IP","slug":"golang/如何分配IP","date":"2023-07-24T10:33:58.000Z","updated":"2023-07-24T10:39:31.221Z","comments":true,"path":"2023/07/24/golang/如何分配IP/","link":"","permalink":"http://blog.caiplus.pro/2023/07/24/golang/%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8DIP/","excerpt":"","text":"介绍当我们有一段或者多段IP时，如何从IP池中分配出一个IP？ 创建配置文件1234567891011121314cat &lt;&lt;EOF &gt; ipam.json&#123; &quot;ranges&quot;: [ &#123; &quot;start&quot;: &quot;10.172.16.2&quot;, &quot;end&quot;: &quot;10.172.16.3&quot; &#125;, &#123; &quot;start&quot;: &quot;10.172.17.2&quot;, &quot;end&quot;: &quot;10.172.17.3&quot; &#125; ]&#125;EOF 代码实现ipam","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]},{"title":"安装kubectl快捷命令","slug":"k8s/安装kubectl快捷命令","date":"2023-07-23T07:12:24.000Z","updated":"2023-07-28T10:33:58.434Z","comments":true,"path":"2023/07/23/k8s/安装kubectl快捷命令/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/k8s/%E5%AE%89%E8%A3%85kubectl%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/","excerpt":"","text":"简介k8s 的命令不算长，也很好记，但身为一个偷懒者，我想我可以更简洁、高效。 默认快捷命令保存在 ～&#x2F;.bash_profile 文件。 安装1curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh - 如果你想指定保存文件1curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc 执行完记得source &lt;～&#x2F;FILE_NAME&gt;，例如： 1source ～/.bash_profile 测试123456789101112131415161718192021222324252627# 获取pod$ pNAME READY STATUS RESTARTS AGEtest-deployment-d5b769945-q29d4 1/1 Running 0 6d7h# 进入pod$ ke test-deployment-d5b769945-q29d4kubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.# 查看日志$ kl# 查看帮助$ khalias k=&quot;kubectl&quot;alias kk=&quot;kubectl -n kube-system&quot;alias kl=&quot;kubectl logs -f&quot;alias kd=&quot;kubectl describe&quot;alias p=&quot;kubectl get po&quot;alias svc=&quot;kubectl get svc&quot;alias no=&quot;kubectl get no&quot;alias pvc=&quot;kubectl get pvc&quot;alias sa=&quot;kubectl get sa&quot;alias ds=&quot;kubectl get ds&quot;alias rs=&quot;kubectl get rs&quot;alias ep=&quot;kubectl get ep&quot;ke=kubectl exec -it POD_NAME sh kubens、kubectx你可以通过修改环境变量更改 fzf 的背景颜色和字体颜色 123# 颜色对照表参考: https://github.com/medikoo/cli-colorexport KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue textexport KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background 卸载1curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh - 如果你的文件不是 ～&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例 1curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc 执行完记得source &lt;～&#x2F;FILE_NAME&gt;，例如： 1source ～/.bashrc","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"网络","slug":"linux/网络","date":"2023-07-23T07:06:00.000Z","updated":"2023-07-23T07:06:53.912Z","comments":true,"path":"2023/07/23/linux/网络/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/linux/%E7%BD%91%E7%BB%9C/","excerpt":"","text":"查看网络连接信息1netstat -nplt -n 将字母转化为数字 -p 显示进程相关信息 -l 列出状态为监听 -t 只查看tcp协议 -a 查看全部协议(netstat -an) 路由追踪1traceroute 8.8.8.8 查看路由表123ip ruleip -6 rule ip rule list 查看默认路由表信息123ip rip -6 rroute","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"k8s记不住的命令","slug":"k8s/k8s记不住的命令","date":"2023-07-22T16:29:39.000Z","updated":"2023-07-22T16:29:51.639Z","comments":true,"path":"2023/07/23/k8s/k8s记不住的命令/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/k8s/k8s%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/","excerpt":"","text":"替换镜像1kubectl set image deployment/provider provider=provider:latest 给 node&#x2F;pod 打标签1kubectl label nodes kube-node node=kube-node 通过标签过滤1kubectl get node -l &quot;node=kube-node&quot; kubectl cp12345# 拷贝pod数据到本地kubectl cp &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo# 拷贝本地数据到pod之中kubectl cp /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo 回滚版本12345678# 查看历史版本kubectl rollout history deployment provider# 回滚到上一个版本kubectl rollout undo deployment provider# 回滚到指定版本kubectl rollout undo deployment provider --to-revision=2 污点12345678# &lt;node-name&gt; 是要添加污点的节点的名称。# &lt;taint-key&gt; 是污点的键。# &lt;taint-value&gt; 是污点的值，可以留空。# &lt;taint-effect&gt; 是污点的影响效果，可以是以下选项之一：# NoSchedule：表示不将新的Pod调度到有这个污点的节点上。# PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。# NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt; 探测 livenessProbe: 存活探测 failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次 initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。 periodSeconds: 表示多长时间重试一次探测，默认值为10秒 successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次 timeoutSeconds: 表示探测请求的超时时间，默认为1秒。 readinessProbe: 就绪探测1234567891011121314151617181920livenessProbe: failureThreshold: 10 initialDelaySeconds: 300 httpGet: path: /-/healthy port: web scheme: HTTP periodSeconds: 5 successThreshold: 1 timeoutSeconds: 3readinessProbe: initialDelaySeconds: 300 failureThreshold: 20 httpGet: path: /-/ready port: web scheme: HTTP periodSeconds: 5 successThreshold: 1 timeoutSeconds: 3","categories":[],"tags":[{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"}]},{"title":"docker记不住的命令","slug":"docker/docker记不住的命令","date":"2023-07-22T16:20:28.000Z","updated":"2023-08-07T03:55:43.225Z","comments":true,"path":"2023/07/23/docker/docker记不住的命令/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/docker/docker%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/","excerpt":"","text":"启动一个容器1234# -p: 8888为主机端口，3306为容器端口# -e: 环境变量设置# 最后的 mysql 为镜像 docker run -itd --name mysql-test -p 8888:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql 列出所有的容器 ID1docker ps -aq 停止所有的容器1docker stop $(docker ps -aq) 删除所有的容器1docker rm $(docker ps -aq) 删除所有的镜像1docker rmi $(docker images -q) 删除所有未使用的镜像1docker system prune -a 删除 none 相关镜像1docker rmi $(docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27;) 拉取指定版本镜像1docker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7 mac 清理镜像层1rm ~/Library/Containers/com.docker.docker 复制文件12docker cp mycontainer:/opt/file.txt /opt/local/docker cp /opt/local/file.txt mycontainer:/opt/ 启动 x-ui1docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest 安装最新版 docker12345678910111213141516# 删除旧版本的Dockersudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine# 安装依赖软件包sudo yum install -y yum-utils device-mapper-persistent-data lvm2# 添加Docker软件源sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 更新yum缓存sudo yum makecache fast# 安装最新版Dockersudo yum install -y docker-ce# 启动Docker服务并设置开机自启动sudo systemctl start dockersudo systemctl enable docker# 确认Docker已安装并正在运行docker --versionsudo docker info 查看容器资源占用12345# 持续监控docker stats# 输出当前docker stats --no-stream","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://blog.caiplus.pro/tags/docker/"}]},{"title":"chrome浏览器如何屏蔽无效请求","slug":"工具/chrome浏览器如何屏蔽无效请求","date":"2023-07-22T16:19:00.000Z","updated":"2023-07-22T16:41:52.841Z","comments":true,"path":"2023/07/23/工具/chrome浏览器如何屏蔽无效请求/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/%E5%B7%A5%E5%85%B7/chrome%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A6%82%E4%BD%95%E5%B1%8F%E8%94%BD%E6%97%A0%E6%95%88%E8%AF%B7%E6%B1%82/","excerpt":"","text":"如何屏蔽掉无用的网络请求1-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"vscode必备插件","slug":"工具/vscode必备插件","date":"2023-07-22T16:17:38.000Z","updated":"2023-07-31T10:25:47.850Z","comments":true,"path":"2023/07/23/工具/vscode必备插件/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/%E5%B7%A5%E5%85%B7/vscode%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6/","excerpt":"","text":"vscode 插件 markdone 预览1Markdown Preview Enhanced git 查看历史提交1Git History yaml自动补全12* git: line* kubernetes、yaml 自动生成图1markmap 远程开发1Remote - SSH html 预览1HTML Preview 生成脑图1MarkMap 粘贴图片1Pasts Image 坤坤鼓励师1坤坤鼓励师","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Macos 好用工具推荐","slug":"工具/Macos-好用工具推荐","date":"2023-07-22T16:17:05.000Z","updated":"2023-07-22T16:40:33.810Z","comments":true,"path":"2023/07/23/工具/Macos-好用工具推荐/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/%E5%B7%A5%E5%85%B7/Macos-%E5%A5%BD%E7%94%A8%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90/","excerpt":"","text":"翻译工具1沙拉查词 截屏1snipaste 剪切板（复制多个）1icopy 内存、CPU、磁盘占用1iStat Menus","categories":[],"tags":[{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]},{"title":"Makefile模版","slug":"linux/Makefile模版","date":"2023-07-22T16:15:50.000Z","updated":"2023-08-03T02:25:15.436Z","comments":true,"path":"2023/07/23/linux/Makefile模版/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/linux/Makefile%E6%A8%A1%E7%89%88/","excerpt":"","text":"123456789101112.PHONY: git_push docker_build all help# 获取 git 项目 COMMIT_HASHCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)git_push: ## 上传代码到 Github git add . git commit -m &quot;`date &#x27;+%Y/%m/%d %H:%M:%S&#x27;`&quot; git push origin devhelp: ## 查看帮助 @awk &#x27;BEGIN &#123;FS = &quot;:.*?## &quot;&#125; /^[a-zA-Z_-]+:.*?## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST) 指定参数12commit: git commit -m &quot;$(msg)&quot; 使用如下 1make commit msg=&quot;makefile 测试&quot;","categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"}]},{"title":"gin跨域问题","slug":"golang/gin跨域问题","date":"2023-07-22T16:14:35.000Z","updated":"2023-08-03T07:36:27.422Z","comments":true,"path":"2023/07/23/golang/gin跨域问题/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/golang/gin%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/","excerpt":"","text":"解决跨域问题1234567891011121314151617181920r := gin.Default()r.Use(Cors())func Cors() gin.HandlerFunc &#123; return func(c *gin.Context) &#123; method := c.Request.Method origin := c.Request.Header.Get(&quot;Origin&quot;) if origin != &quot;&quot; &#123; c.Header(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;) // 可将将 * 替换为指定的域名 c.Header(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;) c.Header(&quot;Access-Control-Allow-Headers&quot;, &quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;) c.Header(&quot;Access-Control-Expose-Headers&quot;, &quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;) c.Header(&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;) &#125; if method == &quot;OPTIONS&quot; &#123; c.AbortWithStatus(http.StatusNoContent) &#125; c.Next() &#125;&#125;","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]},{"title":"Golang 无法下载kubernetes包","slug":"golang/无法下载kubernetes包","date":"2023-07-22T16:11:45.000Z","updated":"2023-07-22T16:28:33.190Z","comments":true,"path":"2023/07/23/golang/无法下载kubernetes包/","link":"","permalink":"http://blog.caiplus.pro/2023/07/23/golang/%E6%97%A0%E6%B3%95%E4%B8%8B%E8%BD%BDkubernetes%E5%8C%85/","excerpt":"","text":"如果我们直接 go get k8s.io&#x2F;&#107;&#117;&#x62;&#101;&#114;&#x6e;&#101;&#116;&#101;&#x73;&#64;&#118;&#x31;&#x2e;&#49;&#57;&#x2e;&#50; 下载依赖，会出现以下错误: 1234go get k8s.io/kubernetes@v1.19.2go: downloading k8s.io/kubernetes v1.19.2go: k8s.io/kubernetes@v1.19.2 requires k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0: 错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录.&#x2F;staging&#x2F;src&#x2F;k8s.io对应的依赖。 保存内容为 go-get-kubernetes.sh, 执行 .&#x2F;go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。 123456789101112131415161718192021#!/bin/shset -euo pipefailVERSION=$&#123;1#&quot;v&quot;&#125;if [ -z &quot;$VERSION&quot; ]; then echo &quot;Must specify version!&quot; exit 1fiMODS=($( curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v$&#123;VERSION&#125;/go.mod | sed -n &#x27;s|.*k8s.io/\\(.*\\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\\1|p&#x27;))for MOD in &quot;$&#123;MODS[@]&#125;&quot;; do V=$( go mod download -json &quot;$&#123;MOD&#125;@kubernetes-$&#123;VERSION&#125;&quot; | sed -n &#x27;s|.*&quot;Version&quot;: &quot;\\(.*\\)&quot;.*|\\1|p&#x27; ) go mod edit &quot;-replace=$&#123;MOD&#125;=$&#123;MOD&#125;@$&#123;V&#125;&quot;donego get &quot;k8s.io/kubernetes@v$&#123;VERSION&#125;&quot;","categories":[],"tags":[{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"}]}],"categories":[],"tags":[{"name":"linux","slug":"linux","permalink":"http://blog.caiplus.pro/tags/linux/"},{"name":"k8s","slug":"k8s","permalink":"http://blog.caiplus.pro/tags/k8s/"},{"name":"docker","slug":"docker","permalink":"http://blog.caiplus.pro/tags/docker/"},{"name":"golang","slug":"golang","permalink":"http://blog.caiplus.pro/tags/golang/"},{"name":"工具","slug":"工具","permalink":"http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"}]}