<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://blog.caiplus.pro/atom.xml" rel="self"/>
  
  <link href="http://blog.caiplus.pro/"/>
  <updated>2023-08-03T07:53:51.599Z</updated>
  <id>http://blog.caiplus.pro/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解压、压缩</title>
    <link href="http://blog.caiplus.pro/2023/08/03/linux/%E8%A7%A3%E5%8E%8B%E3%80%81%E5%8E%8B%E7%BC%A9/"/>
    <id>http://blog.caiplus.pro/2023/08/03/linux/%E8%A7%A3%E5%8E%8B%E3%80%81%E5%8E%8B%E7%BC%A9/</id>
    <published>2023-08-03T07:43:09.000Z</published>
    <updated>2023-08-03T07:53:51.599Z</updated>
    
    <content type="html"><![CDATA[<h2 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩</span></span><br><span class="line">tar -czvf test.tar.gz README.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解压</span></span><br><span class="line">tar -xzvf test.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出压缩文件内容</span></span><br><span class="line">tar -tzvf test.tar.gz </span><br></pre></td></tr></table></figure><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h4><ul><li>-v 显示指令执行过程。</li><li>-c 建立新的备份文件。</li><li>-f 指定备份文件。</li><li>-z 通过gzip指令处理备份文件。</li><li>-x 从备份文件中还原文件。</li></ul><h4 id="加密压缩"><a href="#加密压缩" class="headerlink" title="加密压缩"></a>加密压缩</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将当前目录下的files文件夹打包压缩，密码为password</span></span><br><span class="line">tar -czvf - files | openssl des3 -salt -k password -out files.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将当前目录下的files.tar.gz进行解密解压</span></span><br><span class="line">openssl des3 -d -k password -salt -<span class="keyword">in</span> files.tar.gz | tar xzvf -</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;tar&quot;&gt;&lt;a href=&quot;#tar&quot; class=&quot;headerlink&quot; title=&quot;tar&quot;&gt;&lt;/a&gt;tar&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="linux" scheme="http://blog.caiplus.pro/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>buildx构建多版本镜像</title>
    <link href="http://blog.caiplus.pro/2023/08/03/docker/buildx%E6%9E%84%E5%BB%BA%E5%A4%9A%E7%89%88%E6%9C%AC%E9%95%9C%E5%83%8F/"/>
    <id>http://blog.caiplus.pro/2023/08/03/docker/buildx%E6%9E%84%E5%BB%BA%E5%A4%9A%E7%89%88%E6%9C%AC%E9%95%9C%E5%83%8F/</id>
    <published>2023-08-03T07:23:18.000Z</published>
    <updated>2023-08-03T07:37:35.288Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><a href="http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/">参考资料</a></p><p>目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行</p><p>新版本的docker默认自带</p><h4 id="创建buildx"><a href="#创建buildx" class="headerlink" title="创建buildx"></a>创建buildx</h4><ul><li>查看当前buildx实例</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker buildx <span class="built_in">ls</span></span><br><span class="line">NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS</span><br><span class="line">default * docker</span><br><span class="line">  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386</span><br></pre></td></tr></table></figure><blockquote><p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p></blockquote><ul><li>创建buildx</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use</span><br></pre></td></tr></table></figure><ul><li>使用这个实例</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker buildx use all</span><br></pre></td></tr></table></figure><ul><li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li></ul><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><ul><li>–platform执行要编译的平台，其他的参数和普通的build差不多</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接上传到仓库</span></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输出本地</span></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar包</span></span><br><span class="line">docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接导入到本地 docker 中，只支持单平台架构</span></span><br><span class="line">docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B</summary>
      
    
    
    
    
    <category term="docker" scheme="http://blog.caiplus.pro/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>cronjob 定时任务</title>
    <link href="http://blog.caiplus.pro/2023/08/01/linux/cronjob%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://blog.caiplus.pro/2023/08/01/linux/cronjob%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2023-08-01T07:49:05.000Z</published>
    <updated>2023-08-03T07:43:02.604Z</updated>
    
    <content type="html"><![CDATA[<h4 id="cronjob-定时任务"><a href="#cronjob-定时任务" class="headerlink" title="cronjob 定时任务"></a>cronjob 定时任务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># crontab -e 命令以编辑当前用户的cron表。</span></span><br><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每分钟执行一次 ls</span></span><br><span class="line">*/1 * * * * <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;cronjob-定时任务&quot;&gt;&lt;a href=&quot;#cronjob-定时任务&quot; class=&quot;headerlink&quot; title=&quot;cronjob 定时任务&quot;&gt;&lt;/a&gt;cronjob 定时任务&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;tab</summary>
      
    
    
    
    
    <category term="linux" scheme="http://blog.caiplus.pro/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>grpc如何使用</title>
    <link href="http://blog.caiplus.pro/2023/07/31/golang/grpc%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.caiplus.pro/2023/07/31/golang/grpc%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8/</id>
    <published>2023-07-31T09:04:16.000Z</published>
    <updated>2023-08-01T07:59:35.124Z</updated>
    
    <content type="html"><![CDATA[<h4 id="安装grpc"><a href="#安装grpc" class="headerlink" title="安装grpc"></a>安装grpc</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get google.golang.org/grpc@latest</span><br></pre></td></tr></table></figure><h4 id="安装Protocol-Buffers-v3"><a href="#安装Protocol-Buffers-v3" class="headerlink" title="安装Protocol Buffers v3"></a>安装Protocol Buffers v3</h4><p>protoc <a href="https://github.com/google/protobuf/releases">下载</a></p><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28</span><br><span class="line">go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2</span><br></pre></td></tr></table></figure><h1 id="入门示例"><a href="#入门示例" class="headerlink" title="入门示例"></a>入门示例</h1><p><a href="https://github.com/oldwang12/grpc-demo">代码实现</a></p><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><h4 id="编写proto代码"><a href="#编写proto代码" class="headerlink" title="编写proto代码"></a>编写proto代码</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; pb/hello.proto</span></span><br><span class="line"><span class="string">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">option go_package = &quot;server/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">package pb; // 包名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 定义服务</span></span><br><span class="line"><span class="string">service Greeter &#123;</span></span><br><span class="line"><span class="string">    // SayHello 方法</span></span><br><span class="line"><span class="string">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 请求消息</span></span><br><span class="line"><span class="string">message HelloRequest &#123;</span></span><br><span class="line"><span class="string">    string name = 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 响应消息</span></span><br><span class="line"><span class="string">message HelloResponse &#123;</span></span><br><span class="line"><span class="string">    string reply = 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>执行命令：<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto</span><br></pre></td></tr></table></figure></li></ul><h4 id="编写Server端Go代码"><a href="#编写Server端Go代码" class="headerlink" title="编写Server端Go代码"></a>编写Server端Go代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;hello_server/pb&quot;</span></span><br><span class="line"><span class="string">&quot;net&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello server</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">pb.UnimplementedGreeterServer</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.HelloResponse&#123;Reply: <span class="string">&quot;Hello &quot;</span> + in.Name&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 监听本地的8972端口</span></span><br><span class="line">lis, err := net.Listen(<span class="string">&quot;tcp&quot;</span>, <span class="string">&quot;:8972&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;failed to listen: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">s := grpc.NewServer()                  <span class="comment">// 创建gRPC服务器</span></span><br><span class="line">pb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class="comment">// 在gRPC服务端注册服务</span></span><br><span class="line"><span class="comment">// 启动服务</span></span><br><span class="line">err = s.Serve(lis)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;failed to serve: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── pb</span><br><span class="line">    ├── hello.pb.go</span><br><span class="line">    ├── hello.proto</span><br><span class="line">    └── hello_grpc.pb.go</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run main.go</span><br></pre></td></tr></table></figure><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><h4 id="编写proto代码-1"><a href="#编写proto代码-1" class="headerlink" title="编写proto代码"></a>编写proto代码</h4><p>新建 client 项目</p><p>将 go_package 改为 “client&#x2F;db”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; pb/hello.proto</span></span><br><span class="line"><span class="string">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">option go_package = &quot;client/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">package pb; // 包名</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 定义服务</span></span><br><span class="line"><span class="string">service Greeter &#123;</span></span><br><span class="line"><span class="string">    // SayHello 方法</span></span><br><span class="line"><span class="string">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 请求消息</span></span><br><span class="line"><span class="string">message HelloRequest &#123;</span></span><br><span class="line"><span class="string">    string name = 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 响应消息</span></span><br><span class="line"><span class="string">message HelloResponse &#123;</span></span><br><span class="line"><span class="string">    string reply = 1;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><ul><li>执行命令<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto</span><br></pre></td></tr></table></figure></li></ul><h4 id="client-端代码"><a href="#client-端代码" class="headerlink" title="client 端代码"></a>client 端代码</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;flag&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;hello_client/pb&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc&quot;</span></span><br><span class="line"><span class="string">&quot;google.golang.org/grpc/credentials/insecure&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello_client</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> (</span><br><span class="line">defaultName = <span class="string">&quot;world&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">addr = flag.String(<span class="string">&quot;addr&quot;</span>, <span class="string">&quot;127.0.0.1:8972&quot;</span>, <span class="string">&quot;the address to connect to&quot;</span>)</span><br><span class="line">name = flag.String(<span class="string">&quot;name&quot;</span>, defaultName, <span class="string">&quot;Name to greet&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">flag.Parse()</span><br><span class="line"><span class="comment">// 连接到server端，此处禁用安全传输</span></span><br><span class="line">conn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;did not connect: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> conn.Close()</span><br><span class="line">c := pb.NewGreeterClient(conn)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行RPC调用并打印收到的响应数据</span></span><br><span class="line">ctx, cancel := context.WithTimeout(context.Background(), time.Second)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">r, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Fatalf(<span class="string">&quot;could not greet: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">log.Printf(<span class="string">&quot;Greeting: %s&quot;</span>, r.GetReply())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代码结构-1"><a href="#代码结构-1" class="headerlink" title="代码结构"></a>代码结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">http_client</span><br><span class="line">├── go.mod</span><br><span class="line">├── go.sum</span><br><span class="line">├── main.go</span><br><span class="line">└── pb</span><br><span class="line">    ├── hello.pb.go</span><br><span class="line">    ├── hello.proto</span><br><span class="line">    └── hello_grpc.pb.go</span><br></pre></td></tr></table></figure><h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ go run main.go -name=李四</span><br><span class="line">Greeting: Hello 李四</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;安装grpc&quot;&gt;&lt;a href=&quot;#安装grpc&quot; class=&quot;headerlink&quot; title=&quot;安装grpc&quot;&gt;&lt;/a&gt;安装grpc&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="golang" scheme="http://blog.caiplus.pro/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>golang细节</title>
    <link href="http://blog.caiplus.pro/2023/07/29/golang/golang%E7%BB%86%E8%8A%82/"/>
    <id>http://blog.caiplus.pro/2023/07/29/golang/golang%E7%BB%86%E8%8A%82/</id>
    <published>2023-07-29T05:20:35.000Z</published>
    <updated>2023-07-29T05:59:21.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><a href="#1">1. 结构体打印时，%v 和 %+v 的区别</a><br><a href="#2">2. new和make的区别</a><br><a href="#3">3. slice扩容机制？</a></p><p id="1"></p> <h4 id="结构体打印时，-v-和-v-的区别"><a href="#结构体打印时，-v-和-v-的区别" class="headerlink" title="结构体打印时，%v 和 %+v 的区别"></a>结构体打印时，%v 和 %+v 的区别</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">printStruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">people := People&#123;</span><br><span class="line">Name: <span class="string">&quot;lisi&quot;</span>,</span><br><span class="line">Age:  <span class="number">18</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v\n&quot;</span>, people)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%+v\n&quot;</span>, people)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%#v\n&quot;</span>, people)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// &#123;lisi 18&#125;</span></span><br><span class="line"><span class="comment">// &#123;Name:lisi Age:18&#125;</span></span><br><span class="line"><span class="comment">// People&#123;Name:&quot;lisi&quot;, Age:18&#125;</span></span><br></pre></td></tr></table></figure><p id="2"></p> <h4 id="new-和-make的区别"><a href="#new-和-make的区别" class="headerlink" title="new 和 make的区别"></a>new 和 make的区别</h4><ul><li>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li><li>make只可用于slice,map,channel的初始化,返回的是引用。</li></ul><p id="3"></p><h4 id="slice扩容机制？"><a href="#slice扩容机制？" class="headerlink" title="slice扩容机制？"></a>slice扩容机制？</h4><p>Go &lt;&#x3D; 1.17</p><p>如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。</p><p>如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap&#x2F;4。</p><p>Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;#1&quot;&gt;1. 结构体打印时，%v 和 %+v 的区别&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;#2&quot;&gt;2. new和make的区别</summary>
      
    
    
    
    
    <category term="golang" scheme="http://blog.caiplus.pro/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>viper配置文件</title>
    <link href="http://blog.caiplus.pro/2023/07/29/golang/viper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://blog.caiplus.pro/2023/07/29/golang/viper%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</id>
    <published>2023-07-29T05:08:23.000Z</published>
    <updated>2023-07-29T05:10:06.008Z</updated>
    
    <content type="html"><![CDATA[<h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mysql:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">3306</span></span><br><span class="line"><span class="attr">isvalid:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/spf13/viper&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 设置配置文件的名字</span></span><br><span class="line">viper.SetConfigName(<span class="string">&quot;config&quot;</span>)</span><br><span class="line"><span class="comment">// 设置配置文件的类型</span></span><br><span class="line">viper.SetConfigType(<span class="string">&quot;yaml&quot;</span>)</span><br><span class="line"><span class="comment">// 添加配置文件的路径，指定 config 目录下寻找</span></span><br><span class="line">viper.AddConfigPath(<span class="string">&quot;./config&quot;</span>)</span><br><span class="line"><span class="comment">// 寻找配置文件并读取</span></span><br><span class="line">err := viper.ReadInConfig()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(fmt.Errorf(<span class="string">&quot;fatal error config file: %w&quot;</span>, err))</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(viper.Get(<span class="string">&quot;mysql&quot;</span>))</span><br><span class="line">fmt.Println(viper.GetString(<span class="string">&quot;mysql.url&quot;</span>))</span><br><span class="line">fmt.Println(viper.GetInt(<span class="string">&quot;mysql.port&quot;</span>))</span><br><span class="line">fmt.Println(viper.GetBool(<span class="string">&quot;isvalid&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;配置文件&quot;&gt;&lt;a href=&quot;#配置文件&quot; class=&quot;headerlink&quot; title=&quot;配置文件&quot;&gt;&lt;/a&gt;配置文件&lt;/h4&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="golang" scheme="http://blog.caiplus.pro/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>xui客户端配置</title>
    <link href="http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/xui%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/"/>
    <id>http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/xui%E5%AE%A2%E6%88%B7%E7%AB%AF%E9%85%8D%E7%BD%AE/</id>
    <published>2023-07-28T07:46:40.000Z</published>
    <updated>2023-07-29T05:47:42.238Z</updated>
    
    <content type="html"><![CDATA[<p>注意: 只适用于linux环境，下载 <a href="https://github.com/v2ray/v2ray-core/releases">v2ray-core</a>，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;log&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;loglevel&quot;:</span> <span class="string">&quot;warning&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;routing&quot;:</span> &#123;</span><br><span class="line">        <span class="attr">&quot;domainStrategy&quot;:</span> <span class="string">&quot;AsIs&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;rules&quot;:</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;ip&quot;:</span> [</span><br><span class="line">                    <span class="string">&quot;geoip:private&quot;</span></span><br><span class="line">                ],</span><br><span class="line">                <span class="attr">&quot;outboundTag&quot;:</span> <span class="string">&quot;direct&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;type&quot;:</span> <span class="string">&quot;field&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;inbounds&quot;:</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;port&quot;:</span> <span class="number">1080</span>,</span><br><span class="line">            <span class="attr">&quot;protocol&quot;:</span> <span class="string">&quot;socks&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;auth&quot;:</span> <span class="string">&quot;noauth&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;udp&quot;:</span> <span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;tag&quot;:</span> <span class="string">&quot;socks&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;outbounds&quot;:</span> [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;:</span> <span class="string">&quot;vmess&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;settings&quot;:</span> &#123;</span><br><span class="line">                <span class="attr">&quot;vnext&quot;:</span> [</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">&quot;users&quot;:</span> [</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="attr">&quot;id&quot;:</span> <span class="string">&quot;&lt;uuid&gt;&quot;</span></span><br><span class="line">                            &#125;</span><br><span class="line">                        ],</span><br><span class="line">                        <span class="attr">&quot;port&quot;:</span> <span class="string">&lt;服务端端口&gt;</span>,</span><br><span class="line">                        <span class="attr">&quot;address&quot;:</span> <span class="string">&quot;&lt;服务端IP&gt;&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;protocol&quot;:</span> <span class="string">&quot;freedom&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;tag&quot;:</span> <span class="string">&quot;direct&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;注意: 只适用于linux环境，下载 &lt;a href=&quot;https://github.com/v2ray/v2ray-core/releases&quot;&gt;v2ray-core&lt;/a&gt;，解压后替换 config.yaml 如下。执行 .&amp;#x2F;v2ray&lt;/p&gt;
&lt;figure</summary>
      
    
    
    
    
    <category term="工具" scheme="http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>chatgpt</title>
    <link href="http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/chatgpt/"/>
    <id>http://blog.caiplus.pro/2023/07/28/%E5%B7%A5%E5%85%B7/chatgpt/</id>
    <published>2023-07-28T03:00:52.000Z</published>
    <updated>2023-07-28T05:38:09.860Z</updated>
    
    <content type="html"><![CDATA[<h4 id="测试-key"><a href="#测试-key" class="headerlink" title="测试 key"></a>测试 key</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">curl https://api.openai.com/v1/chat/completions \</span><br><span class="line">-H <span class="string">&quot;Content-Type: application/json&quot;</span>  \</span><br><span class="line">-H <span class="string">&quot;Authorization: Bearer <span class="variable">$1</span>&quot;</span>  \</span><br><span class="line">-d <span class="string">&#x27;&#123;</span></span><br><span class="line"><span class="string">    &quot;model&quot;: &quot;gpt-3.5-turbo&quot;, </span></span><br><span class="line"><span class="string">    &quot;messages&quot;: [</span></span><br><span class="line"><span class="string">        &#123;</span></span><br><span class="line"><span class="string">            &quot;role&quot;: &quot;user&quot;, </span></span><br><span class="line"><span class="string">            &quot;content&quot;: &quot;Hello!&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    ]</span></span><br><span class="line"><span class="string">&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;测试-key&quot;&gt;&lt;a href=&quot;#测试-key&quot; class=&quot;headerlink&quot; title=&quot;测试 key&quot;&gt;&lt;/a&gt;测试 key&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="工具" scheme="http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>oh my zsh 让终端飞</title>
    <link href="http://blog.caiplus.pro/2023/07/27/%E5%B7%A5%E5%85%B7/oh-my-zsh-%E8%AE%A9%E7%BB%88%E7%AB%AF%E9%A3%9E/"/>
    <id>http://blog.caiplus.pro/2023/07/27/%E5%B7%A5%E5%85%B7/oh-my-zsh-%E8%AE%A9%E7%BB%88%E7%AB%AF%E9%A3%9E/</id>
    <published>2023-07-27T10:31:40.000Z</published>
    <updated>2023-07-28T11:05:32.600Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># yum先安装，如果是ubuntu使用 apt-get install zsh </span></span><br><span class="line">yum -y install zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装脚本</span></span><br><span class="line">sh -c <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件安装</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 高亮插件</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line"><span class="comment">## 自动补全</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure><h4 id="手动更改插件配置"><a href="#手动更改插件配置" class="headerlink" title="手动更改插件配置"></a>手动更改插件配置</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ vim ~/.zshrc</span><br><span class="line"></span><br><span class="line"><span class="comment"># plugins 更改如下</span></span><br><span class="line">plugins=(</span><br><span class="line">  git</span><br><span class="line">  zsh-autosuggestions</span><br><span class="line">  zsh-syntax-highlighting</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更换主题</span></span><br><span class="line">ZSH_THEME=<span class="string">&quot;ys&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新加载</span></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l</summary>
      
    
    
    
    
    <category term="工具" scheme="http://blog.caiplus.pro/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Dockerfile模版</title>
    <link href="http://blog.caiplus.pro/2023/07/27/docker/Dockerfile%E6%A8%A1%E7%89%88/"/>
    <id>http://blog.caiplus.pro/2023/07/27/docker/Dockerfile%E6%A8%A1%E7%89%88/</id>
    <published>2023-07-27T07:34:10.000Z</published>
    <updated>2023-08-03T07:36:47.672Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-一个适用于我自己的模板"><a href="#1-一个适用于我自己的模板" class="headerlink" title="1. 一个适用于我自己的模板"></a>1. 一个适用于我自己的模板</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.20</span> as builder</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . .</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================================== 分层编译 ==============================================</span></span><br><span class="line"><span class="keyword">FROM</span> alpine AS final</span><br><span class="line"></span><br><span class="line"><span class="comment"># 国内使用的goproxy</span></span><br><span class="line"><span class="keyword">ENV</span> GOPROXY=https://goproxy.cn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置时区</span></span><br><span class="line"><span class="keyword">ENV</span> TZ=Asia/Shanghai</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apk add --update tzdata \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">cp</span> /usr/share/zoneinfo/<span class="variable">$TZ</span> /etc/localtime \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">echo</span> <span class="variable">$TZ</span> &gt; /etc/timezone \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">rm</span> -rf /var/cache/apk/*</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root/</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> --from=builder /root/app .</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./mydir/  ./mydir/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> +x app \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; wget  https://storage.googleapis.com/kubernetes-release/release/v1.14.7/bin/linux/amd64/kubectl \</span></span><br><span class="line"><span class="language-bash">    &amp;&amp; <span class="built_in">chmod</span> +x kubectl</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;/root/app&quot;</span>]</span></span><br></pre></td></tr></table></figure><h4 id="2-COPY-vs-ADD"><a href="#2-COPY-vs-ADD" class="headerlink" title="2. COPY vs ADD"></a>2. COPY vs ADD</h4><p>没有特殊需求情况下，建议使用COPY</p><h6 id="1-ADD-会自动解压压缩文件。"><a href="#1-ADD-会自动解压压缩文件。" class="headerlink" title="1. ADD 会自动解压压缩文件。"></a>1. ADD 会自动解压压缩文件。</h6><h6 id="2-ADD-支持源文件URL形式。"><a href="#2-ADD-支持源文件URL形式。" class="headerlink" title="2. ADD 支持源文件URL形式。"></a>2. ADD 支持源文件URL形式。</h6><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ADD</span><span class="language-bash"> http://example.com/example.txt /app/</span></span><br></pre></td></tr></table></figure><h4 id="3-CMD-vs-ENTRYPOINT"><a href="#3-CMD-vs-ENTRYPOINT" class="headerlink" title="3. CMD vs ENTRYPOINT"></a>3. CMD vs ENTRYPOINT</h4><h6 id="1-docker-run-如果指定了命令会覆盖"><a href="#1-docker-run-如果指定了命令会覆盖" class="headerlink" title="1. docker run 如果指定了命令会覆盖"></a>1. docker run 如果指定了命令会覆盖</h6><h6 id="2-下面是等价的"><a href="#2-下面是等价的" class="headerlink" title="2. 下面是等价的"></a>2. 下面是等价的</h6><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>, <span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 由 CMD 指令指定默认的可选参数：</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;python&quot;</span>]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;app.py&quot;</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-一个适用于我自己的模板&quot;&gt;&lt;a href=&quot;#1-一个适用于我自己的模板&quot; class=&quot;headerlink&quot; title=&quot;1. 一个适用于我自己的模板&quot;&gt;&lt;/a&gt;1. 一个适用于我自己的模板&lt;/h4&gt;&lt;figure class=&quot;highlight do</summary>
      
    
    
    
    
    <category term="docker" scheme="http://blog.caiplus.pro/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>golang time包用法</title>
    <link href="http://blog.caiplus.pro/2023/07/27/golang/golang-time%E5%8C%85%E7%94%A8%E6%B3%95/"/>
    <id>http://blog.caiplus.pro/2023/07/27/golang/golang-time%E5%8C%85%E7%94%A8%E6%B3%95/</id>
    <published>2023-07-27T07:33:31.000Z</published>
    <updated>2023-07-27T07:33:50.769Z</updated>
    
    <content type="html"><![CDATA[<h4 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">timelocal, err := time.LoadLocation(<span class="string">&quot;Asia/Shanghai&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Local = timelocal</span><br><span class="line">fmt.Println(time.Now().Local().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="超时处理"><a href="#超时处理" class="headerlink" title="超时处理"></a>超时处理</h4><ul><li><ol><li>使用select<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">string</span>, <span class="number">1</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">    time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">    c1 &lt;- <span class="string">&quot;result 1&quot;</span></span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> res := &lt;-c1:</span><br><span class="line">    fmt.Println(res)</span><br><span class="line"><span class="keyword">case</span> &lt;-time.After(time.Second * <span class="number">1</span>):</span><br><span class="line">    fmt.Println(<span class="string">&quot;timeout 1&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>使用 time.Since<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">startTime := time.Now()</span><br><span class="line">timeout := <span class="number">5</span> * time.Second</span><br><span class="line"></span><br><span class="line">   time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> time.Since(startTime) &gt; timeout &#123;</span><br><span class="line">       <span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;timeout&quot;</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h4><ul><li><ol><li>timer<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间</span></span><br><span class="line">timer1 := time.NewTimer(<span class="number">5</span> * time.Second)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;开始时间：&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t *time.Timer)</span></span> &#123;</span><br><span class="line">times := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-t.C</span><br><span class="line">fmt.Println(<span class="string">&quot;timer&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line"></span><br><span class="line">times++</span><br><span class="line">fmt.Println(<span class="string">&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;</span>)</span><br><span class="line">t.Reset(<span class="number">2</span> * time.Second)</span><br><span class="line"><span class="keyword">if</span> times &gt; <span class="number">3</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;调用 stop 停止定时器&quot;</span>)</span><br><span class="line">t.Stop()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;(timer1)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">30</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;结束时间：&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>ticker</li></ol></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">ticker1 := time.NewTicker(<span class="number">5</span> * time.Second)</span><br><span class="line"><span class="keyword">defer</span> ticker1.Stop() <span class="comment">// 一定要调用Stop()，回收资源</span></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(t *time.Ticker)</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="comment">// 每5秒中从chan t.C 中读取一次</span></span><br><span class="line">&lt;-t.C</span><br><span class="line">fmt.Println(<span class="string">&quot;Ticker:&quot;</span>, time.Now().Format(<span class="string">&quot;2006-01-02 15:04:05&quot;</span>))</span><br><span class="line">&#125;</span><br><span class="line">&#125;(ticker1)</span><br><span class="line"></span><br><span class="line">time.Sleep(<span class="number">30</span> * time.Second)</span><br><span class="line">fmt.Println(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;时间格式&quot;&gt;&lt;a href=&quot;#时间格式&quot; class=&quot;headerlink&quot; title=&quot;时间格式&quot;&gt;&lt;/a&gt;时间格式&lt;/h4&gt;&lt;figure class=&quot;highlight go&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>flannel、calico</title>
    <link href="http://blog.caiplus.pro/2023/07/27/k8s/flannel%E3%80%81calico/"/>
    <id>http://blog.caiplus.pro/2023/07/27/k8s/flannel%E3%80%81calico/</id>
    <published>2023-07-27T06:31:00.000Z</published>
    <updated>2023-07-27T06:34:40.717Z</updated>
    
    <content type="html"><![CDATA[<h1 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a>flannel</h1><p>3种封装和路由模式</p><ul><li>UDP</li><li>VXLAN</li><li>host-gateway</li></ul><p>UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;flannel&quot;&gt;&lt;a href=&quot;#flannel&quot; class=&quot;headerlink&quot; title=&quot;flannel&quot;&gt;&lt;/a&gt;flannel&lt;/h1&gt;&lt;p&gt;3种封装和路由模式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UDP&lt;/li&gt;
&lt;li&gt;VXLAN&lt;/li&gt;
&lt;li</summary>
      
    
    
    
    
    <category term="k8s" scheme="http://blog.caiplus.pro/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用kubeadm安装集群</title>
    <link href="http://blog.caiplus.pro/2023/07/26/k8s/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4/"/>
    <id>http://blog.caiplus.pro/2023/07/26/k8s/%E4%BD%BF%E7%94%A8kubeadm%E5%AE%89%E8%A3%85%E9%9B%86%E7%BE%A4/</id>
    <published>2023-07-26T02:09:12.000Z</published>
    <updated>2023-08-03T08:32:54.345Z</updated>
    
    <content type="html"><![CDATA[<h4 id="containerd"><a href="#containerd" class="headerlink" title="containerd"></a>containerd</h4><p><a href="https://github.com/opencontainers/runc/releases">下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz</span><br><span class="line">tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz</span><br><span class="line"><span class="built_in">mkdir</span> -p /usr/local/lib/systemd/system</span><br><span class="line">wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service</span><br><span class="line"><span class="built_in">mv</span> containerd.service /usr/local/lib/systemd/system/containerd.service</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> --now containerd</span><br></pre></td></tr></table></figure><h4 id="runc"><a href="#runc" class="headerlink" title="runc"></a>runc</h4><p><a href="https://github.com/opencontainers/runc/releases">下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64</span><br><span class="line">install -m 755 runc.amd64 /usr/local/sbin/runc</span><br></pre></td></tr></table></figure><h4 id="kubeadm、kubelet、kubectl"><a href="#kubeadm、kubelet、kubectl" class="headerlink" title="kubeadm、kubelet、kubectl"></a>kubeadm、kubelet、kubectl</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">RELEASE=<span class="string">&quot;<span class="subst">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span></span><br><span class="line">ARCH=<span class="string">&quot;amd64&quot;</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$DOWNLOAD_DIR</span></span><br><span class="line">sudo curl -L --remote-name-all https://dl.k8s.io/release/<span class="variable">$&#123;RELEASE&#125;</span>/bin/linux/<span class="variable">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet&#125;</span><br><span class="line">sudo <span class="built_in">chmod</span> +x &#123;kubeadm,kubelet&#125;</span><br><span class="line"></span><br><span class="line">RELEASE_VERSION=<span class="string">&quot;v0.15.1&quot;</span></span><br><span class="line">curl -sSL <span class="string">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class="variable">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot;</span> | sed <span class="string">&quot;s:/usr/bin:<span class="variable">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class="built_in">tee</span> /etc/systemd/system/kubelet.service</span><br><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/systemd/system/kubelet.service.d</span><br><span class="line">curl -sSL <span class="string">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class="variable">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class="string">&quot;s:/usr/bin:<span class="variable">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class="built_in">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf</span><br></pre></td></tr></table></figure><p>激活并启动 kubelet</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> --now kubelet</span><br></pre></td></tr></table></figure><h4 id="ctrctl"><a href="#ctrctl" class="headerlink" title="ctrctl"></a>ctrctl</h4><p><a href="https://github.com/kubernetes-sigs/cri-tools/releases">下载地址</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags</span></span><br><span class="line">VERSION=<span class="string">&quot;v1.26.0&quot;</span> <span class="comment"># check latest version in /releases page</span></span><br><span class="line">curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class="variable">$VERSION</span>/crictl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz --output crictl-<span class="variable">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz</span><br><span class="line">sudo tar zxvf crictl-<span class="variable">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin</span><br><span class="line"><span class="built_in">rm</span> -f crictl-<span class="variable">$VERSION</span>-linux-amd64.tar.gz</span><br></pre></td></tr></table></figure><h6 id="ctrctl-测试"><a href="#ctrctl-测试" class="headerlink" title="ctrctl 测试"></a>ctrctl 测试</h6><ul><li>不同的部署方式，文件路径可能不同。</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 指定 .sock 文件</span></span><br><span class="line">crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a</span><br></pre></td></tr></table></figure><h6 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/crictl.yaml</span><br></pre></td></tr></table></figure><h4 id="conntrack"><a href="#conntrack" class="headerlink" title="conntrack"></a>conntrack</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install conntrack-tools -y</span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conntrack -L</span><br></pre></td></tr></table></figure><h4 id="内核参数"><a href="#内核参数" class="headerlink" title="内核参数"></a>内核参数</h4><p>如果不设置参数，使用 kubeadm join 时可能会导致报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">W0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH</span><br><span class="line">[WARNING FileExisting-socat]: socat not found in system path</span><br><span class="line">error execution phase preflight: [preflight] Some fatal errors occurred:</span><br><span class="line">[ERROR FileExisting-crictl]: crictl not found in system path</span><br><span class="line">[ERROR FileExisting-conntrack]: conntrack not found in system path</span><br><span class="line">[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist</span><br><span class="line">[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1</span><br><span class="line">[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`</span><br></pre></td></tr></table></figure><ol><li><p>启用 IP 转发</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;net.ipv4.ip_forward = 1&quot;</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>打开 &#x2F;etc&#x2F;sysctl.conf 文件，更改内核参数</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br></pre></td></tr></table></figure><ol start="3"><li><p>加载 bridge 内核模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep br_netfilter</span><br><span class="line">sudo modprobe br_netfilter</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>重新加载 sysctl 配置</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h1 id="未完。。。"><a href="#未完。。。" class="headerlink" title="未完。。。"></a>未完。。。</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;containerd&quot;&gt;&lt;a href=&quot;#containerd&quot; class=&quot;headerlink&quot; title=&quot;containerd&quot;&gt;&lt;/a&gt;containerd&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/opencontai</summary>
      
    
    
    
    
    <category term="k8s" scheme="http://blog.caiplus.pro/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>使用client-go操作自定义CRD</title>
    <link href="http://blog.caiplus.pro/2023/07/25/k8s/%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89CRD/"/>
    <id>http://blog.caiplus.pro/2023/07/25/k8s/%E4%BD%BF%E7%94%A8client-go%E6%93%8D%E4%BD%9C%E8%87%AA%E5%AE%9A%E4%B9%89CRD/</id>
    <published>2023-07-25T09:18:17.000Z</published>
    <updated>2023-07-28T03:26:12.458Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。</p><p>个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。</p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"></span><br><span class="line">metav1 <span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/client-go/dynamic&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/client-go/tools/clientcmd&quot;</span></span><br><span class="line"><span class="string">&quot;k8s.io/client-go/util/homedir&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> KubernetesCrdExec <span class="keyword">interface</span> &#123;</span><br><span class="line">Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class="type">string</span>) (*unstructured.Unstructured, <span class="type">error</span>)</span><br><span class="line">List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class="type">string</span>) (*unstructured.UnstructuredList, <span class="type">error</span>)</span><br><span class="line">Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class="type">string</span>) (*unstructured.Unstructured, <span class="type">error</span>)</span><br><span class="line">Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class="type">string</span>) <span class="type">error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Alertmanager <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">resource := schema.GroupVersionResource&#123;</span><br><span class="line">Group:    <span class="string">&quot;monitoring.coreos.com&quot;</span>,</span><br><span class="line">Version:  <span class="string">&quot;v1&quot;</span>,</span><br><span class="line">Resource: <span class="string">&quot;alertmanagers&quot;</span>, <span class="comment">// 这里必须是复数形式</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace := <span class="string">&quot;default&quot;</span></span><br><span class="line">name := <span class="string">&quot;my-alertmanager&quot;</span></span><br><span class="line"></span><br><span class="line">dynamicClient, err := getClient()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> crd KubernetesCrdExec</span><br><span class="line">crd = Alertmanager&#123;&#125;</span><br><span class="line"></span><br><span class="line">result, err := crd.Get(dynamicClient, resource, namespace, name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fmt.Println(result.Object[<span class="string">&quot;spec&quot;</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;externalUrl&quot;</span>])</span><br><span class="line"></span><br><span class="line">resultLists, err := crd.List(dynamicClient, resource, namespace)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, item := <span class="keyword">range</span> resultLists.Items &#123;</span><br><span class="line">name := item.Object[<span class="string">&quot;metadata&quot;</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;name&quot;</span>]</span><br><span class="line">namespace := item.Object[<span class="string">&quot;metadata&quot;</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;namespace&quot;</span>]</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v/%v\n&quot;</span>, namespace, name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093</span></span><br><span class="line">result.Object[<span class="string">&quot;spec&quot;</span>].(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">interface</span>&#123;&#125;)[<span class="string">&quot;externalUrl&quot;</span>] = <span class="string">&quot;http://127.0.0.1:9093&quot;</span></span><br><span class="line">result, err = crd.Update(dynamicClient, resource, result, namespace, name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = crd.Delete(dynamicClient, resource, namespace, name)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Alertmanager)</span></span> Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class="type">string</span>) (*unstructured.Unstructured, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Alertmanager)</span></span> List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class="type">string</span>) (*unstructured.UnstructuredList, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Alertmanager)</span></span> Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class="type">string</span>) (*unstructured.Unstructured, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(Alertmanager)</span></span> Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"><span class="keyword">return</span> dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getClient</span><span class="params">()</span></span> (dynamic.Interface, <span class="type">error</span>) &#123;</span><br><span class="line">kubeconfig := filepath.Join(homedir.HomeDir(), <span class="string">&quot;.kube&quot;</span>, <span class="string">&quot;config&quot;</span>)</span><br><span class="line">config, err := clientcmd.BuildConfigFromFlags(<span class="string">&quot;&quot;</span>, kubeconfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dynamic.NewForConfig(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。&lt;/p&gt;
&lt;p&gt;个人觉</summary>
      
    
    
    
    
    <category term="k8s" scheme="http://blog.caiplus.pro/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>文件、磁盘相关命令</title>
    <link href="http://blog.caiplus.pro/2023/07/25/linux/%E6%96%87%E4%BB%B6%E3%80%81%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.caiplus.pro/2023/07/25/linux/%E6%96%87%E4%BB%B6%E3%80%81%E7%A3%81%E7%9B%98%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/</id>
    <published>2023-07-25T08:03:37.000Z</published>
    <updated>2023-07-25T08:39:20.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看某个目录下所有文件夹大小"><a href="#查看某个目录下所有文件夹大小" class="headerlink" title="查看某个目录下所有文件夹大小"></a>查看某个目录下所有文件夹大小</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只能查看文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看当前目录</span></span><br><span class="line"><span class="built_in">du</span> -h --max-depth=1 | <span class="built_in">sort</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看指定目录</span></span><br><span class="line"><span class="built_in">du</span> -h <span class="variable">$DIR</span> --max-depth=1 | <span class="built_in">sort</span> -h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数解析</span></span><br><span class="line"><span class="comment"># --max-depth 深度</span></span><br><span class="line"><span class="comment"># sort -h 从小到大排序</span></span><br><span class="line"><span class="comment"># sort -rh 从大到小排序</span></span><br></pre></td></tr></table></figure><h4 id="查看磁盘"><a href="#查看磁盘" class="headerlink" title="查看磁盘"></a>查看磁盘</h4><ol><li>显示系统中每个文件系统的磁盘使用情况</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">df</span> -h</span><br></pre></td></tr></table></figure><ol start="2"><li>显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsblk</span><br></pre></td></tr></table></figure><ol start="3"><li>显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/fstab</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;查看某个目录下所有文件夹大小&quot;&gt;&lt;a href=&quot;#查看某个目录下所有文件夹大小&quot; class=&quot;headerlink&quot; title=&quot;查看某个目录下所有文件夹大小&quot;&gt;&lt;/a&gt;查看某个目录下所有文件夹大小&lt;/h4&gt;&lt;figure class=&quot;highlight </summary>
      
    
    
    
    
    <category term="linux" scheme="http://blog.caiplus.pro/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>如何分配IP</title>
    <link href="http://blog.caiplus.pro/2023/07/24/golang/%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8DIP/"/>
    <id>http://blog.caiplus.pro/2023/07/24/golang/%E5%A6%82%E4%BD%95%E5%88%86%E9%85%8DIP/</id>
    <published>2023-07-24T10:33:58.000Z</published>
    <updated>2023-07-24T10:39:31.221Z</updated>
    
    <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>当我们有一段或者多段IP时，如何从IP池中分配出一个IP？</p><h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> &lt;&lt;<span class="string">EOF &gt; ipam.json</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  &quot;ranges&quot;: [</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;start&quot;: &quot;10.172.16.2&quot;,</span></span><br><span class="line"><span class="string">      &quot;end&quot;: &quot;10.172.16.3&quot;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      &quot;start&quot;: &quot;10.172.17.2&quot;,</span></span><br><span class="line"><span class="string">      &quot;end&quot;: &quot;10.172.17.3&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p><a href="https://github.com/oldwang12/ipam">ipam</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h4&gt;&lt;p&gt;当我们有一段或者多段IP时，如何从IP池中分配出一个IP？&lt;/p&gt;
&lt;h4 id=&quot;创建配置文件&quot;&gt;&lt;a href=&quot;#创建配置文件&quot; cl</summary>
      
    
    
    
    
    <category term="golang" scheme="http://blog.caiplus.pro/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>安装kubectl快捷命令</title>
    <link href="http://blog.caiplus.pro/2023/07/23/k8s/%E5%AE%89%E8%A3%85kubectl%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.caiplus.pro/2023/07/23/k8s/%E5%AE%89%E8%A3%85kubectl%E5%BF%AB%E6%8D%B7%E5%91%BD%E4%BB%A4/</id>
    <published>2023-07-23T07:12:24.000Z</published>
    <updated>2023-07-28T10:33:58.434Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>k8s 的命令不算长，也很好记，但身为一个偷懒者，我想我可以更简洁、高效。</p><p>默认快捷命令保存在 ～&#x2F;.bash_profile 文件。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -</span><br></pre></td></tr></table></figure><h6 id="如果你想指定保存文件"><a href="#如果你想指定保存文件" class="headerlink" title="如果你想指定保存文件"></a>如果你想指定保存文件</h6><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc</span><br></pre></td></tr></table></figure><p>执行完记得source &lt;～&#x2F;FILE_NAME&gt;，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ～/.bash_profile</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取pod</span></span><br><span class="line">$ p</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">test-deployment-d5b769945-q29d4   1/1     Running   0          6d7h</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入pod</span></span><br><span class="line">$ ke test-deployment-d5b769945-q29d4</span><br><span class="line">kubectl <span class="built_in">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class="keyword">in</span> a future version. Use kubectl <span class="built_in">exec</span> [POD] -- [COMMAND] instead.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看日志</span></span><br><span class="line">$ kl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看帮助</span></span><br><span class="line">$ kh</span><br><span class="line"><span class="built_in">alias</span> k=<span class="string">&quot;kubectl&quot;</span></span><br><span class="line"><span class="built_in">alias</span> kk=<span class="string">&quot;kubectl -n kube-system&quot;</span></span><br><span class="line"><span class="built_in">alias</span> kl=<span class="string">&quot;kubectl logs -f&quot;</span></span><br><span class="line"><span class="built_in">alias</span> kd=<span class="string">&quot;kubectl describe&quot;</span></span><br><span class="line"><span class="built_in">alias</span> p=<span class="string">&quot;kubectl get po&quot;</span></span><br><span class="line"><span class="built_in">alias</span> svc=<span class="string">&quot;kubectl get svc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> no=<span class="string">&quot;kubectl get no&quot;</span></span><br><span class="line"><span class="built_in">alias</span> pvc=<span class="string">&quot;kubectl get pvc&quot;</span></span><br><span class="line"><span class="built_in">alias</span> sa=<span class="string">&quot;kubectl get sa&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ds=<span class="string">&quot;kubectl get ds&quot;</span></span><br><span class="line"><span class="built_in">alias</span> rs=<span class="string">&quot;kubectl get rs&quot;</span></span><br><span class="line"><span class="built_in">alias</span> ep=<span class="string">&quot;kubectl get ep&quot;</span></span><br><span class="line">ke=kubectl <span class="built_in">exec</span> -it POD_NAME sh</span><br></pre></td></tr></table></figure><h4 id="kubens、kubectx"><a href="#kubens、kubectx" class="headerlink" title="kubens、kubectx"></a>kubens、kubectx</h4><p>你可以通过修改环境变量更改 fzf 的背景颜色和字体颜色</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 颜色对照表参考: https://github.com/medikoo/cli-color</span></span><br><span class="line"><span class="built_in">export</span> KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) <span class="comment"># blue text</span></span><br><span class="line"><span class="built_in">export</span> KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) <span class="comment"># white background</span></span><br></pre></td></tr></table></figure><h1 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -</span><br></pre></td></tr></table></figure><p>如果你的文件不是 ～&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc</span><br></pre></td></tr></table></figure><p>执行完记得source &lt;～&#x2F;FILE_NAME&gt;，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source ～/.bashrc</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h4&gt;&lt;p&gt;k8s 的命令不算长，也很好记，但身为一个偷懒者，我想我可以更简洁、高效。&lt;/p&gt;
&lt;p&gt;默认快捷命令保存在 ～&amp;#x2F;.bash_pr</summary>
      
    
    
    
    
    <category term="k8s" scheme="http://blog.caiplus.pro/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>网络</title>
    <link href="http://blog.caiplus.pro/2023/07/23/linux/%E7%BD%91%E7%BB%9C/"/>
    <id>http://blog.caiplus.pro/2023/07/23/linux/%E7%BD%91%E7%BB%9C/</id>
    <published>2023-07-23T07:06:00.000Z</published>
    <updated>2023-07-23T07:06:53.912Z</updated>
    
    <content type="html"><![CDATA[<h4 id="查看网络连接信息"><a href="#查看网络连接信息" class="headerlink" title="查看网络连接信息"></a>查看网络连接信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -nplt</span><br></pre></td></tr></table></figure><p>-n 将字母转化为数字</p><p>-p 显示进程相关信息</p><p>-l 列出状态为监听</p><p>-t 只查看tcp协议</p><p>-a 查看全部协议(netstat -an)</p><h4 id="路由追踪"><a href="#路由追踪" class="headerlink" title="路由追踪"></a>路由追踪</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute 8.8.8.8</span><br></pre></td></tr></table></figure><h4 id="查看路由表"><a href="#查看路由表" class="headerlink" title="查看路由表"></a>查看路由表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip rule</span><br><span class="line">ip -6 rule </span><br><span class="line">ip rule list</span><br></pre></td></tr></table></figure><h4 id="查看默认路由表信息"><a href="#查看默认路由表信息" class="headerlink" title="查看默认路由表信息"></a>查看默认路由表信息</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ip r</span><br><span class="line">ip -6 r</span><br><span class="line">route</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;查看网络连接信息&quot;&gt;&lt;a href=&quot;#查看网络连接信息&quot; class=&quot;headerlink&quot; title=&quot;查看网络连接信息&quot;&gt;&lt;/a&gt;查看网络连接信息&lt;/h4&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    
    <category term="linux" scheme="http://blog.caiplus.pro/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>k8s记不住的命令</title>
    <link href="http://blog.caiplus.pro/2023/07/23/k8s/k8s%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.caiplus.pro/2023/07/23/k8s/k8s%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2023-07-22T16:29:39.000Z</published>
    <updated>2023-07-22T16:29:51.639Z</updated>
    
    <content type="html"><![CDATA[<h4 id="替换镜像"><a href="#替换镜像" class="headerlink" title="替换镜像"></a>替换镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl <span class="built_in">set</span> image deployment/provider provider=provider:latest</span><br></pre></td></tr></table></figure><h4 id="给-node-pod-打标签"><a href="#给-node-pod-打标签" class="headerlink" title="给 node&#x2F;pod 打标签"></a>给 node&#x2F;pod 打标签</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl label nodes kube-node node=kube-node</span><br></pre></td></tr></table></figure><h4 id="通过标签过滤"><a href="#通过标签过滤" class="headerlink" title="通过标签过滤"></a>通过标签过滤</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get node -l <span class="string">&quot;node=kube-node&quot;</span></span><br></pre></td></tr></table></figure><h4 id="kubectl-cp"><a href="#kubectl-cp" class="headerlink" title="kubectl cp"></a>kubectl cp</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拷贝pod数据到本地</span></span><br><span class="line">kubectl <span class="built_in">cp</span> &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝本地数据到pod之中</span></span><br><span class="line">kubectl <span class="built_in">cp</span> /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo</span><br></pre></td></tr></table></figure><h4 id="回滚版本"><a href="#回滚版本" class="headerlink" title="回滚版本"></a>回滚版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看历史版本</span></span><br><span class="line">kubectl rollout <span class="built_in">history</span> deployment provider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到上一个版本</span></span><br><span class="line">kubectl rollout undo deployment provider</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回滚到指定版本</span></span><br><span class="line">kubectl rollout undo deployment provider --to-revision=2</span><br></pre></td></tr></table></figure><h4 id="污点"><a href="#污点" class="headerlink" title="污点"></a>污点</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># &lt;node-name&gt; 是要添加污点的节点的名称。</span></span><br><span class="line"><span class="comment"># &lt;taint-key&gt; 是污点的键。</span></span><br><span class="line"><span class="comment"># &lt;taint-value&gt; 是污点的值，可以留空。</span></span><br><span class="line"><span class="comment"># &lt;taint-effect&gt; 是污点的影响效果，可以是以下选项之一：</span></span><br><span class="line"><span class="comment"># NoSchedule：表示不将新的Pod调度到有这个污点的节点上。</span></span><br><span class="line"><span class="comment"># PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。</span></span><br><span class="line"><span class="comment"># NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。</span></span><br><span class="line">kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt;</span><br></pre></td></tr></table></figure><h4 id="探测"><a href="#探测" class="headerlink" title="探测"></a>探测</h4><ul><li>livenessProbe: 存活探测<ul><li>failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次</li><li>initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。</li><li>periodSeconds: 表示多长时间重试一次探测，默认值为10秒</li><li>successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次</li><li>timeoutSeconds: 表示探测请求的超时时间，默认为1秒。</li></ul></li><li>readinessProbe: 就绪探测<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">livenessProbe:</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/-/healthy</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">3</span></span><br><span class="line"><span class="attr">readinessProbe:</span></span><br><span class="line">  <span class="attr">initialDelaySeconds:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">failureThreshold:</span> <span class="number">20</span></span><br><span class="line">  <span class="attr">httpGet:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/-/ready</span></span><br><span class="line">    <span class="attr">port:</span> <span class="string">web</span></span><br><span class="line">    <span class="attr">scheme:</span> <span class="string">HTTP</span></span><br><span class="line">  <span class="attr">periodSeconds:</span> <span class="number">5</span></span><br><span class="line">  <span class="attr">successThreshold:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">timeoutSeconds:</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;替换镜像&quot;&gt;&lt;a href=&quot;#替换镜像&quot; class=&quot;headerlink&quot; title=&quot;替换镜像&quot;&gt;&lt;/a&gt;替换镜像&lt;/h4&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;</summary>
      
    
    
    
    
    <category term="k8s" scheme="http://blog.caiplus.pro/tags/k8s/"/>
    
  </entry>
  
  <entry>
    <title>docker记不住的命令</title>
    <link href="http://blog.caiplus.pro/2023/07/23/docker/docker%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://blog.caiplus.pro/2023/07/23/docker/docker%E8%AE%B0%E4%B8%8D%E4%BD%8F%E7%9A%84%E5%91%BD%E4%BB%A4/</id>
    <published>2023-07-22T16:20:28.000Z</published>
    <updated>2023-08-03T07:29:24.960Z</updated>
    
    <content type="html"><![CDATA[<h4 id="启动一个容器"><a href="#启动一个容器" class="headerlink" title="启动一个容器"></a>启动一个容器</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -p: 8888为主机端口，3306为容器端口</span></span><br><span class="line"><span class="comment"># -e: 环境变量设置</span></span><br><span class="line"><span class="comment"># 最后的 mysql 为镜像 </span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-itd</span> <span class="string">--name</span> <span class="string">mysql-test</span> <span class="string">-p</span> <span class="number">8888</span><span class="string">:3306</span> <span class="string">-e</span> <span class="string">MYSQL_ROOT_PASSWORD=123456</span> <span class="string">mysql</span></span><br></pre></td></tr></table></figure><h4 id="列出所有的容器-ID"><a href="#列出所有的容器-ID" class="headerlink" title="列出所有的容器 ID"></a>列出所有的容器 ID</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -aq</span><br></pre></td></tr></table></figure><h4 id="停止所有的容器"><a href="#停止所有的容器" class="headerlink" title="停止所有的容器"></a>停止所有的容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop $(docker ps -aq)</span><br></pre></td></tr></table></figure><h4 id="删除所有的容器"><a href="#删除所有的容器" class="headerlink" title="删除所有的容器"></a>删除所有的容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">rm</span> $(docker ps -aq)</span><br></pre></td></tr></table></figure><h4 id="删除所有的镜像"><a href="#删除所有的镜像" class="headerlink" title="删除所有的镜像"></a>删除所有的镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images -q)</span><br></pre></td></tr></table></figure><h4 id="删除所有未使用的镜像"><a href="#删除所有未使用的镜像" class="headerlink" title="删除所有未使用的镜像"></a>删除所有未使用的镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system prune -a</span><br></pre></td></tr></table></figure><h4 id="删除-none-相关镜像"><a href="#删除-none-相关镜像" class="headerlink" title="删除 none 相关镜像"></a>删除 none 相关镜像</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi $(docker images | grep none | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span>)     </span><br></pre></td></tr></table></figure><h4 id="mac-清理镜像层"><a href="#mac-清理镜像层" class="headerlink" title="mac 清理镜像层"></a>mac 清理镜像层</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> ~/Library/Containers/com.docker.docker</span><br></pre></td></tr></table></figure><h4 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">cp</span> mycontainer:/opt/file.txt /opt/local/</span><br><span class="line">docker <span class="built_in">cp</span> /opt/local/file.txt mycontainer:/opt/</span><br></pre></td></tr></table></figure><h4 id="启动-x-ui"><a href="#启动-x-ui" class="headerlink" title="启动 x-ui"></a>启动 x-ui</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest</span><br></pre></td></tr></table></figure><h4 id="安装最新版-docker"><a href="#安装最新版-docker" class="headerlink" title="安装最新版 docker"></a>安装最新版 docker</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除旧版本的Docker</span></span><br><span class="line">sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine</span><br><span class="line"><span class="comment"># 安装依赖软件包</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="comment"># 添加Docker软件源</span></span><br><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class="line"><span class="comment"># 更新yum缓存</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line"><span class="comment"># 安装最新版Docker</span></span><br><span class="line">sudo yum install -y docker-ce</span><br><span class="line"><span class="comment"># 启动Docker服务并设置开机自启动</span></span><br><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> docker</span><br><span class="line"><span class="comment"># 确认Docker已安装并正在运行</span></span><br><span class="line">docker --version</span><br><span class="line">sudo docker info</span><br></pre></td></tr></table></figure><h4 id="查看容器资源占用"><a href="#查看容器资源占用" class="headerlink" title="查看容器资源占用"></a>查看容器资源占用</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 持续监控</span></span><br><span class="line">docker stats</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出当前</span></span><br><span class="line">docker stats --no-stream</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;启动一个容器&quot;&gt;&lt;a href=&quot;#启动一个容器&quot; class=&quot;headerlink&quot; title=&quot;启动一个容器&quot;&gt;&lt;/a&gt;启动一个容器&lt;/h4&gt;&lt;figure class=&quot;highlight yaml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt</summary>
      
    
    
    
    
    <category term="docker" scheme="http://blog.caiplus.pro/tags/docker/"/>
    
  </entry>
  
</feed>
