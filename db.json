{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"source/shells/k8s_alias_install.sh","path":"shells/k8s_alias_install.sh","modified":1,"renderable":0},{"_id":"source/shells/chatgpt_test.sh","path":"shells/chatgpt_test.sh","modified":1,"renderable":0},{"_id":"source/shells/kubectx_kubens_install.sh","path":"shells/kubectx_kubens_install.sh","modified":1,"renderable":0},{"_id":"source/shells/kubectx_kubens_uninstall.sh","path":"shells/kubectx_kubens_uninstall.sh","modified":1,"renderable":0},{"_id":"source/shells/k8s_alias_uninstall.sh","path":"shells/k8s_alias_uninstall.sh","modified":1,"renderable":0},{"_id":"themes/fluid/source/CNAME","path":"CNAME","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.bak.png","path":"img/default.bak.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/fluid.png.bak","path":"img/fluid.png.bak","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/logo.png","path":"img/logo.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/duration.js","path":"js/duration.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/titles/markdown.png","path":"img/titles/markdown.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/kubernetes 1.26版本解读.md","hash":"3cd6fc74bb202cc9d7fb4174837b329d9e638cf0","modified":1693982261594},{"_id":"source/shells/kubectx_kubens_uninstall.sh","hash":"8e456e50ac666c409ceb6e73045bbb983613a183","modified":1692782345454},{"_id":"source/categories/index.md","hash":"35aafe0868d4ac7f2c11d161bc6be2a334f92945","modified":1692782345454},{"_id":"source/about/index.md","hash":"12e90474b3046c6986a3ee5fe07225e6d830c29c","modified":1692782345453},{"_id":"source/shells/chatgpt_test.sh","hash":"153234e06890dc43415baab400ea69957a4a6d92","modified":1692782345454},{"_id":"source/shells/kubectx_kubens_install.sh","hash":"e0decb2f4c7d6f3b59064b9e2370c79ee7faedae","modified":1692782345454},{"_id":"source/tags/index.md","hash":"b679621d505b6ce842cbe1d36ec048474e5d5bc0","modified":1692782345454},{"_id":"source/shells/k8s_alias_uninstall.sh","hash":"bca8d34cf5adf6bf9b197cf10e920f7aab2c2ee9","modified":1692782345454},{"_id":"source/_posts/docker/docker记不住的命令.md","hash":"44a8bb4f40057a53778657aa85db0beb2f8ffa51","modified":1694845548871},{"_id":"source/shells/k8s_alias_install.sh","hash":"519712816fce11b75d558b9b20df01d7385dc53d","modified":1692782345454},{"_id":"source/_posts/linux/frp-内网穿透.md","hash":"b0be2d09608725c29f4969c82fe4bb8308fb17ea","modified":1692782345451},{"_id":"source/_posts/docker/buildx构建多版本镜像.md","hash":"a2542072cfe538a84f00cb2cc13817b14073d481","modified":1692782345443},{"_id":"source/_posts/docker/Dockerfile命令.md","hash":"8238cb4ec4a8a6b3dd003d28a07c51fa3f4d720d","modified":1693216615834},{"_id":"source/_posts/linux/nas整理.md","hash":"c4e2e69822776abf170ade72f8b43d3a5056f51a","modified":1692867484713},{"_id":"source/_posts/linux/linux-命令大全.md","hash":"f8eecf0c90cef3adaf05d3a9c584dba309248ccf","modified":1695003933224},{"_id":"source/_posts/linux/Sql-操作.md","hash":"720f945fd97b081ed3f6efcd187da8ff345910cd","modified":1693301254901},{"_id":"source/_posts/linux/玩客云入门.md","hash":"f45234e7bece5648e5abee191a9d98f9fb5ea4d1","modified":1694843840309},{"_id":"source/_posts/linux/fzf-搜索神器.md","hash":"13886c5660720ba8c07b55714b1d54c51d6cca3f","modified":1692782345451},{"_id":"source/_posts/工具/markdown使用.md","hash":"97d10efe0b0fe549dc1dd6480137d1baa9711464","modified":1692782345453},{"_id":"source/_posts/工具/工具大全.md","hash":"a528d7b682f935d1aec050fca26787051db591b5","modified":1695003933225},{"_id":"source/_posts/linux/常用服务模板.md","hash":"3656baf0610455068e3c1ad778c487c5bca29446","modified":1694489662951},{"_id":"source/_posts/工具/oh-my-zsh-让终端飞.md","hash":"647271a31d1bc2bebdb7f1af17ef2234bbbd9e2e","modified":1693302854592},{"_id":"source/_posts/工具/git使用指南.md","hash":"204df4b1fd937dcabdfae9c131df7014c84f94ee","modified":1692867088090},{"_id":"source/_posts/golang/golang面试.md","hash":"49cec4c31edc6505cf9d1f7e002d46cea9731e7c","modified":1693990036025},{"_id":"source/_posts/k8s/k8s记不住的命令.md","hash":"e827af25f6ff8070742b50fced97056eb51510f6","modified":1694845789645},{"_id":"source/_posts/golang/viper配置文件.md","hash":"f3ecca3d1937d5013fdaf6fd6736b550ebd3d4f2","modified":1692782345444},{"_id":"source/_posts/golang/golang垃圾回收.md","hash":"5711a0ad9db3eba97b01d9066c0f48f2231eaa47","modified":1692782345443},{"_id":"source/_posts/k8s/使用kubeadm安装集群.md","hash":"9e9887faae947c8408977fdbcf76314e78bf9f02","modified":1692782345445},{"_id":"source/_posts/k8s/使用client-go操作自定义CRD.md","hash":"80ea8cf5ef11ef838aa7987920b2f3e1ce80a003","modified":1692782345445},{"_id":"source/_posts/k8s/安装kubectl快捷命令.md","hash":"bc048b11399cff716d380d03bd5b356264ac3c06","modified":1692782345445},{"_id":"source/_posts/golang/grpc如何使用.md","hash":"49f05e5ad89676586c96523f5ca50abacdb549c6","modified":1693990178026},{"_id":"source/_posts/linux/linux-命令大全/top-01.png","hash":"1585417e98ad1c44f1abee8d3cf5ce5be570022c","modified":1692782345452},{"_id":"source/_posts/k8s/容器网络接口（CNI）.md","hash":"6e45ecc48deca771ed517b765a6952a258c021aa","modified":1693988678325},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-2.png","hash":"0973ffa76ac0dee1a848298003b1bfd82a136868","modified":1692782345446},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1692782345451},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1692782345449},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692782345476},{"_id":"source/_posts/技术/实现-DNS-双栈的一些细节.md","hash":"ae53f7ca1fc8ae9331a2735ee7adf76d9e4610d7","modified":1693892989283},{"_id":"source/_posts/golang/golang垃圾回收/1.png","hash":"b02af1ab675cbf98ebf8c8e1ca5c017334fd31a7","modified":1692782345444},{"_id":"source/_posts/linux/linux-命令大全/top-02.png","hash":"51a34e7c21fc98c37f2f5b175d3bfb7ca2a47992","modified":1692782345452},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-bgp-1.png","hash":"95729aad6f8a558b9d0eac944d700d51ce1b1faa","modified":1692782345446},{"_id":"source/_posts/k8s/使用kubeadm安装集群/master-worker.png","hash":"205b80d0850b32e3fcf44ed1029a9a48d1535e6a","modified":1692782345445},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-1.png","hash":"c2983f7064f783bae2f3a3196afe379c7e981ef0","modified":1692782345446},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1692782345449},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1692782345448},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1692782345459},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1692782345459},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1692782345460},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1692782345461},{"_id":"themes/fluid/_config.yml","hash":"2c1870f58f0d15ef91a135a8d71e634811bf67ba","modified":1695003967331},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1692782345461},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1692782345469},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1692782345461},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1692782345462},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1692782345461},{"_id":"themes/fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1692782345461},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1692782345462},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1692782345462},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1692782345462},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1692782345462},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1692782345462},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1692782345462},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1692782345467},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1692782345462},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1692782345468},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1692782345468},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1692782345468},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1692782345468},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1692782345468},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1692782345462},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1692782345468},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1692782345468},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1692782345468},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1692782345468},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1692782345460},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1692782345468},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1692782345460},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1692782345460},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1692782345460},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1692782345460},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1692782345460},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1692782345460},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1692782345460},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1692782345465},{"_id":"themes/fluid/source/CNAME","hash":"814d4c2899886a22c1efdcb962f4701d5892bbc8","modified":1692847046562},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1692782345465},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1692782345477},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1692782345476},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1692782345476},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1692782345477},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1692782345501},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1692782345501},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1692782345501},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1692782345501},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1692782345476},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1692782345502},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1692782345502},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1692782345502},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1692782345502},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1692782345469},{"_id":"themes/fluid/source/js/duration.js","hash":"076ade6cc598ec882028c57c353194b13e3c55fa","modified":1692782345501},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1692782345502},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1692782345502},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1692782345470},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1692782345502},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1692782345470},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1692782345472},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1692782345472},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1692782345471},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1692782345472},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1692782345471},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1692782345471},{"_id":"themes/fluid/source/img/fluid.png.bak","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1692782345501},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1692782345470},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1692782345472},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1692782345472},{"_id":"themes/fluid/source/img/logo.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692782345500},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1692782345470},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1692782345471},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1692782345472},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1692782345470},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1692782345471},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1692782345470},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1692782345472},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1692782345471},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1692782345471},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1692782345471},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1692782345470},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1692782345470},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1692782345470},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1692782345471},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1692782345471},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1692782345463},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1692782345464},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"bd01b2efc3295e9700e0a8ab38526ff87c9bb034","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1692782345467},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1692782345465},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1692782345466},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1692782345466},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1692782345476},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1692782345472},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1692782345476},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1692782345466},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1692782345472},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1692782345469},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1692782345469},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1692782345469},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1692782345469},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1692782345473},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1692782345469},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1692782345469},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1692782345469},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1692782345476},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1692782345476},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1692782345476},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1692782345475},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1692782345476},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1692782345476},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1692782345473},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1692782345474},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1692782345474},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1692782345447},{"_id":"themes/fluid/source/img/titles/markdown.png","hash":"5886c03d6c6e9e4a0b7a2e85231db4d2c7254581","modified":1692782345501},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","hash":"5dd02878b32076dfa3288f36cfc713aa15534106","modified":1692782345448},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1692782345450},{"_id":"source/_posts/k8s/容器网络接口（CNI）/pod-allow-ip.png","hash":"5cb1e108b920544d265a70d74cbb1d47dc9d4a75","modified":1693218882712},{"_id":"themes/fluid/source/img/default.bak.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1692782345477},{"_id":"source/_posts/工具/工具大全/iterm.png","hash":"f0feccde2da2e79050834046d2357ad875c5b4de","modified":1693302501893},{"_id":"themes/fluid/source/img/default.png","hash":"fe9cba3d1b9a0f06afa594497a5a3e27f85da857","modified":1692782345498},{"_id":"public/local-search.xml","hash":"c997e69a261932da533a02253d1622f5ac2e637a","modified":1695003978374},{"_id":"public/about/index.html","hash":"82ca3928cf8c8368bbaa9ffb91e3733ad3fa0482","modified":1695003978374},{"_id":"public/tags/index.html","hash":"e5c994c850c69f597ff53629c036cb657ebcb32a","modified":1695003978374},{"_id":"public/categories/k8s/index.html","hash":"d0b1b0d53bfe894a49d9d7d4c071ef59c5057139","modified":1695003978374},{"_id":"public/categories/docker/index.html","hash":"626335eb7da3d29b06b1d0479529e2a922434276","modified":1695003978374},{"_id":"public/categories/工具/index.html","hash":"a664e65fb6e4e2f352936118fd7a88a87f6f59a9","modified":1695003978374},{"_id":"public/categories/golang/index.html","hash":"997080caa99e0ba980f11e0939dd06c032d3c93f","modified":1695003978374},{"_id":"public/categories/linux/index.html","hash":"ecc52445f92c5929cc71d2f5a27399f5ab192b56","modified":1695003978374},{"_id":"public/archives/index.html","hash":"583364c570d65763c25aab83281fb9ce58916102","modified":1695003978374},{"_id":"public/archives/page/3/index.html","hash":"183bf582d79e9145f6e71d2c605a4b08d50ea9a2","modified":1695003978374},{"_id":"public/archives/page/2/index.html","hash":"35e1b1732159250f7fde09a9a0f7bf41a71e3a47","modified":1695003978374},{"_id":"public/archives/2023/index.html","hash":"0e38841e0d44d1049b3a20af200158edc59cc7a9","modified":1695003978374},{"_id":"public/archives/2023/page/2/index.html","hash":"f7ae8d2abcd8940f48c4c9c2a8efb7c90b716510","modified":1695003978374},{"_id":"public/categories/技术/index.html","hash":"19a57e52add625125f86a8506f59e1a8dd520ec1","modified":1695003978374},{"_id":"public/archives/2023/page/3/index.html","hash":"16e85f8aaea56511f7503a62e4eae16f9163723b","modified":1695003978374},{"_id":"public/archives/2023/07/index.html","hash":"fc637b8788e489536ffbad21f523ad631c77b6e6","modified":1695003978374},{"_id":"public/archives/2023/07/page/2/index.html","hash":"9d9048251bde10b5ed06e392806b43ec8824dd75","modified":1695003978374},{"_id":"public/archives/2023/08/index.html","hash":"ecedb83157a1b139e50459238c52cf5f70d5d75f","modified":1695003978374},{"_id":"public/archives/2023/08/page/2/index.html","hash":"5ad71be12f09724216a4894a8c0c9727d037b8bb","modified":1695003978374},{"_id":"public/archives/2023/09/index.html","hash":"c805cf0587d9cf1dd1b3ed487799da4ad07059ca","modified":1695003978374},{"_id":"public/tags/dockerfile/index.html","hash":"808f066c37f886dfd8ca9ebad3212e84127e9d3b","modified":1695003978374},{"_id":"public/tags/docker/index.html","hash":"3d058b9013666f926a7f641353373410f7c31dfd","modified":1695003978374},{"_id":"public/tags/sql/index.html","hash":"cf7b8c81b080f9f1d2921146a875d17376ed8bc2","modified":1695003978374},{"_id":"public/tags/nas/index.html","hash":"964a279e230ec78be428906bd91900f9471e95eb","modified":1695003978374},{"_id":"public/tags/linux/index.html","hash":"f601c62b233a6b5f05c381272d74965e90b7d0de","modified":1695003978374},{"_id":"public/tags/frp/index.html","hash":"bc9ef2a5084b3e654a51fdc84b65ab31f4136007","modified":1695003978374},{"_id":"public/tags/shell/index.html","hash":"1faa8d9bb3b08a87dd02b5d55cce13a8125e367b","modified":1695003978374},{"_id":"public/tags/alist/index.html","hash":"f72ebe132543c8f1a687439a67d17401d208590a","modified":1695003978374},{"_id":"public/tags/Makefile/index.html","hash":"bb6a7b2347de555c5dce99028842fb6cceab9aa9","modified":1695003978374},{"_id":"public/tags/fzf/index.html","hash":"be0c893b9574f74b6fc8348ea9b54f34cc90bcc2","modified":1695003978374},{"_id":"public/tags/玩客云/index.html","hash":"4ebaac318577a1755207718a1581d8bdd072bf74","modified":1695003978374},{"_id":"public/tags/armbian/index.html","hash":"63368fd011dd4592715e1a5f009da03d3a58a626","modified":1695003978374},{"_id":"public/tags/工具/index.html","hash":"90fd3c25b2482dde9bd96e23fd283adef2791412","modified":1695003978374},{"_id":"public/tags/Dockerfile/index.html","hash":"722c9854a112980f7c6cf55432ee375c3bc0e73a","modified":1695003978374},{"_id":"public/tags/git/index.html","hash":"d3548ea4968d90c7f14924d70627727336a10a26","modified":1695003978374},{"_id":"public/tags/ssh/index.html","hash":"e880d77f7b290f7e426fed0497ae584a8a9f4c7e","modified":1695003978374},{"_id":"public/tags/markdown/index.html","hash":"506c79debc091df2a10c5d27a1255f4540272416","modified":1695003978374},{"_id":"public/tags/fluid/index.html","hash":"41039f6faafbdcaf1bbb2c5b1a9a03a47c750b51","modified":1695003978374},{"_id":"public/tags/hexo/index.html","hash":"3eacb078949970e059f1507784110814cc16f548","modified":1695003978374},{"_id":"public/tags/oh-my-zsh/index.html","hash":"359049532ccf0b8f91a30f1e5177746f8e805882","modified":1695003978374},{"_id":"public/tags/golang/index.html","hash":"3d862e5a56460da3d7837e61be2c2445bc18136f","modified":1695003978374},{"_id":"public/tags/k8s/index.html","hash":"4fdef787b20cf56d52d431ae9bf0764d52db4df0","modified":1695003978374},{"_id":"public/tags/dns/index.html","hash":"f19bad544e75a1795e475a9a6469e4e37267f21e","modified":1695003978374},{"_id":"public/tags/kubectl/index.html","hash":"da3a9003961653fb0fd9a1c3861003964d8bed16","modified":1695003978374},{"_id":"public/tags/alias/index.html","hash":"9d6489066417fe5cc87b05f6f91600b60e8f1980","modified":1695003978374},{"_id":"public/tags/cni/index.html","hash":"3e8f99edeef304f009bb96cdcc9308fb2d3eae78","modified":1695003978374},{"_id":"public/404.html","hash":"8e40be38f9c46dd9a24e27dccc67a22f00fd2dbb","modified":1695003978374},{"_id":"public/links/index.html","hash":"50adf826ce94dac157a8e009460ada7bc8e02af3","modified":1695003978374},{"_id":"public/categories/index.html","hash":"12ddaf25c16951083799ac3e2725667bf70b9242","modified":1695003978374},{"_id":"public/2023/09/06/kubernetes 1.26版本解读/index.html","hash":"a11feb01ae3e2179eecd50a7346b173bbd55d5f0","modified":1695003978374},{"_id":"public/2023/09/05/技术/实现-DNS-双栈的一些细节/index.html","hash":"c1a5f22f38b676017ac77a3213e94353ce1d558e","modified":1695003978374},{"_id":"public/2023/08/29/工具/工具大全/index.html","hash":"d20defa09da12ac60d688838bf831bc87644d11e","modified":1695003978374},{"_id":"public/2023/08/28/linux/Sql-操作/index.html","hash":"08b250354b542469164d733bd2fe81c830dfdfc9","modified":1695003978374},{"_id":"public/2023/08/19/linux/frp-内网穿透/index.html","hash":"fac3a44a5812835566f567c02c47737dc58c57ca","modified":1695003978374},{"_id":"public/2023/08/19/linux/玩客云入门/index.html","hash":"d6d801241e036454e0f8296caef0949f1e963925","modified":1695003978374},{"_id":"public/2023/08/17/linux/fzf-搜索神器/index.html","hash":"22c54829f0bea3255e26e320638232114e5e5617","modified":1695003978374},{"_id":"public/2023/08/16/golang/golang垃圾回收/index.html","hash":"37adfc813f258f64e185242ef65a97e153ea7dcd","modified":1695003978374},{"_id":"public/2023/08/16/工具/markdown使用/index.html","hash":"d91fdb6edf738b820ef3ebb34b94d9fe1f4ac4f3","modified":1695003978374},{"_id":"public/2023/08/16/linux/linux-命令大全/index.html","hash":"ed59550a2b01c641d317cdc2af2f1f3740ea7653","modified":1695003978374},{"_id":"public/2023/08/16/工具/git使用指南/index.html","hash":"81cb97958dd470466e31871ce6a9e2840a55c588","modified":1695003978374},{"_id":"public/2023/08/08/linux/nas整理/index.html","hash":"95e5cebbd77c9367e237b7e83dfae5d71738ab85","modified":1695003978374},{"_id":"public/2023/08/03/docker/buildx构建多版本镜像/index.html","hash":"a8ae4357dba4656f7eb255bacdde95ba5518ef2c","modified":1695003978374},{"_id":"public/2023/07/31/golang/grpc如何使用/index.html","hash":"3cd096852b4268c7d17400951cb85b80af0b93f3","modified":1695003978374},{"_id":"public/2023/07/29/golang/golang面试/index.html","hash":"8e7bf4a071171f84961c1bee46ef13ebdbe4183b","modified":1695003978374},{"_id":"public/2023/07/29/golang/viper配置文件/index.html","hash":"0b9cd373694672b8a40a3148107b12ff91ae94f6","modified":1695003978374},{"_id":"public/2023/07/27/工具/oh-my-zsh-让终端飞/index.html","hash":"bb38cab75e554b41f9741e4c9d62f454ab4b69b1","modified":1695003978374},{"_id":"public/2023/07/27/docker/Dockerfile命令/index.html","hash":"f6f8fbac214b63d637f6f8371926f531ac52deff","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/index.html","hash":"f934b5a7e6f8569e8451a4367bbe6810603053aa","modified":1695003978374},{"_id":"public/2023/07/26/k8s/使用kubeadm安装集群/index.html","hash":"5b5bdf6c3dd5093b2bfe4e7bd3253fc4c0fd7c38","modified":1695003978374},{"_id":"public/2023/07/25/k8s/使用client-go操作自定义CRD/index.html","hash":"3193db12f150ca28fc76b458ffbe7f6c6336586f","modified":1695003978374},{"_id":"public/2023/07/23/k8s/安装kubectl快捷命令/index.html","hash":"b1f1a7f14af0303024f1414baf0341c6ff1bf652","modified":1695003978374},{"_id":"public/2023/07/23/k8s/k8s记不住的命令/index.html","hash":"947a80793c72deb83515a2a06311904f30abdad8","modified":1695003978374},{"_id":"public/2023/07/23/docker/docker记不住的命令/index.html","hash":"dc9d68ef9db0905e01e5b8c44493d012ca4ef1e4","modified":1695003978374},{"_id":"public/2023/07/23/linux/常用服务模板/index.html","hash":"6e0dac330ba13bf679e6473187db928e6ca482e4","modified":1695003978374},{"_id":"public/index.html","hash":"c1f997a76748c4d700d7862ff8e678419c2bc405","modified":1695003978374},{"_id":"public/page/2/index.html","hash":"172f768df5c340fef9f19894b937341104f53631","modified":1695003978374},{"_id":"public/page/3/index.html","hash":"ed2f5b68fe97e625c43d091d2f8254751a56ee1d","modified":1695003978374},{"_id":"public/shells/k8s_alias_uninstall.sh","hash":"bca8d34cf5adf6bf9b197cf10e920f7aab2c2ee9","modified":1695003978374},{"_id":"public/shells/kubectx_kubens_uninstall.sh","hash":"8e456e50ac666c409ceb6e73045bbb983613a183","modified":1695003978374},{"_id":"public/shells/chatgpt_test.sh","hash":"153234e06890dc43415baab400ea69957a4a6d92","modified":1695003978374},{"_id":"public/shells/kubectx_kubens_install.sh","hash":"e0decb2f4c7d6f3b59064b9e2370c79ee7faedae","modified":1695003978374},{"_id":"public/CNAME","hash":"814d4c2899886a22c1efdcb962f4701d5892bbc8","modified":1695003978374},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1695003978374},{"_id":"public/img/fluid.png.bak","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1695003978374},{"_id":"public/shells/k8s_alias_install.sh","hash":"519712816fce11b75d558b9b20df01d7385dc53d","modified":1695003978374},{"_id":"public/img/logo.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1695003978374},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1695003978374},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1695003978374},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1695003978374},{"_id":"public/2023/08/16/linux/linux-命令大全/top-01.png","hash":"1585417e98ad1c44f1abee8d3cf5ce5be570022c","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-ipip-2.png","hash":"0973ffa76ac0dee1a848298003b1bfd82a136868","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1695003978374},{"_id":"public/2023/08/16/golang/golang垃圾回收/1.png","hash":"b02af1ab675cbf98ebf8c8e1ca5c017334fd31a7","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-bgp-1.png","hash":"95729aad6f8a558b9d0eac944d700d51ce1b1faa","modified":1695003978374},{"_id":"public/2023/08/16/linux/linux-命令大全/top-02.png","hash":"51a34e7c21fc98c37f2f5b175d3bfb7ca2a47992","modified":1695003978374},{"_id":"public/2023/07/26/k8s/使用kubeadm安装集群/master-worker.png","hash":"205b80d0850b32e3fcf44ed1029a9a48d1535e6a","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-ipip-1.png","hash":"c2983f7064f783bae2f3a3196afe379c7e981ef0","modified":1695003978374},{"_id":"public/img/titles/markdown.png","hash":"5886c03d6c6e9e4a0b7a2e85231db4d2c7254581","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1695003978374},{"_id":"public/css/highlight-dark.css","hash":"923fab6dedc88bee302659e982f9f75c5ed7d90b","modified":1695003978374},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1695003978374},{"_id":"public/css/highlight.css","hash":"7ee910ac4fe53a8892f62a0064a017569d82465c","modified":1695003978374},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1695003978374},{"_id":"public/js/duration.js","hash":"076ade6cc598ec882028c57c353194b13e3c55fa","modified":1695003978374},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1695003978374},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1695003978374},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1695003978374},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1695003978374},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1695003978374},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1695003978374},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1695003978374},{"_id":"public/css/main.css","hash":"e11dc1ccf268e839e50512712bd065c303a31b89","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","hash":"5dd02878b32076dfa3288f36cfc713aa15534106","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1695003978374},{"_id":"public/img/default.bak.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1695003978374},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/pod-allow-ip.png","hash":"5cb1e108b920544d265a70d74cbb1d47dc9d4a75","modified":1695003978374},{"_id":"public/2023/08/29/工具/工具大全/iterm.png","hash":"f0feccde2da2e79050834046d2357ad875c5b4de","modified":1695003978374},{"_id":"public/img/default.png","hash":"fe9cba3d1b9a0f06afa594497a5a3e27f85da857","modified":1695003978374}],"Category":[{"name":"k8s","_id":"clmo9ls9t0004384w3zio66nt"},{"name":"docker","_id":"clmo9ls9w000a384wgf8771p5"},{"name":"linux","_id":"clmo9ls9z000r384w6wt7ab1z"},{"name":"工具","_id":"clmo9lsa3001r384w1bvcgfha"},{"name":"golang","_id":"clmo9lsa4002c384w4hs8hlfl"},{"name":"技术","_id":"clmo9lsa4002h384w07imggwz"}],"Data":[],"Page":[{"title":"关于","date":"2023-08-16T10:06:38.000Z","_content":"\n仅供个人使用。","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-08-16 18:06:38\n---\n\n仅供个人使用。","updated":"2023-08-23T09:19:05.453Z","path":"about/index.html","comments":1,"layout":"page","_id":"clmo9ls9q0000384w8wwhh6i7","content":"<p>仅供个人使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>仅供个人使用。</p>\n"},{"title":"categories","date":"2023-08-16T10:31:38.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-16 18:31:38\n---\n","updated":"2023-08-23T09:19:05.454Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clmo9ls9s0002384wd9x0dbga","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","layout":"tags","date":"2023-07-22T16:24:49.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: \"tags\"\ndate: 2023-07-23 00:24:49\n---\n","updated":"2023-08-23T09:19:05.454Z","path":"tags/index.html","comments":1,"_id":"clmo9ls9u0005384w5of494m7","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"kubernetes 1.26版本解读","date":"2023-09-06T06:25:28.000Z","updated":"2023-09-06T06:37:41.594Z","_content":"\n<!-- more -->\n\n# 1. 重大变化\n\n## 1.1 containerd\n\n1.26 不支持 CRI v1alpha2，并且要求容器运行时必须支持 CRI v1。因此必须要求 Containerd 最低版本为 1.6\n\n{% note warning %}\n    升级集群时，需先将Containerd升级到1.6.0及以上版本后，才能将节点升级到Kubernetes 1.26。\n{% endnote %}\n\n## 1.2 PodSecurityPolicy\n\nKubernetes在1.21版本中弃用PodSecurityPolicy，在Kubernetes 1.25版本中彻底移除。\n\n## ","source":"_posts/kubernetes 1.26版本解读.md","raw":"---\ntitle: kubernetes 1.26版本解读\ncategory: k8s\ndate: 2023-09-06 14:25:28\nupdated:\ntags:\n---\n\n<!-- more -->\n\n# 1. 重大变化\n\n## 1.1 containerd\n\n1.26 不支持 CRI v1alpha2，并且要求容器运行时必须支持 CRI v1。因此必须要求 Containerd 最低版本为 1.6\n\n{% note warning %}\n    升级集群时，需先将Containerd升级到1.6.0及以上版本后，才能将节点升级到Kubernetes 1.26。\n{% endnote %}\n\n## 1.2 PodSecurityPolicy\n\nKubernetes在1.21版本中弃用PodSecurityPolicy，在Kubernetes 1.25版本中彻底移除。\n\n## ","slug":"kubernetes 1.26版本解读","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmo9ls9r0001384w0n733g7m","content":"<span id=\"more\"></span>\n\n<h1><span id=\"1-重大变化\">1. 重大变化</span></h1><h2><span id=\"11-containerd\">1.1 containerd</span></h2><p>1.26 不支持 CRI v1alpha2，并且要求容器运行时必须支持 CRI v1。因此必须要求 Containerd 最低版本为 1.6</p>\n<div class=\"note note-warning\">\n            <p>升级集群时，需先将Containerd升级到1.6.0及以上版本后，才能将节点升级到Kubernetes 1.26。</p>\n          </div>\n\n<h2><span id=\"12-podsecuritypolicy\">1.2 PodSecurityPolicy</span></h2><p>Kubernetes在1.21版本中弃用PodSecurityPolicy，在Kubernetes 1.25版本中彻底移除。</p>\n<h2><span id></span></h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-重大变化\"><a href=\"#1-重大变化\" class=\"headerlink\" title=\"1. 重大变化\"></a>1. 重大变化</h1><h2 id=\"1-1-containerd\"><a href=\"#1-1-containerd\" class=\"headerlink\" title=\"1.1 containerd\"></a>1.1 containerd</h2><p>1.26 不支持 CRI v1alpha2，并且要求容器运行时必须支持 CRI v1。因此必须要求 Containerd 最低版本为 1.6</p>\n<div class=\"note note-warning\">\n            <p>升级集群时，需先将Containerd升级到1.6.0及以上版本后，才能将节点升级到Kubernetes 1.26。</p>\n          </div>\n\n<h2 id=\"1-2-PodSecurityPolicy\"><a href=\"#1-2-PodSecurityPolicy\" class=\"headerlink\" title=\"1.2 PodSecurityPolicy\"></a>1.2 PodSecurityPolicy</h2><p>Kubernetes在1.21版本中弃用PodSecurityPolicy，在Kubernetes 1.25版本中彻底移除。</p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2>"},{"layout":"docker","title":"Dockerfile 命令","date":"2023-07-27T07:34:10.000Z","_content":"\n{% note primary%}\n\n一个适用于我自己的模板，附带一些命令讲解。\n\n{% endnote %}\n\n<!-- more -->\n## 1. 模板\n\n## 2. COPY vs ADD\n\n没有特殊需求情况下，建议使用`COPY`\n\n**ADD会自动解压压缩文件**\n  \n\n**ADD 支持源文件URL形式**\n\n```dockerfile\nADD http://example.com/example.txt /app/\n```\n\n## 3. CMD vs ENTRYPOINT\n\n**docker run 如果指定了命令会覆盖**\n\n**下面是等价的**\n```dockerfile\nCMD [\"python\", \"app.py\"]\n```\n\n```dockerfile\nENTRYPOINT [\"python\", \"app.py\"]\n```\n\n```dockerfile\n# 由 CMD 指令指定默认的可选参数：\nENTRYPOINT [\"python\"]\nCMD [\"app.py\"]\n```","source":"_posts/docker/Dockerfile命令.md","raw":"---\nlayout: docker\ntitle: Dockerfile 命令\ndate: 2023-07-27 15:34:10\ntags: [docker,dockerfile]\ncategories: docker\n---\n\n{% note primary%}\n\n一个适用于我自己的模板，附带一些命令讲解。\n\n{% endnote %}\n\n<!-- more -->\n## 1. 模板\n\n## 2. COPY vs ADD\n\n没有特殊需求情况下，建议使用`COPY`\n\n**ADD会自动解压压缩文件**\n  \n\n**ADD 支持源文件URL形式**\n\n```dockerfile\nADD http://example.com/example.txt /app/\n```\n\n## 3. CMD vs ENTRYPOINT\n\n**docker run 如果指定了命令会覆盖**\n\n**下面是等价的**\n```dockerfile\nCMD [\"python\", \"app.py\"]\n```\n\n```dockerfile\nENTRYPOINT [\"python\", \"app.py\"]\n```\n\n```dockerfile\n# 由 CMD 指令指定默认的可选参数：\nENTRYPOINT [\"python\"]\nCMD [\"app.py\"]\n```","slug":"docker/Dockerfile命令","published":1,"updated":"2023-08-28T09:56:55.834Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9t0003384w787h93f1","content":"<div class=\"note note-primary\">\n            <p>一个适用于我自己的模板，附带一些命令讲解。</p>\n          </div>\n\n<span id=\"more\"></span>\n<h2><span id=\"1-模板\">1. 模板</span></h2><h2><span id=\"2-copy-vs-add\">2. COPY vs ADD</span></h2><p>没有特殊需求情况下，建议使用<code>COPY</code></p>\n<p><strong>ADD会自动解压压缩文件</strong></p>\n<p><strong>ADD 支持源文件URL形式</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> http://example.com/example.txt /app/</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-cmd-vs-entrypoint\">3. CMD vs ENTRYPOINT</span></h2><p><strong>docker run 如果指定了命令会覆盖</strong></p>\n<p><strong>下面是等价的</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 由 CMD 指令指定默认的可选参数：</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>]</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>一个适用于我自己的模板，附带一些命令讲解。</p>\n          </div>","more":"<h2 id=\"1-模板\"><a href=\"#1-模板\" class=\"headerlink\" title=\"1. 模板\"></a>1. 模板</h2><h2 id=\"2-COPY-vs-ADD\"><a href=\"#2-COPY-vs-ADD\" class=\"headerlink\" title=\"2. COPY vs ADD\"></a>2. COPY vs ADD</h2><p>没有特殊需求情况下，建议使用<code>COPY</code></p>\n<p><strong>ADD会自动解压压缩文件</strong></p>\n<p><strong>ADD 支持源文件URL形式</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> http://example.com/example.txt /app/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-CMD-vs-ENTRYPOINT\"><a href=\"#3-CMD-vs-ENTRYPOINT\" class=\"headerlink\" title=\"3. CMD vs ENTRYPOINT\"></a>3. CMD vs ENTRYPOINT</h2><p><strong>docker run 如果指定了命令会覆盖</strong></p>\n<p><strong>下面是等价的</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 由 CMD 指令指定默认的可选参数：</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>]</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>"},{"layout":"docker","title":"buildx构建多版本镜像","date":"2023-08-03T07:23:18.000Z","_content":"\n{% note primary%}\n\n目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行\n\n{% endnote %}\n\n<!--more-->\n\n[参考资料](http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/)\n\n新版本的docker默认自带 buildx\n\n## 1. 创建buildx\n\n### 1.1 查看当前buildx实例\n\n```sh\n$ docker buildx ls\nNAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\ndefault * docker\n  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n> 默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型\n\n### 1.2 创建buildx\n\n```shell\ndocker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use\n```\n\n- 使用这个实例\n\n```shell\ndocker buildx use all\n```\n\n- 当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像\n\n## 2. 编译\n\n**--platform执行要编译的平台，其他的参数和普通的build差不多**\n\n```sh\n# 直接上传到仓库\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .\n\n# 输出本地\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .\n\n# tar包\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .\n\n# 直接导入到本地 docker 中，只支持单平台架构\ndocker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . \n```","source":"_posts/docker/buildx构建多版本镜像.md","raw":"---\nlayout: docker\ntitle: buildx构建多版本镜像\ndate: 2023-08-03 15:23:18\ntags: \"docker\"\ncategories: docker\n---\n\n{% note primary%}\n\n目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行\n\n{% endnote %}\n\n<!--more-->\n\n[参考资料](http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/)\n\n新版本的docker默认自带 buildx\n\n## 1. 创建buildx\n\n### 1.1 查看当前buildx实例\n\n```sh\n$ docker buildx ls\nNAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\ndefault * docker\n  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n> 默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型\n\n### 1.2 创建buildx\n\n```shell\ndocker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use\n```\n\n- 使用这个实例\n\n```shell\ndocker buildx use all\n```\n\n- 当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像\n\n## 2. 编译\n\n**--platform执行要编译的平台，其他的参数和普通的build差不多**\n\n```sh\n# 直接上传到仓库\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .\n\n# 输出本地\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .\n\n# tar包\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .\n\n# 直接导入到本地 docker 中，只支持单平台架构\ndocker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . \n```","slug":"docker/buildx构建多版本镜像","published":1,"updated":"2023-08-23T09:19:05.443Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9u0006384w75pi1bb4","content":"<div class=\"note note-primary\">\n            <p>目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p><a href=\"http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/\">参考资料</a></p>\n<p>新版本的docker默认自带 buildx</p>\n<h2><span id=\"1-创建buildx\">1. 创建buildx</span></h2><h3><span id=\"11-查看当前buildx实例\">1.1 查看当前buildx实例</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker buildx <span class=\"hljs-built_in\">ls</span><br>NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS<br>default * docker<br>  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p>\n</blockquote>\n<h3><span id=\"12-创建buildx\">1.2 创建buildx</span></h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用这个实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx use all<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li>\n</ul>\n<h2><span id=\"2-编译\">2. 编译</span></h2><p><strong>–platform执行要编译的平台，其他的参数和普通的build差不多</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 直接上传到仓库</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=registry .<br><br><span class=\"hljs-comment\"># 输出本地</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">local</span>,dest=./output .<br><br><span class=\"hljs-comment\"># tar包</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output <span class=\"hljs-built_in\">type</span>=tar,dest=./output.tar .<br><br><span class=\"hljs-comment\"># 直接导入到本地 docker 中，只支持单平台架构</span><br>docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . <br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行</p>\n          </div>","more":"<p><a href=\"http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/\">参考资料</a></p>\n<p>新版本的docker默认自带 buildx</p>\n<h2 id=\"1-创建buildx\"><a href=\"#1-创建buildx\" class=\"headerlink\" title=\"1. 创建buildx\"></a>1. 创建buildx</h2><h3 id=\"1-1-查看当前buildx实例\"><a href=\"#1-1-查看当前buildx实例\" class=\"headerlink\" title=\"1.1 查看当前buildx实例\"></a>1.1 查看当前buildx实例</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker buildx <span class=\"hljs-built_in\">ls</span><br>NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS<br>default * docker<br>  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p>\n</blockquote>\n<h3 id=\"1-2-创建buildx\"><a href=\"#1-2-创建buildx\" class=\"headerlink\" title=\"1.2 创建buildx\"></a>1.2 创建buildx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用这个实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx use all<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li>\n</ul>\n<h2 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h2><p><strong>–platform执行要编译的平台，其他的参数和普通的build差不多</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 直接上传到仓库</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=registry .<br><br><span class=\"hljs-comment\"># 输出本地</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">local</span>,dest=./output .<br><br><span class=\"hljs-comment\"># tar包</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output <span class=\"hljs-built_in\">type</span>=tar,dest=./output.tar .<br><br><span class=\"hljs-comment\"># 直接导入到本地 docker 中，只支持单平台架构</span><br>docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . <br></code></pre></td></tr></table></figure>"},{"layout":"docker","title":"docker记不住的命令","date":"2023-07-22T16:20:28.000Z","type":"tags","_content":"\n{% note primary%}\n\n不想记，也记不住\n\n{% endnote %}\n\n<!--more-->\n\n#### 启动一个容器\n\n```yaml\n# -p: 8888为主机端口，3306为容器端口\n# -e: 环境变量设置\n# 最后的 mysql 为镜像 \ndocker run -itd --name mysql-test -p 8888:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n#### 列出所有的容器 ID\n```sh\ndocker ps -aq\n```\n\n#### 停止所有的容器\n```sh\ndocker stop $(docker ps -aq)\n```\n\n#### 删除所有的容器\n```sh\ndocker rm $(docker ps -aq)\n```\n\n#### 删除所有的镜像\n```sh\ndocker rmi $(docker images -q)\n```\n#### 删除所有未使用的镜像\n```sh\n docker system prune -a\n```\n#### 删除 none 相关镜像\n```sh\ndocker rmi $(docker images | grep none | awk '{print $3}')     \n```\n\n#### 拉取指定版本镜像\n```sh\ndocker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7\n```\n\n#### mac 清理镜像层\n```sh\nrm ~/Library/Containers/com.docker.docker\n```\n#### 复制文件\n\n```sh\ndocker cp mycontainer:/opt/file.txt /opt/local/\ndocker cp /opt/local/file.txt mycontainer:/opt/\n```\n#### 启动 x-ui\n```sh\ndocker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest\n```\n\n#### 安装最新版 docker\n```sh\nyum update -y\n```\n你可以单独执行更新。\n\n```sh\n# 删除旧版本的Docker\nsudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\n# 安装依赖软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 添加Docker软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 更新yum缓存\nsudo yum makecache fast\n# 安装最新版Docker\nsudo yum install -y docker-ce\n# 启动Docker服务并设置开机自启动\nsudo systemctl start docker\nsudo systemctl enable docker\n# 确认Docker已安装并正在运行\ndocker --version\nsudo docker info\n```\n\n#### 查看容器资源占用\n```sh\n# 持续监控\ndocker stats\n\n# 输出当前\ndocker stats --no-stream\n```","source":"_posts/docker/docker记不住的命令.md","raw":"---\nlayout: docker\ntitle: docker记不住的命令\ndate: 2023-07-23 00:20:28\ntype: \"tags\"\ntags: \"docker\"\ncategories: docker\n---\n\n{% note primary%}\n\n不想记，也记不住\n\n{% endnote %}\n\n<!--more-->\n\n#### 启动一个容器\n\n```yaml\n# -p: 8888为主机端口，3306为容器端口\n# -e: 环境变量设置\n# 最后的 mysql 为镜像 \ndocker run -itd --name mysql-test -p 8888:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n#### 列出所有的容器 ID\n```sh\ndocker ps -aq\n```\n\n#### 停止所有的容器\n```sh\ndocker stop $(docker ps -aq)\n```\n\n#### 删除所有的容器\n```sh\ndocker rm $(docker ps -aq)\n```\n\n#### 删除所有的镜像\n```sh\ndocker rmi $(docker images -q)\n```\n#### 删除所有未使用的镜像\n```sh\n docker system prune -a\n```\n#### 删除 none 相关镜像\n```sh\ndocker rmi $(docker images | grep none | awk '{print $3}')     \n```\n\n#### 拉取指定版本镜像\n```sh\ndocker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7\n```\n\n#### mac 清理镜像层\n```sh\nrm ~/Library/Containers/com.docker.docker\n```\n#### 复制文件\n\n```sh\ndocker cp mycontainer:/opt/file.txt /opt/local/\ndocker cp /opt/local/file.txt mycontainer:/opt/\n```\n#### 启动 x-ui\n```sh\ndocker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest\n```\n\n#### 安装最新版 docker\n```sh\nyum update -y\n```\n你可以单独执行更新。\n\n```sh\n# 删除旧版本的Docker\nsudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\n# 安装依赖软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 添加Docker软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 更新yum缓存\nsudo yum makecache fast\n# 安装最新版Docker\nsudo yum install -y docker-ce\n# 启动Docker服务并设置开机自启动\nsudo systemctl start docker\nsudo systemctl enable docker\n# 确认Docker已安装并正在运行\ndocker --version\nsudo docker info\n```\n\n#### 查看容器资源占用\n```sh\n# 持续监控\ndocker stats\n\n# 输出当前\ndocker stats --no-stream\n```","slug":"docker/docker记不住的命令","published":1,"updated":"2023-09-16T06:25:48.871Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9v0008384waaq5fusq","content":"<div class=\"note note-primary\">\n            <p>不想记，也记不住</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4><span id=\"启动一个容器\">启动一个容器</span></h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># -p: 8888为主机端口，3306为容器端口</span><br><span class=\"hljs-comment\"># -e: 环境变量设置</span><br><span class=\"hljs-comment\"># 最后的 mysql 为镜像 </span><br><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-itd</span> <span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">mysql-test</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">8888</span><span class=\"hljs-string\">:3306</span> <span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=123456</span> <span class=\"hljs-string\">mysql</span><br></code></pre></td></tr></table></figure>\n<h4><span id=\"列出所有的容器-id\">列出所有的容器 ID</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker ps -aq<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"停止所有的容器\">停止所有的容器</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker stop $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"删除所有的容器\">删除所有的容器</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">rm</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"删除所有的镜像\">删除所有的镜像</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images -q)<br></code></pre></td></tr></table></figure>\n<h4><span id=\"删除所有未使用的镜像\">删除所有未使用的镜像</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker system prune -a<br></code></pre></td></tr></table></figure>\n<h4><span id=\"删除-none-相关镜像\">删除 none 相关镜像</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images | grep none | awk <span class=\"hljs-string\">&#x27;&#123;print $3&#125;&#x27;</span>)     <br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"拉取指定版本镜像\">拉取指定版本镜像</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"mac-清理镜像层\">mac 清理镜像层</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">rm</span> ~/Library/Containers/com.docker.docker<br></code></pre></td></tr></table></figure>\n<h4><span id=\"复制文件\">复制文件</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">cp</span> mycontainer:/opt/file.txt /opt/local/<br>docker <span class=\"hljs-built_in\">cp</span> /opt/local/file.txt mycontainer:/opt/<br></code></pre></td></tr></table></figure>\n<h4><span id=\"启动-x-ui\">启动 x-ui</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"安装最新版-docker\">安装最新版 docker</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum update -y<br></code></pre></td></tr></table></figure>\n<p>你可以单独执行更新。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除旧版本的Docker</span><br>sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine<br><span class=\"hljs-comment\"># 安装依赖软件包</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-comment\"># 添加Docker软件源</span><br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class=\"hljs-comment\"># 更新yum缓存</span><br>sudo yum makecache fast<br><span class=\"hljs-comment\"># 安装最新版Docker</span><br>sudo yum install -y docker-ce<br><span class=\"hljs-comment\"># 启动Docker服务并设置开机自启动</span><br>sudo systemctl start docker<br>sudo systemctl <span class=\"hljs-built_in\">enable</span> docker<br><span class=\"hljs-comment\"># 确认Docker已安装并正在运行</span><br>docker --version<br>sudo docker info<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"查看容器资源占用\">查看容器资源占用</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 持续监控</span><br>docker stats<br><br><span class=\"hljs-comment\"># 输出当前</span><br>docker stats --no-stream<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>不想记，也记不住</p>\n          </div>","more":"<h4 id=\"启动一个容器\"><a href=\"#启动一个容器\" class=\"headerlink\" title=\"启动一个容器\"></a>启动一个容器</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># -p: 8888为主机端口，3306为容器端口</span><br><span class=\"hljs-comment\"># -e: 环境变量设置</span><br><span class=\"hljs-comment\"># 最后的 mysql 为镜像 </span><br><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-itd</span> <span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">mysql-test</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">8888</span><span class=\"hljs-string\">:3306</span> <span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=123456</span> <span class=\"hljs-string\">mysql</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"列出所有的容器-ID\"><a href=\"#列出所有的容器-ID\" class=\"headerlink\" title=\"列出所有的容器 ID\"></a>列出所有的容器 ID</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker ps -aq<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"停止所有的容器\"><a href=\"#停止所有的容器\" class=\"headerlink\" title=\"停止所有的容器\"></a>停止所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker stop $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的容器\"><a href=\"#删除所有的容器\" class=\"headerlink\" title=\"删除所有的容器\"></a>删除所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">rm</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的镜像\"><a href=\"#删除所有的镜像\" class=\"headerlink\" title=\"删除所有的镜像\"></a>删除所有的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images -q)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除所有未使用的镜像\"><a href=\"#删除所有未使用的镜像\" class=\"headerlink\" title=\"删除所有未使用的镜像\"></a>删除所有未使用的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker system prune -a<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-none-相关镜像\"><a href=\"#删除-none-相关镜像\" class=\"headerlink\" title=\"删除 none 相关镜像\"></a>删除 none 相关镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images | grep none | awk <span class=\"hljs-string\">&#x27;&#123;print $3&#125;&#x27;</span>)     <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"拉取指定版本镜像\"><a href=\"#拉取指定版本镜像\" class=\"headerlink\" title=\"拉取指定版本镜像\"></a>拉取指定版本镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mac-清理镜像层\"><a href=\"#mac-清理镜像层\" class=\"headerlink\" title=\"mac 清理镜像层\"></a>mac 清理镜像层</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">rm</span> ~/Library/Containers/com.docker.docker<br></code></pre></td></tr></table></figure>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">cp</span> mycontainer:/opt/file.txt /opt/local/<br>docker <span class=\"hljs-built_in\">cp</span> /opt/local/file.txt mycontainer:/opt/<br></code></pre></td></tr></table></figure>\n<h4 id=\"启动-x-ui\"><a href=\"#启动-x-ui\" class=\"headerlink\" title=\"启动 x-ui\"></a>启动 x-ui</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装最新版-docker\"><a href=\"#安装最新版-docker\" class=\"headerlink\" title=\"安装最新版 docker\"></a>安装最新版 docker</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum update -y<br></code></pre></td></tr></table></figure>\n<p>你可以单独执行更新。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除旧版本的Docker</span><br>sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine<br><span class=\"hljs-comment\"># 安装依赖软件包</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-comment\"># 添加Docker软件源</span><br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class=\"hljs-comment\"># 更新yum缓存</span><br>sudo yum makecache fast<br><span class=\"hljs-comment\"># 安装最新版Docker</span><br>sudo yum install -y docker-ce<br><span class=\"hljs-comment\"># 启动Docker服务并设置开机自启动</span><br>sudo systemctl start docker<br>sudo systemctl <span class=\"hljs-built_in\">enable</span> docker<br><span class=\"hljs-comment\"># 确认Docker已安装并正在运行</span><br>docker --version<br>sudo docker info<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器资源占用\"><a href=\"#查看容器资源占用\" class=\"headerlink\" title=\"查看容器资源占用\"></a>查看容器资源占用</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 持续监控</span><br>docker stats<br><br><span class=\"hljs-comment\"># 输出当前</span><br>docker stats --no-stream<br></code></pre></td></tr></table></figure>"},{"title":"Sql 操作","category":"linux","date":"2023-08-28T10:55:08.000Z","_content":"{% note primary%}\n\nsql整理\n\n{% endnote %}\n\n## 1. Mysql\n### 删除数据库\n```\ndrop database <数据库名>;\n```\n### 创建表\n```\nCREATE TABLE table_name (column_name column_type)\n```\n### 插入数据\n```\nINSERT INTO table_name ( field1, field2,...fieldN ) values( value1, value2,...valueN );\n```\n### 更新数据\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n### 删除数据\n```\nDELETE FROM table_name [WHERE Clause]\n```\n### like\naddress 表中获取 domain 字段中以 COM 为结尾的的所有记录\n```\nselect * from address where domain like '%COM';\n```\n### order by (排序)\n```\nselect * from table order by age ASC;\n```\nASC: 升序       DESC:降序\n\n默认为 ASC\n### alert\n| Field | Type    | Null | Key | Default | Extra |\n| ----- | ------- | ---- | --- | ------- | ----- |\n| i     | int(11) | YES  |     | NULL    |       |\n| c     | char(1) | YES  |     | NULL    |       |\n\n```\n alert table leesin  drop i;    删除表的 i 字段\n alert table leesin  aaa i INT; 增加表的 i 字段\n```\n### mysqldump (mysql 外部执行)\n```\nmysqldump -u <user> -h <host> -P <port> -p<passward> <table> > text.sql\n```\n### 导入 DB\n```\nmysql -u <user> -h <host> -P <port> -p<passward> <table> < text.sql\n```\n\n## 2. Postgres\n\n### 备份\n```sh\npg_dumpall -U postgres > /var/lib/postgresql/dump.sql\n```\n\n### 恢复\n```sh\npsql -U postgres -f /var/lib/postgresql/dump.sql\n```\n\n### 删除数据库\n```sh\ndropdb -U postgres postgres\n```\n\n### 新建数据库\n```sh\ncreatedb  -U postgres postgres\n```\n","source":"_posts/linux/Sql-操作.md","raw":"---\ntitle: Sql 操作\ncategory: linux\ndate: 2023-08-28 18:55:08\ntags: sql\ncategories: linux\n---\n{% note primary%}\n\nsql整理\n\n{% endnote %}\n\n## 1. Mysql\n### 删除数据库\n```\ndrop database <数据库名>;\n```\n### 创建表\n```\nCREATE TABLE table_name (column_name column_type)\n```\n### 插入数据\n```\nINSERT INTO table_name ( field1, field2,...fieldN ) values( value1, value2,...valueN );\n```\n### 更新数据\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n### 删除数据\n```\nDELETE FROM table_name [WHERE Clause]\n```\n### like\naddress 表中获取 domain 字段中以 COM 为结尾的的所有记录\n```\nselect * from address where domain like '%COM';\n```\n### order by (排序)\n```\nselect * from table order by age ASC;\n```\nASC: 升序       DESC:降序\n\n默认为 ASC\n### alert\n| Field | Type    | Null | Key | Default | Extra |\n| ----- | ------- | ---- | --- | ------- | ----- |\n| i     | int(11) | YES  |     | NULL    |       |\n| c     | char(1) | YES  |     | NULL    |       |\n\n```\n alert table leesin  drop i;    删除表的 i 字段\n alert table leesin  aaa i INT; 增加表的 i 字段\n```\n### mysqldump (mysql 外部执行)\n```\nmysqldump -u <user> -h <host> -P <port> -p<passward> <table> > text.sql\n```\n### 导入 DB\n```\nmysql -u <user> -h <host> -P <port> -p<passward> <table> < text.sql\n```\n\n## 2. Postgres\n\n### 备份\n```sh\npg_dumpall -U postgres > /var/lib/postgresql/dump.sql\n```\n\n### 恢复\n```sh\npsql -U postgres -f /var/lib/postgresql/dump.sql\n```\n\n### 删除数据库\n```sh\ndropdb -U postgres postgres\n```\n\n### 新建数据库\n```sh\ncreatedb  -U postgres postgres\n```\n","slug":"linux/Sql-操作","published":1,"updated":"2023-08-29T09:27:34.901Z","comments":1,"layout":"post","photos":[],"link":"","_id":"clmo9ls9v0009384wc790db55","content":"<div class=\"note note-primary\">\n            <p>sql整理</p>\n          </div>\n\n<h2><span id=\"1-mysql\">1. Mysql</span></h2><h3><span id=\"删除数据库\">删除数据库</span></h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure>\n<h3><span id=\"创建表\">创建表</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-built_in\">table_name</span> (<span class=\"hljs-built_in\">column_name</span> column_type)<br></code></pre></td></tr></table></figure>\n<h3><span id=\"插入数据\">插入数据</span></h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">INSERT <span class=\"hljs-keyword\">INTO</span> table_name ( field1, field2,<span class=\"hljs-params\">...</span>fieldN ) values( value1, value2,<span class=\"hljs-params\">...</span>valueN );<br></code></pre></td></tr></table></figure>\n<h3><span id=\"更新数据\">更新数据</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">table_name</span> <span class=\"hljs-keyword\">SET</span> field1=<span class=\"hljs-built_in\">new</span>-value1, field2=<span class=\"hljs-built_in\">new</span>-value2 [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3><span id=\"删除数据\">删除数据</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-built_in\">table_name</span> [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3><span id=\"like\">like</span></h3><p>address 表中获取 domain 字段中以 COM 为结尾的的所有记录</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> address <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">domain</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%COM&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3><span id=\"order-by-排序\">order by (排序)</span></h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> age <span class=\"hljs-keyword\">ASC</span>;<br></code></pre></td></tr></table></figure>\n<p>ASC: 升序       DESC:降序</p>\n<p>默认为 ASC</p>\n<h3><span id=\"alert\">alert</span></h3><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Null</th>\n<th>Key</th>\n<th>Default</th>\n<th>Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>int(11)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>char(1)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">alert <span class=\"hljs-selector-tag\">table</span> leesin  drop <span class=\"hljs-selector-tag\">i</span>;    删除表的 <span class=\"hljs-selector-tag\">i</span> 字段<br>alert <span class=\"hljs-selector-tag\">table</span> leesin  aaa <span class=\"hljs-selector-tag\">i</span> INT; 增加表的 <span class=\"hljs-selector-tag\">i</span> 字段<br></code></pre></td></tr></table></figure>\n<h3><span id=\"mysqldump-mysql-外部执行\">mysqldump (mysql 外部执行)</span></h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysqldump -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &gt; text.sql<br></code></pre></td></tr></table></figure>\n<h3><span id=\"导入-db\">导入 DB</span></h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysql -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &lt; text.sql<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-postgres\">2. Postgres</span></h2><h3><span id=\"备份\">备份</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pg_dumpall -U postgres &gt; /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"恢复\">恢复</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">psql -U postgres -f /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"删除数据库\">删除数据库</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dropdb -U postgres postgres<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"新建数据库\">新建数据库</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">createdb  -U postgres postgres<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note note-primary\">\n            <p>sql整理</p>\n          </div>\n\n<h2 id=\"1-Mysql\"><a href=\"#1-Mysql\" class=\"headerlink\" title=\"1. Mysql\"></a>1. Mysql</h2><h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-built_in\">table_name</span> (<span class=\"hljs-built_in\">column_name</span> column_type)<br></code></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">INSERT <span class=\"hljs-keyword\">INTO</span> table_name ( field1, field2,<span class=\"hljs-params\">...</span>fieldN ) values( value1, value2,<span class=\"hljs-params\">...</span>valueN );<br></code></pre></td></tr></table></figure>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">table_name</span> <span class=\"hljs-keyword\">SET</span> field1=<span class=\"hljs-built_in\">new</span>-value1, field2=<span class=\"hljs-built_in\">new</span>-value2 [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-built_in\">table_name</span> [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h3><p>address 表中获取 domain 字段中以 COM 为结尾的的所有记录</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> address <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">domain</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%COM&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"order-by-排序\"><a href=\"#order-by-排序\" class=\"headerlink\" title=\"order by (排序)\"></a>order by (排序)</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> age <span class=\"hljs-keyword\">ASC</span>;<br></code></pre></td></tr></table></figure>\n<p>ASC: 升序       DESC:降序</p>\n<p>默认为 ASC</p>\n<h3 id=\"alert\"><a href=\"#alert\" class=\"headerlink\" title=\"alert\"></a>alert</h3><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Null</th>\n<th>Key</th>\n<th>Default</th>\n<th>Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>int(11)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>char(1)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">alert <span class=\"hljs-selector-tag\">table</span> leesin  drop <span class=\"hljs-selector-tag\">i</span>;    删除表的 <span class=\"hljs-selector-tag\">i</span> 字段<br>alert <span class=\"hljs-selector-tag\">table</span> leesin  aaa <span class=\"hljs-selector-tag\">i</span> INT; 增加表的 <span class=\"hljs-selector-tag\">i</span> 字段<br></code></pre></td></tr></table></figure>\n<h3 id=\"mysqldump-mysql-外部执行\"><a href=\"#mysqldump-mysql-外部执行\" class=\"headerlink\" title=\"mysqldump (mysql 外部执行)\"></a>mysqldump (mysql 外部执行)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysqldump -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &gt; text.sql<br></code></pre></td></tr></table></figure>\n<h3 id=\"导入-DB\"><a href=\"#导入-DB\" class=\"headerlink\" title=\"导入 DB\"></a>导入 DB</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysql -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &lt; text.sql<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Postgres\"><a href=\"#2-Postgres\" class=\"headerlink\" title=\"2. Postgres\"></a>2. Postgres</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pg_dumpall -U postgres &gt; /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">psql -U postgres -f /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据库-1\"><a href=\"#删除数据库-1\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dropdb -U postgres postgres<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"新建数据库\"><a href=\"#新建数据库\" class=\"headerlink\" title=\"新建数据库\"></a>新建数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">createdb  -U postgres postgres<br></code></pre></td></tr></table></figure>\n"},{"layout":"frp 内网穿透","title":"frp 内网穿透","date":"2023-08-19T07:20:37.000Z","updated":"2023-08-23T09:19:05.451Z","_content":"\n{% note primary%}\n\n公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 服务端\n\n/etc/systemd/system/frps.service\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/frp/.frp/frps.ini\n```sh\n[common]\nbind_port = 7000\ndashboard_port = 7500\ntoken = abcdefg\ndashboard_user = xx\ndashboard_pwd = xx\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n\n## 2. 客户端\n\n\n/etc/systemd/system/frpc.service\n\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frpc的安装路径\nExecStart = /root/frp/frpc -c /root/frp/frpc.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/root/frp/frpc.ini\n\n```sh\n[common]\nserver_addr = 100.100.100.100\nserver_port = 7000\ntoken = abcdefg\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n\n[alist]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5244\nremote_port = 55244\n```","source":"_posts/linux/frp-内网穿透.md","raw":"---\nlayout: frp 内网穿透\ntitle: frp 内网穿透\ncategory: linux\ndate: 2023-08-19 15:20:37\nupdated:\ntags: [frp,nas]\n---\n\n{% note primary%}\n\n公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 服务端\n\n/etc/systemd/system/frps.service\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/frp/.frp/frps.ini\n```sh\n[common]\nbind_port = 7000\ndashboard_port = 7500\ntoken = abcdefg\ndashboard_user = xx\ndashboard_pwd = xx\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n\n## 2. 客户端\n\n\n/etc/systemd/system/frpc.service\n\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frpc的安装路径\nExecStart = /root/frp/frpc -c /root/frp/frpc.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/root/frp/frpc.ini\n\n```sh\n[common]\nserver_addr = 100.100.100.100\nserver_port = 7000\ntoken = abcdefg\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n\n[alist]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5244\nremote_port = 55244\n```","slug":"linux/frp-内网穿透","published":1,"comments":1,"photos":[],"link":"","_id":"clmo9ls9w000b384w6te1d5lm","content":"<div class=\"note note-primary\">\n            <p>公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-服务端\">1. 服务端</span></h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frps.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp server<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frps的安装路径</span><br>ExecStart = /root/frp/frps -c /root/frp/frps.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;frp&#x2F;.frp&#x2F;frps.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = abcdefg<br>dashboard_user = xx<br>dashboard_pwd = xx<br>vhost_http_port = 10080<br>vhost_https_port = 10443<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-客户端\">2. 客户端</span></h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frpc.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp client<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frpc的安装路径</span><br>ExecStart = /root/frp/frpc -c /root/frp/frpc.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;root&#x2F;frp&#x2F;frpc.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>server_addr = 100.100.100.100<br>server_port = 7000<br>token = abcdefg<br><br>[ssh]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000<br><br>[alist]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 5244<br>remote_port = 55244<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。</p>\n          </div>","more":"<h2 id=\"1-服务端\"><a href=\"#1-服务端\" class=\"headerlink\" title=\"1. 服务端\"></a>1. 服务端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frps.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp server<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frps的安装路径</span><br>ExecStart = /root/frp/frps -c /root/frp/frps.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;frp&#x2F;.frp&#x2F;frps.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = abcdefg<br>dashboard_user = xx<br>dashboard_pwd = xx<br>vhost_http_port = 10080<br>vhost_https_port = 10443<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-客户端\"><a href=\"#2-客户端\" class=\"headerlink\" title=\"2. 客户端\"></a>2. 客户端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frpc.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp client<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frpc的安装路径</span><br>ExecStart = /root/frp/frpc -c /root/frp/frpc.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;root&#x2F;frp&#x2F;frpc.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>server_addr = 100.100.100.100<br>server_port = 7000<br>token = abcdefg<br><br>[ssh]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000<br><br>[alist]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 5244<br>remote_port = 55244<br></code></pre></td></tr></table></figure>"},{"title":"fzf-搜索神器","date":"2023-08-17T07:12:07.000Z","updated":"2023-08-23T09:19:05.451Z","_content":"{% note primary%}\n\n模糊搜索神器\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 配合history\n```sh\nhistory | fzf | awk '{print $2}' | xargs -r -I {} sh -c \"{}\"\n```\n\n## 2. 搜索到文件后查看内容\n```sh\nls -l | fzf | awk '{print $9}' | xargs -r -I {} sh -c \"cat {}\"\n```\n\n## 3. 查看git提交状态\n```sh\ngit log --oneline | fzf | awk '{print $1}' | xargs -r -I {} git show {}\n```\n","source":"_posts/linux/fzf-搜索神器.md","raw":"---\ntitle: fzf-搜索神器\ncategory: linux\ndate: 2023-08-17 15:12:07\nupdated:\ntags: [linux,fzf]\n---\n{% note primary%}\n\n模糊搜索神器\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 配合history\n```sh\nhistory | fzf | awk '{print $2}' | xargs -r -I {} sh -c \"{}\"\n```\n\n## 2. 搜索到文件后查看内容\n```sh\nls -l | fzf | awk '{print $9}' | xargs -r -I {} sh -c \"cat {}\"\n```\n\n## 3. 查看git提交状态\n```sh\ngit log --oneline | fzf | awk '{print $1}' | xargs -r -I {} git show {}\n```\n","slug":"linux/fzf-搜索神器","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmo9ls9w000d384wh3i4aqi7","content":"<div class=\"note note-primary\">\n            <p>模糊搜索神器</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-配合history\">1. 配合history</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">history</span> | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-搜索到文件后查看内容\">2. 搜索到文件后查看内容</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $9&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;cat &#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-查看git提交状态\">3. 查看git提交状态</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">log</span> --oneline | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -r -I &#123;&#125; git show &#123;&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>模糊搜索神器</p>\n          </div>","more":"<h2 id=\"1-配合history\"><a href=\"#1-配合history\" class=\"headerlink\" title=\"1. 配合history\"></a>1. 配合history</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">history</span> | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-搜索到文件后查看内容\"><a href=\"#2-搜索到文件后查看内容\" class=\"headerlink\" title=\"2. 搜索到文件后查看内容\"></a>2. 搜索到文件后查看内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $9&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;cat &#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-查看git提交状态\"><a href=\"#3-查看git提交状态\" class=\"headerlink\" title=\"3. 查看git提交状态\"></a>3. 查看git提交状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">log</span> --oneline | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -r -I &#123;&#125; git show &#123;&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"nas整理","date":"2023-08-08T08:29:04.000Z","_content":"\n{% note primary%}\n\n目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx\n\n{% endnote %}\n\n<!-- more -->\n\n## 重命名\n```sh\n#!/bin/bash\n\ndir=$1  # 指定目录路径\n\n# 进入目录\ncd \"$dir\" || exit\n\n# 替换文件名中的abcd1至abcd9为abcd01至abcd09\nfor file in *S01E[1-9].*; do\n  new_file=$(echo \"$file\" | sed 's/S01E\\([1-9]\\)/S01E0\\1/')\n  echo $new_file\n  mv \"$file\" \"$new_file\"\ndone\n```\n\n## 备份\n\n### alist脚本\n\n```sh\n#!/bin/bash\n\n# demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 <alist-token>\n\n# 判断参数个数是否为7个\nif [ $# -ne 7 ]; then\n  echo \"Error: Expected 7 arguments.\"\n  echo \"Usage: $0 <filename> <src> <dst> <alist_host> <alist_token>\"\n  exit 1\nfi\n\nFILE_PATH=$1\nFILE_NAME_TAR_GZ=$2\n# 使用awk命令分割字符串并输出最后一个部分\nFILE_NAME=$(echo $FILE_PATH | awk -F'/' '{print $NF}')\nALIST_SRC=$3\nALIST_DST=$4\nALIST_HOST=$5\nALIST_DATA_DIR=$6\nALIST_TOKEN=$7\n\nif [ ! -e $FILE_PATH ]; then\n    echo \"文件不存在\"\n    exit 1\nfi\n\n# 以下是你希望执行的操作，当参数个数为三个时执行\necho \"文件名: $FILE_NAME\"\necho \"打包文件名: $FILE_NAME_TAR_GZ\"\necho \"Alist src: $ALIST_SRC\"\necho \"Alist dst: $ALIST_DST\"\necho \"Alist Host: $ALIST_HOST\"\necho \"Alist Data dir: $ALIST_DATA_DIR\"\necho \"Alist Token: $ALIST_TOKEN\"\n\n# TIME=$(date +\"%Y-%m-%d-%H%M\")\n# echo 当前时间: $TIME\n# FILE_NAME_TAR_GZ=\"${TIME}-${FILE_NAME}.tar.gz\"\n\necho 备份文件名: $FILE_NAME_TAR_GZ\n\necho \"undone\" > /root/tar_status.txt\n\n# tar -czf $/{ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\ntar -cjf ${ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\n\ncurl \"$ALIST_HOST/api/fs/copy\" \\\n  -H 'Accept: application/json, text/plain, */*' \\\n  -H \"Authorization: $ALIST_TOKEN\" \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/json;charset=UTF-8' \\\n  -H \"Origin: $ALIST_HOST\" \\\n  -H \"Referer: $ALIST_HOST/local/data\" \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-origin' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' \\\n  -H 'sec-ch-ua: \"Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"115\", \"Chromium\";v=\"115\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  --data-raw '{\"src_dir\":\"'\"$ALIST_SRC\"'\",\"dst_dir\":\"'\"$ALIST_DST\"'\",\"names\":[\"'\"$FILE_NAME_TAR_GZ\"'\"]}' \\\n  --compressed\n\nsleep 10\necho \"done\" > /root/tar_status.txt\n```\n\n### 压缩\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/robfig/cron\"\n\t\"gopkg.in/yaml.v2\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype Config struct {\n\tAlist struct {\n\t\tHost    string `yaml:\"host\"`\n\t\tDataDir string `yaml:\"data_dir\"`\n\t\tToken   string `yaml:\"token\"`\n\t} `yaml:\"alist\"`\n\n\tCronTime         string `yaml:\"cron_time\"`\n\tTarShellFilePath string `yaml:\"tar_shell_filepath\"`\n\n\tClouds []struct {\n\t\tName      string   `yaml:\"name\"`\n\t\tBackup    bool     `yaml:\"backup\"`\n\t\tAlistSrc  string   `yaml:\"alist_src\"`\n\t\tAlistDst  string   `yaml:\"alist_dst\"`\n\t\tFilePaths []string `yaml:\"filepaths\"`\n\t} `yaml:\"clouds\"`\n}\n\ntype RequestAlistUndone struct {\n\tCode    int    `json:\"code\"`\n\tMessage string `json:\"message\"`\n\tData    []struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"data\"`\n}\n\nfunc main() {\n\tc := initConfig()\n\n\tklog.Info(\"checking... \")\n\tc.Check()\n\n\tvar tarfilepath []string\n\ttarfilename := make(map[string]string)\n\n\tbackup := func() {\n\t\tklog.Info(\"start backuping... \")\n\t\tfor _, cloud := range c.Clouds {\n\t\t\tif !cloud.Backup {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, filepath := range cloud.FilePaths {\n\t\t\t\tstartTime := time.Now()\n\t\t\t\tvar tarfile string\n\t\t\t\tif tarfilename[filepath] == \"\" {\n\t\t\t\t\ttarfile = getTarfile(filepath)\n\t\t\t\t} else {\n\t\t\t\t\ttarfile = tarfilename[filepath]\n\t\t\t\t}\n\n\t\t\t\tklog.Infof(\"tarfile is %v\", tarfile)\n\t\t\t\tif err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != nil {\n\t\t\t\t\tklog.Errorf(\"[%v]: backup %v failed, %v\", cloud.Name, tarfile, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// wait alist task done\n\t\t\t\tfor {\n\t\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\t\tif c.TaskDone() && c.TarDone() {\n\t\t\t\t\t\tklog.Infof(\"[%v]: backup %v success %v\\n\", cloud.Name, tarfile, time.Since(startTime))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttarfilepath = append(tarfilepath, path.Join(c.Alist.DataDir, tarfile))\n\t\t\t\ttarfilename[filepath] = tarfile\n\t\t\t}\n\t\t}\n\t\tfmt.Printf(\"\\n\")\n\t}\n\n\tremove := func() {\n\t\tfor _, tarfile := range tarfilepath {\n\t\t\tif err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != nil {\n\t\t\t\tklog.Warningf(\"delete %v failed\", tarfile)\n\t\t\t}\n\t\t}\n\t\t// reset\n\t\ttarfilepath = []string{}\n\t\ttarfilename = make(map[string]string)\n\t}\n\n\tcronjob := cron.New()\n\n\tcronjob.AddFunc(c.CronTime, func() {\n\t\tif c.TaskDone() {\n\t\t\tbackup()\n\t\t\tremove()\n\t\t}\n\t})\n\n\tcronjob.Start()\n\n\tstopCh := make(chan struct{})\n\t<-stopCh\n}\n\nfunc run(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken string) error {\n\tklog.Info([]string{\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken})\n\n\tcmd := exec.Command(\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)\n\t_, err := cmd.Output()\n\treturn err\n}\n\nfunc (c *Config) Check() {\n\tif c.Alist.Host == \"\" {\n\t\tpanic(\"empty alist host\")\n\t}\n\n\tif c.Alist.DataDir == \"\" {\n\t\tpanic(\"empty alist data dir\")\n\t}\n\n\tif c.Alist.Token == \"\" {\n\t\tpanic(\"empty alist token\")\n\t}\n\tif c.CronTime == \"\" {\n\t\tpanic(\"empty cron time\")\n\t}\n\n\tfor _, cloud := range c.Clouds {\n\t\tif !cloud.Backup {\n\t\t\tcontinue\n\t\t}\n\t\tif cloud.AlistSrc == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v src\", cloud.Name))\n\t\t}\n\t\tif cloud.AlistDst == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v dst\", cloud.Name))\n\t\t}\n\n\t\tfor _, v := range cloud.FilePaths {\n\t\t\t_, err := os.Stat(v)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tpanic(fmt.Sprintf(\"%v %v file not exist\", cloud.Name, v))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc initConfig() *Config {\n\tyamlFile, err := os.ReadFile(\"./config.yaml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconfig := Config{}\n\tif err := yaml.Unmarshal(yamlFile, &config); err != nil {\n\t\tpanic(err)\n\t}\n\treturn &config\n}\n\nfunc (c *Config) TarDone() bool {\n\tb, err := os.ReadFile(\"/root/tar_status.txt\")\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn string(b) == \"done\"\n}\n\nfunc (c *Config) TaskDone() bool {\n\treq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%v/api/admin/task/copy/undone\", c.Alist.Host), nil)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treq.Header.Set(\"Authorization\", c.Alist.Token)\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\n\tresponse := RequestAlistUndone{}\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn response.Code == 200 && len(response.Data) == 0\n}\n\nfunc getTarfile(filepath string) string {\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tt := time.Now().Local().Format(\"2006-01-02_1504\")\n\tfilename := strings.Split(filepath, \"/\")[len(strings.Split(filepath, \"/\"))-1]\n\t// return fmt.Sprintf(\"%v-%v.tar.gz\", t, filename)\n\treturn fmt.Sprintf(\"%v-%v.tar.bz2\", t, filename)\n}\n```\n\n### 配置\n\n```yaml\nalist:\n  data_dir: \"/alist-data\"\n  host: \"http://192.xxx.187.61:5244\"\n  token: \"alist-e5630ef4-5fa2-4264-a256-323900236728\"\n\ncron_time: \"0 40 18 * *\"\ntar_shell_filepath: \"/root/tar.sh\"\n\nclouds:\n  - name: 阿里云盘\n    backup: false\n    alist_src: \"/本地/opt/alist/data\" # 本地local盘\n    alist_dst: \"/阿里云盘/数据冷备\"     # 本地阿里盘\n    filepaths:                       # 备份哪些文件\n    - \"/Users/Desktop/github/blog\"\n    - \"/Desktop/github/k3s\"\n  - name: 百度网盘\n    backup: true\n    alist_src: \"/本地/opt/alist/data\"\n    alist_dst: \"/百度网盘/数据冷备\"\n    filepaths:\n    - \"/data/歌曲\"\n```","source":"_posts/linux/nas整理.md","raw":"---\nlayout: linux\ntitle: nas整理\ndate: 2023-08-08 16:29:04\ntags: [shell,nas,alist]\ncategories: linux\n---\n\n{% note primary%}\n\n目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx\n\n{% endnote %}\n\n<!-- more -->\n\n## 重命名\n```sh\n#!/bin/bash\n\ndir=$1  # 指定目录路径\n\n# 进入目录\ncd \"$dir\" || exit\n\n# 替换文件名中的abcd1至abcd9为abcd01至abcd09\nfor file in *S01E[1-9].*; do\n  new_file=$(echo \"$file\" | sed 's/S01E\\([1-9]\\)/S01E0\\1/')\n  echo $new_file\n  mv \"$file\" \"$new_file\"\ndone\n```\n\n## 备份\n\n### alist脚本\n\n```sh\n#!/bin/bash\n\n# demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 <alist-token>\n\n# 判断参数个数是否为7个\nif [ $# -ne 7 ]; then\n  echo \"Error: Expected 7 arguments.\"\n  echo \"Usage: $0 <filename> <src> <dst> <alist_host> <alist_token>\"\n  exit 1\nfi\n\nFILE_PATH=$1\nFILE_NAME_TAR_GZ=$2\n# 使用awk命令分割字符串并输出最后一个部分\nFILE_NAME=$(echo $FILE_PATH | awk -F'/' '{print $NF}')\nALIST_SRC=$3\nALIST_DST=$4\nALIST_HOST=$5\nALIST_DATA_DIR=$6\nALIST_TOKEN=$7\n\nif [ ! -e $FILE_PATH ]; then\n    echo \"文件不存在\"\n    exit 1\nfi\n\n# 以下是你希望执行的操作，当参数个数为三个时执行\necho \"文件名: $FILE_NAME\"\necho \"打包文件名: $FILE_NAME_TAR_GZ\"\necho \"Alist src: $ALIST_SRC\"\necho \"Alist dst: $ALIST_DST\"\necho \"Alist Host: $ALIST_HOST\"\necho \"Alist Data dir: $ALIST_DATA_DIR\"\necho \"Alist Token: $ALIST_TOKEN\"\n\n# TIME=$(date +\"%Y-%m-%d-%H%M\")\n# echo 当前时间: $TIME\n# FILE_NAME_TAR_GZ=\"${TIME}-${FILE_NAME}.tar.gz\"\n\necho 备份文件名: $FILE_NAME_TAR_GZ\n\necho \"undone\" > /root/tar_status.txt\n\n# tar -czf $/{ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\ntar -cjf ${ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\n\ncurl \"$ALIST_HOST/api/fs/copy\" \\\n  -H 'Accept: application/json, text/plain, */*' \\\n  -H \"Authorization: $ALIST_TOKEN\" \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/json;charset=UTF-8' \\\n  -H \"Origin: $ALIST_HOST\" \\\n  -H \"Referer: $ALIST_HOST/local/data\" \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-origin' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' \\\n  -H 'sec-ch-ua: \"Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"115\", \"Chromium\";v=\"115\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  --data-raw '{\"src_dir\":\"'\"$ALIST_SRC\"'\",\"dst_dir\":\"'\"$ALIST_DST\"'\",\"names\":[\"'\"$FILE_NAME_TAR_GZ\"'\"]}' \\\n  --compressed\n\nsleep 10\necho \"done\" > /root/tar_status.txt\n```\n\n### 压缩\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/robfig/cron\"\n\t\"gopkg.in/yaml.v2\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype Config struct {\n\tAlist struct {\n\t\tHost    string `yaml:\"host\"`\n\t\tDataDir string `yaml:\"data_dir\"`\n\t\tToken   string `yaml:\"token\"`\n\t} `yaml:\"alist\"`\n\n\tCronTime         string `yaml:\"cron_time\"`\n\tTarShellFilePath string `yaml:\"tar_shell_filepath\"`\n\n\tClouds []struct {\n\t\tName      string   `yaml:\"name\"`\n\t\tBackup    bool     `yaml:\"backup\"`\n\t\tAlistSrc  string   `yaml:\"alist_src\"`\n\t\tAlistDst  string   `yaml:\"alist_dst\"`\n\t\tFilePaths []string `yaml:\"filepaths\"`\n\t} `yaml:\"clouds\"`\n}\n\ntype RequestAlistUndone struct {\n\tCode    int    `json:\"code\"`\n\tMessage string `json:\"message\"`\n\tData    []struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"data\"`\n}\n\nfunc main() {\n\tc := initConfig()\n\n\tklog.Info(\"checking... \")\n\tc.Check()\n\n\tvar tarfilepath []string\n\ttarfilename := make(map[string]string)\n\n\tbackup := func() {\n\t\tklog.Info(\"start backuping... \")\n\t\tfor _, cloud := range c.Clouds {\n\t\t\tif !cloud.Backup {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, filepath := range cloud.FilePaths {\n\t\t\t\tstartTime := time.Now()\n\t\t\t\tvar tarfile string\n\t\t\t\tif tarfilename[filepath] == \"\" {\n\t\t\t\t\ttarfile = getTarfile(filepath)\n\t\t\t\t} else {\n\t\t\t\t\ttarfile = tarfilename[filepath]\n\t\t\t\t}\n\n\t\t\t\tklog.Infof(\"tarfile is %v\", tarfile)\n\t\t\t\tif err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != nil {\n\t\t\t\t\tklog.Errorf(\"[%v]: backup %v failed, %v\", cloud.Name, tarfile, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// wait alist task done\n\t\t\t\tfor {\n\t\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\t\tif c.TaskDone() && c.TarDone() {\n\t\t\t\t\t\tklog.Infof(\"[%v]: backup %v success %v\\n\", cloud.Name, tarfile, time.Since(startTime))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttarfilepath = append(tarfilepath, path.Join(c.Alist.DataDir, tarfile))\n\t\t\t\ttarfilename[filepath] = tarfile\n\t\t\t}\n\t\t}\n\t\tfmt.Printf(\"\\n\")\n\t}\n\n\tremove := func() {\n\t\tfor _, tarfile := range tarfilepath {\n\t\t\tif err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != nil {\n\t\t\t\tklog.Warningf(\"delete %v failed\", tarfile)\n\t\t\t}\n\t\t}\n\t\t// reset\n\t\ttarfilepath = []string{}\n\t\ttarfilename = make(map[string]string)\n\t}\n\n\tcronjob := cron.New()\n\n\tcronjob.AddFunc(c.CronTime, func() {\n\t\tif c.TaskDone() {\n\t\t\tbackup()\n\t\t\tremove()\n\t\t}\n\t})\n\n\tcronjob.Start()\n\n\tstopCh := make(chan struct{})\n\t<-stopCh\n}\n\nfunc run(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken string) error {\n\tklog.Info([]string{\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken})\n\n\tcmd := exec.Command(\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)\n\t_, err := cmd.Output()\n\treturn err\n}\n\nfunc (c *Config) Check() {\n\tif c.Alist.Host == \"\" {\n\t\tpanic(\"empty alist host\")\n\t}\n\n\tif c.Alist.DataDir == \"\" {\n\t\tpanic(\"empty alist data dir\")\n\t}\n\n\tif c.Alist.Token == \"\" {\n\t\tpanic(\"empty alist token\")\n\t}\n\tif c.CronTime == \"\" {\n\t\tpanic(\"empty cron time\")\n\t}\n\n\tfor _, cloud := range c.Clouds {\n\t\tif !cloud.Backup {\n\t\t\tcontinue\n\t\t}\n\t\tif cloud.AlistSrc == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v src\", cloud.Name))\n\t\t}\n\t\tif cloud.AlistDst == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v dst\", cloud.Name))\n\t\t}\n\n\t\tfor _, v := range cloud.FilePaths {\n\t\t\t_, err := os.Stat(v)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tpanic(fmt.Sprintf(\"%v %v file not exist\", cloud.Name, v))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc initConfig() *Config {\n\tyamlFile, err := os.ReadFile(\"./config.yaml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconfig := Config{}\n\tif err := yaml.Unmarshal(yamlFile, &config); err != nil {\n\t\tpanic(err)\n\t}\n\treturn &config\n}\n\nfunc (c *Config) TarDone() bool {\n\tb, err := os.ReadFile(\"/root/tar_status.txt\")\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn string(b) == \"done\"\n}\n\nfunc (c *Config) TaskDone() bool {\n\treq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%v/api/admin/task/copy/undone\", c.Alist.Host), nil)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treq.Header.Set(\"Authorization\", c.Alist.Token)\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\n\tresponse := RequestAlistUndone{}\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn response.Code == 200 && len(response.Data) == 0\n}\n\nfunc getTarfile(filepath string) string {\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tt := time.Now().Local().Format(\"2006-01-02_1504\")\n\tfilename := strings.Split(filepath, \"/\")[len(strings.Split(filepath, \"/\"))-1]\n\t// return fmt.Sprintf(\"%v-%v.tar.gz\", t, filename)\n\treturn fmt.Sprintf(\"%v-%v.tar.bz2\", t, filename)\n}\n```\n\n### 配置\n\n```yaml\nalist:\n  data_dir: \"/alist-data\"\n  host: \"http://192.xxx.187.61:5244\"\n  token: \"alist-e5630ef4-5fa2-4264-a256-323900236728\"\n\ncron_time: \"0 40 18 * *\"\ntar_shell_filepath: \"/root/tar.sh\"\n\nclouds:\n  - name: 阿里云盘\n    backup: false\n    alist_src: \"/本地/opt/alist/data\" # 本地local盘\n    alist_dst: \"/阿里云盘/数据冷备\"     # 本地阿里盘\n    filepaths:                       # 备份哪些文件\n    - \"/Users/Desktop/github/blog\"\n    - \"/Desktop/github/k3s\"\n  - name: 百度网盘\n    backup: true\n    alist_src: \"/本地/opt/alist/data\"\n    alist_dst: \"/百度网盘/数据冷备\"\n    filepaths:\n    - \"/data/歌曲\"\n```","slug":"linux/nas整理","published":1,"updated":"2023-08-24T08:58:04.713Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9x000g384w7qmf1s0d","content":"<div class=\"note note-primary\">\n            <p>目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"重命名\">重命名</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-built_in\">dir</span>=<span class=\"hljs-variable\">$1</span>  <span class=\"hljs-comment\"># 指定目录路径</span><br><br><span class=\"hljs-comment\"># 进入目录</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dir</span>&quot;</span> || <span class=\"hljs-built_in\">exit</span><br><br><span class=\"hljs-comment\"># 替换文件名中的abcd1至abcd9为abcd01至abcd09</span><br><span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> *S01E[1-9].*; <span class=\"hljs-keyword\">do</span><br>  new_file=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/S01E\\([1-9]\\)/S01E0\\1/&#x27;</span>)<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$new_file</span><br>  <span class=\"hljs-built_in\">mv</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$new_file</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"备份\">备份</span></h2><h3><span id=\"alist脚本\">alist脚本</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 &lt;alist-token&gt;</span><br><br><span class=\"hljs-comment\"># 判断参数个数是否为7个</span><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$#</span> -ne 7 ]; <span class=\"hljs-keyword\">then</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Error: Expected 7 arguments.&quot;</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Usage: <span class=\"hljs-variable\">$0</span> &lt;filename&gt; &lt;src&gt; &lt;dst&gt; &lt;alist_host&gt; &lt;alist_token&gt;&quot;</span><br>  <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br>FILE_PATH=<span class=\"hljs-variable\">$1</span><br>FILE_NAME_TAR_GZ=<span class=\"hljs-variable\">$2</span><br><span class=\"hljs-comment\"># 使用awk命令分割字符串并输出最后一个部分</span><br>FILE_NAME=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FILE_PATH</span> | awk -F<span class=\"hljs-string\">&#x27;/&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $NF&#125;&#x27;</span>)<br>ALIST_SRC=<span class=\"hljs-variable\">$3</span><br>ALIST_DST=<span class=\"hljs-variable\">$4</span><br>ALIST_HOST=<span class=\"hljs-variable\">$5</span><br>ALIST_DATA_DIR=<span class=\"hljs-variable\">$6</span><br>ALIST_TOKEN=<span class=\"hljs-variable\">$7</span><br><br><span class=\"hljs-keyword\">if</span> [ ! -e <span class=\"hljs-variable\">$FILE_PATH</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件不存在&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br><span class=\"hljs-comment\"># 以下是你希望执行的操作，当参数个数为三个时执行</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件名: <span class=\"hljs-variable\">$FILE_NAME</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;打包文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist src: <span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist dst: <span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Host: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Data dir: <span class=\"hljs-variable\">$ALIST_DATA_DIR</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Token: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span><br><br><span class=\"hljs-comment\"># TIME=$(date +&quot;%Y-%m-%d-%H%M&quot;)</span><br><span class=\"hljs-comment\"># echo 当前时间: $TIME</span><br><span class=\"hljs-comment\"># FILE_NAME_TAR_GZ=&quot;$&#123;TIME&#125;-$&#123;FILE_NAME&#125;.tar.gz&quot;</span><br><br><span class=\"hljs-built_in\">echo</span> 备份文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span><br><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;undone&quot;</span> &gt; /root/tar_status.txt<br><br><span class=\"hljs-comment\"># tar -czf $/&#123;ALIST_DATA_DIR&#125;/$&#123;FILE_NAME_TAR_GZ&#125; $FILE_PATH</span><br>tar -cjf <span class=\"hljs-variable\">$&#123;ALIST_DATA_DIR&#125;</span>/<span class=\"hljs-variable\">$&#123;FILE_NAME_TAR_GZ&#125;</span> <span class=\"hljs-variable\">$FILE_PATH</span><br><br>curl <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_HOST</span>/api/fs/copy&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Accept: application/json, text/plain, */*&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Authorization: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Connection: keep-alive&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Content-Type: application/json;charset=UTF-8&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Origin: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Referer: <span class=\"hljs-variable\">$ALIST_HOST</span>/local/data&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Dest: empty&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Mode: cors&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Site: same-origin&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua: &quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \\<br>  --data-raw <span class=\"hljs-string\">&#x27;&#123;&quot;src_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dst_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;names&quot;:[&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;]&#125;&#x27;</span> \\<br>  --compressed<br><br><span class=\"hljs-built_in\">sleep</span> 10<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;done&quot;</span> &gt; /root/tar_status.txt<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"压缩\">压缩</span></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;encoding/json&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;os/exec&quot;</span><br>\t<span class=\"hljs-string\">&quot;path&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/robfig/cron&quot;</span><br>\t<span class=\"hljs-string\">&quot;gopkg.in/yaml.v2&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/klog/v2&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Config <span class=\"hljs-keyword\">struct</span> &#123;<br>\tAlist <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tHost    <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;host&quot;`</span><br>\t\tDataDir <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;data_dir&quot;`</span><br>\t\tToken   <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;token&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;alist&quot;`</span><br><br>\tCronTime         <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;cron_time&quot;`</span><br>\tTarShellFilePath <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;tar_shell_filepath&quot;`</span><br><br>\tClouds []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName      <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;name&quot;`</span><br>\t\tBackup    <span class=\"hljs-type\">bool</span>     <span class=\"hljs-string\">`yaml:&quot;backup&quot;`</span><br>\t\tAlistSrc  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_src&quot;`</span><br>\t\tAlistDst  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_dst&quot;`</span><br>\t\tFilePaths []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;filepaths&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;clouds&quot;`</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> RequestAlistUndone <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode    <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\tMessage <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;message&quot;`</span><br>\tData    []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`json:&quot;data&quot;`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tc := initConfig()<br><br>\tklog.Info(<span class=\"hljs-string\">&quot;checking... &quot;</span>)<br>\tc.Check()<br><br>\t<span class=\"hljs-keyword\">var</span> tarfilepath []<span class=\"hljs-type\">string</span><br>\ttarfilename := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\tbackup := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tklog.Info(<span class=\"hljs-string\">&quot;start backuping... &quot;</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, filepath := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t\tstartTime := time.Now()<br>\t\t\t\t<span class=\"hljs-keyword\">var</span> tarfile <span class=\"hljs-type\">string</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> tarfilename[filepath] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\t\ttarfile = getTarfile(filepath)<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\ttarfile = tarfilename[filepath]<br>\t\t\t\t&#125;<br><br>\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;tarfile is %v&quot;</span>, tarfile)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tklog.Errorf(<span class=\"hljs-string\">&quot;[%v]: backup %v failed, %v&quot;</span>, cloud.Name, tarfile, err)<br>\t\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t\t&#125;<br><br>\t\t\t\t<span class=\"hljs-comment\">// wait alist task done</span><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t\t\ttime.Sleep(<span class=\"hljs-number\">5</span> * time.Second)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &amp;&amp; c.TarDone() &#123;<br>\t\t\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;[%v]: backup %v success %v\\n&quot;</span>, cloud.Name, tarfile, time.Since(startTime))<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\ttarfilepath = <span class=\"hljs-built_in\">append</span>(tarfilepath, path.Join(c.Alist.DataDir, tarfile))<br>\t\t\t\ttarfilename[filepath] = tarfile<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>)<br>\t&#125;<br><br>\tremove := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tarfile := <span class=\"hljs-keyword\">range</span> tarfilepath &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tklog.Warningf(<span class=\"hljs-string\">&quot;delete %v failed&quot;</span>, tarfile)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// reset</span><br>\t\ttarfilepath = []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\t\ttarfilename = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>\t&#125;<br><br>\tcronjob := cron.New()<br><br>\tcronjob.AddFunc(c.CronTime, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &#123;<br>\t\t\tbackup()<br>\t\t\tremove()<br>\t\t&#125;<br>\t&#125;)<br><br>\tcronjob.Start()<br><br>\tstopCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&lt;-stopCh<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tklog.Info([]<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken&#125;)<br><br>\tcmd := exec.Command(<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)<br>\t_, err := cmd.Output()<br>\t<span class=\"hljs-keyword\">return</span> err<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> Check() &#123;<br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Host == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist host&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.DataDir == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist data dir&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Token == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist token&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> c.CronTime == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty cron time&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistSrc == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v src&quot;</span>, cloud.Name))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistDst == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v dst&quot;</span>, cloud.Name))<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t_, err := os.Stat(v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> os.IsNotExist(err) &#123;<br>\t\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v %v file not exist&quot;</span>, cloud.Name, v))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initConfig</span><span class=\"hljs-params\">()</span></span> *Config &#123;<br>\tyamlFile, err := os.ReadFile(<span class=\"hljs-string\">&quot;./config.yaml&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tconfig := Config&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := yaml.Unmarshal(yamlFile, &amp;config); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;config<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TarDone() <span class=\"hljs-type\">bool</span> &#123;<br>\tb, err := os.ReadFile(<span class=\"hljs-string\">&quot;/root/tar_status.txt&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(b) == <span class=\"hljs-string\">&quot;done&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TaskDone() <span class=\"hljs-type\">bool</span> &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, fmt.Sprintf(<span class=\"hljs-string\">&quot;%v/api/admin/task/copy/undone&quot;</span>, c.Alist.Host), <span class=\"hljs-literal\">nil</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\treq.Header.Set(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, c.Alist.Token)<br><br>\tresp, err := http.DefaultClient.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br><br>\tbody, err := io.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tresponse := RequestAlistUndone&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := json.Unmarshal(body, &amp;response); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> response.Code == <span class=\"hljs-number\">200</span> &amp;&amp; <span class=\"hljs-built_in\">len</span>(response.Data) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getTarfile</span><span class=\"hljs-params\">(filepath <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\ttimelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\ttime.Local = timelocal<br>\tt := time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02_1504&quot;</span>)<br>\tfilename := strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>)[<span class=\"hljs-built_in\">len</span>(strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>))<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-comment\">// return fmt.Sprintf(&quot;%v-%v.tar.gz&quot;, t, filename)</span><br>\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;%v-%v.tar.bz2&quot;</span>, t, filename)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"配置\">配置</span></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">alist:</span><br>  <span class=\"hljs-attr\">data_dir:</span> <span class=\"hljs-string\">&quot;/alist-data&quot;</span><br>  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">&quot;http://192.xxx.187.61:5244&quot;</span><br>  <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">&quot;alist-e5630ef4-5fa2-4264-a256-323900236728&quot;</span><br><br><span class=\"hljs-attr\">cron_time:</span> <span class=\"hljs-string\">&quot;0 40 18 * *&quot;</span><br><span class=\"hljs-attr\">tar_shell_filepath:</span> <span class=\"hljs-string\">&quot;/root/tar.sh&quot;</span><br><br><span class=\"hljs-attr\">clouds:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">阿里云盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span> <span class=\"hljs-comment\"># 本地local盘</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/阿里云盘/数据冷备&quot;</span>     <span class=\"hljs-comment\"># 本地阿里盘</span><br>    <span class=\"hljs-attr\">filepaths:</span>                       <span class=\"hljs-comment\"># 备份哪些文件</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Users/Desktop/github/blog&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Desktop/github/k3s&quot;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">百度网盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/百度网盘/数据冷备&quot;</span><br>    <span class=\"hljs-attr\">filepaths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/data/歌曲&quot;</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx</p>\n          </div>","more":"<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-built_in\">dir</span>=<span class=\"hljs-variable\">$1</span>  <span class=\"hljs-comment\"># 指定目录路径</span><br><br><span class=\"hljs-comment\"># 进入目录</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dir</span>&quot;</span> || <span class=\"hljs-built_in\">exit</span><br><br><span class=\"hljs-comment\"># 替换文件名中的abcd1至abcd9为abcd01至abcd09</span><br><span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> *S01E[1-9].*; <span class=\"hljs-keyword\">do</span><br>  new_file=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/S01E\\([1-9]\\)/S01E0\\1/&#x27;</span>)<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$new_file</span><br>  <span class=\"hljs-built_in\">mv</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$new_file</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h3 id=\"alist脚本\"><a href=\"#alist脚本\" class=\"headerlink\" title=\"alist脚本\"></a>alist脚本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 &lt;alist-token&gt;</span><br><br><span class=\"hljs-comment\"># 判断参数个数是否为7个</span><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$#</span> -ne 7 ]; <span class=\"hljs-keyword\">then</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Error: Expected 7 arguments.&quot;</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Usage: <span class=\"hljs-variable\">$0</span> &lt;filename&gt; &lt;src&gt; &lt;dst&gt; &lt;alist_host&gt; &lt;alist_token&gt;&quot;</span><br>  <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br>FILE_PATH=<span class=\"hljs-variable\">$1</span><br>FILE_NAME_TAR_GZ=<span class=\"hljs-variable\">$2</span><br><span class=\"hljs-comment\"># 使用awk命令分割字符串并输出最后一个部分</span><br>FILE_NAME=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FILE_PATH</span> | awk -F<span class=\"hljs-string\">&#x27;/&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $NF&#125;&#x27;</span>)<br>ALIST_SRC=<span class=\"hljs-variable\">$3</span><br>ALIST_DST=<span class=\"hljs-variable\">$4</span><br>ALIST_HOST=<span class=\"hljs-variable\">$5</span><br>ALIST_DATA_DIR=<span class=\"hljs-variable\">$6</span><br>ALIST_TOKEN=<span class=\"hljs-variable\">$7</span><br><br><span class=\"hljs-keyword\">if</span> [ ! -e <span class=\"hljs-variable\">$FILE_PATH</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件不存在&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br><span class=\"hljs-comment\"># 以下是你希望执行的操作，当参数个数为三个时执行</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件名: <span class=\"hljs-variable\">$FILE_NAME</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;打包文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist src: <span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist dst: <span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Host: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Data dir: <span class=\"hljs-variable\">$ALIST_DATA_DIR</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Token: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span><br><br><span class=\"hljs-comment\"># TIME=$(date +&quot;%Y-%m-%d-%H%M&quot;)</span><br><span class=\"hljs-comment\"># echo 当前时间: $TIME</span><br><span class=\"hljs-comment\"># FILE_NAME_TAR_GZ=&quot;$&#123;TIME&#125;-$&#123;FILE_NAME&#125;.tar.gz&quot;</span><br><br><span class=\"hljs-built_in\">echo</span> 备份文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span><br><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;undone&quot;</span> &gt; /root/tar_status.txt<br><br><span class=\"hljs-comment\"># tar -czf $/&#123;ALIST_DATA_DIR&#125;/$&#123;FILE_NAME_TAR_GZ&#125; $FILE_PATH</span><br>tar -cjf <span class=\"hljs-variable\">$&#123;ALIST_DATA_DIR&#125;</span>/<span class=\"hljs-variable\">$&#123;FILE_NAME_TAR_GZ&#125;</span> <span class=\"hljs-variable\">$FILE_PATH</span><br><br>curl <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_HOST</span>/api/fs/copy&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Accept: application/json, text/plain, */*&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Authorization: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Connection: keep-alive&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Content-Type: application/json;charset=UTF-8&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Origin: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Referer: <span class=\"hljs-variable\">$ALIST_HOST</span>/local/data&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Dest: empty&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Mode: cors&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Site: same-origin&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua: &quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \\<br>  --data-raw <span class=\"hljs-string\">&#x27;&#123;&quot;src_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dst_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;names&quot;:[&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;]&#125;&#x27;</span> \\<br>  --compressed<br><br><span class=\"hljs-built_in\">sleep</span> 10<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;done&quot;</span> &gt; /root/tar_status.txt<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;encoding/json&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;os/exec&quot;</span><br>\t<span class=\"hljs-string\">&quot;path&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/robfig/cron&quot;</span><br>\t<span class=\"hljs-string\">&quot;gopkg.in/yaml.v2&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/klog/v2&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Config <span class=\"hljs-keyword\">struct</span> &#123;<br>\tAlist <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tHost    <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;host&quot;`</span><br>\t\tDataDir <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;data_dir&quot;`</span><br>\t\tToken   <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;token&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;alist&quot;`</span><br><br>\tCronTime         <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;cron_time&quot;`</span><br>\tTarShellFilePath <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;tar_shell_filepath&quot;`</span><br><br>\tClouds []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName      <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;name&quot;`</span><br>\t\tBackup    <span class=\"hljs-type\">bool</span>     <span class=\"hljs-string\">`yaml:&quot;backup&quot;`</span><br>\t\tAlistSrc  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_src&quot;`</span><br>\t\tAlistDst  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_dst&quot;`</span><br>\t\tFilePaths []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;filepaths&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;clouds&quot;`</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> RequestAlistUndone <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode    <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\tMessage <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;message&quot;`</span><br>\tData    []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`json:&quot;data&quot;`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tc := initConfig()<br><br>\tklog.Info(<span class=\"hljs-string\">&quot;checking... &quot;</span>)<br>\tc.Check()<br><br>\t<span class=\"hljs-keyword\">var</span> tarfilepath []<span class=\"hljs-type\">string</span><br>\ttarfilename := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\tbackup := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tklog.Info(<span class=\"hljs-string\">&quot;start backuping... &quot;</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, filepath := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t\tstartTime := time.Now()<br>\t\t\t\t<span class=\"hljs-keyword\">var</span> tarfile <span class=\"hljs-type\">string</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> tarfilename[filepath] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\t\ttarfile = getTarfile(filepath)<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\ttarfile = tarfilename[filepath]<br>\t\t\t\t&#125;<br><br>\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;tarfile is %v&quot;</span>, tarfile)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tklog.Errorf(<span class=\"hljs-string\">&quot;[%v]: backup %v failed, %v&quot;</span>, cloud.Name, tarfile, err)<br>\t\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t\t&#125;<br><br>\t\t\t\t<span class=\"hljs-comment\">// wait alist task done</span><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t\t\ttime.Sleep(<span class=\"hljs-number\">5</span> * time.Second)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &amp;&amp; c.TarDone() &#123;<br>\t\t\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;[%v]: backup %v success %v\\n&quot;</span>, cloud.Name, tarfile, time.Since(startTime))<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\ttarfilepath = <span class=\"hljs-built_in\">append</span>(tarfilepath, path.Join(c.Alist.DataDir, tarfile))<br>\t\t\t\ttarfilename[filepath] = tarfile<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>)<br>\t&#125;<br><br>\tremove := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tarfile := <span class=\"hljs-keyword\">range</span> tarfilepath &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tklog.Warningf(<span class=\"hljs-string\">&quot;delete %v failed&quot;</span>, tarfile)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// reset</span><br>\t\ttarfilepath = []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\t\ttarfilename = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>\t&#125;<br><br>\tcronjob := cron.New()<br><br>\tcronjob.AddFunc(c.CronTime, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &#123;<br>\t\t\tbackup()<br>\t\t\tremove()<br>\t\t&#125;<br>\t&#125;)<br><br>\tcronjob.Start()<br><br>\tstopCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&lt;-stopCh<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tklog.Info([]<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken&#125;)<br><br>\tcmd := exec.Command(<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)<br>\t_, err := cmd.Output()<br>\t<span class=\"hljs-keyword\">return</span> err<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> Check() &#123;<br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Host == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist host&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.DataDir == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist data dir&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Token == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist token&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> c.CronTime == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty cron time&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistSrc == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v src&quot;</span>, cloud.Name))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistDst == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v dst&quot;</span>, cloud.Name))<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t_, err := os.Stat(v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> os.IsNotExist(err) &#123;<br>\t\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v %v file not exist&quot;</span>, cloud.Name, v))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initConfig</span><span class=\"hljs-params\">()</span></span> *Config &#123;<br>\tyamlFile, err := os.ReadFile(<span class=\"hljs-string\">&quot;./config.yaml&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tconfig := Config&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := yaml.Unmarshal(yamlFile, &amp;config); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;config<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TarDone() <span class=\"hljs-type\">bool</span> &#123;<br>\tb, err := os.ReadFile(<span class=\"hljs-string\">&quot;/root/tar_status.txt&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(b) == <span class=\"hljs-string\">&quot;done&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TaskDone() <span class=\"hljs-type\">bool</span> &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, fmt.Sprintf(<span class=\"hljs-string\">&quot;%v/api/admin/task/copy/undone&quot;</span>, c.Alist.Host), <span class=\"hljs-literal\">nil</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\treq.Header.Set(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, c.Alist.Token)<br><br>\tresp, err := http.DefaultClient.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br><br>\tbody, err := io.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tresponse := RequestAlistUndone&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := json.Unmarshal(body, &amp;response); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> response.Code == <span class=\"hljs-number\">200</span> &amp;&amp; <span class=\"hljs-built_in\">len</span>(response.Data) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getTarfile</span><span class=\"hljs-params\">(filepath <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\ttimelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\ttime.Local = timelocal<br>\tt := time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02_1504&quot;</span>)<br>\tfilename := strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>)[<span class=\"hljs-built_in\">len</span>(strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>))<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-comment\">// return fmt.Sprintf(&quot;%v-%v.tar.gz&quot;, t, filename)</span><br>\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;%v-%v.tar.bz2&quot;</span>, t, filename)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">alist:</span><br>  <span class=\"hljs-attr\">data_dir:</span> <span class=\"hljs-string\">&quot;/alist-data&quot;</span><br>  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">&quot;http://192.xxx.187.61:5244&quot;</span><br>  <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">&quot;alist-e5630ef4-5fa2-4264-a256-323900236728&quot;</span><br><br><span class=\"hljs-attr\">cron_time:</span> <span class=\"hljs-string\">&quot;0 40 18 * *&quot;</span><br><span class=\"hljs-attr\">tar_shell_filepath:</span> <span class=\"hljs-string\">&quot;/root/tar.sh&quot;</span><br><br><span class=\"hljs-attr\">clouds:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">阿里云盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span> <span class=\"hljs-comment\"># 本地local盘</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/阿里云盘/数据冷备&quot;</span>     <span class=\"hljs-comment\"># 本地阿里盘</span><br>    <span class=\"hljs-attr\">filepaths:</span>                       <span class=\"hljs-comment\"># 备份哪些文件</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Users/Desktop/github/blog&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Desktop/github/k3s&quot;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">百度网盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/百度网盘/数据冷备&quot;</span><br>    <span class=\"hljs-attr\">filepaths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/data/歌曲&quot;</span><br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"常用服务模板","date":"2023-07-22T16:15:50.000Z","_content":"\n{% note primary%}\n\n存放一些常用的模板。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. Makefile\n\n```makefile\n.PHONY: git_push docker_build all help\n\n# 获取 git 项目 COMMIT_HASH\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ngit_push: ## 上传代码到 Github\n\tgit add .\n\tgit commit -m \"`date '+%Y/%m/%d %H:%M:%S'`\"\n\tgit push origin dev\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n**指定参数**\n\n```makefile\ncommit: \n\tgit commit -m \"$(msg)\"\n```\n\n使用如下\n\n```sh\nmake commit msg=\"makefile 测试\"              \n```\n\n## 2. Dockerfile\n\n\n```dockerfile\nFROM golang:1.20 as builder\nWORKDIR /root/\nCOPY . .\nRUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go\n\n# =================================== 分层编译 ==============================================\nFROM alpine AS final\n\n# 国内使用的goproxy\nENV GOPROXY=https://goproxy.cn\n\n# 设置时区\nENV TZ=Asia/Shanghai\n\nWORKDIR /root/\n\n# 复制 builder 的产物\nCOPY --from=builder /root/app .\n\n# 复制本地文件夹\nCOPY ./mydir/  ./mydir/\n\nRUN chmod +x app \\\n    && apk update \\\n    && apk add --no-cache tzdata\n\nEXPOSE 8080\nENTRYPOINT [\"/root/app\"]\n```\n\n## 3. Github Build Action\n\n{% note warning %}\n\nbuildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 `manifest` 来进行合并镜像。\n\n下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 `docker manifest` 进行合并镜像。\n\n可以配合 `Makefile` 来看。\n{% endnote %}\n\n### 3.1 Makefile 模板\n\n```makefile\n.PHONY: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help\n\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ndocker-build-amd64: ## 编译 amd64 镜像\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:amd64\n\ndocker-build-arm64: ## 编译 arm64 镜像\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:arm64\n\ndocker-build-armv7: ## 编译 armv7 镜像\n\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv7\n\ndocker-build-armv8: ## 编译 armv8 镜像\n\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv8\n\n# ================================= 本地测试 =================================\ndocker-build-amd64-local: ## 编译 amd64 镜像\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .\n\tdocker push oldwang6/cloud-backup:amd64-local\n\trm -f cloud-backup-amd64-local\n\ndocker-build-arm64-local: ## 编译 arm64 镜像\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .\n\tdocker push oldwang6/cloud-backup:arm64-local\n\trm -f cloud-backup-arm64-local\n\nmanifest: ## 合并镜像\n\tdocker manifest create oldwang6/cloud-backup:${IMAGE_TAG} \\\n           oldwang6/cloud-backup:amd64 \\\n\t\t   oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n\t\t   oldwang6/cloud-backup:armv8\n\n\tdocker manifest create oldwang6/cloud-backup:latest \\\n           oldwang6/cloud-backup:amd64 \\\n           oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n           oldwang6/cloud-backup:armv8\n\n\tdocker manifest push oldwang6/cloud-backup:${IMAGE_TAG}\n\tdocker manifest push oldwang6/cloud-backup:latest\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n### 3.2 yaml 模板\n\n{% note warning %}\n\n下面为 .github/workflows/build.yml 文件内容。\n\n{% endnote %}\n\n```yaml\nname: Build and Cache Binary\n\non: [push]\n\njobs:\n  go-build-amd64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 amd64 二进制\n        run: |\n          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-amd64\n          mv cloud-backup-amd64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ${{ runner.workspace }}/bin\n  go-build-arm64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm64 二进制\n        run: |\n          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-arm64\n          mv cloud-backup-arm64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv7:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v7 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv7\n          mv cloud-backup-armv7 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv8:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v8 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv8\n          mv cloud-backup-armv8 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ${{ runner.workspace }}/bin\n\n  docker-build-amd64:\n    needs: go-build-amd64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 amd64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-amd64\n          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup\n          make docker-build-amd64\n\n  docker-build-arm64:\n    needs: go-build-arm64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-arm64\n          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup\n          make docker-build-arm64\n\n  docker-build-armv7:\n    needs: go-build-armv7\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v7 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv7\n          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup\n          make docker-build-armv7\n\n  docker-build-armv8:\n    needs: go-build-armv8\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v8 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv8\n          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup\n          make docker-build-armv8\n\n  manifest:\n    needs:\n      [\n        docker-build-amd64,\n        docker-build-arm64,\n        docker-build-armv7,\n        docker-build-armv8,\n      ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 使用 manifest 合并镜像并推送\n        run: make manifest\n```\n\n### 3.3 慎用缓存\n{% note warning %}\n\n慎用缓存！！！真坑。\n\n如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。\n\n\n始作俑者：chatgpt推荐的配置文件。\n\n排查许久。。。\n\n{% endnote %}\n\n```yaml\n      - name: 缓存二进制\n        uses: actions/cache@v2\n        with:\n          path: ${{ runner.workspace }}/bin\n          key: binaries-${{ runner.os }}\n```\n\n## 4. xui 客户端\n\n{% note warning %}\n\n只适用于linux环境，下载 [v2ray-core](https://github.com/v2ray/v2ray-core/releases)，解压后替换 config.yaml 如下。执行 ./v2ray\n\n{% endnote %}\n\n### 4.1. 客户端配置\n```yaml\n{\n    \"log\": {\n        \"loglevel\": \"warning\"\n    },\n    \"routing\": {\n        \"domainStrategy\": \"AsIs\",\n        \"rules\": [\n            {\n                \"ip\": [\n                    \"geoip:private\"\n                ],\n                \"outboundTag\": \"direct\",\n                \"type\": \"field\"\n            }\n        ]\n    },\n    \"inbounds\": [\n        {\n            \"port\": 1080,\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"auth\": \"noauth\",\n                \"udp\": true\n            },\n            \"tag\": \"socks\"\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"users\": [\n                            {\n                                \"id\": \"<uuid>\"\n                            }\n                        ],\n                        \"port\": <服务端端口>,\n                        \"address\": \"<服务端IP>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"protocol\": \"freedom\",\n            \"tag\": \"direct\"\n        }\n    ]\n}\n```\n\n### 4.2 命令行设置代理\n```sh\nexport https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080\n```\n\n### 4.3 取消设置代理\n```sh\nunset https_proxy\nunset http_proxy\nunset all_proxy\n```\n\n## 5. chatgpt\n\n### 5.1 测试 apikey\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s $API_KEY\n```\n\n### 5.2 数据库增加卡密\n```sql\nINSERT INTO apikey (name, count, statu, used, valid)\nVALUES ('sk-xx', 0, 't', 'f', 't');\n```\n\n\n## 6. frp\n\n### 6.1 frpc\n\n#### 6.1.1 docker-compose\n```yaml\nversion: '3'\nservices:\n  frps:\n    image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest\n    volumes:\n      - /root/k3s/frps.ini:/root/frps.ini\n    restart: always\n```\n\n#### 6.1.2 k8s\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frps\n  template:\n    metadata:\n      labels:\n        app: frps\n    spec:\n      imagePullSecrets:\n      - name: hub-ali\n      containers:\n      - name: frps\n        image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest\n        volumeMounts:\n        - name: config\n          mountPath: /root/frps.ini\n      volumes:\n      - name: config\n        hostPath:\n          path: /root/k3s/frps.ini  # 将 /etc/x-ui 替换为实际的主机路径\n```\n\n\n\n### 6.2 frps","source":"_posts/linux/常用服务模板.md","raw":"---\nlayout: linux\ntitle: 常用服务模板\ndate: 2023-07-23 00:15:50\ntags: [Makefile,Dockerfile]\ncategories: linux\n---\n\n{% note primary%}\n\n存放一些常用的模板。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. Makefile\n\n```makefile\n.PHONY: git_push docker_build all help\n\n# 获取 git 项目 COMMIT_HASH\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ngit_push: ## 上传代码到 Github\n\tgit add .\n\tgit commit -m \"`date '+%Y/%m/%d %H:%M:%S'`\"\n\tgit push origin dev\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n**指定参数**\n\n```makefile\ncommit: \n\tgit commit -m \"$(msg)\"\n```\n\n使用如下\n\n```sh\nmake commit msg=\"makefile 测试\"              \n```\n\n## 2. Dockerfile\n\n\n```dockerfile\nFROM golang:1.20 as builder\nWORKDIR /root/\nCOPY . .\nRUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go\n\n# =================================== 分层编译 ==============================================\nFROM alpine AS final\n\n# 国内使用的goproxy\nENV GOPROXY=https://goproxy.cn\n\n# 设置时区\nENV TZ=Asia/Shanghai\n\nWORKDIR /root/\n\n# 复制 builder 的产物\nCOPY --from=builder /root/app .\n\n# 复制本地文件夹\nCOPY ./mydir/  ./mydir/\n\nRUN chmod +x app \\\n    && apk update \\\n    && apk add --no-cache tzdata\n\nEXPOSE 8080\nENTRYPOINT [\"/root/app\"]\n```\n\n## 3. Github Build Action\n\n{% note warning %}\n\nbuildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 `manifest` 来进行合并镜像。\n\n下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 `docker manifest` 进行合并镜像。\n\n可以配合 `Makefile` 来看。\n{% endnote %}\n\n### 3.1 Makefile 模板\n\n```makefile\n.PHONY: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help\n\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ndocker-build-amd64: ## 编译 amd64 镜像\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:amd64\n\ndocker-build-arm64: ## 编译 arm64 镜像\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:arm64\n\ndocker-build-armv7: ## 编译 armv7 镜像\n\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv7\n\ndocker-build-armv8: ## 编译 armv8 镜像\n\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv8\n\n# ================================= 本地测试 =================================\ndocker-build-amd64-local: ## 编译 amd64 镜像\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .\n\tdocker push oldwang6/cloud-backup:amd64-local\n\trm -f cloud-backup-amd64-local\n\ndocker-build-arm64-local: ## 编译 arm64 镜像\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .\n\tdocker push oldwang6/cloud-backup:arm64-local\n\trm -f cloud-backup-arm64-local\n\nmanifest: ## 合并镜像\n\tdocker manifest create oldwang6/cloud-backup:${IMAGE_TAG} \\\n           oldwang6/cloud-backup:amd64 \\\n\t\t   oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n\t\t   oldwang6/cloud-backup:armv8\n\n\tdocker manifest create oldwang6/cloud-backup:latest \\\n           oldwang6/cloud-backup:amd64 \\\n           oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n           oldwang6/cloud-backup:armv8\n\n\tdocker manifest push oldwang6/cloud-backup:${IMAGE_TAG}\n\tdocker manifest push oldwang6/cloud-backup:latest\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n### 3.2 yaml 模板\n\n{% note warning %}\n\n下面为 .github/workflows/build.yml 文件内容。\n\n{% endnote %}\n\n```yaml\nname: Build and Cache Binary\n\non: [push]\n\njobs:\n  go-build-amd64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 amd64 二进制\n        run: |\n          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-amd64\n          mv cloud-backup-amd64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ${{ runner.workspace }}/bin\n  go-build-arm64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm64 二进制\n        run: |\n          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-arm64\n          mv cloud-backup-arm64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv7:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v7 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv7\n          mv cloud-backup-armv7 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv8:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v8 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv8\n          mv cloud-backup-armv8 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ${{ runner.workspace }}/bin\n\n  docker-build-amd64:\n    needs: go-build-amd64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 amd64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-amd64\n          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup\n          make docker-build-amd64\n\n  docker-build-arm64:\n    needs: go-build-arm64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-arm64\n          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup\n          make docker-build-arm64\n\n  docker-build-armv7:\n    needs: go-build-armv7\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v7 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv7\n          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup\n          make docker-build-armv7\n\n  docker-build-armv8:\n    needs: go-build-armv8\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v8 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv8\n          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup\n          make docker-build-armv8\n\n  manifest:\n    needs:\n      [\n        docker-build-amd64,\n        docker-build-arm64,\n        docker-build-armv7,\n        docker-build-armv8,\n      ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 使用 manifest 合并镜像并推送\n        run: make manifest\n```\n\n### 3.3 慎用缓存\n{% note warning %}\n\n慎用缓存！！！真坑。\n\n如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。\n\n\n始作俑者：chatgpt推荐的配置文件。\n\n排查许久。。。\n\n{% endnote %}\n\n```yaml\n      - name: 缓存二进制\n        uses: actions/cache@v2\n        with:\n          path: ${{ runner.workspace }}/bin\n          key: binaries-${{ runner.os }}\n```\n\n## 4. xui 客户端\n\n{% note warning %}\n\n只适用于linux环境，下载 [v2ray-core](https://github.com/v2ray/v2ray-core/releases)，解压后替换 config.yaml 如下。执行 ./v2ray\n\n{% endnote %}\n\n### 4.1. 客户端配置\n```yaml\n{\n    \"log\": {\n        \"loglevel\": \"warning\"\n    },\n    \"routing\": {\n        \"domainStrategy\": \"AsIs\",\n        \"rules\": [\n            {\n                \"ip\": [\n                    \"geoip:private\"\n                ],\n                \"outboundTag\": \"direct\",\n                \"type\": \"field\"\n            }\n        ]\n    },\n    \"inbounds\": [\n        {\n            \"port\": 1080,\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"auth\": \"noauth\",\n                \"udp\": true\n            },\n            \"tag\": \"socks\"\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"users\": [\n                            {\n                                \"id\": \"<uuid>\"\n                            }\n                        ],\n                        \"port\": <服务端端口>,\n                        \"address\": \"<服务端IP>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"protocol\": \"freedom\",\n            \"tag\": \"direct\"\n        }\n    ]\n}\n```\n\n### 4.2 命令行设置代理\n```sh\nexport https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080\n```\n\n### 4.3 取消设置代理\n```sh\nunset https_proxy\nunset http_proxy\nunset all_proxy\n```\n\n## 5. chatgpt\n\n### 5.1 测试 apikey\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s $API_KEY\n```\n\n### 5.2 数据库增加卡密\n```sql\nINSERT INTO apikey (name, count, statu, used, valid)\nVALUES ('sk-xx', 0, 't', 'f', 't');\n```\n\n\n## 6. frp\n\n### 6.1 frpc\n\n#### 6.1.1 docker-compose\n```yaml\nversion: '3'\nservices:\n  frps:\n    image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest\n    volumes:\n      - /root/k3s/frps.ini:/root/frps.ini\n    restart: always\n```\n\n#### 6.1.2 k8s\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frps\n  template:\n    metadata:\n      labels:\n        app: frps\n    spec:\n      imagePullSecrets:\n      - name: hub-ali\n      containers:\n      - name: frps\n        image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest\n        volumeMounts:\n        - name: config\n          mountPath: /root/frps.ini\n      volumes:\n      - name: config\n        hostPath:\n          path: /root/k3s/frps.ini  # 将 /etc/x-ui 替换为实际的主机路径\n```\n\n\n\n### 6.2 frps","slug":"linux/常用服务模板","published":1,"updated":"2023-09-12T03:34:22.951Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9x000i384w4y6209de","content":"<div class=\"note note-primary\">\n            <p>存放一些常用的模板。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-makefile\">1. Makefile</span></h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: git_push docker_build all help</span><br><br><span class=\"hljs-comment\"># 获取 git 项目 COMMIT_HASH</span><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">git_push: ## 上传代码到 Github</span><br>\tgit add .<br>\tgit commit -m <span class=\"hljs-string\">&quot;`date &#x27;+%Y/%m/%d %H:%M:%S&#x27;`&quot;</span><br>\tgit push origin dev<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>指定参数</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">commit: </span><br>\tgit commit -m <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(msg)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">make commit msg=<span class=\"hljs-string\">&quot;makefile 测试&quot;</span>              <br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-dockerfile\">2. Dockerfile</span></h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> golang:<span class=\"hljs-number\">1.20</span> as builder<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> . .</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go</span><br><br><span class=\"hljs-comment\"># =================================== 分层编译 ==============================================</span><br><span class=\"hljs-keyword\">FROM</span> alpine AS final<br><br><span class=\"hljs-comment\"># 国内使用的goproxy</span><br><span class=\"hljs-keyword\">ENV</span> GOPROXY=https://goproxy.cn<br><br><span class=\"hljs-comment\"># 设置时区</span><br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><br><span class=\"hljs-comment\"># 复制 builder 的产物</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=builder /root/app .</span><br><br><span class=\"hljs-comment\"># 复制本地文件夹</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./mydir/  ./mydir/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x app \\</span><br><span class=\"language-bash\">    &amp;&amp; apk update \\</span><br><span class=\"language-bash\">    &amp;&amp; apk add --no-cache tzdata</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/root/app&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-github-build-action\">3. Github Build Action</span></h2><div class=\"note note-warning\">\n            <p>buildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 <code>manifest</code> 来进行合并镜像。</p><p>下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 <code>docker manifest</code> 进行合并镜像。</p><p>可以配合 <code>Makefile</code> 来看。</p>\n          </div>\n\n<h3><span id=\"31-makefile-模板\">3.1 Makefile 模板</span></h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help</span><br><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">docker-build-amd64: ## 编译 amd64 镜像</span><br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:amd64<br><br><span class=\"hljs-section\">docker-build-arm64: ## 编译 arm64 镜像</span><br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:arm64<br><br><span class=\"hljs-section\">docker-build-armv7: ## 编译 armv7 镜像</span><br>\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv7<br><br><span class=\"hljs-section\">docker-build-armv8: ## 编译 armv8 镜像</span><br>\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv8<br><br><span class=\"hljs-comment\"># ================================= 本地测试 =================================</span><br><span class=\"hljs-section\">docker-build-amd64-local: ## 编译 amd64 镜像</span><br>\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go<br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .<br>\tdocker push oldwang6/cloud-backup:amd64-local<br>\trm -f cloud-backup-amd64-local<br><br><span class=\"hljs-section\">docker-build-arm64-local: ## 编译 arm64 镜像</span><br>\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go<br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .<br>\tdocker push oldwang6/cloud-backup:arm64-local<br>\trm -f cloud-backup-arm64-local<br><br><span class=\"hljs-section\">manifest: ## 合并镜像</span><br>\tdocker manifest create oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125; \\<br>           oldwang6/cloud-backup:amd64 \\<br>\t\t   oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>\t\t   oldwang6/cloud-backup:armv8<br><br>\tdocker manifest create oldwang6/cloud-backup:latest \\<br>           oldwang6/cloud-backup:amd64 \\<br>           oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>           oldwang6/cloud-backup:armv8<br><br>\tdocker manifest push oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125;<br>\tdocker manifest push oldwang6/cloud-backup:latest<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"32-yaml-模板\">3.2 yaml 模板</span></h3><div class=\"note note-warning\">\n            <p>下面为 .github&#x2F;workflows&#x2F;build.yml 文件内容。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">Binary</span><br><br><span class=\"hljs-attr\">on:</span> [<span class=\"hljs-string\">push</span>]<br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">go-build-amd64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv cloud-backup-amd64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>  <span class=\"hljs-attr\">go-build-arm64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv cloud-backup-arm64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv7:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv cloud-backup-armv7 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv8:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv cloud-backup-armv8 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">docker-build-amd64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-amd64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-amd64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-arm64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-arm64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-arm64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv7:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv7</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv7</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv8:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv8</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv8</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">manifest:</span><br>    <span class=\"hljs-attr\">needs:</span><br>      [<br>        <span class=\"hljs-string\">docker-build-amd64</span>,<br>        <span class=\"hljs-string\">docker-build-arm64</span>,<br>        <span class=\"hljs-string\">docker-build-armv7</span>,<br>        <span class=\"hljs-string\">docker-build-armv8</span>,<br>      ]<br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">使用</span> <span class=\"hljs-string\">manifest</span> <span class=\"hljs-string\">合并镜像并推送</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">make</span> <span class=\"hljs-string\">manifest</span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"33-慎用缓存\">3.3 慎用缓存</span></h3><div class=\"note note-warning\">\n            <p>慎用缓存！！！真坑。</p><p>如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。</p><p>始作俑者：chatgpt推荐的配置文件。</p><p>排查许久。。。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">缓存二进制</span><br>  <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>  <span class=\"hljs-attr\">with:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>    <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">binaries-$&#123;&#123;</span> <span class=\"hljs-string\">runner.os</span> <span class=\"hljs-string\">&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-xui-客户端\">4. xui 客户端</span></h2><div class=\"note note-warning\">\n            <p>只适用于linux环境，下载 <a href=\"https://github.com/v2ray/v2ray-core/releases\">v2ray-core</a>，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray</p>\n          </div>\n\n<h3><span id=\"41-客户端配置\">4.1. 客户端配置</span></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">&#123;<br>    <span class=\"hljs-attr\">&quot;log&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;loglevel&quot;:</span> <span class=\"hljs-string\">&quot;warning&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;routing&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;domainStrategy&quot;:</span> <span class=\"hljs-string\">&quot;AsIs&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;rules&quot;:</span> [<br>            &#123;<br>                <span class=\"hljs-attr\">&quot;ip&quot;:</span> [<br>                    <span class=\"hljs-string\">&quot;geoip:private&quot;</span><br>                ],<br>                <span class=\"hljs-attr\">&quot;outboundTag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;type&quot;:</span> <span class=\"hljs-string\">&quot;field&quot;</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;inbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-number\">1080</span>,<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;auth&quot;:</span> <span class=\"hljs-string\">&quot;noauth&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;udp&quot;:</span> <span class=\"hljs-literal\">true</span><br>            &#125;,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;outbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;vmess&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;vnext&quot;:</span> [<br>                    &#123;<br>                        <span class=\"hljs-attr\">&quot;users&quot;:</span> [<br>                            &#123;<br>                                <span class=\"hljs-attr\">&quot;id&quot;:</span> <span class=\"hljs-string\">&quot;&lt;uuid&gt;&quot;</span><br>                            &#125;<br>                        ],<br>                        <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-string\">&lt;服务端端口&gt;</span>,<br>                        <span class=\"hljs-attr\">&quot;address&quot;:</span> <span class=\"hljs-string\">&quot;&lt;服务端IP&gt;&quot;</span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;freedom&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"42-命令行设置代理\">4.2 命令行设置代理</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"43-取消设置代理\">4.3 取消设置代理</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">unset</span> https_proxy<br><span class=\"hljs-built_in\">unset</span> http_proxy<br><span class=\"hljs-built_in\">unset</span> all_proxy<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"5-chatgpt\">5. chatgpt</span></h2><h3><span id=\"51-测试-apikey\">5.1 测试 apikey</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s <span class=\"hljs-variable\">$API_KEY</span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"52-数据库增加卡密\">5.2 数据库增加卡密</span></h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> apikey (name, count, statu, used, valid)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;sk-xx&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n\n<h2><span id=\"6-frp\">6. frp</span></h2><h3><span id=\"61-frpc\">6.1 frpc</span></h3><h4><span id=\"611-docker-compose\">6.1.1 docker-compose</span></h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">frps:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/root/k3s/frps.ini:/root/frps.ini</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"612-k8s\">6.1.2 k8s</span></h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">imagePullSecrets:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hub-ali</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest</span><br>        <span class=\"hljs-attr\">volumeMounts:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/root/frps.ini</span><br>      <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>        <span class=\"hljs-attr\">hostPath:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/root/k3s/frps.ini</span>  <span class=\"hljs-comment\"># 将 /etc/x-ui 替换为实际的主机路径</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3><span id=\"62-frps\">6.2 frps</span></h3>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>存放一些常用的模板。</p>\n          </div>","more":"<h2 id=\"1-Makefile\"><a href=\"#1-Makefile\" class=\"headerlink\" title=\"1. Makefile\"></a>1. Makefile</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: git_push docker_build all help</span><br><br><span class=\"hljs-comment\"># 获取 git 项目 COMMIT_HASH</span><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">git_push: ## 上传代码到 Github</span><br>\tgit add .<br>\tgit commit -m <span class=\"hljs-string\">&quot;`date &#x27;+%Y/%m/%d %H:%M:%S&#x27;`&quot;</span><br>\tgit push origin dev<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>指定参数</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">commit: </span><br>\tgit commit -m <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(msg)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">make commit msg=<span class=\"hljs-string\">&quot;makefile 测试&quot;</span>              <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Dockerfile\"><a href=\"#2-Dockerfile\" class=\"headerlink\" title=\"2. Dockerfile\"></a>2. Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> golang:<span class=\"hljs-number\">1.20</span> as builder<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> . .</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go</span><br><br><span class=\"hljs-comment\"># =================================== 分层编译 ==============================================</span><br><span class=\"hljs-keyword\">FROM</span> alpine AS final<br><br><span class=\"hljs-comment\"># 国内使用的goproxy</span><br><span class=\"hljs-keyword\">ENV</span> GOPROXY=https://goproxy.cn<br><br><span class=\"hljs-comment\"># 设置时区</span><br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><br><span class=\"hljs-comment\"># 复制 builder 的产物</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=builder /root/app .</span><br><br><span class=\"hljs-comment\"># 复制本地文件夹</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./mydir/  ./mydir/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x app \\</span><br><span class=\"language-bash\">    &amp;&amp; apk update \\</span><br><span class=\"language-bash\">    &amp;&amp; apk add --no-cache tzdata</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/root/app&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-Github-Build-Action\"><a href=\"#3-Github-Build-Action\" class=\"headerlink\" title=\"3. Github Build Action\"></a>3. Github Build Action</h2><div class=\"note note-warning\">\n            <p>buildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 <code>manifest</code> 来进行合并镜像。</p><p>下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 <code>docker manifest</code> 进行合并镜像。</p><p>可以配合 <code>Makefile</code> 来看。</p>\n          </div>\n\n<h3 id=\"3-1-Makefile-模板\"><a href=\"#3-1-Makefile-模板\" class=\"headerlink\" title=\"3.1 Makefile 模板\"></a>3.1 Makefile 模板</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help</span><br><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">docker-build-amd64: ## 编译 amd64 镜像</span><br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:amd64<br><br><span class=\"hljs-section\">docker-build-arm64: ## 编译 arm64 镜像</span><br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:arm64<br><br><span class=\"hljs-section\">docker-build-armv7: ## 编译 armv7 镜像</span><br>\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv7<br><br><span class=\"hljs-section\">docker-build-armv8: ## 编译 armv8 镜像</span><br>\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv8<br><br><span class=\"hljs-comment\"># ================================= 本地测试 =================================</span><br><span class=\"hljs-section\">docker-build-amd64-local: ## 编译 amd64 镜像</span><br>\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go<br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .<br>\tdocker push oldwang6/cloud-backup:amd64-local<br>\trm -f cloud-backup-amd64-local<br><br><span class=\"hljs-section\">docker-build-arm64-local: ## 编译 arm64 镜像</span><br>\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go<br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .<br>\tdocker push oldwang6/cloud-backup:arm64-local<br>\trm -f cloud-backup-arm64-local<br><br><span class=\"hljs-section\">manifest: ## 合并镜像</span><br>\tdocker manifest create oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125; \\<br>           oldwang6/cloud-backup:amd64 \\<br>\t\t   oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>\t\t   oldwang6/cloud-backup:armv8<br><br>\tdocker manifest create oldwang6/cloud-backup:latest \\<br>           oldwang6/cloud-backup:amd64 \\<br>           oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>           oldwang6/cloud-backup:armv8<br><br>\tdocker manifest push oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125;<br>\tdocker manifest push oldwang6/cloud-backup:latest<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-yaml-模板\"><a href=\"#3-2-yaml-模板\" class=\"headerlink\" title=\"3.2 yaml 模板\"></a>3.2 yaml 模板</h3><div class=\"note note-warning\">\n            <p>下面为 .github&#x2F;workflows&#x2F;build.yml 文件内容。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">Binary</span><br><br><span class=\"hljs-attr\">on:</span> [<span class=\"hljs-string\">push</span>]<br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">go-build-amd64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv cloud-backup-amd64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>  <span class=\"hljs-attr\">go-build-arm64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv cloud-backup-arm64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv7:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv cloud-backup-armv7 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv8:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv cloud-backup-armv8 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">docker-build-amd64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-amd64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-amd64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-arm64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-arm64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-arm64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv7:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv7</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv7</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv8:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv8</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv8</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">manifest:</span><br>    <span class=\"hljs-attr\">needs:</span><br>      [<br>        <span class=\"hljs-string\">docker-build-amd64</span>,<br>        <span class=\"hljs-string\">docker-build-arm64</span>,<br>        <span class=\"hljs-string\">docker-build-armv7</span>,<br>        <span class=\"hljs-string\">docker-build-armv8</span>,<br>      ]<br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">使用</span> <span class=\"hljs-string\">manifest</span> <span class=\"hljs-string\">合并镜像并推送</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">make</span> <span class=\"hljs-string\">manifest</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-慎用缓存\"><a href=\"#3-3-慎用缓存\" class=\"headerlink\" title=\"3.3 慎用缓存\"></a>3.3 慎用缓存</h3><div class=\"note note-warning\">\n            <p>慎用缓存！！！真坑。</p><p>如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。</p><p>始作俑者：chatgpt推荐的配置文件。</p><p>排查许久。。。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">缓存二进制</span><br>  <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>  <span class=\"hljs-attr\">with:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>    <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">binaries-$&#123;&#123;</span> <span class=\"hljs-string\">runner.os</span> <span class=\"hljs-string\">&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-xui-客户端\"><a href=\"#4-xui-客户端\" class=\"headerlink\" title=\"4. xui 客户端\"></a>4. xui 客户端</h2><div class=\"note note-warning\">\n            <p>只适用于linux环境，下载 <a href=\"https://github.com/v2ray/v2ray-core/releases\">v2ray-core</a>，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray</p>\n          </div>\n\n<h3 id=\"4-1-客户端配置\"><a href=\"#4-1-客户端配置\" class=\"headerlink\" title=\"4.1. 客户端配置\"></a>4.1. 客户端配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">&#123;<br>    <span class=\"hljs-attr\">&quot;log&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;loglevel&quot;:</span> <span class=\"hljs-string\">&quot;warning&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;routing&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;domainStrategy&quot;:</span> <span class=\"hljs-string\">&quot;AsIs&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;rules&quot;:</span> [<br>            &#123;<br>                <span class=\"hljs-attr\">&quot;ip&quot;:</span> [<br>                    <span class=\"hljs-string\">&quot;geoip:private&quot;</span><br>                ],<br>                <span class=\"hljs-attr\">&quot;outboundTag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;type&quot;:</span> <span class=\"hljs-string\">&quot;field&quot;</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;inbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-number\">1080</span>,<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;auth&quot;:</span> <span class=\"hljs-string\">&quot;noauth&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;udp&quot;:</span> <span class=\"hljs-literal\">true</span><br>            &#125;,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;outbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;vmess&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;vnext&quot;:</span> [<br>                    &#123;<br>                        <span class=\"hljs-attr\">&quot;users&quot;:</span> [<br>                            &#123;<br>                                <span class=\"hljs-attr\">&quot;id&quot;:</span> <span class=\"hljs-string\">&quot;&lt;uuid&gt;&quot;</span><br>                            &#125;<br>                        ],<br>                        <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-string\">&lt;服务端端口&gt;</span>,<br>                        <span class=\"hljs-attr\">&quot;address&quot;:</span> <span class=\"hljs-string\">&quot;&lt;服务端IP&gt;&quot;</span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;freedom&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-命令行设置代理\"><a href=\"#4-2-命令行设置代理\" class=\"headerlink\" title=\"4.2 命令行设置代理\"></a>4.2 命令行设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-取消设置代理\"><a href=\"#4-3-取消设置代理\" class=\"headerlink\" title=\"4.3 取消设置代理\"></a>4.3 取消设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">unset</span> https_proxy<br><span class=\"hljs-built_in\">unset</span> http_proxy<br><span class=\"hljs-built_in\">unset</span> all_proxy<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-chatgpt\"><a href=\"#5-chatgpt\" class=\"headerlink\" title=\"5. chatgpt\"></a>5. chatgpt</h2><h3 id=\"5-1-测试-apikey\"><a href=\"#5-1-测试-apikey\" class=\"headerlink\" title=\"5.1 测试 apikey\"></a>5.1 测试 apikey</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s <span class=\"hljs-variable\">$API_KEY</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"5-2-数据库增加卡密\"><a href=\"#5-2-数据库增加卡密\" class=\"headerlink\" title=\"5.2 数据库增加卡密\"></a>5.2 数据库增加卡密</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> apikey (name, count, statu, used, valid)<br><span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;sk-xx&#x27;</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>, <span class=\"hljs-string\">&#x27;f&#x27;</span>, <span class=\"hljs-string\">&#x27;t&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n\n<h2 id=\"6-frp\"><a href=\"#6-frp\" class=\"headerlink\" title=\"6. frp\"></a>6. frp</h2><h3 id=\"6-1-frpc\"><a href=\"#6-1-frpc\" class=\"headerlink\" title=\"6.1 frpc\"></a>6.1 frpc</h3><h4 id=\"6-1-1-docker-compose\"><a href=\"#6-1-1-docker-compose\" class=\"headerlink\" title=\"6.1.1 docker-compose\"></a>6.1.1 docker-compose</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">frps:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/root/k3s/frps.ini:/root/frps.ini</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-1-2-k8s\"><a href=\"#6-1-2-k8s\" class=\"headerlink\" title=\"6.1.2 k8s\"></a>6.1.2 k8s</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">imagePullSecrets:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hub-ali</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest</span><br>        <span class=\"hljs-attr\">volumeMounts:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/root/frps.ini</span><br>      <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>        <span class=\"hljs-attr\">hostPath:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/root/k3s/frps.ini</span>  <span class=\"hljs-comment\"># 将 /etc/x-ui 替换为实际的主机路径</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-2-frps\"><a href=\"#6-2-frps\" class=\"headerlink\" title=\"6.2 frps\"></a>6.2 frps</h3>"},{"layout":"玩客云入门","title":"玩客云入门","date":"2023-08-19T03:56:45.000Z","updated":"2023-09-16T05:57:20.309Z","_content":"\n{% note primary%}\n\n无需短接，直刷。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 刷机\n\n网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。\n\n[玩客云刷机包]()\n\n\n## 2 更改apt源为国内\n\n{% note warning%}\nArmbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。\n国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。\n{% endnote %}\n\n首先：\n\n```sh\nsudo apt install apt-transport-https ca-certificates\n```\n\nArmbian 更改源的时候需要改两个地方：\n\n```sh\nvim /etc/apt/sources.list\n```\n\n将里面内容全部注释掉，添加：\n\n```sh\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n```\n\n然后还有一个地方需要更改，是Armbian自身的内容更新源\n\n```sh\nvim /etc/apt/sources.list.d/armbian.list\n```\n\n注释掉原来内容，添加：\n\n```sh\n# “buster”根据版本更改\ndeb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop\n```\n\n之后就可以愉快的\n\n```sh\n$ sudo apt update\n$ sudo apt upgrade\nor\n$ sudo apt dist-upgrade\n```\n\n## 3. 安装最新版docker\n\n```sh\nwget -qO- https://get.docker.com/ | sh\n```\n\n## 4. 固定IP\n\n### 4.1 玩客云\n1. 修改 /etc/network/interfaces\n\n```sh\nsource /etc/network/interfaces.d/*\n\nallow-hotplug eth0\nno-auto-down eth0\niface eth0 inet static\nhwaddress ether 1e:d8:3d:b7:45:54\npre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54\naddress 192.168.31.131\nnetmask 255.255.255.0\ngateway 192.168.31.1\ndns-nameservers 192.168.31.1\npre-up /sbin/ifconfig eth0 mtu 3838\n```\n\n2. 修改 /etc/network/interfaces.default 内容和 /etc/network/interfaces 一致\n\n3. 重启网络\n\n```sh\nreboot\n```\n\n### 4.2 树莓派\n\n#### 4.2.1 更改文件 `/etc/dhcpcd.conf`\n\n在文件的末尾添加以下内容，替换成适合你的网络配置：\n\n{% note warning %}\n\n如果你使用 Wi-Fi 连接，请将 interface 替换为 wlan0。\n\n{% endnote %}\n\n```conf\ninterface eth0\nstatic ip_address=<固定 IP 地址>/24\nstatic routers=<默认网关 IP 地址>\nstatic domain_name_servers=<DNS 服务器 IP 地址>\n```\n\n#### 4.2.2 重新启动网络服务以应用更改：\n\n```sh\nsudo service dhcpcd restart\n```\n\n#### 4.2.3 wifi固定IP\n\n如果你需要通过 Wi-Fi 连接，可以使用 wpa_supplicant.conf 文件配置 Wi-Fi 设置并设置固定 IP 地址。以下是一个示例的 wpa_supplicant.conf 文件：\n\n```conf\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=<你的国家代码>\n\nnetwork={\n   ssid=\"<无线网络名称>\"\n   psk=\"<无线网络密码>\"\n   id_str=\"%wpa_id%\"\n   priority=15\n}\n```\n\n## 5. 挂载磁盘\n\n```sh\nmount /dev/sda1 /data\n```\n\n## 6. 安装vim\n\n### 6.1 卸载 vim-common\n\n```sh\nsudo apt-get remove vim-common\n```\n\n### 6.2 安装vim\n```sh\nsudo apt-get remove --auto-remove vim-common\n```\n\n## 7. 允许root登陆\n\n### 7.1 设置 root 密码：\n\n```sh\nsudo passwd root\n```\n\n### 7.2 允许 root 远程登陆：\n\n修改 /etc/ssh/sshd_config 文件，允许 root 登录。\n\n```sh\nsudo vim /etc/ssh/sshd_config\n```\n\n找到 PermitRootLogin 一行，并将其值修改为 yes：\n\n```yaml\nPermitRootLogin yes\n```\n\n### 7.3 重启 sshd 服务：\n\n```sh\nsudo service ssh restart\n```","source":"_posts/linux/玩客云入门.md","raw":"---\nlayout: 玩客云入门\ntitle: 玩客云入门\ncategory: linux\ndate: 2023-08-19 11:56:45\nupdated:\ntags: [玩客云,armbian]\n---\n\n{% note primary%}\n\n无需短接，直刷。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 刷机\n\n网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。\n\n[玩客云刷机包]()\n\n\n## 2 更改apt源为国内\n\n{% note warning%}\nArmbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。\n国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。\n{% endnote %}\n\n首先：\n\n```sh\nsudo apt install apt-transport-https ca-certificates\n```\n\nArmbian 更改源的时候需要改两个地方：\n\n```sh\nvim /etc/apt/sources.list\n```\n\n将里面内容全部注释掉，添加：\n\n```sh\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n```\n\n然后还有一个地方需要更改，是Armbian自身的内容更新源\n\n```sh\nvim /etc/apt/sources.list.d/armbian.list\n```\n\n注释掉原来内容，添加：\n\n```sh\n# “buster”根据版本更改\ndeb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop\n```\n\n之后就可以愉快的\n\n```sh\n$ sudo apt update\n$ sudo apt upgrade\nor\n$ sudo apt dist-upgrade\n```\n\n## 3. 安装最新版docker\n\n```sh\nwget -qO- https://get.docker.com/ | sh\n```\n\n## 4. 固定IP\n\n### 4.1 玩客云\n1. 修改 /etc/network/interfaces\n\n```sh\nsource /etc/network/interfaces.d/*\n\nallow-hotplug eth0\nno-auto-down eth0\niface eth0 inet static\nhwaddress ether 1e:d8:3d:b7:45:54\npre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54\naddress 192.168.31.131\nnetmask 255.255.255.0\ngateway 192.168.31.1\ndns-nameservers 192.168.31.1\npre-up /sbin/ifconfig eth0 mtu 3838\n```\n\n2. 修改 /etc/network/interfaces.default 内容和 /etc/network/interfaces 一致\n\n3. 重启网络\n\n```sh\nreboot\n```\n\n### 4.2 树莓派\n\n#### 4.2.1 更改文件 `/etc/dhcpcd.conf`\n\n在文件的末尾添加以下内容，替换成适合你的网络配置：\n\n{% note warning %}\n\n如果你使用 Wi-Fi 连接，请将 interface 替换为 wlan0。\n\n{% endnote %}\n\n```conf\ninterface eth0\nstatic ip_address=<固定 IP 地址>/24\nstatic routers=<默认网关 IP 地址>\nstatic domain_name_servers=<DNS 服务器 IP 地址>\n```\n\n#### 4.2.2 重新启动网络服务以应用更改：\n\n```sh\nsudo service dhcpcd restart\n```\n\n#### 4.2.3 wifi固定IP\n\n如果你需要通过 Wi-Fi 连接，可以使用 wpa_supplicant.conf 文件配置 Wi-Fi 设置并设置固定 IP 地址。以下是一个示例的 wpa_supplicant.conf 文件：\n\n```conf\nctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev\nupdate_config=1\ncountry=<你的国家代码>\n\nnetwork={\n   ssid=\"<无线网络名称>\"\n   psk=\"<无线网络密码>\"\n   id_str=\"%wpa_id%\"\n   priority=15\n}\n```\n\n## 5. 挂载磁盘\n\n```sh\nmount /dev/sda1 /data\n```\n\n## 6. 安装vim\n\n### 6.1 卸载 vim-common\n\n```sh\nsudo apt-get remove vim-common\n```\n\n### 6.2 安装vim\n```sh\nsudo apt-get remove --auto-remove vim-common\n```\n\n## 7. 允许root登陆\n\n### 7.1 设置 root 密码：\n\n```sh\nsudo passwd root\n```\n\n### 7.2 允许 root 远程登陆：\n\n修改 /etc/ssh/sshd_config 文件，允许 root 登录。\n\n```sh\nsudo vim /etc/ssh/sshd_config\n```\n\n找到 PermitRootLogin 一行，并将其值修改为 yes：\n\n```yaml\nPermitRootLogin yes\n```\n\n### 7.3 重启 sshd 服务：\n\n```sh\nsudo service ssh restart\n```","slug":"linux/玩客云入门","published":1,"comments":1,"photos":[],"link":"","_id":"clmo9ls9y000m384wdgfh8q05","content":"<div class=\"note note-primary\">\n            <p>无需短接，直刷。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-刷机\">1. 刷机</span></h2><p>网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。</p>\n<p><a href>玩客云刷机包</a></p>\n<h2><span id=\"2-更改apt源为国内\">2 更改apt源为国内</span></h2><div class=\"note note-warning\">\n            <p>Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。<br>国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。</p>\n          </div>\n\n<p>首先：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt install apt-transport-https ca-certificates<br></code></pre></td></tr></table></figure>\n\n<p>Armbian 更改源的时候需要改两个地方：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure>\n\n<p>将里面内容全部注释掉，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></code></pre></td></tr></table></figure>\n\n<p>然后还有一个地方需要更改，是Armbian自身的内容更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list.d/armbian.list<br></code></pre></td></tr></table></figure>\n\n<p>注释掉原来内容，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># “buster”根据版本更改</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop<br></code></pre></td></tr></table></figure>\n\n<p>之后就可以愉快的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ sudo apt update<br>$ sudo apt upgrade<br>or<br>$ sudo apt dist-upgrade<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-安装最新版docker\">3. 安装最新版docker</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget -qO- https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-固定ip\">4. 固定IP</span></h2><h3><span id=\"41-玩客云\">4.1 玩客云</span></h3><ol>\n<li>修改 &#x2F;etc&#x2F;network&#x2F;interfaces</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> /etc/network/interfaces.d/*<br><br>allow-hotplug eth0<br>no-auto-down eth0<br>iface eth0 inet static<br>hwaddress ether 1e:d8:3d:b7:45:54<br>pre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54<br>address 192.168.31.131<br>netmask 255.255.255.0<br>gateway 192.168.31.1<br>dns-nameservers 192.168.31.1<br>pre-up /sbin/ifconfig eth0 mtu 3838<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>修改 &#x2F;etc&#x2F;network&#x2F;interfaces.default 内容和 &#x2F;etc&#x2F;network&#x2F;interfaces 一致</p>\n</li>\n<li><p>重启网络</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">reboot<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"42-树莓派\">4.2 树莓派</span></h3><h4><span id=\"421-更改文件-etcdhcpcdconf\">4.2.1 更改文件 <code>/etc/dhcpcd.conf</code></span></h4><p>在文件的末尾添加以下内容，替换成适合你的网络配置：</p>\n<div class=\"note note-warning\">\n            <p>如果你使用 Wi-Fi 连接，请将 interface 替换为 wlan0。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">interface eth0<br>static ip_address=&lt;固定 IP 地址&gt;/24<br>static routers=&lt;默认网关 IP 地址&gt;<br>static domain_name_servers=&lt;DNS 服务器 IP 地址&gt;<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"422-重新启动网络服务以应用更改\">4.2.2 重新启动网络服务以应用更改：</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo service dhcpcd restart<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"423-wifi固定ip\">4.2.3 wifi固定IP</span></h4><p>如果你需要通过 Wi-Fi 连接，可以使用 wpa_supplicant.conf 文件配置 Wi-Fi 设置并设置固定 IP 地址。以下是一个示例的 wpa_supplicant.conf 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=1<br>country=&lt;你的国家代码&gt;<br><br>network=&#123;<br>   ssid=&quot;&lt;无线网络名称&gt;&quot;<br>   psk=&quot;&lt;无线网络密码&gt;&quot;<br>   id_str=&quot;%wpa_id%&quot;<br>   priority=15<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"5-挂载磁盘\">5. 挂载磁盘</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mount /dev/sda1 /data<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"6-安装vim\">6. 安装vim</span></h2><h3><span id=\"61-卸载-vim-common\">6.1 卸载 vim-common</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt-get remove vim-common<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"62-安装vim\">6.2 安装vim</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt-get remove --auto-remove vim-common<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"7-允许root登陆\">7. 允许root登陆</span></h2><h3><span id=\"71-设置-root-密码\">7.1 设置 root 密码：</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo passwd root<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"72-允许-root-远程登陆\">7.2 允许 root 远程登陆：</span></h3><p>修改 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 文件，允许 root 登录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure>\n\n<p>找到 PermitRootLogin 一行，并将其值修改为 yes：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">PermitRootLogin</span> <span class=\"hljs-literal\">yes</span><br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"73-重启-sshd-服务\">7.3 重启 sshd 服务：</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo service ssh restart<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>无需短接，直刷。</p>\n          </div>","more":"<h2 id=\"1-刷机\"><a href=\"#1-刷机\" class=\"headerlink\" title=\"1. 刷机\"></a>1. 刷机</h2><p>网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。</p>\n<p><a href>玩客云刷机包</a></p>\n<h2 id=\"2-更改apt源为国内\"><a href=\"#2-更改apt源为国内\" class=\"headerlink\" title=\"2 更改apt源为国内\"></a>2 更改apt源为国内</h2><div class=\"note note-warning\">\n            <p>Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。<br>国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。</p>\n          </div>\n\n<p>首先：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt install apt-transport-https ca-certificates<br></code></pre></td></tr></table></figure>\n\n<p>Armbian 更改源的时候需要改两个地方：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure>\n\n<p>将里面内容全部注释掉，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></code></pre></td></tr></table></figure>\n\n<p>然后还有一个地方需要更改，是Armbian自身的内容更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list.d/armbian.list<br></code></pre></td></tr></table></figure>\n\n<p>注释掉原来内容，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># “buster”根据版本更改</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop<br></code></pre></td></tr></table></figure>\n\n<p>之后就可以愉快的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ sudo apt update<br>$ sudo apt upgrade<br>or<br>$ sudo apt dist-upgrade<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装最新版docker\"><a href=\"#3-安装最新版docker\" class=\"headerlink\" title=\"3. 安装最新版docker\"></a>3. 安装最新版docker</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget -qO- https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-固定IP\"><a href=\"#4-固定IP\" class=\"headerlink\" title=\"4. 固定IP\"></a>4. 固定IP</h2><h3 id=\"4-1-玩客云\"><a href=\"#4-1-玩客云\" class=\"headerlink\" title=\"4.1 玩客云\"></a>4.1 玩客云</h3><ol>\n<li>修改 &#x2F;etc&#x2F;network&#x2F;interfaces</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> /etc/network/interfaces.d/*<br><br>allow-hotplug eth0<br>no-auto-down eth0<br>iface eth0 inet static<br>hwaddress ether 1e:d8:3d:b7:45:54<br>pre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54<br>address 192.168.31.131<br>netmask 255.255.255.0<br>gateway 192.168.31.1<br>dns-nameservers 192.168.31.1<br>pre-up /sbin/ifconfig eth0 mtu 3838<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>修改 &#x2F;etc&#x2F;network&#x2F;interfaces.default 内容和 &#x2F;etc&#x2F;network&#x2F;interfaces 一致</p>\n</li>\n<li><p>重启网络</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">reboot<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-树莓派\"><a href=\"#4-2-树莓派\" class=\"headerlink\" title=\"4.2 树莓派\"></a>4.2 树莓派</h3><h4 id=\"4-2-1-更改文件-etc-dhcpcd-conf\"><a href=\"#4-2-1-更改文件-etc-dhcpcd-conf\" class=\"headerlink\" title=\"4.2.1 更改文件 /etc/dhcpcd.conf\"></a>4.2.1 更改文件 <code>/etc/dhcpcd.conf</code></h4><p>在文件的末尾添加以下内容，替换成适合你的网络配置：</p>\n<div class=\"note note-warning\">\n            <p>如果你使用 Wi-Fi 连接，请将 interface 替换为 wlan0。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">interface eth0<br>static ip_address=&lt;固定 IP 地址&gt;/24<br>static routers=&lt;默认网关 IP 地址&gt;<br>static domain_name_servers=&lt;DNS 服务器 IP 地址&gt;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-2-重新启动网络服务以应用更改：\"><a href=\"#4-2-2-重新启动网络服务以应用更改：\" class=\"headerlink\" title=\"4.2.2 重新启动网络服务以应用更改：\"></a>4.2.2 重新启动网络服务以应用更改：</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo service dhcpcd restart<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"4-2-3-wifi固定IP\"><a href=\"#4-2-3-wifi固定IP\" class=\"headerlink\" title=\"4.2.3 wifi固定IP\"></a>4.2.3 wifi固定IP</h4><p>如果你需要通过 Wi-Fi 连接，可以使用 wpa_supplicant.conf 文件配置 Wi-Fi 设置并设置固定 IP 地址。以下是一个示例的 wpa_supplicant.conf 文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs conf\">ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev<br>update_config=1<br>country=&lt;你的国家代码&gt;<br><br>network=&#123;<br>   ssid=&quot;&lt;无线网络名称&gt;&quot;<br>   psk=&quot;&lt;无线网络密码&gt;&quot;<br>   id_str=&quot;%wpa_id%&quot;<br>   priority=15<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-挂载磁盘\"><a href=\"#5-挂载磁盘\" class=\"headerlink\" title=\"5. 挂载磁盘\"></a>5. 挂载磁盘</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mount /dev/sda1 /data<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-安装vim\"><a href=\"#6-安装vim\" class=\"headerlink\" title=\"6. 安装vim\"></a>6. 安装vim</h2><h3 id=\"6-1-卸载-vim-common\"><a href=\"#6-1-卸载-vim-common\" class=\"headerlink\" title=\"6.1 卸载 vim-common\"></a>6.1 卸载 vim-common</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt-get remove vim-common<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-安装vim\"><a href=\"#6-2-安装vim\" class=\"headerlink\" title=\"6.2 安装vim\"></a>6.2 安装vim</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt-get remove --auto-remove vim-common<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-允许root登陆\"><a href=\"#7-允许root登陆\" class=\"headerlink\" title=\"7. 允许root登陆\"></a>7. 允许root登陆</h2><h3 id=\"7-1-设置-root-密码：\"><a href=\"#7-1-设置-root-密码：\" class=\"headerlink\" title=\"7.1 设置 root 密码：\"></a>7.1 设置 root 密码：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo passwd root<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-2-允许-root-远程登陆：\"><a href=\"#7-2-允许-root-远程登陆：\" class=\"headerlink\" title=\"7.2 允许 root 远程登陆：\"></a>7.2 允许 root 远程登陆：</h3><p>修改 &#x2F;etc&#x2F;ssh&#x2F;sshd_config 文件，允许 root 登录。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure>\n\n<p>找到 PermitRootLogin 一行，并将其值修改为 yes：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">PermitRootLogin</span> <span class=\"hljs-literal\">yes</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-3-重启-sshd-服务：\"><a href=\"#7-3-重启-sshd-服务：\" class=\"headerlink\" title=\"7.3 重启 sshd 服务：\"></a>7.3 重启 sshd 服务：</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo service ssh restart<br></code></pre></td></tr></table></figure>"},{"layout":"工具","title":"git使用指南","date":"2023-08-16T02:36:30.000Z","_content":"\n{% note primary%}\n\ngit 不仅仅是 pull 和 push。\n\n{% endnote %}\n\n\n<!-- more -->\n\n## 1. 一键提交当前分支\n```sh\ngit add .;git commit -m \"test\";git push origin $(git symbolic-ref --short HEAD)\n```\n\n## 2. 删除分支\n\n```sh\n# 删除本地分支\ngit branch -D xxx\n\n# 删除远程分支\ngit push origin --delete xxx\n```\n\n## 3. 开发分支落后时，如何同步 master 分支。\n```sh\n# 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支\ngit checkout master\ngit pull origin master\n\n# 2. 切换回开发分支，并将master分支的变更合并到开发分支上：\ngit checkout feature/test\ngit merge master\n\n# 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。\n\n# 4. 推送开发分支到远程仓库\ngit push origin feature/test\n```\n\n## 4. git reset\n\n放弃所有更改并回到上一次提交的状态：\n```sh\ngit reset --hard HEAD^\n```\n{% note warning%}\n这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。\n{% endnote %}\n\n保留更改但将其从暂存区中移除：\n```sh\ngit reset HEAD\n```\n\n这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。\n\n\n{% note warning%}\n请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。\n{% endnote %}\n\n## 5. git stash\n\n`git stash` 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。\n\n{% note warning%}\n当你在进行代码开发时，可能会遇到以下情况之一：\n\n你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。\n你正在进行一些尝试性的修改，但暂时不想提交它们。\n在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。\n{% endnote %}\n\n使用 `git stash` 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 `git stash` 都会将当前的修改添加到堆栈的栈顶。可以使用 `git stash list` 命令查看当前所有的存储状态。\n\n```sh\n# 将当前的未提交修改保存为一个新的存储状态。\ngit stash\n\n# 恢复保存的修改\ngit stash apply\n\n# 查看所有状态\ngit stash list\n\n# 恢复特定的存储状态\ngit stash apply stash@{number}\n\n# 删除存储状态\ngit stash drop\n\n# 可以给存储状态添加一个描述\ngit stash save\n\n# 可以直接将保存的修改应用到一个新的分支上\ngit stash branch\n\n# 命令查看所有可用的选项和详细的说明\ngit stash --help\n```","source":"_posts/工具/git使用指南.md","raw":"---\nlayout: 工具\ntitle: git使用指南\ndate: 2023-08-16 10:36:30\ntags: [工具,git]\ncategories: 工具\n---\n\n{% note primary%}\n\ngit 不仅仅是 pull 和 push。\n\n{% endnote %}\n\n\n<!-- more -->\n\n## 1. 一键提交当前分支\n```sh\ngit add .;git commit -m \"test\";git push origin $(git symbolic-ref --short HEAD)\n```\n\n## 2. 删除分支\n\n```sh\n# 删除本地分支\ngit branch -D xxx\n\n# 删除远程分支\ngit push origin --delete xxx\n```\n\n## 3. 开发分支落后时，如何同步 master 分支。\n```sh\n# 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支\ngit checkout master\ngit pull origin master\n\n# 2. 切换回开发分支，并将master分支的变更合并到开发分支上：\ngit checkout feature/test\ngit merge master\n\n# 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。\n\n# 4. 推送开发分支到远程仓库\ngit push origin feature/test\n```\n\n## 4. git reset\n\n放弃所有更改并回到上一次提交的状态：\n```sh\ngit reset --hard HEAD^\n```\n{% note warning%}\n这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。\n{% endnote %}\n\n保留更改但将其从暂存区中移除：\n```sh\ngit reset HEAD\n```\n\n这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。\n\n\n{% note warning%}\n请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。\n{% endnote %}\n\n## 5. git stash\n\n`git stash` 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。\n\n{% note warning%}\n当你在进行代码开发时，可能会遇到以下情况之一：\n\n你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。\n你正在进行一些尝试性的修改，但暂时不想提交它们。\n在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。\n{% endnote %}\n\n使用 `git stash` 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 `git stash` 都会将当前的修改添加到堆栈的栈顶。可以使用 `git stash list` 命令查看当前所有的存储状态。\n\n```sh\n# 将当前的未提交修改保存为一个新的存储状态。\ngit stash\n\n# 恢复保存的修改\ngit stash apply\n\n# 查看所有状态\ngit stash list\n\n# 恢复特定的存储状态\ngit stash apply stash@{number}\n\n# 删除存储状态\ngit stash drop\n\n# 可以给存储状态添加一个描述\ngit stash save\n\n# 可以直接将保存的修改应用到一个新的分支上\ngit stash branch\n\n# 命令查看所有可用的选项和详细的说明\ngit stash --help\n```","slug":"工具/git使用指南","published":1,"updated":"2023-08-24T08:51:28.090Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9y000p384w643sblt0","content":"<div class=\"note note-primary\">\n            <p>git 不仅仅是 pull 和 push。</p>\n          </div>\n\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-一键提交当前分支\">1. 一键提交当前分支</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git add .;git commit -m <span class=\"hljs-string\">&quot;test&quot;</span>;git push origin $(git symbolic-ref --short HEAD)<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-删除分支\">2. 删除分支</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除本地分支</span><br>git branch -D xxx<br><br><span class=\"hljs-comment\"># 删除远程分支</span><br>git push origin --delete xxx<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-开发分支落后时如何同步-master-分支\">3. 开发分支落后时，如何同步 master 分支。</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支</span><br>git checkout master<br>git pull origin master<br><br><span class=\"hljs-comment\"># 2. 切换回开发分支，并将master分支的变更合并到开发分支上：</span><br>git checkout feature/test<br>git merge master<br><br><span class=\"hljs-comment\"># 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。</span><br><br><span class=\"hljs-comment\"># 4. 推送开发分支到远程仓库</span><br>git push origin feature/test<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-git-reset\">4. git reset</span></h2><p>放弃所有更改并回到上一次提交的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset --hard HEAD^<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <p>这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。</p>\n          </div>\n\n<p>保留更改但将其从暂存区中移除：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset HEAD<br></code></pre></td></tr></table></figure>\n\n<p>这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。</p>\n<div class=\"note note-warning\">\n            <p>请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。</p>\n          </div>\n\n<h2><span id=\"5-git-stash\">5. git stash</span></h2><p><code>git stash</code> 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。</p>\n<div class=\"note note-warning\">\n            <p>当你在进行代码开发时，可能会遇到以下情况之一：</p><p>你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。<br>你正在进行一些尝试性的修改，但暂时不想提交它们。<br>在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。</p>\n          </div>\n\n<p>使用 <code>git stash</code> 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 <code>git stash</code> 都会将当前的修改添加到堆栈的栈顶。可以使用 <code>git stash list</code> 命令查看当前所有的存储状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前的未提交修改保存为一个新的存储状态。</span><br>git stash<br><br><span class=\"hljs-comment\"># 恢复保存的修改</span><br>git stash apply<br><br><span class=\"hljs-comment\"># 查看所有状态</span><br>git stash list<br><br><span class=\"hljs-comment\"># 恢复特定的存储状态</span><br>git stash apply stash@&#123;number&#125;<br><br><span class=\"hljs-comment\"># 删除存储状态</span><br>git stash drop<br><br><span class=\"hljs-comment\"># 可以给存储状态添加一个描述</span><br>git stash save<br><br><span class=\"hljs-comment\"># 可以直接将保存的修改应用到一个新的分支上</span><br>git stash branch<br><br><span class=\"hljs-comment\"># 命令查看所有可用的选项和详细的说明</span><br>git stash --<span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>git 不仅仅是 pull 和 push。</p>\n          </div>","more":"<h2 id=\"1-一键提交当前分支\"><a href=\"#1-一键提交当前分支\" class=\"headerlink\" title=\"1. 一键提交当前分支\"></a>1. 一键提交当前分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git add .;git commit -m <span class=\"hljs-string\">&quot;test&quot;</span>;git push origin $(git symbolic-ref --short HEAD)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-删除分支\"><a href=\"#2-删除分支\" class=\"headerlink\" title=\"2. 删除分支\"></a>2. 删除分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除本地分支</span><br>git branch -D xxx<br><br><span class=\"hljs-comment\"># 删除远程分支</span><br>git push origin --delete xxx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-开发分支落后时，如何同步-master-分支。\"><a href=\"#3-开发分支落后时，如何同步-master-分支。\" class=\"headerlink\" title=\"3. 开发分支落后时，如何同步 master 分支。\"></a>3. 开发分支落后时，如何同步 master 分支。</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支</span><br>git checkout master<br>git pull origin master<br><br><span class=\"hljs-comment\"># 2. 切换回开发分支，并将master分支的变更合并到开发分支上：</span><br>git checkout feature/test<br>git merge master<br><br><span class=\"hljs-comment\"># 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。</span><br><br><span class=\"hljs-comment\"># 4. 推送开发分支到远程仓库</span><br>git push origin feature/test<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-git-reset\"><a href=\"#4-git-reset\" class=\"headerlink\" title=\"4. git reset\"></a>4. git reset</h2><p>放弃所有更改并回到上一次提交的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset --hard HEAD^<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <p>这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。</p>\n          </div>\n\n<p>保留更改但将其从暂存区中移除：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset HEAD<br></code></pre></td></tr></table></figure>\n\n<p>这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。</p>\n<div class=\"note note-warning\">\n            <p>请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。</p>\n          </div>\n\n<h2 id=\"5-git-stash\"><a href=\"#5-git-stash\" class=\"headerlink\" title=\"5. git stash\"></a>5. git stash</h2><p><code>git stash</code> 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。</p>\n<div class=\"note note-warning\">\n            <p>当你在进行代码开发时，可能会遇到以下情况之一：</p><p>你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。<br>你正在进行一些尝试性的修改，但暂时不想提交它们。<br>在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。</p>\n          </div>\n\n<p>使用 <code>git stash</code> 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 <code>git stash</code> 都会将当前的修改添加到堆栈的栈顶。可以使用 <code>git stash list</code> 命令查看当前所有的存储状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前的未提交修改保存为一个新的存储状态。</span><br>git stash<br><br><span class=\"hljs-comment\"># 恢复保存的修改</span><br>git stash apply<br><br><span class=\"hljs-comment\"># 查看所有状态</span><br>git stash list<br><br><span class=\"hljs-comment\"># 恢复特定的存储状态</span><br>git stash apply stash@&#123;number&#125;<br><br><span class=\"hljs-comment\"># 删除存储状态</span><br>git stash drop<br><br><span class=\"hljs-comment\"># 可以给存储状态添加一个描述</span><br>git stash save<br><br><span class=\"hljs-comment\"># 可以直接将保存的修改应用到一个新的分支上</span><br>git stash branch<br><br><span class=\"hljs-comment\"># 命令查看所有可用的选项和详细的说明</span><br>git stash --<span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>"},{"title":"工具大全","date":"2023-08-29T09:33:28.000Z","updated":"2023-09-18T02:25:33.225Z","_content":"\n{% note primary%}\n\n要想下班早，工具用的好。\n\n{% endnote %}\n\n# iterm2 跳板机避免重复验证\n\n比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~/.ssh/config 文件中加上下面配置\n```yaml\nHost ujump\n     HostName jump1.xxxx.com\n     Port 22\n     User lee\n     IdentityFile ~/.ssh/id_rsa\n     ServerAliveInterval 300\n     ControlMaster auto\n     ControlPath ~/.ssh/master-%r@%h:%p\n     StrictHostKeyChecking no\n```\n\n这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile\n\n![](iterm.png)\n\n# ssh 免密登陆\n\n## 本地\n```sh\n# 生成公钥\n$ ssh-keygen\n```\n\ncat ~/.ssh/id_rsa.pub\n```sh\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR\n```\n\n## 服务器\n将上一步的key 放入 ~/.ssh/authorized_keys\n\n# 屏蔽浏览器网络请求\n\n{% note warning%}\n\n在 F12 调试时很不方便，故屏蔽掉不相关的请求。\n\n{% endnote %}\n\n```sh\n-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/\n```\n\n# Mac 工具推荐\n\n#### 翻译工具\n```\n沙拉查词\n```\n\n#### 截屏\n```\nsnipaste\n```\n\n#### 剪切板（复制多个）\n```\nicopy\n```\n\n#### 内存、CPU、磁盘占用\n```\niStat Menus\n```\n\n\n# Vscode 插件\n#### markdone 预览\n```\nMarkdown Preview Enhanced\n```\n\n#### git 查看历史提交\n```\nGit History\n```\n\n#### yaml自动补全\n```\n* git: line\n* kubernetes、yaml\n```\n\n#### 自动生成图\n```\nmarkmap\n```\n\n#### 远程开发\n```\nRemote - SSH\n```\n\n#### html 预览\n```\nHTML Preview\n```\n\n#### 生成脑图\n```\nMarkMap\n```\n\n#### 粘贴图片\n```\nPasts Image\n```\n\n#### 坤坤鼓励师\n```\n坤坤鼓励师\n```\n","source":"_posts/工具/工具大全.md","raw":"---\ntitle: 工具大全\ncategory: 工具\ndate: 2023-08-29 17:33:28\nupdated:\ntags: [工具,ssh]\n---\n\n{% note primary%}\n\n要想下班早，工具用的好。\n\n{% endnote %}\n\n# iterm2 跳板机避免重复验证\n\n比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~/.ssh/config 文件中加上下面配置\n```yaml\nHost ujump\n     HostName jump1.xxxx.com\n     Port 22\n     User lee\n     IdentityFile ~/.ssh/id_rsa\n     ServerAliveInterval 300\n     ControlMaster auto\n     ControlPath ~/.ssh/master-%r@%h:%p\n     StrictHostKeyChecking no\n```\n\n这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile\n\n![](iterm.png)\n\n# ssh 免密登陆\n\n## 本地\n```sh\n# 生成公钥\n$ ssh-keygen\n```\n\ncat ~/.ssh/id_rsa.pub\n```sh\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR\n```\n\n## 服务器\n将上一步的key 放入 ~/.ssh/authorized_keys\n\n# 屏蔽浏览器网络请求\n\n{% note warning%}\n\n在 F12 调试时很不方便，故屏蔽掉不相关的请求。\n\n{% endnote %}\n\n```sh\n-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/\n```\n\n# Mac 工具推荐\n\n#### 翻译工具\n```\n沙拉查词\n```\n\n#### 截屏\n```\nsnipaste\n```\n\n#### 剪切板（复制多个）\n```\nicopy\n```\n\n#### 内存、CPU、磁盘占用\n```\niStat Menus\n```\n\n\n# Vscode 插件\n#### markdone 预览\n```\nMarkdown Preview Enhanced\n```\n\n#### git 查看历史提交\n```\nGit History\n```\n\n#### yaml自动补全\n```\n* git: line\n* kubernetes、yaml\n```\n\n#### 自动生成图\n```\nmarkmap\n```\n\n#### 远程开发\n```\nRemote - SSH\n```\n\n#### html 预览\n```\nHTML Preview\n```\n\n#### 生成脑图\n```\nMarkMap\n```\n\n#### 粘贴图片\n```\nPasts Image\n```\n\n#### 坤坤鼓励师\n```\n坤坤鼓励师\n```\n","slug":"工具/工具大全","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"clmo9ls9z000t384w8p3410kc","content":"<div class=\"note note-primary\">\n            <p>要想下班早，工具用的好。</p>\n          </div>\n\n<h1><span id=\"iterm2-跳板机避免重复验证\">iterm2 跳板机避免重复验证</span></h1><p>比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~&#x2F;.ssh&#x2F;config 文件中加上下面配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">ujump</span><br>     <span class=\"hljs-string\">HostName</span> <span class=\"hljs-string\">jump1.xxxx.com</span><br>     <span class=\"hljs-string\">Port</span> <span class=\"hljs-number\">22</span><br>     <span class=\"hljs-string\">User</span> <span class=\"hljs-string\">lee</span><br>     <span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>     <span class=\"hljs-string\">ServerAliveInterval</span> <span class=\"hljs-number\">300</span><br>     <span class=\"hljs-string\">ControlMaster</span> <span class=\"hljs-string\">auto</span><br>     <span class=\"hljs-string\">ControlPath</span> <span class=\"hljs-string\">~/.ssh/master-%r@%h:%p</span><br>     <span class=\"hljs-string\">StrictHostKeyChecking</span> <span class=\"hljs-literal\">no</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile</p>\n<p><img src=\"iterm.png\"></p>\n<h1><span id=\"ssh-免密登陆\">ssh 免密登陆</span></h1><h2><span id=\"本地\">本地</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成公钥</span><br>$ ssh-keygen<br></code></pre></td></tr></table></figure>\n\n<p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"服务器\">服务器</span></h2><p>将上一步的key 放入 ~&#x2F;.ssh&#x2F;authorized_keys</p>\n<h1><span id=\"屏蔽浏览器网络请求\">屏蔽浏览器网络请求</span></h1><div class=\"note note-warning\">\n            <p>在 F12 调试时很不方便，故屏蔽掉不相关的请求。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"mac-工具推荐\">Mac 工具推荐</span></h1><h4><span id=\"翻译工具\">翻译工具</span></h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">沙拉查词<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"截屏\">截屏</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">snipaste</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"剪切板复制多个\">剪切板（复制多个）</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">icopy</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"内存-cpu-磁盘占用\">内存、CPU、磁盘占用</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">iStat Menus</span><br></code></pre></td></tr></table></figure>\n\n\n<h1><span id=\"vscode-插件\">Vscode 插件</span></h1><h4><span id=\"markdone-预览\">markdone 预览</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Markdown Preview Enhanced</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"git-查看历史提交\">git 查看历史提交</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Git History</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"yaml自动补全\">yaml自动补全</span></h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>git: line<br><span class=\"hljs-bullet\">* </span>kubernetes、yaml<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"自动生成图\">自动生成图</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">markmap</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"远程开发\">远程开发</span></h4><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-comment\">Remote - SSH</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"html-预览\">html 预览</span></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">HTML</span> Preview<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"生成脑图\">生成脑图</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">MarkMap</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"粘贴图片\">粘贴图片</span></h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Pasts Image</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"坤坤鼓励师\">坤坤鼓励师</span></h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">坤坤鼓励师<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note note-primary\">\n            <p>要想下班早，工具用的好。</p>\n          </div>\n\n<h1 id=\"iterm2-跳板机避免重复验证\"><a href=\"#iterm2-跳板机避免重复验证\" class=\"headerlink\" title=\"iterm2 跳板机避免重复验证\"></a>iterm2 跳板机避免重复验证</h1><p>比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~&#x2F;.ssh&#x2F;config 文件中加上下面配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">ujump</span><br>     <span class=\"hljs-string\">HostName</span> <span class=\"hljs-string\">jump1.xxxx.com</span><br>     <span class=\"hljs-string\">Port</span> <span class=\"hljs-number\">22</span><br>     <span class=\"hljs-string\">User</span> <span class=\"hljs-string\">lee</span><br>     <span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>     <span class=\"hljs-string\">ServerAliveInterval</span> <span class=\"hljs-number\">300</span><br>     <span class=\"hljs-string\">ControlMaster</span> <span class=\"hljs-string\">auto</span><br>     <span class=\"hljs-string\">ControlPath</span> <span class=\"hljs-string\">~/.ssh/master-%r@%h:%p</span><br>     <span class=\"hljs-string\">StrictHostKeyChecking</span> <span class=\"hljs-literal\">no</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile</p>\n<p><img src=\"iterm.png\"></p>\n<h1 id=\"ssh-免密登陆\"><a href=\"#ssh-免密登陆\" class=\"headerlink\" title=\"ssh 免密登陆\"></a>ssh 免密登陆</h1><h2 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成公钥</span><br>$ ssh-keygen<br></code></pre></td></tr></table></figure>\n\n<p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>将上一步的key 放入 ~&#x2F;.ssh&#x2F;authorized_keys</p>\n<h1 id=\"屏蔽浏览器网络请求\"><a href=\"#屏蔽浏览器网络请求\" class=\"headerlink\" title=\"屏蔽浏览器网络请求\"></a>屏蔽浏览器网络请求</h1><div class=\"note note-warning\">\n            <p>在 F12 调试时很不方便，故屏蔽掉不相关的请求。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Mac-工具推荐\"><a href=\"#Mac-工具推荐\" class=\"headerlink\" title=\"Mac 工具推荐\"></a>Mac 工具推荐</h1><h4 id=\"翻译工具\"><a href=\"#翻译工具\" class=\"headerlink\" title=\"翻译工具\"></a>翻译工具</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">沙拉查词<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">snipaste</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"剪切板（复制多个）\"><a href=\"#剪切板（复制多个）\" class=\"headerlink\" title=\"剪切板（复制多个）\"></a>剪切板（复制多个）</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">icopy</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"内存、CPU、磁盘占用\"><a href=\"#内存、CPU、磁盘占用\" class=\"headerlink\" title=\"内存、CPU、磁盘占用\"></a>内存、CPU、磁盘占用</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">iStat Menus</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"Vscode-插件\"><a href=\"#Vscode-插件\" class=\"headerlink\" title=\"Vscode 插件\"></a>Vscode 插件</h1><h4 id=\"markdone-预览\"><a href=\"#markdone-预览\" class=\"headerlink\" title=\"markdone 预览\"></a>markdone 预览</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Markdown Preview Enhanced</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"git-查看历史提交\"><a href=\"#git-查看历史提交\" class=\"headerlink\" title=\"git 查看历史提交\"></a>git 查看历史提交</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Git History</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"yaml自动补全\"><a href=\"#yaml自动补全\" class=\"headerlink\" title=\"yaml自动补全\"></a>yaml自动补全</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>git: line<br><span class=\"hljs-bullet\">* </span>kubernetes、yaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动生成图\"><a href=\"#自动生成图\" class=\"headerlink\" title=\"自动生成图\"></a>自动生成图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">markmap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"远程开发\"><a href=\"#远程开发\" class=\"headerlink\" title=\"远程开发\"></a>远程开发</h4><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-comment\">Remote - SSH</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"html-预览\"><a href=\"#html-预览\" class=\"headerlink\" title=\"html 预览\"></a>html 预览</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">HTML</span> Preview<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"生成脑图\"><a href=\"#生成脑图\" class=\"headerlink\" title=\"生成脑图\"></a>生成脑图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">MarkMap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"粘贴图片\"><a href=\"#粘贴图片\" class=\"headerlink\" title=\"粘贴图片\"></a>粘贴图片</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Pasts Image</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坤坤鼓励师\"><a href=\"#坤坤鼓励师\" class=\"headerlink\" title=\"坤坤鼓励师\"></a>坤坤鼓励师</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">坤坤鼓励师<br></code></pre></td></tr></table></figure>\n"},{"layout":"工具","title":"Markdown使用","date":"2023-08-16T08:39:49.000Z","sticky":999,"_content":"\n{% note primary%}\n\n有一些语法可能只能在 hexo fluid 主题中使用。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 文本颜色\n```md\n<span style=\"color: green;\">green</span>\n<span style=\"color: red;\">red</span>\n```\n\n## 2. 页面内实现目录\n```md\n### 目录\n[1. 章节1](#1)\n\n<!-- 这里 p 标签必须和下面一行隔开 -->\n<p id=\"1\"></p>\n```\n\n## 3. 标签\n\n### 3.1 便签\n参考：https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\n\n在 markdown 中加入如下的代码来使用便签：\n\n```md\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n或者使用 HTML 形式：\n```html\n<p class=\"note note-primary\">标签</p>\n```\n可选便签：\n\n{% note primary %}\nprimary\n{% endnote %}\n\n{% note secondary %}\nsecondary\n{% endnote %}\n\n{% note success %}\nsuccess\n{% endnote %}\n\n{% note danger %}\ndanger\n{% endnote %}\n\n{% note warning %}\nwarning\n{% endnote %}\n\n{% note info %}\ninfo\n{% endnote %}\n\n{% note light %}\nlight\n{% endnote %}\n\n### 3.2 行内标签\n\n在 markdown 中加入如下的代码来使用 Label：\n\n{% label primary @text %}\n\n```md\n{% label primary @text %}\n```\n或者使用 HTML 形式：\n\n```html\n<span class=\"label label-primary\">Label</span>\n```\n\n可选 Label：\n\n{% label primary @primary %}\n{% label default @default %}\n{% label info @info %}\n{% label success @success %}\n{% label warning @warning %}\n{% label danger @danger %}\n\n\n\n{% note warning %}\n警告：\n\n若使用 {% label primary @text %}，text 不能以 @ 开头\n{% endnote %}\n\n### 3.3 勾选框\n\n在 markdown 中加入如下的代码来使用 Checkbox：\n\n```md\n{% cb text, checked?, incline? %}\n```\n\n- text：显示的文字\n- checked：默认是否已勾选，默认 false\n- incline: 是否内联（可以理解为后面的文字是否换行），默认 false\n\n示例：\n\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n示例代码：\n```md\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n```\n\n## 4. 文章概要\n```md\n<!-- more -->\n```","source":"_posts/工具/markdown使用.md","raw":"---\nlayout: 工具\ntitle: Markdown使用\ndate: 2023-08-16 16:39:49\ntags: [markdown,fluid,hexo]\ncategories: 工具\nsticky: 999\n# index_img: /img/titles/markdown.png\n---\n\n{% note primary%}\n\n有一些语法可能只能在 hexo fluid 主题中使用。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 文本颜色\n```md\n<span style=\"color: green;\">green</span>\n<span style=\"color: red;\">red</span>\n```\n\n## 2. 页面内实现目录\n```md\n### 目录\n[1. 章节1](#1)\n\n<!-- 这里 p 标签必须和下面一行隔开 -->\n<p id=\"1\"></p>\n```\n\n## 3. 标签\n\n### 3.1 便签\n参考：https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\n\n在 markdown 中加入如下的代码来使用便签：\n\n```md\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n或者使用 HTML 形式：\n```html\n<p class=\"note note-primary\">标签</p>\n```\n可选便签：\n\n{% note primary %}\nprimary\n{% endnote %}\n\n{% note secondary %}\nsecondary\n{% endnote %}\n\n{% note success %}\nsuccess\n{% endnote %}\n\n{% note danger %}\ndanger\n{% endnote %}\n\n{% note warning %}\nwarning\n{% endnote %}\n\n{% note info %}\ninfo\n{% endnote %}\n\n{% note light %}\nlight\n{% endnote %}\n\n### 3.2 行内标签\n\n在 markdown 中加入如下的代码来使用 Label：\n\n{% label primary @text %}\n\n```md\n{% label primary @text %}\n```\n或者使用 HTML 形式：\n\n```html\n<span class=\"label label-primary\">Label</span>\n```\n\n可选 Label：\n\n{% label primary @primary %}\n{% label default @default %}\n{% label info @info %}\n{% label success @success %}\n{% label warning @warning %}\n{% label danger @danger %}\n\n\n\n{% note warning %}\n警告：\n\n若使用 {% label primary @text %}，text 不能以 @ 开头\n{% endnote %}\n\n### 3.3 勾选框\n\n在 markdown 中加入如下的代码来使用 Checkbox：\n\n```md\n{% cb text, checked?, incline? %}\n```\n\n- text：显示的文字\n- checked：默认是否已勾选，默认 false\n- incline: 是否内联（可以理解为后面的文字是否换行），默认 false\n\n示例：\n\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n示例代码：\n```md\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n```\n\n## 4. 文章概要\n```md\n<!-- more -->\n```","slug":"工具/markdown使用","published":1,"updated":"2023-08-23T09:19:05.453Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9z000v384w35oh4928","content":"<div class=\"note note-primary\">\n            <p>有一些语法可能只能在 hexo fluid 主题中使用。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-文本颜色\">1. 文本颜色</span></h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: green;&quot;</span>&gt;</span></span>green<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;</span></span>red<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"2-页面内实现目录\">2. 页面内实现目录</span></h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"hljs-section\">### 目录</span><br>[<span class=\"hljs-string\">1. 章节1</span>](<span class=\"hljs-link\">#1</span>)<br><br>&lt;!-- 这里 p 标签必须和下面一行隔开 --&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-标签\">3. 标签</span></h2><h3><span id=\"31-便签\">3.1 便签</span></h3><p>参考：<a href=\"https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\">https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p>\n<p>在 markdown 中加入如下的代码来使用便签：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% note success %&#125;<br>文字 或者 <span class=\"hljs-code\">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;note note-primary&quot;</span>&gt;</span>标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>可选便签：</p>\n<div class=\"note note-primary\">\n            <p>primary</p>\n          </div>\n\n<div class=\"note note-secondary\">\n            <p>secondary</p>\n          </div>\n\n<div class=\"note note-success\">\n            <p>success</p>\n          </div>\n\n<div class=\"note note-danger\">\n            <p>danger</p>\n          </div>\n\n<div class=\"note note-warning\">\n            <p>warning</p>\n          </div>\n\n<div class=\"note note-info\">\n            <p>info</p>\n          </div>\n\n<div class=\"note note-light\">\n            <p>light</p>\n          </div>\n\n<h3><span id=\"32-行内标签\">3.2 行内标签</span></h3><p>在 markdown 中加入如下的代码来使用 Label：</p>\n<span class=\"label label-primary\">text</span>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;label label-primary&quot;</span>&gt;</span>Label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可选 Label：</p>\n<span class=\"label label-primary\">primary</span>\n<span class=\"label label-default\">default</span>\n<span class=\"label label-info\">info</span>\n<span class=\"label label-success\">success</span>\n<span class=\"label label-warning\">warning</span>\n<span class=\"label label-danger\">danger</span>\n\n\n\n<div class=\"note note-warning\">\n            <p>警告：</p><p>若使用 <span class=\"label label-primary\">text</span>，text 不能以 @ 开头</p>\n          </div>\n\n<h3><span id=\"33-勾选框\">3.3 勾选框</span></h3><p>在 markdown 中加入如下的代码来使用 Checkbox：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>text：显示的文字</li>\n<li>checked：默认是否已勾选，默认 false</li>\n<li>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</li>\n</ul>\n<p>示例：</p>\n<div>\n            <input type=\"checkbox\" disabled>普通示例\n          </div>\n<div>\n            <input type=\"checkbox\" disabled checked=\"checked\">默认选中\n          </div>\n\n            <input type=\"checkbox\" disabled>内联示例\n           后面文字不换行\n<input type=\"checkbox\" disabled> 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n<p>示例代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb 普通示例 %&#125;<br>&#123;% cb 默认选中, true %&#125;<br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联）<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-文章概要\">4. 文章概要</span></h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>有一些语法可能只能在 hexo fluid 主题中使用。</p>\n          </div>","more":"<h2 id=\"1-文本颜色\"><a href=\"#1-文本颜色\" class=\"headerlink\" title=\"1. 文本颜色\"></a>1. 文本颜色</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: green;&quot;</span>&gt;</span></span>green<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;</span></span>red<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-页面内实现目录\"><a href=\"#2-页面内实现目录\" class=\"headerlink\" title=\"2. 页面内实现目录\"></a>2. 页面内实现目录</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"hljs-section\">### 目录</span><br>[<span class=\"hljs-string\">1. 章节1</span>](<span class=\"hljs-link\">#1</span>)<br><br>&lt;!-- 这里 p 标签必须和下面一行隔开 --&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-标签\"><a href=\"#3-标签\" class=\"headerlink\" title=\"3. 标签\"></a>3. 标签</h2><h3 id=\"3-1-便签\"><a href=\"#3-1-便签\" class=\"headerlink\" title=\"3.1 便签\"></a>3.1 便签</h3><p>参考：<a href=\"https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\">https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p>\n<p>在 markdown 中加入如下的代码来使用便签：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% note success %&#125;<br>文字 或者 <span class=\"hljs-code\">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;note note-primary&quot;</span>&gt;</span>标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>可选便签：</p>\n<div class=\"note note-primary\">\n            <p>primary</p>\n          </div>\n\n<div class=\"note note-secondary\">\n            <p>secondary</p>\n          </div>\n\n<div class=\"note note-success\">\n            <p>success</p>\n          </div>\n\n<div class=\"note note-danger\">\n            <p>danger</p>\n          </div>\n\n<div class=\"note note-warning\">\n            <p>warning</p>\n          </div>\n\n<div class=\"note note-info\">\n            <p>info</p>\n          </div>\n\n<div class=\"note note-light\">\n            <p>light</p>\n          </div>\n\n<h3 id=\"3-2-行内标签\"><a href=\"#3-2-行内标签\" class=\"headerlink\" title=\"3.2 行内标签\"></a>3.2 行内标签</h3><p>在 markdown 中加入如下的代码来使用 Label：</p>\n<span class=\"label label-primary\">text</span>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;label label-primary&quot;</span>&gt;</span>Label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可选 Label：</p>\n<span class=\"label label-primary\">primary</span>\n<span class=\"label label-default\">default</span>\n<span class=\"label label-info\">info</span>\n<span class=\"label label-success\">success</span>\n<span class=\"label label-warning\">warning</span>\n<span class=\"label label-danger\">danger</span>\n\n\n\n<div class=\"note note-warning\">\n            <p>警告：</p><p>若使用 <span class=\"label label-primary\">text</span>，text 不能以 @ 开头</p>\n          </div>\n\n<h3 id=\"3-3-勾选框\"><a href=\"#3-3-勾选框\" class=\"headerlink\" title=\"3.3 勾选框\"></a>3.3 勾选框</h3><p>在 markdown 中加入如下的代码来使用 Checkbox：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>text：显示的文字</li>\n<li>checked：默认是否已勾选，默认 false</li>\n<li>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</li>\n</ul>\n<p>示例：</p>\n<div>\n            <input type=\"checkbox\" disabled>普通示例\n          </div>\n<div>\n            <input type=\"checkbox\" disabled checked=\"checked\">默认选中\n          </div>\n\n            <input type=\"checkbox\" disabled>内联示例\n           后面文字不换行\n<input type=\"checkbox\" disabled> 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n<p>示例代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb 普通示例 %&#125;<br>&#123;% cb 默认选中, true %&#125;<br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联）<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-文章概要\"><a href=\"#4-文章概要\" class=\"headerlink\" title=\"4. 文章概要\"></a>4. 文章概要</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure>"},{"layout":"工具","title":"oh my zsh 让终端飞","date":"2023-07-27T10:31:40.000Z","_content":"\n{% note primary%}\n\noh my zsh 让终端飞。\n\n{% endnote %}\n\n<!-- more -->\n\n\n```sh\n# yum先安装，如果是ubuntu使用 apt-get install zsh \nyum -y install zsh\n\n# 安装脚本\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# 插件安装\n\n## 高亮插件\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n## 自动补全\ngit clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n\n#### 手动更改插件配置\n```sh\n$ vim ~/.zshrc\n\n# plugins 更改如下\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\n# 更换主题\nZSH_THEME=\"ys\"\n\n# 重新加载\nsource ~/.zshrc\n```\n","source":"_posts/工具/oh-my-zsh-让终端飞.md","raw":"---\nlayout: 工具\ntitle: oh my zsh 让终端飞\ndate: 2023-07-27 18:31:40\ntags: [工具,oh my zsh]\ncategories: 工具\n---\n\n{% note primary%}\n\noh my zsh 让终端飞。\n\n{% endnote %}\n\n<!-- more -->\n\n\n```sh\n# yum先安装，如果是ubuntu使用 apt-get install zsh \nyum -y install zsh\n\n# 安装脚本\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# 插件安装\n\n## 高亮插件\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n## 自动补全\ngit clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n\n#### 手动更改插件配置\n```sh\n$ vim ~/.zshrc\n\n# plugins 更改如下\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\n# 更换主题\nZSH_THEME=\"ys\"\n\n# 重新加载\nsource ~/.zshrc\n```\n","slug":"工具/oh-my-zsh-让终端飞","published":1,"updated":"2023-08-29T09:54:14.592Z","comments":1,"photos":[],"link":"","_id":"clmo9ls9z000z384w7p447m3f","content":"<div class=\"note note-primary\">\n            <p>oh my zsh 让终端飞。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># yum先安装，如果是ubuntu使用 apt-get install zsh </span><br>yum -y install zsh<br><br><span class=\"hljs-comment\"># 安装脚本</span><br>sh -c <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 插件安装</span><br><br><span class=\"hljs-comment\">## 高亮插件</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"hljs-variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><span class=\"hljs-comment\">## 自动补全</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"hljs-variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure>\n\n\n<h4><span id=\"手动更改插件配置\">手动更改插件配置</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ vim ~/.zshrc<br><br><span class=\"hljs-comment\"># plugins 更改如下</span><br>plugins=(<br>  git<br>  zsh-autosuggestions<br>  zsh-syntax-highlighting<br>)<br><br><span class=\"hljs-comment\"># 更换主题</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;ys&quot;</span><br><br><span class=\"hljs-comment\"># 重新加载</span><br><span class=\"hljs-built_in\">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>oh my zsh 让终端飞。</p>\n          </div>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># yum先安装，如果是ubuntu使用 apt-get install zsh </span><br>yum -y install zsh<br><br><span class=\"hljs-comment\"># 安装脚本</span><br>sh -c <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 插件安装</span><br><br><span class=\"hljs-comment\">## 高亮插件</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"hljs-variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><span class=\"hljs-comment\">## 自动补全</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"hljs-variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"手动更改插件配置\"><a href=\"#手动更改插件配置\" class=\"headerlink\" title=\"手动更改插件配置\"></a>手动更改插件配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ vim ~/.zshrc<br><br><span class=\"hljs-comment\"># plugins 更改如下</span><br>plugins=(<br>  git<br>  zsh-autosuggestions<br>  zsh-syntax-highlighting<br>)<br><br><span class=\"hljs-comment\"># 更换主题</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;ys&quot;</span><br><br><span class=\"hljs-comment\"># 重新加载</span><br><span class=\"hljs-built_in\">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"linux 命令大全","date":"2023-08-16T06:40:47.000Z","sticky":1000,"_content":"\n{% note primary%}\n\n分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用\n\n{% endnote %}\n\n<!-- more -->\n\n\n# 1. 文件操作\n## 文件权限\n```sh\n# 以数字形式输出文件权限，0644\nstat -c '%a' example.txt\n```\n\n```sh\nls -l example.txt\n\n# 输出将类似于以下内容：\n-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt\n\n# 在这个示例中，-rw-r--r--表示文件的权限。\n# 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。\n# 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。\n# 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。\n```\n\n## 解压、压缩\n\n### 解压\n```sh\ntar -xzvf test.tar.gz\n```\n### 压缩\n```sh\ntar -czvf test.tar.gz README.md\n```\n\n### 解压到指定文件夹\n```sh\ntar -xzvf test.tar.gz -C /home/test\n```\n### 列出压缩文件内容\n```sh\ntar -tzvf test.tar.gz \n```\n\n{% note warning %}\n**参数说明**\n* -v 显示指令执行过程。\n* -c 建立新的备份文件。\n* -f 指定备份文件。\n* -z 通过gzip指令处理备份文件。\n* -x 从备份文件中还原文件。\n{% endnote %}\n\n### 使用密码\n\n```sh\n# 将当前目录下的files文件夹打包压缩，密码为password\n# -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。\ntar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz\n\n# 将当前目录下的files.tar.gz进行解密解压\nopenssl des3 -d -salt -k password -iter 10000 -in files.tar.gz | tar -xzf -\n```\n\n### 分割文件\n\n```sh\n# 分割\nsplit -b 1M file.tar.gz file_bakcup.\n\n# 合并\ncat file_backup* > file.tar.gz\n```\n\n## 软、硬链接\n\n删除源文件，硬链接没有影响，软链接不可用。\n\n### 软链接\n```sh\nln -s README.md README.soft.md\n```\n\n### 硬链接\n```sh\nln README.md README.hard.md\n```\n\n## dd\n\n生成100M文件\n```sh\ndd if=/dev/zero of=file_100M bs=1M count=100\n```\n\n随机生成1百万个1K的文件\n\n```sh\ndd if=/dev/zero of=100M bs=1M count=100\n```\n\n## 内存、cpu、io\n\n### 内存\n\n1. 输入 `top` 命令，按下 `M` 键可以按照内存使用量进行排序。\n2. 查看内存使用最多的5个进程\n\n```sh\nps aux --sort=-%mem | head -n 6\n```\n\n#### 查看指定进程内存占用\n\n```sh\nps -o rss= -p <pid>\n```\n\n### CPU\n\n1. 输入 `top` 命令，按下 `P` 键可以按照内存使用量进行排序。\n2. 查看CPU使用最多的5个进程\n\n```sh\nps aux --sort=-%cpu | head -n 6\n```\n\n### IO\n\n{% note warning %}\n请注意，`iotop` 和 `pidstat` 可能需要先安装，在终端输入以下命令可以安装它们：\n{% endnote %}\n\n```sh\n# centos\nyum -y install iotop\n\n# ubuntu\napt-get install iotop sysstat\n```\n#### iotop\n{% label primary @iotop %} 命令可以 {% label danger @实时 %} 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n   \n#### pidstat\n{% label success @pidstat %} 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n```sh\npidstat -d | sort -nrk 2 | head -n 6\n```\n\n#### iostat\n{% label primary @iostat %} 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n```sh\n# 瞬时数据\niostat -d\n\n# 每隔5s采样一次\niostat -d -t 5\n\n# 输出\nLinux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nvda               2.70        19.13        36.54  102409528  195610326\n```\n\n{% note warning %}\n\n设备名称：显示连接到系统的硬盘和存储设备的设备名称。\n\ntps（Transactions Per Second）：每秒处理的 I/O 事务数。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nkB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nsvctm（Service Time）：每个 I/O 操作花费的平均时间。\n\n%util：设备使用率的百分比，即设备每秒钟的 I/O 请求占总容量的百分比。\n{% endnote %}\n\n\n## top\n### 前五行\n\n![Alt text](top-01.png)\n\n#### 1. 输出系统任务队列信息\n\n{% note warning %}\n\n**10:38:45**：系统当前时间 \n**up 2days 18:57**：系统开机后到现在的总运行时间\n**1 user**：当前登录用户数\n**load average**: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值=1时表示满负荷状态，多核CPU中4代表4核满负荷状态。\n{% endnote %}\n\n#### 2. 任务进程信息\n\n{% note warning %}\n**total**：系统全部进程的数量\n**running**：运行状态的进程数量\n**sleeping**：睡眠状态的进程数量\n**stoped**：停止状态的进程数量\n**zombie**：僵尸进程数量\n{% endnote %}\n\n#### 3. CPU信息\n\n{% note warning %}\n**us**：用户空间占用CPU百分比\n**sy**：内核空间占用CPU百分比\n**ni**：已调整优先级的用户进程的CPU百分比\n**id**：空闲CPU百分比，越低说明CPU使用率越高\n**wa**：等待IO完成的CPU百分比\n**hi**：处理硬件中断的占用CPU百分比\n**si**：处理软中断占用CPU百分比\n**st**：虚拟机占用CPU百分比\n{% endnote %}\n\n#### 4. 物理内存信息\n\n{% note warning %}\n以下内存单位均为MB\n\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n\n**total**：物理内存总量\n**free**：空闲内存总量\n**used**：使用中内存总量\n**buff/cache**：用于内核缓存的内存量\n{% endnote %}\n\n#### 5. 交互区内存信息\n\nswap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。\n\n{% note warning %}\n**total**：交换区总量\n**free**：空闲交换区总量\n**used**：使用的交换区总量\n**avail Mem**：可用交换区总量\n{% endnote %}\n\n\n### 进程列表\n\n![进程列表](top-02.png)\n{% note warning %}\n**PID**：进程号\n**USER**：运行进程的用户\n**PR**：优先级\n**NI**：nice值。负值表示高优先级，正值表示低优先级\n**VIRT**：占用虚拟内存，单位kb。VIRT=SWAP+RES \n**RES**：占用真实内存，单位kb\n**SHR**：共享内存大小，单位kb\n**S**：进程状态（I=空闲状态，R=运行状态，S=睡眠状态，D=不可中断的睡眠状态，T=跟踪/停止，Z=僵尸进程）\n**%CPU**：占用CPU百分比\n**%MEM**：占用内存百分比\n**TIME+**：上次启动后至今的总运行时间\n**COMMAND**：命令名or命令行\n{% endnote %}\n\n### 使用方法\n#### 更换内存单位\n{% note warning %}\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n{% endnote %}\n\n## 磁盘\n\n### du\n{% note warning %}\n\n直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。\n\nMac 上使用 `du -s` 输出大小可能是正常的2倍，至于为什么，暂不清楚。Mac 可以使用 `du -hd1` 查看\n\n{% endnote %}\n\n选项与参数：\n\n-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。\n-h ：以人们较易读的容量格式 (G/M) 显示；\n-s ：列出总占用量；\n-S ：不包括子目录下的总计，与 -s 有点差别。\n-k ：以 KBytes 列出容量显示；\n-m ：以 MBytes 列出容量显示；\n\n```sh\n# 查看指定目录\ndu -sh .\n3.8G\t.\n# ====================================\n\n# 查看指定目录下的所有文件大小，深度为1\ndu -h $DIR --max-depth=1 | sort -h\n\n# 部分输出\n...\n388M\t./k3s\n570M\t./.npm\n1.4G\t./CAI.bak\n3.8G\t.\n\n# ====================================\n# 参数解析\n# --max-depth 深度\n# sort -h 从小到大排序\n# sort -rh 从大到小排序\n```\n\n#### \n\n### df\n\n显示系统中每个文件系统的磁盘使用情况\n\n```sh\ndf -h\n```\n\n### lsblk\n\n显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 /，而数据盘则可能挂载在其他目录上，如/home、/mnt等。\n\n```sh\nlsblk\n```\n\n显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。\n   \n```sh\ncat /etc/fstab\n```\n\n### fdisk\n\n列出所有分区信息\n\n```sh\nfdisk\n```\n\n### mount\n\n{% note warning %}\n目的：向linux系统新增一块硬盘，并挂载到指定目录。\n{% endnote %}\n\n1. 进入设备分区\n\nlsblk 查看对应的磁盘名称，比如为 vdb。\n   \n```sh\nfdisk /dev/vdb\n```\n\n2. 进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。\n\n3. 提供分区号。\n\n4. 提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。\n\n5. 使用 p 命令确认分区表是否正确。\n\n6. 使用 w 命令保存新的分区表。\n\n7. 格式化分区\n\n```sh\nmkfs.ext4 /dev/vdb1\nmkfs.ext4 /dev/vdb2\n```\n\n8. 创建两个挂载点。运行以下命令：\n\n```sh\nsudo mkdir /mnt/partition1\nsudo mkdir /mnt/partition2\n```\n\n9. 挂载分区\n    \n```sh\nsudo mount /dev/vdb1 /mnt/partition1\nsudo mount /dev/vdb2 /mnt/partition2\n```\n\n10.  开机自动挂载\n\n```sh\nvim /etc/fstab\n\n/dev/vdb1   /mnt/partition1   ext4   defaults   0   0\n/dev/vdb2   /mnt/partition2   ext4   defaults   0   0\n```\n\n## 命令行快捷键\n{% note warning %}\n请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。\n{% endnote %}\n\n| 快捷键        | 操作                                           |\n| ------------- | ---------------------------------------------- |\n| Ctrl + 左右键 | 在单词之间跳转                                 |\n| Ctrl + a      | 跳到本行的行首                                 |\n| Ctrl + e      | 跳到页尾                                       |\n| Ctrl + u      | 删除当前光标前面的文字 （还有剪切功能）        |\n| Ctrl + k      | 删除当前光标后面的文字 （还有剪切功能）        |\n| Ctrl + L      | 进行清屏操作                                   |\n| Ctrl + y      | 粘贴 Ctrl+u 或 Ctrl+k 剪切的内容               |\n| Ctrl + w      | 删除光标前面的单词的字符（以空格隔开的字符串） |\n| Alt + d       | 由光标位置开始，往右删除单词，往行尾删         |\n| Ctrl + r      | 搜索执行过的命令                               |\n| ! + 字符      | 快速执行最近执行过的命令，其中包含该字符       |\n| history       | 显示部分历史命令                               |\n\n\n# 2. 网络管理\n\n## 端口查看\n\n### netstat\n\n{% note success %}\n\nnetstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。\n\n{% endnote %}\n\n```sh\nnetstat -nplt\n```\n参数说明:\n\n{% note warning %}\n-n 将字母转化为数字\n\n-p 显示进程相关信息\n\n-l 列出状态为监听\n\n-t 只查看tcp协议\n\n-a 查看全部协议(netstat -an)\n{% endnote %}\n\n### lsof\n\n```sh\nlsof -i :30001\n```\n\n### telnet\n```sh\ntelnet 127.0.0.1 30001\n```\n## 路由\n\n**查看默认路由表信息**\n```sh\nip r\nip -6 r\nroute\n```\n\n**查看路由表信息**\n```sh\nip rule\nip -6 rule \nip rule list\n```\n\n**查看走哪条路由**\n```sh\nip route get 8.8.8.8\n```\n\n**路由追踪**\n```sh\ntraceroute 8.8.8.8\n```\n## 网速测试\n\n**安装**\n```sh\nsudo yum - y install speedtest-cli\n\nsudo apt install speedtest-cli\n\nsudo pip3 install speedtest-cli\n```\n\n**执行 speedtest-cli**\n```sh\n$ speedtest-cli\nRetrieving speedtest.net configuration...\nTesting from Unknown (165.154.145.190)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms\nTesting download speed................................................................................\nDownload: 56.57 Mbit/s\nTesting upload speed......................................................................................................\nUpload: 34.54 Mbit/s\n```\n{% note warning %}\n* MB：字节\n* Mbit：比特\n\n1 字节 = 8 bit，所以 1MB/s = 8Mbit/s。\n\n下载网速为 1MB/s ，这里指的是网速每秒可以下载1M。\n{% endnote %}\n\n## 快速开启http服务\n\n这将监听本地 80 端口，响应 OK\n```sh\necho -e 'HTTP/1.1 200 OK\\r\\n\\r\\nOK' | sudo socat - TCP-LISTEN:80\n```\n\n# 3. 进程管理\n# 4. 系统管理\n\n## cronjob 定时任务\n```sh\n# crontab -e 命令以编辑当前用户的cron表。\ncrontab -e\n\n# 每分钟执行一次 ls\n*/1 * * * * ls\n```\n\n## history输出时间\n```sh\nexport HISTTIMEFORMAT='%F %T '\n```\n\n**查看日志**\n```sh\ntail -f /var/spool/mail/root\n```\n# 5. 安全性\n\n## 更换密码\n```sh\npasswd\n```","source":"_posts/linux/linux-命令大全.md","raw":"---\nlayout: linux\ntitle: linux 命令大全\ndate: 2023-08-16 14:40:47\ntags: linux\ncategories: linux\nsticky: 1000\n---\n\n{% note primary%}\n\n分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用\n\n{% endnote %}\n\n<!-- more -->\n\n\n# 1. 文件操作\n## 文件权限\n```sh\n# 以数字形式输出文件权限，0644\nstat -c '%a' example.txt\n```\n\n```sh\nls -l example.txt\n\n# 输出将类似于以下内容：\n-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt\n\n# 在这个示例中，-rw-r--r--表示文件的权限。\n# 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。\n# 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。\n# 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。\n```\n\n## 解压、压缩\n\n### 解压\n```sh\ntar -xzvf test.tar.gz\n```\n### 压缩\n```sh\ntar -czvf test.tar.gz README.md\n```\n\n### 解压到指定文件夹\n```sh\ntar -xzvf test.tar.gz -C /home/test\n```\n### 列出压缩文件内容\n```sh\ntar -tzvf test.tar.gz \n```\n\n{% note warning %}\n**参数说明**\n* -v 显示指令执行过程。\n* -c 建立新的备份文件。\n* -f 指定备份文件。\n* -z 通过gzip指令处理备份文件。\n* -x 从备份文件中还原文件。\n{% endnote %}\n\n### 使用密码\n\n```sh\n# 将当前目录下的files文件夹打包压缩，密码为password\n# -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。\ntar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz\n\n# 将当前目录下的files.tar.gz进行解密解压\nopenssl des3 -d -salt -k password -iter 10000 -in files.tar.gz | tar -xzf -\n```\n\n### 分割文件\n\n```sh\n# 分割\nsplit -b 1M file.tar.gz file_bakcup.\n\n# 合并\ncat file_backup* > file.tar.gz\n```\n\n## 软、硬链接\n\n删除源文件，硬链接没有影响，软链接不可用。\n\n### 软链接\n```sh\nln -s README.md README.soft.md\n```\n\n### 硬链接\n```sh\nln README.md README.hard.md\n```\n\n## dd\n\n生成100M文件\n```sh\ndd if=/dev/zero of=file_100M bs=1M count=100\n```\n\n随机生成1百万个1K的文件\n\n```sh\ndd if=/dev/zero of=100M bs=1M count=100\n```\n\n## 内存、cpu、io\n\n### 内存\n\n1. 输入 `top` 命令，按下 `M` 键可以按照内存使用量进行排序。\n2. 查看内存使用最多的5个进程\n\n```sh\nps aux --sort=-%mem | head -n 6\n```\n\n#### 查看指定进程内存占用\n\n```sh\nps -o rss= -p <pid>\n```\n\n### CPU\n\n1. 输入 `top` 命令，按下 `P` 键可以按照内存使用量进行排序。\n2. 查看CPU使用最多的5个进程\n\n```sh\nps aux --sort=-%cpu | head -n 6\n```\n\n### IO\n\n{% note warning %}\n请注意，`iotop` 和 `pidstat` 可能需要先安装，在终端输入以下命令可以安装它们：\n{% endnote %}\n\n```sh\n# centos\nyum -y install iotop\n\n# ubuntu\napt-get install iotop sysstat\n```\n#### iotop\n{% label primary @iotop %} 命令可以 {% label danger @实时 %} 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n   \n#### pidstat\n{% label success @pidstat %} 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n```sh\npidstat -d | sort -nrk 2 | head -n 6\n```\n\n#### iostat\n{% label primary @iostat %} 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n```sh\n# 瞬时数据\niostat -d\n\n# 每隔5s采样一次\niostat -d -t 5\n\n# 输出\nLinux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nvda               2.70        19.13        36.54  102409528  195610326\n```\n\n{% note warning %}\n\n设备名称：显示连接到系统的硬盘和存储设备的设备名称。\n\ntps（Transactions Per Second）：每秒处理的 I/O 事务数。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nkB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nsvctm（Service Time）：每个 I/O 操作花费的平均时间。\n\n%util：设备使用率的百分比，即设备每秒钟的 I/O 请求占总容量的百分比。\n{% endnote %}\n\n\n## top\n### 前五行\n\n![Alt text](top-01.png)\n\n#### 1. 输出系统任务队列信息\n\n{% note warning %}\n\n**10:38:45**：系统当前时间 \n**up 2days 18:57**：系统开机后到现在的总运行时间\n**1 user**：当前登录用户数\n**load average**: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值=1时表示满负荷状态，多核CPU中4代表4核满负荷状态。\n{% endnote %}\n\n#### 2. 任务进程信息\n\n{% note warning %}\n**total**：系统全部进程的数量\n**running**：运行状态的进程数量\n**sleeping**：睡眠状态的进程数量\n**stoped**：停止状态的进程数量\n**zombie**：僵尸进程数量\n{% endnote %}\n\n#### 3. CPU信息\n\n{% note warning %}\n**us**：用户空间占用CPU百分比\n**sy**：内核空间占用CPU百分比\n**ni**：已调整优先级的用户进程的CPU百分比\n**id**：空闲CPU百分比，越低说明CPU使用率越高\n**wa**：等待IO完成的CPU百分比\n**hi**：处理硬件中断的占用CPU百分比\n**si**：处理软中断占用CPU百分比\n**st**：虚拟机占用CPU百分比\n{% endnote %}\n\n#### 4. 物理内存信息\n\n{% note warning %}\n以下内存单位均为MB\n\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n\n**total**：物理内存总量\n**free**：空闲内存总量\n**used**：使用中内存总量\n**buff/cache**：用于内核缓存的内存量\n{% endnote %}\n\n#### 5. 交互区内存信息\n\nswap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。\n\n{% note warning %}\n**total**：交换区总量\n**free**：空闲交换区总量\n**used**：使用的交换区总量\n**avail Mem**：可用交换区总量\n{% endnote %}\n\n\n### 进程列表\n\n![进程列表](top-02.png)\n{% note warning %}\n**PID**：进程号\n**USER**：运行进程的用户\n**PR**：优先级\n**NI**：nice值。负值表示高优先级，正值表示低优先级\n**VIRT**：占用虚拟内存，单位kb。VIRT=SWAP+RES \n**RES**：占用真实内存，单位kb\n**SHR**：共享内存大小，单位kb\n**S**：进程状态（I=空闲状态，R=运行状态，S=睡眠状态，D=不可中断的睡眠状态，T=跟踪/停止，Z=僵尸进程）\n**%CPU**：占用CPU百分比\n**%MEM**：占用内存百分比\n**TIME+**：上次启动后至今的总运行时间\n**COMMAND**：命令名or命令行\n{% endnote %}\n\n### 使用方法\n#### 更换内存单位\n{% note warning %}\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n{% endnote %}\n\n## 磁盘\n\n### du\n{% note warning %}\n\n直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。\n\nMac 上使用 `du -s` 输出大小可能是正常的2倍，至于为什么，暂不清楚。Mac 可以使用 `du -hd1` 查看\n\n{% endnote %}\n\n选项与参数：\n\n-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。\n-h ：以人们较易读的容量格式 (G/M) 显示；\n-s ：列出总占用量；\n-S ：不包括子目录下的总计，与 -s 有点差别。\n-k ：以 KBytes 列出容量显示；\n-m ：以 MBytes 列出容量显示；\n\n```sh\n# 查看指定目录\ndu -sh .\n3.8G\t.\n# ====================================\n\n# 查看指定目录下的所有文件大小，深度为1\ndu -h $DIR --max-depth=1 | sort -h\n\n# 部分输出\n...\n388M\t./k3s\n570M\t./.npm\n1.4G\t./CAI.bak\n3.8G\t.\n\n# ====================================\n# 参数解析\n# --max-depth 深度\n# sort -h 从小到大排序\n# sort -rh 从大到小排序\n```\n\n#### \n\n### df\n\n显示系统中每个文件系统的磁盘使用情况\n\n```sh\ndf -h\n```\n\n### lsblk\n\n显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 /，而数据盘则可能挂载在其他目录上，如/home、/mnt等。\n\n```sh\nlsblk\n```\n\n显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。\n   \n```sh\ncat /etc/fstab\n```\n\n### fdisk\n\n列出所有分区信息\n\n```sh\nfdisk\n```\n\n### mount\n\n{% note warning %}\n目的：向linux系统新增一块硬盘，并挂载到指定目录。\n{% endnote %}\n\n1. 进入设备分区\n\nlsblk 查看对应的磁盘名称，比如为 vdb。\n   \n```sh\nfdisk /dev/vdb\n```\n\n2. 进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。\n\n3. 提供分区号。\n\n4. 提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。\n\n5. 使用 p 命令确认分区表是否正确。\n\n6. 使用 w 命令保存新的分区表。\n\n7. 格式化分区\n\n```sh\nmkfs.ext4 /dev/vdb1\nmkfs.ext4 /dev/vdb2\n```\n\n8. 创建两个挂载点。运行以下命令：\n\n```sh\nsudo mkdir /mnt/partition1\nsudo mkdir /mnt/partition2\n```\n\n9. 挂载分区\n    \n```sh\nsudo mount /dev/vdb1 /mnt/partition1\nsudo mount /dev/vdb2 /mnt/partition2\n```\n\n10.  开机自动挂载\n\n```sh\nvim /etc/fstab\n\n/dev/vdb1   /mnt/partition1   ext4   defaults   0   0\n/dev/vdb2   /mnt/partition2   ext4   defaults   0   0\n```\n\n## 命令行快捷键\n{% note warning %}\n请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。\n{% endnote %}\n\n| 快捷键        | 操作                                           |\n| ------------- | ---------------------------------------------- |\n| Ctrl + 左右键 | 在单词之间跳转                                 |\n| Ctrl + a      | 跳到本行的行首                                 |\n| Ctrl + e      | 跳到页尾                                       |\n| Ctrl + u      | 删除当前光标前面的文字 （还有剪切功能）        |\n| Ctrl + k      | 删除当前光标后面的文字 （还有剪切功能）        |\n| Ctrl + L      | 进行清屏操作                                   |\n| Ctrl + y      | 粘贴 Ctrl+u 或 Ctrl+k 剪切的内容               |\n| Ctrl + w      | 删除光标前面的单词的字符（以空格隔开的字符串） |\n| Alt + d       | 由光标位置开始，往右删除单词，往行尾删         |\n| Ctrl + r      | 搜索执行过的命令                               |\n| ! + 字符      | 快速执行最近执行过的命令，其中包含该字符       |\n| history       | 显示部分历史命令                               |\n\n\n# 2. 网络管理\n\n## 端口查看\n\n### netstat\n\n{% note success %}\n\nnetstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。\n\n{% endnote %}\n\n```sh\nnetstat -nplt\n```\n参数说明:\n\n{% note warning %}\n-n 将字母转化为数字\n\n-p 显示进程相关信息\n\n-l 列出状态为监听\n\n-t 只查看tcp协议\n\n-a 查看全部协议(netstat -an)\n{% endnote %}\n\n### lsof\n\n```sh\nlsof -i :30001\n```\n\n### telnet\n```sh\ntelnet 127.0.0.1 30001\n```\n## 路由\n\n**查看默认路由表信息**\n```sh\nip r\nip -6 r\nroute\n```\n\n**查看路由表信息**\n```sh\nip rule\nip -6 rule \nip rule list\n```\n\n**查看走哪条路由**\n```sh\nip route get 8.8.8.8\n```\n\n**路由追踪**\n```sh\ntraceroute 8.8.8.8\n```\n## 网速测试\n\n**安装**\n```sh\nsudo yum - y install speedtest-cli\n\nsudo apt install speedtest-cli\n\nsudo pip3 install speedtest-cli\n```\n\n**执行 speedtest-cli**\n```sh\n$ speedtest-cli\nRetrieving speedtest.net configuration...\nTesting from Unknown (165.154.145.190)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms\nTesting download speed................................................................................\nDownload: 56.57 Mbit/s\nTesting upload speed......................................................................................................\nUpload: 34.54 Mbit/s\n```\n{% note warning %}\n* MB：字节\n* Mbit：比特\n\n1 字节 = 8 bit，所以 1MB/s = 8Mbit/s。\n\n下载网速为 1MB/s ，这里指的是网速每秒可以下载1M。\n{% endnote %}\n\n## 快速开启http服务\n\n这将监听本地 80 端口，响应 OK\n```sh\necho -e 'HTTP/1.1 200 OK\\r\\n\\r\\nOK' | sudo socat - TCP-LISTEN:80\n```\n\n# 3. 进程管理\n# 4. 系统管理\n\n## cronjob 定时任务\n```sh\n# crontab -e 命令以编辑当前用户的cron表。\ncrontab -e\n\n# 每分钟执行一次 ls\n*/1 * * * * ls\n```\n\n## history输出时间\n```sh\nexport HISTTIMEFORMAT='%F %T '\n```\n\n**查看日志**\n```sh\ntail -f /var/spool/mail/root\n```\n# 5. 安全性\n\n## 更换密码\n```sh\npasswd\n```","slug":"linux/linux-命令大全","published":1,"updated":"2023-09-18T02:25:33.224Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa00011384w7njr7808","content":"<div class=\"note note-primary\">\n            <p>分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用</p>\n          </div>\n\n<span id=\"more\"></span>\n\n\n<h1><span id=\"1-文件操作\">1. 文件操作</span></h1><h2><span id=\"文件权限\">文件权限</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以数字形式输出文件权限，0644</span><br><span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">&#x27;%a&#x27;</span> example.txt<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l example.txt<br><br><span class=\"hljs-comment\"># 输出将类似于以下内容：</span><br>-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt<br><br><span class=\"hljs-comment\"># 在这个示例中，-rw-r--r--表示文件的权限。</span><br><span class=\"hljs-comment\"># 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。</span><br><span class=\"hljs-comment\"># 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。</span><br><span class=\"hljs-comment\"># 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"解压-压缩\">解压、压缩</span></h2><h3><span id=\"解压\">解压</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz<br></code></pre></td></tr></table></figure>\n<h3><span id=\"压缩\">压缩</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -czvf test.tar.gz README.md<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"解压到指定文件夹\">解压到指定文件夹</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz -C /home/test<br></code></pre></td></tr></table></figure>\n<h3><span id=\"列出压缩文件内容\">列出压缩文件内容</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -tzvf test.tar.gz <br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><strong>参数说明</strong></p><ul><li>-v 显示指令执行过程。</li><li>-c 建立新的备份文件。</li><li>-f 指定备份文件。</li><li>-z 通过gzip指令处理备份文件。</li><li>-x 从备份文件中还原文件。</li></ul>\n          </div>\n\n<h3><span id=\"使用密码\">使用密码</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前目录下的files文件夹打包压缩，密码为password</span><br><span class=\"hljs-comment\"># -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。</span><br>tar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz<br><br><span class=\"hljs-comment\"># 将当前目录下的files.tar.gz进行解密解压</span><br>openssl des3 -d -salt -k password -iter 10000 -<span class=\"hljs-keyword\">in</span> files.tar.gz | tar -xzf -<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"分割文件\">分割文件</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 分割</span><br><span class=\"hljs-built_in\">split</span> -b 1M file.tar.gz file_bakcup.<br><br><span class=\"hljs-comment\"># 合并</span><br><span class=\"hljs-built_in\">cat</span> file_backup* &gt; file.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"软-硬链接\">软、硬链接</span></h2><p>删除源文件，硬链接没有影响，软链接不可用。</p>\n<h3><span id=\"软链接\">软链接</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> -s README.md README.soft.md<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"硬链接\">硬链接</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> README.md README.hard.md<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"dd\">dd</span></h2><p>生成100M文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=file_100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<p>随机生成1百万个1K的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"内存-cpu-io\">内存、cpu、io</span></h2><h3><span id=\"内存\">内存</span></h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>M</code> 键可以按照内存使用量进行排序。</li>\n<li>查看内存使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%mem | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"查看指定进程内存占用\">查看指定进程内存占用</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps -o rss= -p &lt;pid&gt;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"cpu\">CPU</span></h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>P</code> 键可以按照内存使用量进行排序。</li>\n<li>查看CPU使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%cpu | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"io\">IO</span></h3><div class=\"note note-warning\">\n            <p>请注意，<code>iotop</code> 和 <code>pidstat</code> 可能需要先安装，在终端输入以下命令可以安装它们：</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># centos</span><br>yum -y install iotop<br><br><span class=\"hljs-comment\"># ubuntu</span><br>apt-get install iotop sysstat<br></code></pre></td></tr></table></figure>\n<h4><span id=\"iotop\">iotop</span></h4><span class=\"label label-primary\">iotop</span> 命令可以 <span class=\"label label-danger\">实时</span> 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n<h4><span id=\"pidstat\">pidstat</span></h4><span class=\"label label-success\">pidstat</span> 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pidstat -d | <span class=\"hljs-built_in\">sort</span> -nrk 2 | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"iostat\">iostat</span></h4><span class=\"label label-primary\">iostat</span> 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 瞬时数据</span><br>iostat -d<br><br><span class=\"hljs-comment\"># 每隔5s采样一次</span><br>iostat -d -t 5<br><br><span class=\"hljs-comment\"># 输出</span><br>Linux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)<br><br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               2.70        19.13        36.54  102409528  195610326<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>设备名称：显示连接到系统的硬盘和存储设备的设备名称。</p><p>tps（Transactions Per Second）：每秒处理的 I&#x2F;O 事务数。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>kB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>svctm（Service Time）：每个 I&#x2F;O 操作花费的平均时间。</p><p>%util：设备使用率的百分比，即设备每秒钟的 I&#x2F;O 请求占总容量的百分比。</p>\n          </div>\n\n\n<h2><span id=\"top\">top</span></h2><h3><span id=\"前五行\">前五行</span></h3><p><img src=\"top-01.png\" alt=\"Alt text\"></p>\n<h4><span id=\"1-输出系统任务队列信息\">1. 输出系统任务队列信息</span></h4><div class=\"note note-warning\">\n            <p><strong>10:38:45</strong>：系统当前时间<br><strong>up 2days 18:57</strong>：系统开机后到现在的总运行时间<br><strong>1 user</strong>：当前登录用户数<br><strong>load average</strong>: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值&#x3D;1时表示满负荷状态，多核CPU中4代表4核满负荷状态。</p>\n          </div>\n\n<h4><span id=\"2-任务进程信息\">2. 任务进程信息</span></h4><div class=\"note note-warning\">\n            <p><strong>total</strong>：系统全部进程的数量<br><strong>running</strong>：运行状态的进程数量<br><strong>sleeping</strong>：睡眠状态的进程数量<br><strong>stoped</strong>：停止状态的进程数量<br><strong>zombie</strong>：僵尸进程数量</p>\n          </div>\n\n<h4><span id=\"3-cpu信息\">3. CPU信息</span></h4><div class=\"note note-warning\">\n            <p><strong>us</strong>：用户空间占用CPU百分比<br><strong>sy</strong>：内核空间占用CPU百分比<br><strong>ni</strong>：已调整优先级的用户进程的CPU百分比<br><strong>id</strong>：空闲CPU百分比，越低说明CPU使用率越高<br><strong>wa</strong>：等待IO完成的CPU百分比<br><strong>hi</strong>：处理硬件中断的占用CPU百分比<br><strong>si</strong>：处理软中断占用CPU百分比<br><strong>st</strong>：虚拟机占用CPU百分比</p>\n          </div>\n\n<h4><span id=\"4-物理内存信息\">4. 物理内存信息</span></h4><div class=\"note note-warning\">\n            <p>以下内存单位均为MB</p><p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p><p><strong>total</strong>：物理内存总量<br><strong>free</strong>：空闲内存总量<br><strong>used</strong>：使用中内存总量<br><strong>buff&#x2F;cache</strong>：用于内核缓存的内存量</p>\n          </div>\n\n<h4><span id=\"5-交互区内存信息\">5. 交互区内存信息</span></h4><p>swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。</p>\n<div class=\"note note-warning\">\n            <p><strong>total</strong>：交换区总量<br><strong>free</strong>：空闲交换区总量<br><strong>used</strong>：使用的交换区总量<br><strong>avail Mem</strong>：可用交换区总量</p>\n          </div>\n\n\n<h3><span id=\"进程列表\">进程列表</span></h3><p><img src=\"top-02.png\" alt=\"进程列表\"></p>\n<div class=\"note note-warning\">\n            <p><strong>PID</strong>：进程号<br><strong>USER</strong>：运行进程的用户<br><strong>PR</strong>：优先级<br><strong>NI</strong>：nice值。负值表示高优先级，正值表示低优先级<br><strong>VIRT</strong>：占用虚拟内存，单位kb。VIRT&#x3D;SWAP+RES<br><strong>RES</strong>：占用真实内存，单位kb<br><strong>SHR</strong>：共享内存大小，单位kb<br><strong>S</strong>：进程状态（I&#x3D;空闲状态，R&#x3D;运行状态，S&#x3D;睡眠状态，D&#x3D;不可中断的睡眠状态，T&#x3D;跟踪&#x2F;停止，Z&#x3D;僵尸进程）<br><strong>%CPU</strong>：占用CPU百分比<br><strong>%MEM</strong>：占用内存百分比<br>**TIME+**：上次启动后至今的总运行时间<br><strong>COMMAND</strong>：命令名or命令行</p>\n          </div>\n\n<h3><span id=\"使用方法\">使用方法</span></h3><h4><span id=\"更换内存单位\">更换内存单位</span></h4><div class=\"note note-warning\">\n            <p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p>\n          </div>\n\n<h2><span id=\"磁盘\">磁盘</span></h2><h3><span id=\"du\">du</span></h3><div class=\"note note-warning\">\n            <p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p><p>Mac 上使用 <code>du -s</code> 输出大小可能是正常的2倍，至于为什么，暂不清楚。Mac 可以使用 <code>du -hd1</code> 查看</p>\n          </div>\n\n<p>选项与参数：</p>\n<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。<br>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；<br>-s ：列出总占用量；<br>-S ：不包括子目录下的总计，与 -s 有点差别。<br>-k ：以 KBytes 列出容量显示；<br>-m ：以 MBytes 列出容量显示；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看指定目录</span><br><span class=\"hljs-built_in\">du</span> -sh .<br>3.8G\t.<br><span class=\"hljs-comment\"># ====================================</span><br><br><span class=\"hljs-comment\"># 查看指定目录下的所有文件大小，深度为1</span><br><span class=\"hljs-built_in\">du</span> -h <span class=\"hljs-variable\">$DIR</span> --max-depth=1 | <span class=\"hljs-built_in\">sort</span> -h<br><br><span class=\"hljs-comment\"># 部分输出</span><br>...<br>388M\t./k3s<br>570M\t./.npm<br>1.4G\t./CAI.bak<br>3.8G\t.<br><br><span class=\"hljs-comment\"># ====================================</span><br><span class=\"hljs-comment\"># 参数解析</span><br><span class=\"hljs-comment\"># --max-depth 深度</span><br><span class=\"hljs-comment\"># sort -h 从小到大排序</span><br><span class=\"hljs-comment\"># sort -rh 从大到小排序</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id></span></h4><h3><span id=\"df\">df</span></h3><p>显示系统中每个文件系统的磁盘使用情况</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"lsblk\">lsblk</span></h3><p>显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsblk<br></code></pre></td></tr></table></figure>\n\n<p>显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/fstab<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"fdisk\">fdisk</span></h3><p>列出所有分区信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"mount\">mount</span></h3><div class=\"note note-warning\">\n            <p>目的：向linux系统新增一块硬盘，并挂载到指定目录。</p>\n          </div>\n\n<ol>\n<li>进入设备分区</li>\n</ol>\n<p>lsblk 查看对应的磁盘名称，比如为 vdb。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk /dev/vdb<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。</p>\n</li>\n<li><p>提供分区号。</p>\n</li>\n<li><p>提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。</p>\n</li>\n<li><p>使用 p 命令确认分区表是否正确。</p>\n</li>\n<li><p>使用 w 命令保存新的分区表。</p>\n</li>\n<li><p>格式化分区</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mkfs.ext4 /dev/vdb1<br>mkfs.ext4 /dev/vdb2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建两个挂载点。运行以下命令：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition1<br>sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>挂载分区</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo mount /dev/vdb1 /mnt/partition1<br>sudo mount /dev/vdb2 /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>开机自动挂载</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/fstab<br><br>/dev/vdb1   /mnt/partition1   ext4   defaults   0   0<br>/dev/vdb2   /mnt/partition2   ext4   defaults   0   0<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"命令行快捷键\">命令行快捷键</span></h2><div class=\"note note-warning\">\n            <p>请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。</p>\n          </div>\n\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + 左右键</td>\n<td>在单词之间跳转</td>\n</tr>\n<tr>\n<td>Ctrl + a</td>\n<td>跳到本行的行首</td>\n</tr>\n<tr>\n<td>Ctrl + e</td>\n<td>跳到页尾</td>\n</tr>\n<tr>\n<td>Ctrl + u</td>\n<td>删除当前光标前面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + k</td>\n<td>删除当前光标后面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>进行清屏操作</td>\n</tr>\n<tr>\n<td>Ctrl + y</td>\n<td>粘贴 Ctrl+u 或 Ctrl+k 剪切的内容</td>\n</tr>\n<tr>\n<td>Ctrl + w</td>\n<td>删除光标前面的单词的字符（以空格隔开的字符串）</td>\n</tr>\n<tr>\n<td>Alt + d</td>\n<td>由光标位置开始，往右删除单词，往行尾删</td>\n</tr>\n<tr>\n<td>Ctrl + r</td>\n<td>搜索执行过的命令</td>\n</tr>\n<tr>\n<td>! + 字符</td>\n<td>快速执行最近执行过的命令，其中包含该字符</td>\n</tr>\n<tr>\n<td>history</td>\n<td>显示部分历史命令</td>\n</tr>\n</tbody></table>\n<h1><span id=\"2-网络管理\">2. 网络管理</span></h1><h2><span id=\"端口查看\">端口查看</span></h2><h3><span id=\"netstat\">netstat</span></h3><div class=\"note note-success\">\n            <p>netstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">netstat -nplt<br></code></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<div class=\"note note-warning\">\n            <p>-n 将字母转化为数字</p><p>-p 显示进程相关信息</p><p>-l 列出状态为监听</p><p>-t 只查看tcp协议</p><p>-a 查看全部协议(netstat -an)</p>\n          </div>\n\n<h3><span id=\"lsof\">lsof</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsof -i :30001<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"telnet\">telnet</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">telnet 127.0.0.1 30001<br></code></pre></td></tr></table></figure>\n<h2><span id=\"路由\">路由</span></h2><p><strong>查看默认路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip r<br>ip -6 r<br>route<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip rule<br>ip -6 rule <br>ip rule list<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看走哪条路由</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip route get 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由追踪</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">traceroute 8.8.8.8<br></code></pre></td></tr></table></figure>\n<h2><span id=\"网速测试\">网速测试</span></h2><p><strong>安装</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo yum - y install speedtest-cli<br><br>sudo apt install speedtest-cli<br><br>sudo pip3 install speedtest-cli<br></code></pre></td></tr></table></figure>\n\n<p><strong>执行 speedtest-cli</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ speedtest-cli<br>Retrieving speedtest.net configuration...<br>Testing from Unknown (165.154.145.190)...<br>Retrieving speedtest.net server list...<br>Selecting best server based on ping...<br>Hosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms<br>Testing download speed................................................................................<br>Download: 56.57 Mbit/s<br>Testing upload speed......................................................................................................<br>Upload: 34.54 Mbit/s<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <ul><li>MB：字节</li><li>Mbit：比特</li></ul><p>1 字节 &#x3D; 8 bit，所以 1MB&#x2F;s &#x3D; 8Mbit&#x2F;s。</p><p>下载网速为 1MB&#x2F;s ，这里指的是网速每秒可以下载1M。</p>\n          </div>\n\n<h2><span id=\"快速开启http服务\">快速开启http服务</span></h2><p>这将监听本地 80 端口，响应 OK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&#x27;HTTP/1.1 200 OK\\r\\n\\r\\nOK&#x27;</span> | sudo socat - TCP-LISTEN:80<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"3-进程管理\">3. 进程管理</span></h1><h1><span id=\"4-系统管理\">4. 系统管理</span></h1><h2><span id=\"cronjob-定时任务\">cronjob 定时任务</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># crontab -e 命令以编辑当前用户的cron表。</span><br>crontab -e<br><br><span class=\"hljs-comment\"># 每分钟执行一次 ls</span><br>*/1 * * * * <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"history输出时间\">history输出时间</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> HISTTIMEFORMAT=<span class=\"hljs-string\">&#x27;%F %T &#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">tail</span> -f /var/spool/mail/root<br></code></pre></td></tr></table></figure>\n<h1><span id=\"5-安全性\">5. 安全性</span></h1><h2><span id=\"更换密码\">更换密码</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">passwd<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用</p>\n          </div>","more":"<h1 id=\"1-文件操作\"><a href=\"#1-文件操作\" class=\"headerlink\" title=\"1. 文件操作\"></a>1. 文件操作</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以数字形式输出文件权限，0644</span><br><span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">&#x27;%a&#x27;</span> example.txt<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l example.txt<br><br><span class=\"hljs-comment\"># 输出将类似于以下内容：</span><br>-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt<br><br><span class=\"hljs-comment\"># 在这个示例中，-rw-r--r--表示文件的权限。</span><br><span class=\"hljs-comment\"># 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。</span><br><span class=\"hljs-comment\"># 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。</span><br><span class=\"hljs-comment\"># 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解压、压缩\"><a href=\"#解压、压缩\" class=\"headerlink\" title=\"解压、压缩\"></a>解压、压缩</h2><h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz<br></code></pre></td></tr></table></figure>\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -czvf test.tar.gz README.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解压到指定文件夹\"><a href=\"#解压到指定文件夹\" class=\"headerlink\" title=\"解压到指定文件夹\"></a>解压到指定文件夹</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz -C /home/test<br></code></pre></td></tr></table></figure>\n<h3 id=\"列出压缩文件内容\"><a href=\"#列出压缩文件内容\" class=\"headerlink\" title=\"列出压缩文件内容\"></a>列出压缩文件内容</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -tzvf test.tar.gz <br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><strong>参数说明</strong></p><ul><li>-v 显示指令执行过程。</li><li>-c 建立新的备份文件。</li><li>-f 指定备份文件。</li><li>-z 通过gzip指令处理备份文件。</li><li>-x 从备份文件中还原文件。</li></ul>\n          </div>\n\n<h3 id=\"使用密码\"><a href=\"#使用密码\" class=\"headerlink\" title=\"使用密码\"></a>使用密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前目录下的files文件夹打包压缩，密码为password</span><br><span class=\"hljs-comment\"># -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。</span><br>tar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz<br><br><span class=\"hljs-comment\"># 将当前目录下的files.tar.gz进行解密解压</span><br>openssl des3 -d -salt -k password -iter 10000 -<span class=\"hljs-keyword\">in</span> files.tar.gz | tar -xzf -<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分割文件\"><a href=\"#分割文件\" class=\"headerlink\" title=\"分割文件\"></a>分割文件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 分割</span><br><span class=\"hljs-built_in\">split</span> -b 1M file.tar.gz file_bakcup.<br><br><span class=\"hljs-comment\"># 合并</span><br><span class=\"hljs-built_in\">cat</span> file_backup* &gt; file.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"软、硬链接\"><a href=\"#软、硬链接\" class=\"headerlink\" title=\"软、硬链接\"></a>软、硬链接</h2><p>删除源文件，硬链接没有影响，软链接不可用。</p>\n<h3 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> -s README.md README.soft.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> README.md README.hard.md<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h2><p>生成100M文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=file_100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<p>随机生成1百万个1K的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内存、cpu、io\"><a href=\"#内存、cpu、io\" class=\"headerlink\" title=\"内存、cpu、io\"></a>内存、cpu、io</h2><h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>M</code> 键可以按照内存使用量进行排序。</li>\n<li>查看内存使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%mem | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定进程内存占用\"><a href=\"#查看指定进程内存占用\" class=\"headerlink\" title=\"查看指定进程内存占用\"></a>查看指定进程内存占用</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps -o rss= -p &lt;pid&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>P</code> 键可以按照内存使用量进行排序。</li>\n<li>查看CPU使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%cpu | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h3><div class=\"note note-warning\">\n            <p>请注意，<code>iotop</code> 和 <code>pidstat</code> 可能需要先安装，在终端输入以下命令可以安装它们：</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># centos</span><br>yum -y install iotop<br><br><span class=\"hljs-comment\"># ubuntu</span><br>apt-get install iotop sysstat<br></code></pre></td></tr></table></figure>\n<h4 id=\"iotop\"><a href=\"#iotop\" class=\"headerlink\" title=\"iotop\"></a>iotop</h4><span class=\"label label-primary\">iotop</span> 命令可以 <span class=\"label label-danger\">实时</span> 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n<h4 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h4><span class=\"label label-success\">pidstat</span> 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pidstat -d | <span class=\"hljs-built_in\">sort</span> -nrk 2 | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><span class=\"label label-primary\">iostat</span> 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 瞬时数据</span><br>iostat -d<br><br><span class=\"hljs-comment\"># 每隔5s采样一次</span><br>iostat -d -t 5<br><br><span class=\"hljs-comment\"># 输出</span><br>Linux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)<br><br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               2.70        19.13        36.54  102409528  195610326<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>设备名称：显示连接到系统的硬盘和存储设备的设备名称。</p><p>tps（Transactions Per Second）：每秒处理的 I&#x2F;O 事务数。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>kB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>svctm（Service Time）：每个 I&#x2F;O 操作花费的平均时间。</p><p>%util：设备使用率的百分比，即设备每秒钟的 I&#x2F;O 请求占总容量的百分比。</p>\n          </div>\n\n\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h3 id=\"前五行\"><a href=\"#前五行\" class=\"headerlink\" title=\"前五行\"></a>前五行</h3><p><img src=\"top-01.png\" alt=\"Alt text\"></p>\n<h4 id=\"1-输出系统任务队列信息\"><a href=\"#1-输出系统任务队列信息\" class=\"headerlink\" title=\"1. 输出系统任务队列信息\"></a>1. 输出系统任务队列信息</h4><div class=\"note note-warning\">\n            <p><strong>10:38:45</strong>：系统当前时间<br><strong>up 2days 18:57</strong>：系统开机后到现在的总运行时间<br><strong>1 user</strong>：当前登录用户数<br><strong>load average</strong>: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值&#x3D;1时表示满负荷状态，多核CPU中4代表4核满负荷状态。</p>\n          </div>\n\n<h4 id=\"2-任务进程信息\"><a href=\"#2-任务进程信息\" class=\"headerlink\" title=\"2. 任务进程信息\"></a>2. 任务进程信息</h4><div class=\"note note-warning\">\n            <p><strong>total</strong>：系统全部进程的数量<br><strong>running</strong>：运行状态的进程数量<br><strong>sleeping</strong>：睡眠状态的进程数量<br><strong>stoped</strong>：停止状态的进程数量<br><strong>zombie</strong>：僵尸进程数量</p>\n          </div>\n\n<h4 id=\"3-CPU信息\"><a href=\"#3-CPU信息\" class=\"headerlink\" title=\"3. CPU信息\"></a>3. CPU信息</h4><div class=\"note note-warning\">\n            <p><strong>us</strong>：用户空间占用CPU百分比<br><strong>sy</strong>：内核空间占用CPU百分比<br><strong>ni</strong>：已调整优先级的用户进程的CPU百分比<br><strong>id</strong>：空闲CPU百分比，越低说明CPU使用率越高<br><strong>wa</strong>：等待IO完成的CPU百分比<br><strong>hi</strong>：处理硬件中断的占用CPU百分比<br><strong>si</strong>：处理软中断占用CPU百分比<br><strong>st</strong>：虚拟机占用CPU百分比</p>\n          </div>\n\n<h4 id=\"4-物理内存信息\"><a href=\"#4-物理内存信息\" class=\"headerlink\" title=\"4. 物理内存信息\"></a>4. 物理内存信息</h4><div class=\"note note-warning\">\n            <p>以下内存单位均为MB</p><p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p><p><strong>total</strong>：物理内存总量<br><strong>free</strong>：空闲内存总量<br><strong>used</strong>：使用中内存总量<br><strong>buff&#x2F;cache</strong>：用于内核缓存的内存量</p>\n          </div>\n\n<h4 id=\"5-交互区内存信息\"><a href=\"#5-交互区内存信息\" class=\"headerlink\" title=\"5. 交互区内存信息\"></a>5. 交互区内存信息</h4><p>swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。</p>\n<div class=\"note note-warning\">\n            <p><strong>total</strong>：交换区总量<br><strong>free</strong>：空闲交换区总量<br><strong>used</strong>：使用的交换区总量<br><strong>avail Mem</strong>：可用交换区总量</p>\n          </div>\n\n\n<h3 id=\"进程列表\"><a href=\"#进程列表\" class=\"headerlink\" title=\"进程列表\"></a>进程列表</h3><p><img src=\"top-02.png\" alt=\"进程列表\"></p>\n<div class=\"note note-warning\">\n            <p><strong>PID</strong>：进程号<br><strong>USER</strong>：运行进程的用户<br><strong>PR</strong>：优先级<br><strong>NI</strong>：nice值。负值表示高优先级，正值表示低优先级<br><strong>VIRT</strong>：占用虚拟内存，单位kb。VIRT&#x3D;SWAP+RES<br><strong>RES</strong>：占用真实内存，单位kb<br><strong>SHR</strong>：共享内存大小，单位kb<br><strong>S</strong>：进程状态（I&#x3D;空闲状态，R&#x3D;运行状态，S&#x3D;睡眠状态，D&#x3D;不可中断的睡眠状态，T&#x3D;跟踪&#x2F;停止，Z&#x3D;僵尸进程）<br><strong>%CPU</strong>：占用CPU百分比<br><strong>%MEM</strong>：占用内存百分比<br>**TIME+**：上次启动后至今的总运行时间<br><strong>COMMAND</strong>：命令名or命令行</p>\n          </div>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h4 id=\"更换内存单位\"><a href=\"#更换内存单位\" class=\"headerlink\" title=\"更换内存单位\"></a>更换内存单位</h4><div class=\"note note-warning\">\n            <p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p>\n          </div>\n\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><div class=\"note note-warning\">\n            <p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p><p>Mac 上使用 <code>du -s</code> 输出大小可能是正常的2倍，至于为什么，暂不清楚。Mac 可以使用 <code>du -hd1</code> 查看</p>\n          </div>\n\n<p>选项与参数：</p>\n<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。<br>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；<br>-s ：列出总占用量；<br>-S ：不包括子目录下的总计，与 -s 有点差别。<br>-k ：以 KBytes 列出容量显示；<br>-m ：以 MBytes 列出容量显示；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看指定目录</span><br><span class=\"hljs-built_in\">du</span> -sh .<br>3.8G\t.<br><span class=\"hljs-comment\"># ====================================</span><br><br><span class=\"hljs-comment\"># 查看指定目录下的所有文件大小，深度为1</span><br><span class=\"hljs-built_in\">du</span> -h <span class=\"hljs-variable\">$DIR</span> --max-depth=1 | <span class=\"hljs-built_in\">sort</span> -h<br><br><span class=\"hljs-comment\"># 部分输出</span><br>...<br>388M\t./k3s<br>570M\t./.npm<br>1.4G\t./CAI.bak<br>3.8G\t.<br><br><span class=\"hljs-comment\"># ====================================</span><br><span class=\"hljs-comment\"># 参数解析</span><br><span class=\"hljs-comment\"># --max-depth 深度</span><br><span class=\"hljs-comment\"># sort -h 从小到大排序</span><br><span class=\"hljs-comment\"># sort -rh 从大到小排序</span><br></code></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p>显示系统中每个文件系统的磁盘使用情况</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lsblk\"><a href=\"#lsblk\" class=\"headerlink\" title=\"lsblk\"></a>lsblk</h3><p>显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsblk<br></code></pre></td></tr></table></figure>\n\n<p>显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/fstab<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p>列出所有分区信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h3><div class=\"note note-warning\">\n            <p>目的：向linux系统新增一块硬盘，并挂载到指定目录。</p>\n          </div>\n\n<ol>\n<li>进入设备分区</li>\n</ol>\n<p>lsblk 查看对应的磁盘名称，比如为 vdb。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk /dev/vdb<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。</p>\n</li>\n<li><p>提供分区号。</p>\n</li>\n<li><p>提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。</p>\n</li>\n<li><p>使用 p 命令确认分区表是否正确。</p>\n</li>\n<li><p>使用 w 命令保存新的分区表。</p>\n</li>\n<li><p>格式化分区</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mkfs.ext4 /dev/vdb1<br>mkfs.ext4 /dev/vdb2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建两个挂载点。运行以下命令：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition1<br>sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>挂载分区</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo mount /dev/vdb1 /mnt/partition1<br>sudo mount /dev/vdb2 /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>开机自动挂载</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/fstab<br><br>/dev/vdb1   /mnt/partition1   ext4   defaults   0   0<br>/dev/vdb2   /mnt/partition2   ext4   defaults   0   0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h2><div class=\"note note-warning\">\n            <p>请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。</p>\n          </div>\n\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + 左右键</td>\n<td>在单词之间跳转</td>\n</tr>\n<tr>\n<td>Ctrl + a</td>\n<td>跳到本行的行首</td>\n</tr>\n<tr>\n<td>Ctrl + e</td>\n<td>跳到页尾</td>\n</tr>\n<tr>\n<td>Ctrl + u</td>\n<td>删除当前光标前面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + k</td>\n<td>删除当前光标后面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>进行清屏操作</td>\n</tr>\n<tr>\n<td>Ctrl + y</td>\n<td>粘贴 Ctrl+u 或 Ctrl+k 剪切的内容</td>\n</tr>\n<tr>\n<td>Ctrl + w</td>\n<td>删除光标前面的单词的字符（以空格隔开的字符串）</td>\n</tr>\n<tr>\n<td>Alt + d</td>\n<td>由光标位置开始，往右删除单词，往行尾删</td>\n</tr>\n<tr>\n<td>Ctrl + r</td>\n<td>搜索执行过的命令</td>\n</tr>\n<tr>\n<td>! + 字符</td>\n<td>快速执行最近执行过的命令，其中包含该字符</td>\n</tr>\n<tr>\n<td>history</td>\n<td>显示部分历史命令</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-网络管理\"><a href=\"#2-网络管理\" class=\"headerlink\" title=\"2. 网络管理\"></a>2. 网络管理</h1><h2 id=\"端口查看\"><a href=\"#端口查看\" class=\"headerlink\" title=\"端口查看\"></a>端口查看</h2><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><div class=\"note note-success\">\n            <p>netstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">netstat -nplt<br></code></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<div class=\"note note-warning\">\n            <p>-n 将字母转化为数字</p><p>-p 显示进程相关信息</p><p>-l 列出状态为监听</p><p>-t 只查看tcp协议</p><p>-a 查看全部协议(netstat -an)</p>\n          </div>\n\n<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsof -i :30001<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">telnet 127.0.0.1 30001<br></code></pre></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p><strong>查看默认路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip r<br>ip -6 r<br>route<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip rule<br>ip -6 rule <br>ip rule list<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看走哪条路由</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip route get 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由追踪</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">traceroute 8.8.8.8<br></code></pre></td></tr></table></figure>\n<h2 id=\"网速测试\"><a href=\"#网速测试\" class=\"headerlink\" title=\"网速测试\"></a>网速测试</h2><p><strong>安装</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo yum - y install speedtest-cli<br><br>sudo apt install speedtest-cli<br><br>sudo pip3 install speedtest-cli<br></code></pre></td></tr></table></figure>\n\n<p><strong>执行 speedtest-cli</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ speedtest-cli<br>Retrieving speedtest.net configuration...<br>Testing from Unknown (165.154.145.190)...<br>Retrieving speedtest.net server list...<br>Selecting best server based on ping...<br>Hosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms<br>Testing download speed................................................................................<br>Download: 56.57 Mbit/s<br>Testing upload speed......................................................................................................<br>Upload: 34.54 Mbit/s<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <ul><li>MB：字节</li><li>Mbit：比特</li></ul><p>1 字节 &#x3D; 8 bit，所以 1MB&#x2F;s &#x3D; 8Mbit&#x2F;s。</p><p>下载网速为 1MB&#x2F;s ，这里指的是网速每秒可以下载1M。</p>\n          </div>\n\n<h2 id=\"快速开启http服务\"><a href=\"#快速开启http服务\" class=\"headerlink\" title=\"快速开启http服务\"></a>快速开启http服务</h2><p>这将监听本地 80 端口，响应 OK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&#x27;HTTP/1.1 200 OK\\r\\n\\r\\nOK&#x27;</span> | sudo socat - TCP-LISTEN:80<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-进程管理\"><a href=\"#3-进程管理\" class=\"headerlink\" title=\"3. 进程管理\"></a>3. 进程管理</h1><h1 id=\"4-系统管理\"><a href=\"#4-系统管理\" class=\"headerlink\" title=\"4. 系统管理\"></a>4. 系统管理</h1><h2 id=\"cronjob-定时任务\"><a href=\"#cronjob-定时任务\" class=\"headerlink\" title=\"cronjob 定时任务\"></a>cronjob 定时任务</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># crontab -e 命令以编辑当前用户的cron表。</span><br>crontab -e<br><br><span class=\"hljs-comment\"># 每分钟执行一次 ls</span><br>*/1 * * * * <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"history输出时间\"><a href=\"#history输出时间\" class=\"headerlink\" title=\"history输出时间\"></a>history输出时间</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> HISTTIMEFORMAT=<span class=\"hljs-string\">&#x27;%F %T &#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">tail</span> -f /var/spool/mail/root<br></code></pre></td></tr></table></figure>\n<h1 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h1><h2 id=\"更换密码\"><a href=\"#更换密码\" class=\"headerlink\" title=\"更换密码\"></a>更换密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">passwd<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"golang垃圾回收","date":"2023-08-16T09:17:32.000Z","_content":"\n{% note primary %}\ngolang是通过 {% label primary @三色标记法 %} 来进行垃圾回收。\n{% endnote %}\n\n<!-- more -->\n\n## 1. 标记过程\n\n![image](1.png)\n\n- 初始状态下所有对象都是白色的。\n- 从根节点开始遍历所有对象，把遍历到的对象变成灰色对象\n- 遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。\n- 循环步骤3，直到灰色对象全部变黑色。\n- 通过写屏障(write-barrier)检测对象有变化，重复以上操作\n- 回收所有白色对象（垃圾）。\n\n## 2. 根对象是什么？\n\n根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：\n\n- 全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。\n- 执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。\n- 寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。\n\n## 3. STW（Stop The World）\n\n- 为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。\n- STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。\n\n## 4. 写屏障(Write Barrier)\n\n为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要{% label danger @通过写屏障技术尽可能地缩短STW的时间。 %}\n\n### 4.1 写屏障的原理\n\n造成引用对象丢失的条件:\n\n- 一个黑色A新增了指向白色C的引用，\n- 白色C没有其他灰色的引用(除A之外)。\n\n以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。\n\n{% label danger @写屏障破坏两个条件其一即可 %}\n#### 4.2 如何破坏？\n\n- **Dijistra写屏障**\n\n满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色\n\n- **Yuasa写屏障**\n   \n满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色\n\n## 5. GC 触发时机\n\n**内存分配量达到阈值触发GC**\n\n每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，\n\n{% label primary @阈值 = 上次GC内存分配量 × 内存增长率 %}\n\n**定期触发GC**\n\n默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明\n\n**主动触发**\n\n程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。\n\n","source":"_posts/golang/golang垃圾回收.md","raw":"---\nlayout: golang\ntitle: golang垃圾回收\ndate: 2023-08-16 17:17:32\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\ngolang是通过 {% label primary @三色标记法 %} 来进行垃圾回收。\n{% endnote %}\n\n<!-- more -->\n\n## 1. 标记过程\n\n![image](1.png)\n\n- 初始状态下所有对象都是白色的。\n- 从根节点开始遍历所有对象，把遍历到的对象变成灰色对象\n- 遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。\n- 循环步骤3，直到灰色对象全部变黑色。\n- 通过写屏障(write-barrier)检测对象有变化，重复以上操作\n- 回收所有白色对象（垃圾）。\n\n## 2. 根对象是什么？\n\n根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：\n\n- 全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。\n- 执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。\n- 寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。\n\n## 3. STW（Stop The World）\n\n- 为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。\n- STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。\n\n## 4. 写屏障(Write Barrier)\n\n为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要{% label danger @通过写屏障技术尽可能地缩短STW的时间。 %}\n\n### 4.1 写屏障的原理\n\n造成引用对象丢失的条件:\n\n- 一个黑色A新增了指向白色C的引用，\n- 白色C没有其他灰色的引用(除A之外)。\n\n以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。\n\n{% label danger @写屏障破坏两个条件其一即可 %}\n#### 4.2 如何破坏？\n\n- **Dijistra写屏障**\n\n满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色\n\n- **Yuasa写屏障**\n   \n满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色\n\n## 5. GC 触发时机\n\n**内存分配量达到阈值触发GC**\n\n每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，\n\n{% label primary @阈值 = 上次GC内存分配量 × 内存增长率 %}\n\n**定期触发GC**\n\n默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明\n\n**主动触发**\n\n程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。\n\n","slug":"golang/golang垃圾回收","published":1,"updated":"2023-08-23T09:19:05.443Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa00015384w7v9cbui1","content":"<div class=\"note note-primary\">\n            <p>golang是通过 <span class=\"label label-primary\">三色标记法</span> 来进行垃圾回收。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"1-标记过程\">1. 标记过程</span></h2><p><img src=\"1.png\" alt=\"image\"></p>\n<ul>\n<li>初始状态下所有对象都是白色的。</li>\n<li>从根节点开始遍历所有对象，把遍历到的对象变成灰色对象</li>\n<li>遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。</li>\n<li>循环步骤3，直到灰色对象全部变黑色。</li>\n<li>通过写屏障(write-barrier)检测对象有变化，重复以上操作</li>\n<li>回收所有白色对象（垃圾）。</li>\n</ul>\n<h2><span id=\"2-根对象是什么\">2. 根对象是什么？</span></h2><p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p>\n<ul>\n<li>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。</li>\n<li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。</li>\n<li>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。</li>\n</ul>\n<h2><span id=\"3-stwstop-the-world\">3. STW（Stop The World）</span></h2><ul>\n<li>为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。</li>\n<li>STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。</li>\n</ul>\n<h2><span id=\"4-写屏障write-barrier\">4. 写屏障(Write Barrier)</span></h2><p>为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要<span class=\"label label-danger\">通过写屏障技术尽可能地缩短STW的时间。</span></p>\n<h3><span id=\"41-写屏障的原理\">4.1 写屏障的原理</span></h3><p>造成引用对象丢失的条件:</p>\n<ul>\n<li>一个黑色A新增了指向白色C的引用，</li>\n<li>白色C没有其他灰色的引用(除A之外)。</li>\n</ul>\n<p>以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。</p>\n<span class=\"label label-danger\">写屏障破坏两个条件其一即可</span>\n<h4><span id=\"42-如何破坏\">4.2 如何破坏？</span></h4><ul>\n<li><strong>Dijistra写屏障</strong></li>\n</ul>\n<p>满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色</p>\n<ul>\n<li><strong>Yuasa写屏障</strong></li>\n</ul>\n<p>满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色</p>\n<h2><span id=\"5-gc-触发时机\">5. GC 触发时机</span></h2><p><strong>内存分配量达到阈值触发GC</strong></p>\n<p>每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，</p>\n<span class=\"label label-primary\">阈值 = 上次GC内存分配量 × 内存增长率</span>\n\n<p><strong>定期触发GC</strong></p>\n<p>默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明</p>\n<p><strong>主动触发</strong></p>\n<p>程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>golang是通过 <span class=\"label label-primary\">三色标记法</span> 来进行垃圾回收。</p>\n          </div>","more":"<h2 id=\"1-标记过程\"><a href=\"#1-标记过程\" class=\"headerlink\" title=\"1. 标记过程\"></a>1. 标记过程</h2><p><img src=\"1.png\" alt=\"image\"></p>\n<ul>\n<li>初始状态下所有对象都是白色的。</li>\n<li>从根节点开始遍历所有对象，把遍历到的对象变成灰色对象</li>\n<li>遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。</li>\n<li>循环步骤3，直到灰色对象全部变黑色。</li>\n<li>通过写屏障(write-barrier)检测对象有变化，重复以上操作</li>\n<li>回收所有白色对象（垃圾）。</li>\n</ul>\n<h2 id=\"2-根对象是什么？\"><a href=\"#2-根对象是什么？\" class=\"headerlink\" title=\"2. 根对象是什么？\"></a>2. 根对象是什么？</h2><p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p>\n<ul>\n<li>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。</li>\n<li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。</li>\n<li>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。</li>\n</ul>\n<h2 id=\"3-STW（Stop-The-World）\"><a href=\"#3-STW（Stop-The-World）\" class=\"headerlink\" title=\"3. STW（Stop The World）\"></a>3. STW（Stop The World）</h2><ul>\n<li>为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。</li>\n<li>STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。</li>\n</ul>\n<h2 id=\"4-写屏障-Write-Barrier\"><a href=\"#4-写屏障-Write-Barrier\" class=\"headerlink\" title=\"4. 写屏障(Write Barrier)\"></a>4. 写屏障(Write Barrier)</h2><p>为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要<span class=\"label label-danger\">通过写屏障技术尽可能地缩短STW的时间。</span></p>\n<h3 id=\"4-1-写屏障的原理\"><a href=\"#4-1-写屏障的原理\" class=\"headerlink\" title=\"4.1 写屏障的原理\"></a>4.1 写屏障的原理</h3><p>造成引用对象丢失的条件:</p>\n<ul>\n<li>一个黑色A新增了指向白色C的引用，</li>\n<li>白色C没有其他灰色的引用(除A之外)。</li>\n</ul>\n<p>以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。</p>\n<span class=\"label label-danger\">写屏障破坏两个条件其一即可</span>\n<h4 id=\"4-2-如何破坏？\"><a href=\"#4-2-如何破坏？\" class=\"headerlink\" title=\"4.2 如何破坏？\"></a>4.2 如何破坏？</h4><ul>\n<li><strong>Dijistra写屏障</strong></li>\n</ul>\n<p>满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色</p>\n<ul>\n<li><strong>Yuasa写屏障</strong></li>\n</ul>\n<p>满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色</p>\n<h2 id=\"5-GC-触发时机\"><a href=\"#5-GC-触发时机\" class=\"headerlink\" title=\"5. GC 触发时机\"></a>5. GC 触发时机</h2><p><strong>内存分配量达到阈值触发GC</strong></p>\n<p>每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，</p>\n<span class=\"label label-primary\">阈值 = 上次GC内存分配量 × 内存增长率</span>\n\n<p><strong>定期触发GC</strong></p>\n<p>默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明</p>\n<p><strong>主动触发</strong></p>\n<p>程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。</p>"},{"title":"实现 DNS 双栈的一些细节","date":"2023-09-05T03:20:13.000Z","updated":"2023-09-05T05:49:49.283Z","layout":"dns","_content":"\n# 1. 概述\n\n当客户端是双栈环境时，客户端在向 DNS 服务器请求地址解析时，会同时发起域名 A 记录和 AAAA 记录的解析请求，如果后台支持双栈（或者DNS自己返回了双栈的解析结果），就会拿到对应的两种解析地址结果：IPv4 和 IPv6，拿到解析结果后，由客户端选择地址发起连接。\n为了推广 IPv6，客户端应该从解析结果中优先选择 IPv6 进行连接，但由于当前 IPv6 基础建设尚未完善，连通性问题和可靠性问题不能得到有效保证，链接超时或失败会造成用户可感知的负面体验，有这些负面体验用户可能就完全禁止 IPv6，所以还是需要使用 IPv4 协议适当的做降级和兜底。\n针对 IPv6 的回退和降级策略，IETF 于2012年发布 [RFC6555](https://datatracker.ietf.org/doc/html/rfc6555) 和2017年发布 [RFC8305](https://datatracker.ietf.org/doc/html/rfc8305) 两版 RFC 算法来描述了关于在域名解析、地址排序和连接尝试阶段v4配合v6升级适配的详细方案，该方案称为：Happy Eyeballs。\n\n* RFC6555: Happy Eyeballs: Success with Dual-Stack Hosts\n* RFC8305: Happy Eyeballs Version 2: Better Connectivity Using Concurrency\n\n## Why Happy Eyeballs ?\n```\nThe name \"happy eyeballs\" derives from the term \"eyeball\" to describe endpoints which represent human Internet end-users, as opposed to servers.\n```\n我的理解是，Happy Eyeballs 的关注点是人类本身而不是机器，人类在互联网上浏览网页，观看视频，不能因为 IPv6 和 IPv4 网络的连通性问题让他们眼球停留在加载页面，而应该让他们的眼球快乐起来。\n\nRFC6555 描述了 Happy Eyeballs 原始算法，RFC8305 在 RFC6555 的基础上，添加了如下内容：\n\n* 如何执行DNS查询以获取这些地址\n* 如何处理每个地址族的多个地址\n* 连接竞速时如何处理DNS更新\n* 如何利用历史信息\n* 如何适配使用NAT64和DNS64实现的单栈IPv6网络\n\nRFC8305 描述的算法仍然符合 RFC6555 的规范，只不过更加细节化，RFC8305 的中文版参考这里。\n\n# 2. Happy Eyeballs-快乐眼球算法\n\nRFC8305 定义的 Happy Eyeballs 归纳如下：\n\n1. 向DNS 服务器同时发起AAAA记录和A记录解析（AAAA 先于 A）\n2. 如果v6地址先返回就直接开始握手建立连接，如果v4地址先返回，则等待 50ms 等待v6地址返回，以确保优先选择IPv6（AAAA响应跟随A响应几毫秒是很常见的）\n3. 将所有已解析的目标地址排序，排序依据 ([RFC8305], Section 4) 及 ([RFC6724], Section 6)\n4. 排序完成后，会依次有序的取地址发送握手请求，并启动定时任务，该任务在250ms后检查若未完成连接建立，则对第二个地址开始连接尝试\n5. 只有有一个握手确认成功（建立了连接），就会取消所有其他的连接尝试\n\n\n\nRFC6555 中有一点不一样的是，对解析的所有目标地址选取的算法参考的是 [RFC3484] ，[RFC3484]  已经被 [RFC6724] 取代，目的地址排序规则会影响 IPv4 及 IPv6 地址的先后顺序，具体我们在下一节分析。\n\nHappy Eyeballs 要求在尝试连接之前，实现上不应该等待两个地址族都返回 answers，如果一个查询无法返回或者需要花费更长的时间返回，那么就会造成连接建立的延迟，因此，客户端应将 DNS 解析实现为异步。这一点在 curl 及 go 的实现中都没能做到，curl 会调用 getaddrinfo 方法获取所有地址解析结果后再尝试连接竞速，go 有自己实现的主机名到地址的解析函数，会根据系统及配置选择使用go原生的地址解析函数或者 getaddrinfo，但无论怎样，也是在获取所有地址解析结果后再尝试连接竞速。\n\n总体来看，Happy Eyeballs 分为目的地址排序和连接竞速两个主要阶段，我们一一来看。\n\n## 2.1. 目的地址排序\n\n目的地址选取依据 [RFC3484] 及 [RFC6724]，[RFC3484] 已经被 [RFC6724] 取代，但是 getaddrinfo 还是使用了 [RFC3484] 进行目的地址选取排序，go 实现的主机名到地址的解析函数使用了 [RFC6724]。\n注：[RFC3484] 和 [RFC6724] 描述了源地址及目的地址选取算法，这里我们只关注目的地址选取。\n\n目的地址选取遵循 10 条规则，优先级 1 > 2 >3 > 4 ...，满足一条就返回。\n目的地址中设计到一些名词我们重点关注一下：\n\n* scope\n* precedence\n* label\n* home addresses\n* care-of address\n\n | 规则                  |||\n | --------------------- |||\n | Rule 1                | Rule 1: Avoid unusable destinations| Rule 1: Avoid unusable destinations|\n | 避免无法使用的地址    | If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer| If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer|\n | Rule 2                | Rule 2: Prefer matching scope| Rule 2: Prefer matching scope|\n | 匹配源地址 scope 优先 | If Scope(DA) = Scope(Source(DA)) and Scope(DB) <> Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) <> Scope(Source(DA)) and Scope(DB) = Scope(Source(DB)), then prefer| If Scope(DA) = Scope(Source(DA)) and Scope(DB) <> Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) <> Scope(Source(DA)) and Scope(DB) = Scope(Source(DB)), then prefer|\n | Rule 3                | Rule 3: Avoid deprecated addresses| Rule 3: Avoid deprecated addresses|\n | 避免已经弃用的地址    | If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer| If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer|\n | Rule 4                | Rule 4: Prefer home addresses| Rule 4: Prefer home addresses|\n | home addresses 优先   | If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.                                                                                                                                                                                                                                                                  | If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                            |  |\n | Rule 5                | Rule 5: Prefer matching label| Rule 5: Prefer matching label. If Label(Source(DA)) = Label(DA) and Label(Source(DB)) <> Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) <> Label(DA) and Label(Source(DB)) = Label(DB), then prefer|\n | 匹配 label 优先       | If Label(Source(DA)) = Label(DA) and Label(Source(DB)) <> Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) <> Label(DA) and Label(Source(DB)) = Label(DB), then prefer|\n | Rule 6                | Rule 6: Prefer higher precedence| Rule 6: Prefer higher precedence|\n | 高优先级优先          | If Precedence(DA) > Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) < Precedence(DB), then prefer| If Precedence(DA) > Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) < Precedence(DB), then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |\n | Rule 7                | Rule 7: Prefer native transport| Rule 7: Prefer native transport|\n | 原生传输协议优先      | If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion:  6-over-4 [15], ISATAP [16], and configured tunnels [17] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table.  An implementation MAY generalize this rule by using a concept of interface preference, and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces). | If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion: The IPv6 Rapid Deployment on IPv4 Infrastructures (6rd) Protocol [RFC5969], the Intra-Site Automatic Tunnel Addressing Protocol (ISATAP) [RFC5214], and configured tunnels [RFC4213] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table. An implementation MAY generalize this rule by using a concept of interface preference and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces). |\n | Rule 8                | Rule 8: Prefer smaller scope| Rule 8: Prefer smaller scope|\n | 更小的 scope 优先     | If Scope(DA) < Scope(DB), then prefer DA.  Similarly, if Scope(DA) > Scope(DB), then prefer| If Scope(DA) < Scope(DB), then prefer DA.  Similarly, if Scope(DA) > Scope(DB), then prefer|\n | Rule 9                | Rule 9: Use longest matching prefix| Rule 9: Use longest matching prefix|\n | 前缀匹配长度优先      | When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(DA, Source(DA)) > CommonPrefixLen(DB, Source(DB)), then prefer DA.  Similarly, if CommonPrefixLen(DA, Source(DA)) < CommonPrefixLen(DB, Source(DB)), then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                                                                 | When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(Source(DA), DA) > CommonPrefixLen(Source(DB), DB), then prefer DA.  Similarly, if CommonPrefixLen(Source(DA), DA) < CommonPrefixLen(Source(DB), DB), then prefer|\n | Rule 10               | Rule 10: Otherwise, leave the order unchanged| Rule 10: Otherwise, leave the order unchanged|\n | 默认规则              | If DA preceded DB in the original list, prefer DA.  Otherwise prefer| If DA preceded DB in the original list, prefer DA.  Otherwise, prefer|\n\n\n其中 label 和 precedence 在 默认策略表中定义，10 条规则基本没变，只是对默认策略表进行了一些更改：\n\n[RFC3484] 默认策略表\n```\n      Prefix        Precedence Label\n      ::1/128               50     0\n      ::/0                  40     1\n      2002::/16             30     2\n      ::/96                 20     3\n      ::ffff:0:0/96         10     4\n```\n\n[RFC6724]  默认策略表\n```\n      Prefix        Precedence Label\n      ::1/128               50     0\n      ::/0                  40     1\n      ::ffff:0:0/96         35     4\n      2002::/16             30     2 6to4 地址\n      2001::/32              5     5 Teredo 地址\n      fc00::/7               3    13\n      ::/96                  1     3\n      fec0::/10              1    11\n      3ffe::/16              1    12\n```\n1. 添加 Teredo [RFC4380] 地址前缀 (2001::/32)，preference 和 label 值取自已经广泛使用的实现\n2. 在原生 IPv6 地址前缀下添加 ULAs (fc00::/7) 地址，因为它不是全球可达地址，参见 Section 10.6\n3. 取消推荐 site-local addresses (fec0::/10) ，因其已经被弃用 [RFC3879]\n4. 调整原生 IPv4 地址优先 6to4 (2002::/32) 地址\n5. 取消推荐 IPv4-Compatible addresses (::/96) 地址，因其被废弃且不再使用 [RFC4291]\n6. 取消推荐  6bone testing addresses (3ffe::/16) 地址，因其已经被淘汰而不再首选 [RFC3701]\n7. Added optional ability for an implementation to add automatic rows to the table for site-specific ULA prefixes and site-specific native 6to4 prefixes\n\n根据上述规则对 dns 服务器返回的地址进行初步排序，再依据 ([RFC8305], Section 4) 进行 IPv4 和 IPv6 地址交错排序，形成最终的地址排序列表：如果返回的地址包含多个 IPv6 和 IPv4 地址，([RFC8305], Section 4) 中提到了两种实现：\n\n* 第一种：v6 v6 v6 v4 v4 v4，地址族分段\n* 第二种：v6 v4 v6 v4 v6 v4，地址族交错\n\n地址排序之后，进行连接竞速。\n\n### 2.1.1. 自定义默认策略表\n\n策略表可以自己定义，用来控制不同地址的排序，比如 getaddrinfo 会读取 /etc/gai.conf 中的策略配置，如果没有特殊配置，getaddrinfo 使用默认的配置，默认将 6to4 地址排在原生 IPv4 地址前，我们可以：\n将 precedence ::ffff:0:0/96  10\n改 precedence ::ffff:0:0/96  35，使原生的 IPv4 地址优于 6to4 地址。\n\n```\n# Configuration for getaddrinfo(3).\n#\n# So far only configuration for the destination address sorting is needed.\n# RFC 3484 governs the sorting.  But the RFC also says that system\n# administrators should be able to overwrite the defaults.  This can be\n# achieved here.\n#\n# All lines have an initial identifier specifying the option followed by\n# up to two values.  Information specified in this file replaces the\n# default information.  Complete absence of data of one kind causes the\n# appropriate default information to be used.  The supported commands include:\n#\n# reload  <yes|no>\n#    If set to yes, each getaddrinfo(3) call will check whether this file\n#    changed and if necessary reload.  This option should not really be\n#    used.  There are possible runtime problems.  The default is no.\n#\n# label   <mask>   <value>\n#    Add another rule to the RFC 3484 label table.  See section 2.1 in\n#    RFC 3484.  The default is:\n#\nlabel ::1/128       0\nlabel ::/0          1\nlabel 2002::/16     2\nlabel ::/96         3\nlabel ::ffff:0:0/96 4\nlabel fec0::/10     5\nlabel fc00::/7      6\nlabel 2001:0::/32   7\nlabel ::ffff:7f00:0001/128 8\n\n#    This default differs from the tables given in RFC 3484 by handling\n#    (now obsolete) site-local IPv6 addresses and Unique Local Addresses.\n#    The reason for this difference is that these addresses are never\n#    NATed while IPv4 site-local addresses most probably are.  Given\n#    the precedence of IPv6 over IPv4 (see below) on machines having only\n#    site-local IPv4 and IPv6 addresses a lookup for a global address would\n#    see the IPv6 be preferred.  The result is a long delay because the\n#    site-local IPv6 addresses cannot be used while the IPv4 address is\n#    (at least for the foreseeable future) NATed.  We also treat Teredo\n#    tunnels special.\n#\n# precedence  <mask>   <value>\n#    Add another rule to the RFC 3484 precedence table.  See section 2.1\n#    and 10.3 in RFC 3484.  The default is:\n#\nprecedence  ::1/128       50\nprecedence  ::/0          40\nprecedence  2002::/16     30\nprecedence ::/96          20\nprecedence ::ffff:0:0/96  35\n\n#\n#    For sites which prefer IPv4 connections change the last line to\n#\n#precedence ::ffff:0:0/96  100\n\n#\n# scopev4  <mask>  <value>\n#    Add another rule to the RFC 3484 scope table for IPv4 addresses.\n#    By default the scope IDs described in section 3.2 in RFC 3484 are\n#    used.  Changing these defaults should hardly ever be necessary.\n#    The defaults are equivalent to:\n#\nscopev4 ::ffff:169.254.0.0/112  2\nscopev4 ::ffff:127.0.0.0/104    2\nscopev4 ::ffff:0.0.0.0/96       14\n#\n#    For sites which use site-local IPv4 addresses behind NAT there is\n#    the problem that even if IPv4 addresses are preferred they do not\n#    have the same scope and are therefore not sorted first.  To change\n#    this use only these rules:\n#\nscopev4 ::ffff:169.254.0.0/112  2\nscopev4 ::ffff:127.0.0.0/104    2\nscopev4 ::ffff:0.0.0.0/96       14\n```\n\n## 2.2. 连接竞速\n\n● 为避免无意义的网络连接，连接竞速过程不应该并行，而是依次有序的单个启动\n● 在一定的连接尝试延时（推荐250ms）过后，再使用列表中的后续ip地址开始逐个尝试连接。\n● 一旦首个 IP 连接握手成功后，即取消其他未完成的连接尝试。另外，DNS 客户端解析器仍应在短时间内（建议为1秒）处理来自网络的DNS回复，因为它们将填充 DNS 缓存，并可用于后续连接。\n● 连接尝试延迟推荐为250ms，可根据相同域名的历史RTT数据采集来动态调整延时，但区间应限制在100ms-2s\n\n# 3. 客户端实现\n\n依据 Happy Eyeballs 算法，各语言的类库都有各自的实现，并且不会完全遵守 Happy Eyeballs。\n\n## 3.1. Go 的实现\n\nGo 实现了自己的主机名到地址的解析函数 goLookupIPCNAMEOrder，依据操作系统版本及相关配置会选择使用 goLookupIPCNAMEOrder  或是 libc 的 getaddrinfo 。默认在 Linux 系统中如果没有特殊配置 /etc/nsswitch.conf 和 /etc/resolv.conf 的话，Go 会使用 goLookupIPCNAMEOrder 发起域名解析请求(当 /etc/resolv.conf 文件中配置了 single-request，Go 会使用 getaddrinfo)。 goLookupIPCNAMEOrder 使用 [RFC6724] 对返回的地址进行排序。\n\n假设 www.example.com 有下列\n* 2002:a40:4c07:1::faf1 （6to4）\n* 2002:a40:4c07:1::faf2（6to4）\n* 2002:a40:4c07:1::faf3（6to4）\n* 10.64.78.34\n* 10.64.78.35\n五个解析结果。\n\n* 当 Go 使用 goLookupIPCNAMEOrder：\n\n\n* 如果 Go 使用 getaddrinfo：\n\ngo 在调用 goLookupIPCNAMEOrder 或者 getaddrinfo 函数之后拿到排序过的地址解析列表，然后依据这个排序结果，如果在双栈环境下，地址列表第一个地址是 IPv4 地址，那么所有的 IPv4 放到 primaries 队列中，所有的 IPv6 地址放到 fallbacks 队列中（如果地址列表第一个地址是 IPv6 地址，所有的 IPv6 放到 primaries 队列中，所有的 IPv4 地址放到 fallbacks 队列中），接着优先顺序的对 primaries 队列中的地址尝试连接，如果 300ms（可配置）后连接未建立，那么顺序的对 fallbacks 队列中的地址发起连接（如果primaries队列地址连接出错会马上对 fallbacks 队列地址发起连接，不会等 300ms），任何一个连接成功后，其余连接将被关闭。\n\n# 4. 客户端测试\n\n**dns 服务器针对特殊域名，返回如下几种结果：**\n1. 返回1个 IPv4 地址\n2. 返回1个 IPv6 地址\n3. 返回1个 IPv4 地址和1个 IPv6 地址\n4. 返回1个 IPv4 地址和1个 broken IPv6 地址\n5. 返回1个 broken IPv4 地址和1个 IPv6 地址\n6. 返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken\n7. 返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken\n\n{% note warning %}\n\n上面的 IPv6 地址指的是 6to4 地址，broken 指的是网络包丢失的场景，这里我们使用 iptables DROP 掉特殊的地址来模拟 broken。\n\n{% endnote %}\n\n**测试环境：**\n* 内核版本：Linux 4.1.0-15.el6.ucloud.x86_64\n* 操作系统：CentOS release 6.3 (Final)\n* glibc 版本：2.12\n* curl 版本：curl 7.72.0 (x86_64-redhat-linux-gnu)\n* go 版本：go1.15 linux/amd64\n* python 版本：Python 2.6.6\n* nodejs 版本：v0.10.36\n* java 版本：\"11.0.8\" 2020-07-14 LTS\n* nginx 版本：nginx/1.14.2\n\n**使用 coredns file 插件进行测试，针对上面七种场景，配置7个文件：**\n* 返回1个 IPv4 地址\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN A     10.64.78.34\n```\n* 返回1个 IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n```\n\n* 返回1个 IPv4 地址和1个 IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.34\n```\n\n* 返回1个 IPv4 地址和1个 broken IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf2\n        IN A     10.64.78.34\n```\n\n* 返回1个 broken IPv4 地址和1个 IPv6 地址\n  \n```\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.35\n```\n\n* 返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::aaa1\n        IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.34\n```\n\n* 返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.33\n        IN A     10.64.78.34\n```\n\n## 4.1. IPv4 only\n\n执行命令禁用 IPv6:\n\n```sh\nsysctl net.ipv6.conf.all.disable_ipv6=1\nsysctl net.ipv6.conf.default.disable_ipv6=1\n```\n\n| go                                                                                                                                                                                                                                                         | curl                                                                                                                                                                                                                                                       | python                                                                                                                                                                                                                                                                      | node.js                                                                                                                             | java                                                                                                                      | nginx                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                      | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                      | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                               | 客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，客户端无法完成连接                                                     | 客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，nginx 无法启动                                                                                                                                                                  |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                              | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                              | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                                               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                       | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                                        | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                                           | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接   | 客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接                                        | 客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接                                                                                                                                                 |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                             | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s后对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 proxy_connect_timeout（默认1m） 时间后连接未建立，再使用正常 IPv4 地址发起连接，连接成功，后续连接如此循环 |\n\n\n## 4.2. Dual-stack\n\n| go                                                                                                                                                                                                                                       | curl                                                                                                                                                                                                                       | python                                                                                                                                                                                                                                                                                      | node.js                                                                                                                             | java                                                                                                                                | nginx                                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                    |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                                    |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用IPv4 和 IPv6 地址建立连接                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用 IPv4 和 IPv6 地址建立连接                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv6 地址发起连接，200ms 后连接未建立，客户端使用 IPv4 地址建立连接                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv6 地址建立连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，客户端再使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv6 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv4 建立连接                   |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv4 地址建立连接，300ms IPv4 连接未建立，客户端再使用 IPv6 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv4 地址发起连接，200ms 后连接未建立，客户端使用 IPv6 地址建立连接                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv4 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv6 建立连接                   |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                                                                                                                                  | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv4 地址建立连接 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv6 地址发起连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，对正常的 IPv6 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv6 地址发起连接 |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 300ms 连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv6 地址建立连接 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv4 地址发起连接 |\n\n\n# 5. 总结\n\n**集群中主要存在以下集中域名解析请求：**\n1. Kubernetes IPv6 service 域名\n2. Kubernetes IPv4 service 域名\n3. 特殊域名\n4. 管理网服务域名\n5. 科学上网域名\n6. 外网域名\n\n* 对于第 1、2 两类域名，coredns Kubernetes  插件可以根据 service 的类别只返回对应的 IPv6 或者 IPv4 地址；\n* 对于第 3 类域名我们可以特殊配置 hosts，返回 IPv6 或 IPv4 地址；\n* 对于第 4 类域名，管理网服务可能不支持 IPv6，dns 服务器也不能直接探测管理网服务是否支持 IPv6，所以dns服务器返回 IPv4 地址和 6to4 地址，由客户端使用 Happy Eyeballs 算法进行连接竞速选择可用的服务地址，如果 IPv6 是不可达、不存在的地址或者没有listen对应的端口，那么连接竞速会快速完成，不会等待连接尝试延迟时间(go默认 300ms)；如果 IPv6 包被丢了，客户端可能会等待尝试延迟时间后再对另一个地址族发起连接，某些客户端比如 nginx 需要设置 proxy_connect_timeout，python urllib2.urlopen 需要设置timeout 时间，不然建立连接很慢；\n* 对于第 5、6 类地址由于集群现在只支持通过 IPv6 访问公网，所以直接返回 IPv6 地址；\n\n# 6. 附录\n## 6.1. 客户端测试代码\n### 6.1.1. go\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst (\n\tdefaultHttpClientTimeout = 5 * time.Second\n)\n\nvar (\n\thttpReqTimeoutFlag = flag.Duration(\"timeout\", defaultHttpClientTimeout, \"Connection and read timeout value (for http)\")\n\tnumConnFlag        = flag.Int(\"c\", 1, \"Number of connections per host\")\n)\n\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tusageErr(\"Error: need at least 1 command parameter\")\n\t}\n\n\tflag.Parse()\n\n\tvar client runner\n\n\tfmt.Println(\"Use Http for dr testing\")\n\tclient = newHttpClient()\n\n\tif res, err := client.do(\"first\"); err != nil {\n\t\tfmt.Printf(\"Error: query failed, %v\\n\", err)\n\t} else {\n\t\tfmt.Printf(\"Info: receive response, %s\\n\", res)\n\t}\n}\n\n// Prints usage and error messages with StdErr writer.\nfunc usageErr(msgs ...interface{}) {\n\tfmt.Println(msgs...)\n\tos.Exit(1)\n}\n\ntype runner interface {\n\tdo(string) (string, error)\n}\n\ntype httpClient struct {\n\turl    string\n\tclient *http.Client\n}\n\nfunc newHttpClient() runner {\n\turl := strings.TrimLeft(flag.Arg(0), \" \\t\\r\\n\")\n\n\ttimeout := httpReqTimeoutFlag\n\ttransport := http.Transport{\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t\t//DisableKeepAlives:   false,\n\t\tMaxConnsPerHost:     *numConnFlag,\n\t\tMaxIdleConns:        *numConnFlag,\n\t\tMaxIdleConnsPerHost: *numConnFlag,\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: &transport,\n\t\tTimeout:   *timeout,\n\t}\n\treturn &httpClient{\n\t\turl:    url,\n\t\tclient: client,\n\t}\n}\n\nfunc (c *httpClient) do(payload string) (string, error) {\n\treq, err := http.NewRequest(\"GET\", c.url, bytes.NewBufferString(time.Now().String()+\"--\"+payload))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t}\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\n\t\t\t\"error get health information about Grafana, expected status 200 but got %v\",\n\t\t\tresp.StatusCode)\n\t}\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}\n```\n\n### 6.1.2. getaddrinfo\n\n```c\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\nvoid printAddr(const struct sockaddr * res);\n\nint\nmain(int argc, char * argv[]) {\n    struct addrinfo hints;\n    struct addrinfo * result, * rp;\n    int s;\n\n    if (argc < 2) {\n        fprintf(stderr, \"Usage: %s host port...\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n    \n    memset( & hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC; /* Allow IPv4 or IPv6 */\n    hints.ai_socktype = SOCK_STREAM; /* Stream socket */\n    hints.ai_flags = (AI_CANONNAME | AI_V4MAPPED | AI_ALL);\n    //hints.ai_flags = 0;\n    //hints.ai_protocol = 0;          /* Any protocol */\n\n    s = getaddrinfo(argv[1], argv[2], & hints, & result);\n    if (s != 0) {\n        fprintf(stderr, \"getaddrinfo: %s\\n\", gai_strerror(s));\n        exit(EXIT_FAILURE);\n    }\n\n    /* getaddrinfo() returns a list of address structures.*/\n\n    for (rp = result; rp != NULL; rp = rp -> ai_next) {\n        printf(\"Received ai_family:%d ai_socktype:%d ai_protocol:%d ai_addrlen:%d\\n\",\n            rp -> ai_family, rp -> ai_socktype, rp -> ai_protocol, rp -> ai_addrlen);\n        printAddr(rp -> ai_addr);\n    }\n\n    freeaddrinfo(result); /* No longer needed */\n\n    exit(EXIT_SUCCESS);\n}\n\nvoid printAddr(const struct sockaddr * res) {\n    char * s = NULL;\n    switch (res -> sa_family) {\n    case AF_INET: {\n        struct sockaddr_in * addr_in = (struct sockaddr_in * ) res;\n        s = malloc(INET_ADDRSTRLEN);\n        inet_ntop(AF_INET, & (addr_in -> sin_addr), s, INET_ADDRSTRLEN);\n        break;\n    }\n    case AF_INET6: {\n        struct sockaddr_in6 * addr_in6 = (struct sockaddr_in6 * ) res;\n        s = malloc(INET6_ADDRSTRLEN);\n        inet_ntop(AF_INET6, & (addr_in6 -> sin6_addr), s, INET6_ADDRSTRLEN);\n        break;\n    }\n    default:\n        break;\n    }\n    printf(\"IP address: %s\\n\", s);\n    free(s);\n}\n```\n\n### 6.1.3. python\n\n```python\n#!/usr/bin/python\n\nimport urllib\nimport urllib2\n\nurl = 'http://www.example.org:8080'\nvalues = {'name' : 'Michael'}\ndata = urllib.urlencode(values)\nreq = urllib2.Request(url, data)\nresponse = urllib2.urlopen(req,timeout=1)\nprint response.read()\n6.1.4. node.js\nvar http = require('http');\n\nvar options = {\n  host: 'www.example.org',\n  path: '/',\n  port: '8080',\n  method: 'POST'\n};\n\ncallback = function(response) {\n  var str = ''\n  response.on('data', function (chunk) {\n    str += chunk;\n  });\n\n  response.on('end', function () {\n    console.log(str);\n  });\n}\n\nvar req = http.request(options, callback);\nreq.write(\"hello world!\");\nreq.end();\n6.1.5. java\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class GetRequestJava11 {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"http://www.example.org:8080/\"))\n                .build();\n\n        HttpResponse<String> response = client.send(request,\n                HttpResponse.BodyHandlers.ofString());\n\n        System.out.println(response.body());\n    }\n}\n6.1.6. nginx\nserver {\n    listen       [::]:9901;\n    listen       0.0.0.0:9901;\n    server_name  localhost;\n\n    location / {\n        proxy_pass   http://www.example.org:8080;\n    }\n}\n\nupstream myserver {\n    server  www.example.org:8080;\n}\n\nserver {\n    listen       [::]:9902;\n    listen       0.0.0.0:9902;\n    server_name  localhost;\n\n    location / {\n        proxy_pass   http://myserver;\n    }\n}\n```\n\n原文链接： https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq\n\n# 参考文献\n\nhttps://tools.ietf.org/html/rfc3484\nhttps://tools.ietf.org/html/rfc6724\nhttps://tools.ietf.org/html/rfc6555\nhttps://tools.ietf.org/html/rfc8305","source":"_posts/技术/实现-DNS-双栈的一些细节.md","raw":"---\ntitle: 实现 DNS 双栈的一些细节\ncategories: 技术\ndate: 2023-09-05 11:20:13\nupdated:\ntags: [\"dns\"]\nlayout: dns\n---\n\n# 1. 概述\n\n当客户端是双栈环境时，客户端在向 DNS 服务器请求地址解析时，会同时发起域名 A 记录和 AAAA 记录的解析请求，如果后台支持双栈（或者DNS自己返回了双栈的解析结果），就会拿到对应的两种解析地址结果：IPv4 和 IPv6，拿到解析结果后，由客户端选择地址发起连接。\n为了推广 IPv6，客户端应该从解析结果中优先选择 IPv6 进行连接，但由于当前 IPv6 基础建设尚未完善，连通性问题和可靠性问题不能得到有效保证，链接超时或失败会造成用户可感知的负面体验，有这些负面体验用户可能就完全禁止 IPv6，所以还是需要使用 IPv4 协议适当的做降级和兜底。\n针对 IPv6 的回退和降级策略，IETF 于2012年发布 [RFC6555](https://datatracker.ietf.org/doc/html/rfc6555) 和2017年发布 [RFC8305](https://datatracker.ietf.org/doc/html/rfc8305) 两版 RFC 算法来描述了关于在域名解析、地址排序和连接尝试阶段v4配合v6升级适配的详细方案，该方案称为：Happy Eyeballs。\n\n* RFC6555: Happy Eyeballs: Success with Dual-Stack Hosts\n* RFC8305: Happy Eyeballs Version 2: Better Connectivity Using Concurrency\n\n## Why Happy Eyeballs ?\n```\nThe name \"happy eyeballs\" derives from the term \"eyeball\" to describe endpoints which represent human Internet end-users, as opposed to servers.\n```\n我的理解是，Happy Eyeballs 的关注点是人类本身而不是机器，人类在互联网上浏览网页，观看视频，不能因为 IPv6 和 IPv4 网络的连通性问题让他们眼球停留在加载页面，而应该让他们的眼球快乐起来。\n\nRFC6555 描述了 Happy Eyeballs 原始算法，RFC8305 在 RFC6555 的基础上，添加了如下内容：\n\n* 如何执行DNS查询以获取这些地址\n* 如何处理每个地址族的多个地址\n* 连接竞速时如何处理DNS更新\n* 如何利用历史信息\n* 如何适配使用NAT64和DNS64实现的单栈IPv6网络\n\nRFC8305 描述的算法仍然符合 RFC6555 的规范，只不过更加细节化，RFC8305 的中文版参考这里。\n\n# 2. Happy Eyeballs-快乐眼球算法\n\nRFC8305 定义的 Happy Eyeballs 归纳如下：\n\n1. 向DNS 服务器同时发起AAAA记录和A记录解析（AAAA 先于 A）\n2. 如果v6地址先返回就直接开始握手建立连接，如果v4地址先返回，则等待 50ms 等待v6地址返回，以确保优先选择IPv6（AAAA响应跟随A响应几毫秒是很常见的）\n3. 将所有已解析的目标地址排序，排序依据 ([RFC8305], Section 4) 及 ([RFC6724], Section 6)\n4. 排序完成后，会依次有序的取地址发送握手请求，并启动定时任务，该任务在250ms后检查若未完成连接建立，则对第二个地址开始连接尝试\n5. 只有有一个握手确认成功（建立了连接），就会取消所有其他的连接尝试\n\n\n\nRFC6555 中有一点不一样的是，对解析的所有目标地址选取的算法参考的是 [RFC3484] ，[RFC3484]  已经被 [RFC6724] 取代，目的地址排序规则会影响 IPv4 及 IPv6 地址的先后顺序，具体我们在下一节分析。\n\nHappy Eyeballs 要求在尝试连接之前，实现上不应该等待两个地址族都返回 answers，如果一个查询无法返回或者需要花费更长的时间返回，那么就会造成连接建立的延迟，因此，客户端应将 DNS 解析实现为异步。这一点在 curl 及 go 的实现中都没能做到，curl 会调用 getaddrinfo 方法获取所有地址解析结果后再尝试连接竞速，go 有自己实现的主机名到地址的解析函数，会根据系统及配置选择使用go原生的地址解析函数或者 getaddrinfo，但无论怎样，也是在获取所有地址解析结果后再尝试连接竞速。\n\n总体来看，Happy Eyeballs 分为目的地址排序和连接竞速两个主要阶段，我们一一来看。\n\n## 2.1. 目的地址排序\n\n目的地址选取依据 [RFC3484] 及 [RFC6724]，[RFC3484] 已经被 [RFC6724] 取代，但是 getaddrinfo 还是使用了 [RFC3484] 进行目的地址选取排序，go 实现的主机名到地址的解析函数使用了 [RFC6724]。\n注：[RFC3484] 和 [RFC6724] 描述了源地址及目的地址选取算法，这里我们只关注目的地址选取。\n\n目的地址选取遵循 10 条规则，优先级 1 > 2 >3 > 4 ...，满足一条就返回。\n目的地址中设计到一些名词我们重点关注一下：\n\n* scope\n* precedence\n* label\n* home addresses\n* care-of address\n\n | 规则                  |||\n | --------------------- |||\n | Rule 1                | Rule 1: Avoid unusable destinations| Rule 1: Avoid unusable destinations|\n | 避免无法使用的地址    | If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer| If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer|\n | Rule 2                | Rule 2: Prefer matching scope| Rule 2: Prefer matching scope|\n | 匹配源地址 scope 优先 | If Scope(DA) = Scope(Source(DA)) and Scope(DB) <> Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) <> Scope(Source(DA)) and Scope(DB) = Scope(Source(DB)), then prefer| If Scope(DA) = Scope(Source(DA)) and Scope(DB) <> Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) <> Scope(Source(DA)) and Scope(DB) = Scope(Source(DB)), then prefer|\n | Rule 3                | Rule 3: Avoid deprecated addresses| Rule 3: Avoid deprecated addresses|\n | 避免已经弃用的地址    | If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer| If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer DA.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |\n | Rule 4                | Rule 4: Prefer home addresses| Rule 4: Prefer home addresses.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       |\n | home addresses 优先   | If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.                                                                                                                                                                                                                                                                  | If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                            |  |\n | Rule 5                | Rule 5: Prefer matching label| Rule 5: Prefer matching label. If Label(Source(DA)) = Label(DA) and Label(Source(DB)) <> Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) <> Label(DA) and Label(Source(DB)) = Label(DB), then prefer|\n | 匹配 label 优先       | If Label(Source(DA)) = Label(DA) and Label(Source(DB)) <> Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) <> Label(DA) and Label(Source(DB)) = Label(DB), then prefer|\n | Rule 6                | Rule 6: Prefer higher precedence| Rule 6: Prefer higher precedence|\n | 高优先级优先          | If Precedence(DA) > Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) < Precedence(DB), then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        | If Precedence(DA) > Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) < Precedence(DB), then prefer|\n | Rule 7                | Rule 7: Prefer native transport| Rule 7: Prefer native transport|\n | 原生传输协议优先      | If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion:  6-over-4 [15], ISATAP [16], and configured tunnels [17] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table.  An implementation MAY generalize this rule by using a concept of interface preference, and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces). | If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion: The IPv6 Rapid Deployment on IPv4 Infrastructures (6rd) Protocol [RFC5969], the Intra-Site Automatic Tunnel Addressing Protocol (ISATAP) [RFC5214], and configured tunnels [RFC4213] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table. An implementation MAY generalize this rule by using a concept of interface preference and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces). |\n | Rule 8                | Rule 8: Prefer smaller scope| Rule 8: Prefer smaller scope.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        |\n | 更小的 scope 优先     | If Scope(DA) < Scope(DB), then prefer DA.  Similarly, if Scope(DA) > Scope(DB), then prefer| If Scope(DA) < Scope(DB), then prefer DA.  Similarly, if Scope(DA) > Scope(DB), then prefer|\n | Rule 9                | Rule 9: Use longest matching prefix.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | Rule 9: Use longest matching prefix|\n | 前缀匹配长度优先      | When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(DA, Source(DA)) > CommonPrefixLen(DB, Source(DB)), then prefer DA.  Similarly, if CommonPrefixLen(DA, Source(DA)) < CommonPrefixLen(DB, Source(DB)), then prefer DB.                                                                                                                                                                                                                                                                                                                                                                                                                                 | When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(Source(DA), DA) > CommonPrefixLen(Source(DB), DB), then prefer DA.  Similarly, if CommonPrefixLen(Source(DA), DA) < CommonPrefixLen(Source(DB), DB), then prefer|\n | Rule 10               | Rule 10: Otherwise, leave the order unchanged| Rule 10: Otherwise, leave the order unchanged|\n | 默认规则              | If DA preceded DB in the original list, prefer DA.  Otherwise prefer| If DA preceded DB in the original list, prefer DA.  Otherwise, prefer DB.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            |\n\n\n其中 label 和 precedence 在 默认策略表中定义，10 条规则基本没变，只是对默认策略表进行了一些更改：\n\n[RFC3484] 默认策略表\n```\n      Prefix        Precedence Label\n      ::1/128               50     0\n      ::/0                  40     1\n      2002::/16             30     2\n      ::/96                 20     3\n      ::ffff:0:0/96         10     4\n```\n\n[RFC6724]  默认策略表\n```\n      Prefix        Precedence Label\n      ::1/128               50     0\n      ::/0                  40     1\n      ::ffff:0:0/96         35     4\n      2002::/16             30     2 6to4 地址\n      2001::/32              5     5 Teredo 地址\n      fc00::/7               3    13\n      ::/96                  1     3\n      fec0::/10              1    11\n      3ffe::/16              1    12\n```\n1. 添加 Teredo [RFC4380] 地址前缀 (2001::/32)，preference 和 label 值取自已经广泛使用的实现\n2. 在原生 IPv6 地址前缀下添加 ULAs (fc00::/7) 地址，因为它不是全球可达地址，参见 Section 10.6\n3. 取消推荐 site-local addresses (fec0::/10) ，因其已经被弃用 [RFC3879]\n4. 调整原生 IPv4 地址优先 6to4 (2002::/32) 地址\n5. 取消推荐 IPv4-Compatible addresses (::/96) 地址，因其被废弃且不再使用 [RFC4291]\n6. 取消推荐  6bone testing addresses (3ffe::/16) 地址，因其已经被淘汰而不再首选 [RFC3701]\n7. Added optional ability for an implementation to add automatic rows to the table for site-specific ULA prefixes and site-specific native 6to4 prefixes\n\n根据上述规则对 dns 服务器返回的地址进行初步排序，再依据 ([RFC8305], Section 4) 进行 IPv4 和 IPv6 地址交错排序，形成最终的地址排序列表：如果返回的地址包含多个 IPv6 和 IPv4 地址，([RFC8305], Section 4) 中提到了两种实现：\n\n* 第一种：v6 v6 v6 v4 v4 v4，地址族分段\n* 第二种：v6 v4 v6 v4 v6 v4，地址族交错\n\n地址排序之后，进行连接竞速。\n\n### 2.1.1. 自定义默认策略表\n\n策略表可以自己定义，用来控制不同地址的排序，比如 getaddrinfo 会读取 /etc/gai.conf 中的策略配置，如果没有特殊配置，getaddrinfo 使用默认的配置，默认将 6to4 地址排在原生 IPv4 地址前，我们可以：\n将 precedence ::ffff:0:0/96  10\n改 precedence ::ffff:0:0/96  35，使原生的 IPv4 地址优于 6to4 地址。\n\n```\n# Configuration for getaddrinfo(3).\n#\n# So far only configuration for the destination address sorting is needed.\n# RFC 3484 governs the sorting.  But the RFC also says that system\n# administrators should be able to overwrite the defaults.  This can be\n# achieved here.\n#\n# All lines have an initial identifier specifying the option followed by\n# up to two values.  Information specified in this file replaces the\n# default information.  Complete absence of data of one kind causes the\n# appropriate default information to be used.  The supported commands include:\n#\n# reload  <yes|no>\n#    If set to yes, each getaddrinfo(3) call will check whether this file\n#    changed and if necessary reload.  This option should not really be\n#    used.  There are possible runtime problems.  The default is no.\n#\n# label   <mask>   <value>\n#    Add another rule to the RFC 3484 label table.  See section 2.1 in\n#    RFC 3484.  The default is:\n#\nlabel ::1/128       0\nlabel ::/0          1\nlabel 2002::/16     2\nlabel ::/96         3\nlabel ::ffff:0:0/96 4\nlabel fec0::/10     5\nlabel fc00::/7      6\nlabel 2001:0::/32   7\nlabel ::ffff:7f00:0001/128 8\n\n#    This default differs from the tables given in RFC 3484 by handling\n#    (now obsolete) site-local IPv6 addresses and Unique Local Addresses.\n#    The reason for this difference is that these addresses are never\n#    NATed while IPv4 site-local addresses most probably are.  Given\n#    the precedence of IPv6 over IPv4 (see below) on machines having only\n#    site-local IPv4 and IPv6 addresses a lookup for a global address would\n#    see the IPv6 be preferred.  The result is a long delay because the\n#    site-local IPv6 addresses cannot be used while the IPv4 address is\n#    (at least for the foreseeable future) NATed.  We also treat Teredo\n#    tunnels special.\n#\n# precedence  <mask>   <value>\n#    Add another rule to the RFC 3484 precedence table.  See section 2.1\n#    and 10.3 in RFC 3484.  The default is:\n#\nprecedence  ::1/128       50\nprecedence  ::/0          40\nprecedence  2002::/16     30\nprecedence ::/96          20\nprecedence ::ffff:0:0/96  35\n\n#\n#    For sites which prefer IPv4 connections change the last line to\n#\n#precedence ::ffff:0:0/96  100\n\n#\n# scopev4  <mask>  <value>\n#    Add another rule to the RFC 3484 scope table for IPv4 addresses.\n#    By default the scope IDs described in section 3.2 in RFC 3484 are\n#    used.  Changing these defaults should hardly ever be necessary.\n#    The defaults are equivalent to:\n#\nscopev4 ::ffff:169.254.0.0/112  2\nscopev4 ::ffff:127.0.0.0/104    2\nscopev4 ::ffff:0.0.0.0/96       14\n#\n#    For sites which use site-local IPv4 addresses behind NAT there is\n#    the problem that even if IPv4 addresses are preferred they do not\n#    have the same scope and are therefore not sorted first.  To change\n#    this use only these rules:\n#\nscopev4 ::ffff:169.254.0.0/112  2\nscopev4 ::ffff:127.0.0.0/104    2\nscopev4 ::ffff:0.0.0.0/96       14\n```\n\n## 2.2. 连接竞速\n\n● 为避免无意义的网络连接，连接竞速过程不应该并行，而是依次有序的单个启动\n● 在一定的连接尝试延时（推荐250ms）过后，再使用列表中的后续ip地址开始逐个尝试连接。\n● 一旦首个 IP 连接握手成功后，即取消其他未完成的连接尝试。另外，DNS 客户端解析器仍应在短时间内（建议为1秒）处理来自网络的DNS回复，因为它们将填充 DNS 缓存，并可用于后续连接。\n● 连接尝试延迟推荐为250ms，可根据相同域名的历史RTT数据采集来动态调整延时，但区间应限制在100ms-2s\n\n# 3. 客户端实现\n\n依据 Happy Eyeballs 算法，各语言的类库都有各自的实现，并且不会完全遵守 Happy Eyeballs。\n\n## 3.1. Go 的实现\n\nGo 实现了自己的主机名到地址的解析函数 goLookupIPCNAMEOrder，依据操作系统版本及相关配置会选择使用 goLookupIPCNAMEOrder  或是 libc 的 getaddrinfo 。默认在 Linux 系统中如果没有特殊配置 /etc/nsswitch.conf 和 /etc/resolv.conf 的话，Go 会使用 goLookupIPCNAMEOrder 发起域名解析请求(当 /etc/resolv.conf 文件中配置了 single-request，Go 会使用 getaddrinfo)。 goLookupIPCNAMEOrder 使用 [RFC6724] 对返回的地址进行排序。\n\n假设 www.example.com 有下列\n* 2002:a40:4c07:1::faf1 （6to4）\n* 2002:a40:4c07:1::faf2（6to4）\n* 2002:a40:4c07:1::faf3（6to4）\n* 10.64.78.34\n* 10.64.78.35\n五个解析结果。\n\n* 当 Go 使用 goLookupIPCNAMEOrder：\n\n\n* 如果 Go 使用 getaddrinfo：\n\ngo 在调用 goLookupIPCNAMEOrder 或者 getaddrinfo 函数之后拿到排序过的地址解析列表，然后依据这个排序结果，如果在双栈环境下，地址列表第一个地址是 IPv4 地址，那么所有的 IPv4 放到 primaries 队列中，所有的 IPv6 地址放到 fallbacks 队列中（如果地址列表第一个地址是 IPv6 地址，所有的 IPv6 放到 primaries 队列中，所有的 IPv4 地址放到 fallbacks 队列中），接着优先顺序的对 primaries 队列中的地址尝试连接，如果 300ms（可配置）后连接未建立，那么顺序的对 fallbacks 队列中的地址发起连接（如果primaries队列地址连接出错会马上对 fallbacks 队列地址发起连接，不会等 300ms），任何一个连接成功后，其余连接将被关闭。\n\n# 4. 客户端测试\n\n**dns 服务器针对特殊域名，返回如下几种结果：**\n1. 返回1个 IPv4 地址\n2. 返回1个 IPv6 地址\n3. 返回1个 IPv4 地址和1个 IPv6 地址\n4. 返回1个 IPv4 地址和1个 broken IPv6 地址\n5. 返回1个 broken IPv4 地址和1个 IPv6 地址\n6. 返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken\n7. 返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken\n\n{% note warning %}\n\n上面的 IPv6 地址指的是 6to4 地址，broken 指的是网络包丢失的场景，这里我们使用 iptables DROP 掉特殊的地址来模拟 broken。\n\n{% endnote %}\n\n**测试环境：**\n* 内核版本：Linux 4.1.0-15.el6.ucloud.x86_64\n* 操作系统：CentOS release 6.3 (Final)\n* glibc 版本：2.12\n* curl 版本：curl 7.72.0 (x86_64-redhat-linux-gnu)\n* go 版本：go1.15 linux/amd64\n* python 版本：Python 2.6.6\n* nodejs 版本：v0.10.36\n* java 版本：\"11.0.8\" 2020-07-14 LTS\n* nginx 版本：nginx/1.14.2\n\n**使用 coredns file 插件进行测试，针对上面七种场景，配置7个文件：**\n* 返回1个 IPv4 地址\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN A     10.64.78.34\n```\n* 返回1个 IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n```\n\n* 返回1个 IPv4 地址和1个 IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.34\n```\n\n* 返回1个 IPv4 地址和1个 broken IPv6 地址\n  \n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf2\n        IN A     10.64.78.34\n```\n\n* 返回1个 broken IPv4 地址和1个 IPv6 地址\n  \n```\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.35\n```\n\n* 返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::aaa1\n        IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.34\n```\n\n* 返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken\n\n```\n$ORIGIN example.org.\n@\t3600 IN\tSOA sns.dns.icann.org. noc.dns.icann.org. (\n\t\t\t\t2017042745 ; serial\n\t\t\t\t7200       ; refresh (2 hours)\n\t\t\t\t3600       ; retry (1 hour)\n\t\t\t\t1209600    ; expire (2 weeks)\n\t\t\t\t3600       ; minimum (1 hour)\n\t\t\t\t)\n\n\t3600 IN NS a.iana-servers.net.\n\t3600 IN NS b.iana-servers.net.\n\nWWW     IN AAAA  2002:a40:4c07:1::faf1\n        IN A     10.64.78.33\n        IN A     10.64.78.34\n```\n\n## 4.1. IPv4 only\n\n执行命令禁用 IPv6:\n\n```sh\nsysctl net.ipv6.conf.all.disable_ipv6=1\nsysctl net.ipv6.conf.default.disable_ipv6=1\n```\n\n| go                                                                                                                                                                                                                                                         | curl                                                                                                                                                                                                                                                       | python                                                                                                                                                                                                                                                                      | node.js                                                                                                                             | java                                                                                                                      | nginx                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                      | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                      | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                                                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接                                               | 客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，客户端无法完成连接                                                     | 客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，nginx 无法启动                                                                                                                                                                  |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                              | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                              | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                                               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接                       | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                                                                                                                                                        | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接                | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接                                                                                                                                           | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接   | 客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接                                        | 客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接                                                                                                                                                 |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                                                                                                                                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接                                                             | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s后对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 proxy_connect_timeout（默认1m） 时间后连接未建立，再使用正常 IPv4 地址发起连接，连接成功，后续连接如此循环 |\n\n\n## 4.2. Dual-stack\n\n| go                                                                                                                                                                                                                                       | curl                                                                                                                                                                                                                       | python                                                                                                                                                                                                                                                                                      | node.js                                                                                                                             | java                                                                                                                                | nginx                                                                                                                                                                                                                                              |\n| ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接                                                                                                                                                    |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                          | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接                                                                                                                                                    |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                                                                                                                            | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用IPv4 和 IPv6 地址建立连接                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用 IPv4 和 IPv6 地址建立连接                                                                                                                              |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接                                                                                                                    | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv6 地址发起连接，200ms 后连接未建立，客户端使用 IPv4 地址建立连接                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv6 地址建立连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，客户端再使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接               | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv6 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv4 建立连接                   |\n| 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv4 地址建立连接，300ms IPv4 连接未建立，客户端再使用 IPv6 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv4 地址发起连接，200ms 后连接未建立，客户端使用 IPv6 地址建立连接                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败       | 客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv4 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv6 建立连接                   |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                                                                                                                                  | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv4 地址建立连接 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv6 地址发起连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，对正常的 IPv6 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接                                                             | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv6 地址发起连接 |\n| 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 300ms 连接未建立，对正常的 IPv4 地址发起连接，连接成功 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv6 地址建立连接 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv6 地址建立连接                                                                                                                                                                                                                     | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败 | 客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv4 地址发起连接 |\n\n\n# 5. 总结\n\n**集群中主要存在以下集中域名解析请求：**\n1. Kubernetes IPv6 service 域名\n2. Kubernetes IPv4 service 域名\n3. 特殊域名\n4. 管理网服务域名\n5. 科学上网域名\n6. 外网域名\n\n* 对于第 1、2 两类域名，coredns Kubernetes  插件可以根据 service 的类别只返回对应的 IPv6 或者 IPv4 地址；\n* 对于第 3 类域名我们可以特殊配置 hosts，返回 IPv6 或 IPv4 地址；\n* 对于第 4 类域名，管理网服务可能不支持 IPv6，dns 服务器也不能直接探测管理网服务是否支持 IPv6，所以dns服务器返回 IPv4 地址和 6to4 地址，由客户端使用 Happy Eyeballs 算法进行连接竞速选择可用的服务地址，如果 IPv6 是不可达、不存在的地址或者没有listen对应的端口，那么连接竞速会快速完成，不会等待连接尝试延迟时间(go默认 300ms)；如果 IPv6 包被丢了，客户端可能会等待尝试延迟时间后再对另一个地址族发起连接，某些客户端比如 nginx 需要设置 proxy_connect_timeout，python urllib2.urlopen 需要设置timeout 时间，不然建立连接很慢；\n* 对于第 5、6 类地址由于集群现在只支持通过 IPv6 访问公网，所以直接返回 IPv6 地址；\n\n# 6. 附录\n## 6.1. 客户端测试代码\n### 6.1.1. go\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto/tls\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\n\nconst (\n\tdefaultHttpClientTimeout = 5 * time.Second\n)\n\nvar (\n\thttpReqTimeoutFlag = flag.Duration(\"timeout\", defaultHttpClientTimeout, \"Connection and read timeout value (for http)\")\n\tnumConnFlag        = flag.Int(\"c\", 1, \"Number of connections per host\")\n)\n\nfunc main() {\n\tif len(os.Args) < 2 {\n\t\tusageErr(\"Error: need at least 1 command parameter\")\n\t}\n\n\tflag.Parse()\n\n\tvar client runner\n\n\tfmt.Println(\"Use Http for dr testing\")\n\tclient = newHttpClient()\n\n\tif res, err := client.do(\"first\"); err != nil {\n\t\tfmt.Printf(\"Error: query failed, %v\\n\", err)\n\t} else {\n\t\tfmt.Printf(\"Info: receive response, %s\\n\", res)\n\t}\n}\n\n// Prints usage and error messages with StdErr writer.\nfunc usageErr(msgs ...interface{}) {\n\tfmt.Println(msgs...)\n\tos.Exit(1)\n}\n\ntype runner interface {\n\tdo(string) (string, error)\n}\n\ntype httpClient struct {\n\turl    string\n\tclient *http.Client\n}\n\nfunc newHttpClient() runner {\n\turl := strings.TrimLeft(flag.Arg(0), \" \\t\\r\\n\")\n\n\ttimeout := httpReqTimeoutFlag\n\ttransport := http.Transport{\n\t\tTLSClientConfig: &tls.Config{\n\t\t\tInsecureSkipVerify: true,\n\t\t},\n\t\t//DisableKeepAlives:   false,\n\t\tMaxConnsPerHost:     *numConnFlag,\n\t\tMaxIdleConns:        *numConnFlag,\n\t\tMaxIdleConnsPerHost: *numConnFlag,\n\t}\n\n\tclient := &http.Client{\n\t\tTransport: &transport,\n\t\tTimeout:   *timeout,\n\t}\n\treturn &httpClient{\n\t\turl:    url,\n\t\tclient: client,\n\t}\n}\n\nfunc (c *httpClient) do(payload string) (string, error) {\n\treq, err := http.NewRequest(\"GET\", c.url, bytes.NewBufferString(time.Now().String()+\"--\"+payload))\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tresp, err := c.client.Do(req)\n\tif resp != nil {\n\t\tdefer resp.Body.Close()\n\t}\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn \"\", fmt.Errorf(\n\t\t\t\"error get health information about Grafana, expected status 200 but got %v\",\n\t\t\tresp.StatusCode)\n\t}\n\n\tdata, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\treturn string(data), nil\n}\n```\n\n### 6.1.2. getaddrinfo\n\n```c\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netdb.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <string.h>\n\nvoid printAddr(const struct sockaddr * res);\n\nint\nmain(int argc, char * argv[]) {\n    struct addrinfo hints;\n    struct addrinfo * result, * rp;\n    int s;\n\n    if (argc < 2) {\n        fprintf(stderr, \"Usage: %s host port...\\n\", argv[0]);\n        exit(EXIT_FAILURE);\n    }\n    \n    memset( & hints, 0, sizeof(struct addrinfo));\n    hints.ai_family = AF_UNSPEC; /* Allow IPv4 or IPv6 */\n    hints.ai_socktype = SOCK_STREAM; /* Stream socket */\n    hints.ai_flags = (AI_CANONNAME | AI_V4MAPPED | AI_ALL);\n    //hints.ai_flags = 0;\n    //hints.ai_protocol = 0;          /* Any protocol */\n\n    s = getaddrinfo(argv[1], argv[2], & hints, & result);\n    if (s != 0) {\n        fprintf(stderr, \"getaddrinfo: %s\\n\", gai_strerror(s));\n        exit(EXIT_FAILURE);\n    }\n\n    /* getaddrinfo() returns a list of address structures.*/\n\n    for (rp = result; rp != NULL; rp = rp -> ai_next) {\n        printf(\"Received ai_family:%d ai_socktype:%d ai_protocol:%d ai_addrlen:%d\\n\",\n            rp -> ai_family, rp -> ai_socktype, rp -> ai_protocol, rp -> ai_addrlen);\n        printAddr(rp -> ai_addr);\n    }\n\n    freeaddrinfo(result); /* No longer needed */\n\n    exit(EXIT_SUCCESS);\n}\n\nvoid printAddr(const struct sockaddr * res) {\n    char * s = NULL;\n    switch (res -> sa_family) {\n    case AF_INET: {\n        struct sockaddr_in * addr_in = (struct sockaddr_in * ) res;\n        s = malloc(INET_ADDRSTRLEN);\n        inet_ntop(AF_INET, & (addr_in -> sin_addr), s, INET_ADDRSTRLEN);\n        break;\n    }\n    case AF_INET6: {\n        struct sockaddr_in6 * addr_in6 = (struct sockaddr_in6 * ) res;\n        s = malloc(INET6_ADDRSTRLEN);\n        inet_ntop(AF_INET6, & (addr_in6 -> sin6_addr), s, INET6_ADDRSTRLEN);\n        break;\n    }\n    default:\n        break;\n    }\n    printf(\"IP address: %s\\n\", s);\n    free(s);\n}\n```\n\n### 6.1.3. python\n\n```python\n#!/usr/bin/python\n\nimport urllib\nimport urllib2\n\nurl = 'http://www.example.org:8080'\nvalues = {'name' : 'Michael'}\ndata = urllib.urlencode(values)\nreq = urllib2.Request(url, data)\nresponse = urllib2.urlopen(req,timeout=1)\nprint response.read()\n6.1.4. node.js\nvar http = require('http');\n\nvar options = {\n  host: 'www.example.org',\n  path: '/',\n  port: '8080',\n  method: 'POST'\n};\n\ncallback = function(response) {\n  var str = ''\n  response.on('data', function (chunk) {\n    str += chunk;\n  });\n\n  response.on('end', function () {\n    console.log(str);\n  });\n}\n\nvar req = http.request(options, callback);\nreq.write(\"hello world!\");\nreq.end();\n6.1.5. java\nimport java.io.IOException;\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\n\npublic class GetRequestJava11 {\n\n    public static void main(String[] args) throws IOException, InterruptedException {\n\n        HttpClient client = HttpClient.newHttpClient();\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(\"http://www.example.org:8080/\"))\n                .build();\n\n        HttpResponse<String> response = client.send(request,\n                HttpResponse.BodyHandlers.ofString());\n\n        System.out.println(response.body());\n    }\n}\n6.1.6. nginx\nserver {\n    listen       [::]:9901;\n    listen       0.0.0.0:9901;\n    server_name  localhost;\n\n    location / {\n        proxy_pass   http://www.example.org:8080;\n    }\n}\n\nupstream myserver {\n    server  www.example.org:8080;\n}\n\nserver {\n    listen       [::]:9902;\n    listen       0.0.0.0:9902;\n    server_name  localhost;\n\n    location / {\n        proxy_pass   http://myserver;\n    }\n}\n```\n\n原文链接： https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq\n\n# 参考文献\n\nhttps://tools.ietf.org/html/rfc3484\nhttps://tools.ietf.org/html/rfc6724\nhttps://tools.ietf.org/html/rfc6555\nhttps://tools.ietf.org/html/rfc8305","slug":"技术/实现-DNS-双栈的一些细节","published":1,"comments":1,"photos":[],"link":"","_id":"clmo9lsa00017384w87b157ep","content":"<h1><span id=\"1-概述\">1. 概述</span></h1><p>当客户端是双栈环境时，客户端在向 DNS 服务器请求地址解析时，会同时发起域名 A 记录和 AAAA 记录的解析请求，如果后台支持双栈（或者DNS自己返回了双栈的解析结果），就会拿到对应的两种解析地址结果：IPv4 和 IPv6，拿到解析结果后，由客户端选择地址发起连接。<br>为了推广 IPv6，客户端应该从解析结果中优先选择 IPv6 进行连接，但由于当前 IPv6 基础建设尚未完善，连通性问题和可靠性问题不能得到有效保证，链接超时或失败会造成用户可感知的负面体验，有这些负面体验用户可能就完全禁止 IPv6，所以还是需要使用 IPv4 协议适当的做降级和兜底。<br>针对 IPv6 的回退和降级策略，IETF 于2012年发布 <a href=\"https://datatracker.ietf.org/doc/html/rfc6555\">RFC6555</a> 和2017年发布 <a href=\"https://datatracker.ietf.org/doc/html/rfc8305\">RFC8305</a> 两版 RFC 算法来描述了关于在域名解析、地址排序和连接尝试阶段v4配合v6升级适配的详细方案，该方案称为：Happy Eyeballs。</p>\n<ul>\n<li>RFC6555: Happy Eyeballs: Success with Dual-Stack Hosts</li>\n<li>RFC8305: Happy Eyeballs Version 2: Better Connectivity Using Concurrency</li>\n</ul>\n<h2><span id=\"why-happy-eyeballs\">Why Happy Eyeballs ?</span></h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">The name <span class=\"hljs-string\">&quot;happy eyeballs&quot;</span> derives <span class=\"hljs-built_in\">from</span> <span class=\"hljs-keyword\">the</span> term <span class=\"hljs-string\">&quot;eyeball&quot;</span> <span class=\"hljs-built_in\">to</span> describe endpoints which represent human Internet <span class=\"hljs-keyword\">end</span>-users, <span class=\"hljs-keyword\">as</span> opposed <span class=\"hljs-built_in\">to</span> servers.<br></code></pre></td></tr></table></figure>\n<p>我的理解是，Happy Eyeballs 的关注点是人类本身而不是机器，人类在互联网上浏览网页，观看视频，不能因为 IPv6 和 IPv4 网络的连通性问题让他们眼球停留在加载页面，而应该让他们的眼球快乐起来。</p>\n<p>RFC6555 描述了 Happy Eyeballs 原始算法，RFC8305 在 RFC6555 的基础上，添加了如下内容：</p>\n<ul>\n<li>如何执行DNS查询以获取这些地址</li>\n<li>如何处理每个地址族的多个地址</li>\n<li>连接竞速时如何处理DNS更新</li>\n<li>如何利用历史信息</li>\n<li>如何适配使用NAT64和DNS64实现的单栈IPv6网络</li>\n</ul>\n<p>RFC8305 描述的算法仍然符合 RFC6555 的规范，只不过更加细节化，RFC8305 的中文版参考这里。</p>\n<h1><span id=\"2-happy-eyeballs-快乐眼球算法\">2. Happy Eyeballs-快乐眼球算法</span></h1><p>RFC8305 定义的 Happy Eyeballs 归纳如下：</p>\n<ol>\n<li>向DNS 服务器同时发起AAAA记录和A记录解析（AAAA 先于 A）</li>\n<li>如果v6地址先返回就直接开始握手建立连接，如果v4地址先返回，则等待 50ms 等待v6地址返回，以确保优先选择IPv6（AAAA响应跟随A响应几毫秒是很常见的）</li>\n<li>将所有已解析的目标地址排序，排序依据 ([RFC8305], Section 4) 及 ([RFC6724], Section 6)</li>\n<li>排序完成后，会依次有序的取地址发送握手请求，并启动定时任务，该任务在250ms后检查若未完成连接建立，则对第二个地址开始连接尝试</li>\n<li>只有有一个握手确认成功（建立了连接），就会取消所有其他的连接尝试</li>\n</ol>\n<p>RFC6555 中有一点不一样的是，对解析的所有目标地址选取的算法参考的是 [RFC3484] ，[RFC3484]  已经被 [RFC6724] 取代，目的地址排序规则会影响 IPv4 及 IPv6 地址的先后顺序，具体我们在下一节分析。</p>\n<p>Happy Eyeballs 要求在尝试连接之前，实现上不应该等待两个地址族都返回 answers，如果一个查询无法返回或者需要花费更长的时间返回，那么就会造成连接建立的延迟，因此，客户端应将 DNS 解析实现为异步。这一点在 curl 及 go 的实现中都没能做到，curl 会调用 getaddrinfo 方法获取所有地址解析结果后再尝试连接竞速，go 有自己实现的主机名到地址的解析函数，会根据系统及配置选择使用go原生的地址解析函数或者 getaddrinfo，但无论怎样，也是在获取所有地址解析结果后再尝试连接竞速。</p>\n<p>总体来看，Happy Eyeballs 分为目的地址排序和连接竞速两个主要阶段，我们一一来看。</p>\n<h2><span id=\"21-目的地址排序\">2.1. 目的地址排序</span></h2><p>目的地址选取依据 [RFC3484] 及 [RFC6724]，[RFC3484] 已经被 [RFC6724] 取代，但是 getaddrinfo 还是使用了 [RFC3484] 进行目的地址选取排序，go 实现的主机名到地址的解析函数使用了 [RFC6724]。<br>注：[RFC3484] 和 [RFC6724] 描述了源地址及目的地址选取算法，这里我们只关注目的地址选取。</p>\n<p>目的地址选取遵循 10 条规则，优先级 1 &gt; 2 &gt;3 &gt; 4 …，满足一条就返回。<br>目的地址中设计到一些名词我们重点关注一下：</p>\n<ul>\n<li>scope</li>\n<li>precedence</li>\n<li>label</li>\n<li>home addresses</li>\n<li>care-of address</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>RFC3484</th>\n<th>RFC6724</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Rule 1</td>\n<td>Rule 1: Avoid unusable destinations.</td>\n<td>Rule 1: Avoid unusable destinations.</td>\n</tr>\n<tr>\n<td>避免无法使用的地址</td>\n<td>If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer DB.</td>\n<td>If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 2</td>\n<td>Rule 2: Prefer matching scope.</td>\n<td>Rule 2: Prefer matching scope.</td>\n</tr>\n<tr>\n<td>匹配源地址 scope 优先</td>\n<td>If Scope(DA) &#x3D; Scope(Source(DA)) and Scope(DB) &lt;&gt; Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) &lt;&gt; Scope(Source(DA)) and Scope(DB) &#x3D; Scope(Source(DB)), then prefer DB.</td>\n<td>If Scope(DA) &#x3D; Scope(Source(DA)) and Scope(DB) &lt;&gt; Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) &lt;&gt; Scope(Source(DA)) and Scope(DB) &#x3D; Scope(Source(DB)), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 3</td>\n<td>Rule 3: Avoid deprecated addresses.</td>\n<td>Rule 3: Avoid deprecated addresses.</td>\n</tr>\n<tr>\n<td>避免已经弃用的地址</td>\n<td>If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer DA.</td>\n<td>If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer DA.</td>\n</tr>\n<tr>\n<td>Rule 4</td>\n<td>Rule 4: Prefer home addresses.</td>\n<td>Rule 4: Prefer home addresses.</td>\n</tr>\n<tr>\n<td>home addresses 优先</td>\n<td>If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.</td>\n<td>If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 5</td>\n<td>Rule 5: Prefer matching label.</td>\n<td>Rule 5: Prefer matching label. If Label(Source(DA)) &#x3D; Label(DA) and Label(Source(DB)) &lt;&gt; Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) &lt;&gt; Label(DA) and Label(Source(DB)) &#x3D; Label(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>匹配 label 优先</td>\n<td>If Label(Source(DA)) &#x3D; Label(DA) and Label(Source(DB)) &lt;&gt; Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) &lt;&gt; Label(DA) and Label(Source(DB)) &#x3D; Label(DB), then prefer DB.</td>\n<td></td>\n</tr>\n<tr>\n<td>Rule 6</td>\n<td>Rule 6: Prefer higher precedence.</td>\n<td>Rule 6: Prefer higher precedence.</td>\n</tr>\n<tr>\n<td>高优先级优先</td>\n<td>If Precedence(DA) &gt; Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) &lt; Precedence(DB), then prefer DB.</td>\n<td>If Precedence(DA) &gt; Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) &lt; Precedence(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 7</td>\n<td>Rule 7: Prefer native transport.</td>\n<td>Rule 7: Prefer native transport.</td>\n</tr>\n<tr>\n<td>原生传输协议优先</td>\n<td>If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion:  6-over-4 [15], ISATAP [16], and configured tunnels [17] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table.  An implementation MAY generalize this rule by using a concept of interface preference, and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces).</td>\n<td>If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion: The IPv6 Rapid Deployment on IPv4 Infrastructures (6rd) Protocol [RFC5969], the Intra-Site Automatic Tunnel Addressing Protocol (ISATAP) [RFC5214], and configured tunnels [RFC4213] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table. An implementation MAY generalize this rule by using a concept of interface preference and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces).</td>\n</tr>\n<tr>\n<td>Rule 8</td>\n<td>Rule 8: Prefer smaller scope.</td>\n<td>Rule 8: Prefer smaller scope.</td>\n</tr>\n<tr>\n<td>更小的 scope 优先</td>\n<td>If Scope(DA) &lt; Scope(DB), then prefer DA.  Similarly, if Scope(DA) &gt; Scope(DB), then prefer DB.</td>\n<td>If Scope(DA) &lt; Scope(DB), then prefer DA.  Similarly, if Scope(DA) &gt; Scope(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 9</td>\n<td>Rule 9: Use longest matching prefix.</td>\n<td>Rule 9: Use longest matching prefix.</td>\n</tr>\n<tr>\n<td>前缀匹配长度优先</td>\n<td>When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(DA, Source(DA)) &gt; CommonPrefixLen(DB, Source(DB)), then prefer DA.  Similarly, if CommonPrefixLen(DA, Source(DA)) &lt; CommonPrefixLen(DB, Source(DB)), then prefer DB.</td>\n<td>When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(Source(DA), DA) &gt; CommonPrefixLen(Source(DB), DB), then prefer DA.  Similarly, if CommonPrefixLen(Source(DA), DA) &lt; CommonPrefixLen(Source(DB), DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 10</td>\n<td>Rule 10: Otherwise, leave the order unchanged.</td>\n<td>Rule 10: Otherwise, leave the order unchanged.</td>\n</tr>\n<tr>\n<td>默认规则</td>\n<td>If DA preceded DB in the original list, prefer DA.  Otherwise prefer DB.</td>\n<td>If DA preceded DB in the original list, prefer DA.  Otherwise, prefer DB.</td>\n</tr>\n</tbody></table>\n<p>其中 label 和 precedence 在 默认策略表中定义，10 条规则基本没变，只是对默认策略表进行了一些更改：</p>\n<p>[RFC3484] 默认策略表</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">Prefix        Precedence Label<br>::1/128               50     0<br>::/0                  40     1<br>2002::/16             30     2<br>::/96                 20     3<br><span class=\"hljs-meta\">::ffff:0:0/96</span>         10     4<br></code></pre></td></tr></table></figure>\n\n<p>[RFC6724]  默认策略表</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">Prefix        Precedence Label<br>::1/128              <span class=\"hljs-number\"> 50 </span>    0<br>::/0                 <span class=\"hljs-number\"> 40 </span>    1<br>::ffff:0:0/96        <span class=\"hljs-number\"> 35 </span>    4<br>2002::/16            <span class=\"hljs-number\"> 30 </span>   <span class=\"hljs-number\"> 2 </span>6to4 地址<br>2001::/32             <span class=\"hljs-number\"> 5 </span>   <span class=\"hljs-number\"> 5 </span>Teredo 地址<br>fc00::/7              <span class=\"hljs-number\"> 3 </span>   13<br>::/96                 <span class=\"hljs-number\"> 1 </span>    3<br>fec0::/10             <span class=\"hljs-number\"> 1 </span>   11<br>3ffe::/16             <span class=\"hljs-number\"> 1 </span>   12<br></code></pre></td></tr></table></figure>\n<ol>\n<li>添加 Teredo [RFC4380] 地址前缀 (2001::&#x2F;32)，preference 和 label 值取自已经广泛使用的实现</li>\n<li>在原生 IPv6 地址前缀下添加 ULAs (fc00::&#x2F;7) 地址，因为它不是全球可达地址，参见 Section 10.6</li>\n<li>取消推荐 site-local addresses (fec0::&#x2F;10) ，因其已经被弃用 [RFC3879]</li>\n<li>调整原生 IPv4 地址优先 6to4 (2002::&#x2F;32) 地址</li>\n<li>取消推荐 IPv4-Compatible addresses (::&#x2F;96) 地址，因其被废弃且不再使用 [RFC4291]</li>\n<li>取消推荐  6bone testing addresses (3ffe::&#x2F;16) 地址，因其已经被淘汰而不再首选 [RFC3701]</li>\n<li>Added optional ability for an implementation to add automatic rows to the table for site-specific ULA prefixes and site-specific native 6to4 prefixes</li>\n</ol>\n<p>根据上述规则对 dns 服务器返回的地址进行初步排序，再依据 ([RFC8305], Section 4) 进行 IPv4 和 IPv6 地址交错排序，形成最终的地址排序列表：如果返回的地址包含多个 IPv6 和 IPv4 地址，([RFC8305], Section 4) 中提到了两种实现：</p>\n<ul>\n<li>第一种：v6 v6 v6 v4 v4 v4，地址族分段</li>\n<li>第二种：v6 v4 v6 v4 v6 v4，地址族交错</li>\n</ul>\n<p>地址排序之后，进行连接竞速。</p>\n<h3><span id=\"211-自定义默认策略表\">2.1.1. 自定义默认策略表</span></h3><p>策略表可以自己定义，用来控制不同地址的排序，比如 getaddrinfo 会读取 &#x2F;etc&#x2F;gai.conf 中的策略配置，如果没有特殊配置，getaddrinfo 使用默认的配置，默认将 6to4 地址排在原生 IPv4 地址前，我们可以：<br>将 precedence ::ffff:0:0&#x2F;96  10<br>改 precedence ::ffff:0:0&#x2F;96  35，使原生的 IPv4 地址优于 6to4 地址。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-comment\"># Configuration for getaddrinfo(3).</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># So far only configuration for the destination address sorting is needed.</span><br><span class=\"hljs-comment\"># RFC 3484 governs the sorting.  But the RFC also says that system</span><br><span class=\"hljs-comment\"># administrators should be able to overwrite the defaults.  This can be</span><br><span class=\"hljs-comment\"># achieved here.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># All lines have an initial identifier specifying the option followed by</span><br><span class=\"hljs-comment\"># up to two values.  Information specified in this file replaces the</span><br><span class=\"hljs-comment\"># default information.  Complete absence of data of one kind causes the</span><br><span class=\"hljs-comment\"># appropriate default information to be used.  The supported commands include:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># reload  &lt;yes|no&gt;</span><br><span class=\"hljs-comment\">#    If set to yes, each getaddrinfo(3) call will check whether this file</span><br><span class=\"hljs-comment\">#    changed and if necessary reload.  This option should not really be</span><br><span class=\"hljs-comment\">#    used.  There are possible runtime problems.  The default is no.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># label   &lt;mask&gt;   &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 label table.  See section 2.1 in</span><br><span class=\"hljs-comment\">#    RFC 3484.  The default is:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">label</span> ::<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">128</span>       <span class=\"hljs-number\">0</span><br><span class=\"hljs-attribute\">label</span> ::/<span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">label</span> <span class=\"hljs-number\">2002</span>::/<span class=\"hljs-number\">16</span>     <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">label</span> ::/<span class=\"hljs-number\">96</span>         <span class=\"hljs-number\">3</span><br><span class=\"hljs-attribute\">label</span> ::ffff:<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">96</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-attribute\">label</span> fec0::/<span class=\"hljs-number\">10</span>     <span class=\"hljs-number\">5</span><br><span class=\"hljs-attribute\">label</span> fc00::/<span class=\"hljs-number\">7</span>      <span class=\"hljs-number\">6</span><br><span class=\"hljs-attribute\">label</span> <span class=\"hljs-number\">2001</span>:<span class=\"hljs-number\">0</span>::/<span class=\"hljs-number\">32</span>   <span class=\"hljs-number\">7</span><br><span class=\"hljs-attribute\">label</span> ::ffff:<span class=\"hljs-number\">7</span>f00:<span class=\"hljs-number\">0001</span>/<span class=\"hljs-number\">128</span> <span class=\"hljs-number\">8</span><br><br><span class=\"hljs-comment\">#    This default differs from the tables given in RFC 3484 by handling</span><br><span class=\"hljs-comment\">#    (now obsolete) site-local IPv6 addresses and Unique Local Addresses.</span><br><span class=\"hljs-comment\">#    The reason for this difference is that these addresses are never</span><br><span class=\"hljs-comment\">#    NATed while IPv4 site-local addresses most probably are.  Given</span><br><span class=\"hljs-comment\">#    the precedence of IPv6 over IPv4 (see below) on machines having only</span><br><span class=\"hljs-comment\">#    site-local IPv4 and IPv6 addresses a lookup for a global address would</span><br><span class=\"hljs-comment\">#    see the IPv6 be preferred.  The result is a long delay because the</span><br><span class=\"hljs-comment\">#    site-local IPv6 addresses cannot be used while the IPv4 address is</span><br><span class=\"hljs-comment\">#    (at least for the foreseeable future) NATed.  We also treat Teredo</span><br><span class=\"hljs-comment\">#    tunnels special.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># precedence  &lt;mask&gt;   &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 precedence table.  See section 2.1</span><br><span class=\"hljs-comment\">#    and 10.3 in RFC 3484.  The default is:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">precedence</span>  ::<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">128</span>       <span class=\"hljs-number\">50</span><br><span class=\"hljs-attribute\">precedence</span>  ::/<span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">40</span><br><span class=\"hljs-attribute\">precedence</span>  <span class=\"hljs-number\">2002</span>::/<span class=\"hljs-number\">16</span>     <span class=\"hljs-number\">30</span><br><span class=\"hljs-attribute\">precedence</span> ::/<span class=\"hljs-number\">96</span>          <span class=\"hljs-number\">20</span><br><span class=\"hljs-attribute\">precedence</span> ::ffff:<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">96</span>  <span class=\"hljs-number\">35</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    For sites which prefer IPv4 connections change the last line to</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#precedence ::ffff:0:0/96  100</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># scopev4  &lt;mask&gt;  &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 scope table for IPv4 addresses.</span><br><span class=\"hljs-comment\">#    By default the scope IDs described in section 3.2 in RFC 3484 are</span><br><span class=\"hljs-comment\">#    used.  Changing these defaults should hardly ever be necessary.</span><br><span class=\"hljs-comment\">#    The defaults are equivalent to:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">169.254.0.0</span>/<span class=\"hljs-number\">112</span>  <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">127.0.0.0</span>/<span class=\"hljs-number\">104</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">96</span>       <span class=\"hljs-number\">14</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    For sites which use site-local IPv4 addresses behind NAT there is</span><br><span class=\"hljs-comment\">#    the problem that even if IPv4 addresses are preferred they do not</span><br><span class=\"hljs-comment\">#    have the same scope and are therefore not sorted first.  To change</span><br><span class=\"hljs-comment\">#    this use only these rules:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">169.254.0.0</span>/<span class=\"hljs-number\">112</span>  <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">127.0.0.0</span>/<span class=\"hljs-number\">104</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">96</span>       <span class=\"hljs-number\">14</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"22-连接竞速\">2.2. 连接竞速</span></h2><p>● 为避免无意义的网络连接，连接竞速过程不应该并行，而是依次有序的单个启动<br>● 在一定的连接尝试延时（推荐250ms）过后，再使用列表中的后续ip地址开始逐个尝试连接。<br>● 一旦首个 IP 连接握手成功后，即取消其他未完成的连接尝试。另外，DNS 客户端解析器仍应在短时间内（建议为1秒）处理来自网络的DNS回复，因为它们将填充 DNS 缓存，并可用于后续连接。<br>● 连接尝试延迟推荐为250ms，可根据相同域名的历史RTT数据采集来动态调整延时，但区间应限制在100ms-2s</p>\n<h1><span id=\"3-客户端实现\">3. 客户端实现</span></h1><p>依据 Happy Eyeballs 算法，各语言的类库都有各自的实现，并且不会完全遵守 Happy Eyeballs。</p>\n<h2><span id=\"31-go-的实现\">3.1. Go 的实现</span></h2><p>Go 实现了自己的主机名到地址的解析函数 goLookupIPCNAMEOrder，依据操作系统版本及相关配置会选择使用 goLookupIPCNAMEOrder  或是 libc 的 getaddrinfo 。默认在 Linux 系统中如果没有特殊配置 &#x2F;etc&#x2F;nsswitch.conf 和 &#x2F;etc&#x2F;resolv.conf 的话，Go 会使用 goLookupIPCNAMEOrder 发起域名解析请求(当 &#x2F;etc&#x2F;resolv.conf 文件中配置了 single-request，Go 会使用 getaddrinfo)。 goLookupIPCNAMEOrder 使用 [RFC6724] 对返回的地址进行排序。</p>\n<p>假设 <a href=\"http://www.example.com/\">www.example.com</a> 有下列</p>\n<ul>\n<li><p>2002:a40:4c07:1::faf1 （6to4）</p>\n</li>\n<li><p>2002:a40:4c07:1::faf2（6to4）</p>\n</li>\n<li><p>2002:a40:4c07:1::faf3（6to4）</p>\n</li>\n<li><p>10.64.78.34</p>\n</li>\n<li><p>10.64.78.35<br>五个解析结果。</p>\n</li>\n<li><p>当 Go 使用 goLookupIPCNAMEOrder：</p>\n</li>\n<li><p>如果 Go 使用 getaddrinfo：</p>\n</li>\n</ul>\n<p>go 在调用 goLookupIPCNAMEOrder 或者 getaddrinfo 函数之后拿到排序过的地址解析列表，然后依据这个排序结果，如果在双栈环境下，地址列表第一个地址是 IPv4 地址，那么所有的 IPv4 放到 primaries 队列中，所有的 IPv6 地址放到 fallbacks 队列中（如果地址列表第一个地址是 IPv6 地址，所有的 IPv6 放到 primaries 队列中，所有的 IPv4 地址放到 fallbacks 队列中），接着优先顺序的对 primaries 队列中的地址尝试连接，如果 300ms（可配置）后连接未建立，那么顺序的对 fallbacks 队列中的地址发起连接（如果primaries队列地址连接出错会马上对 fallbacks 队列地址发起连接，不会等 300ms），任何一个连接成功后，其余连接将被关闭。</p>\n<h1><span id=\"4-客户端测试\">4. 客户端测试</span></h1><p><strong>dns 服务器针对特殊域名，返回如下几种结果：</strong></p>\n<ol>\n<li>返回1个 IPv4 地址</li>\n<li>返回1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和1个 broken IPv6 地址</li>\n<li>返回1个 broken IPv4 地址和1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken</li>\n<li>返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken</li>\n</ol>\n<div class=\"note note-warning\">\n            <p>上面的 IPv6 地址指的是 6to4 地址，broken 指的是网络包丢失的场景，这里我们使用 iptables DROP 掉特殊的地址来模拟 broken。</p>\n          </div>\n\n<p><strong>测试环境：</strong></p>\n<ul>\n<li>内核版本：Linux 4.1.0-15.el6.ucloud.x86_64</li>\n<li>操作系统：CentOS release 6.3 (Final)</li>\n<li>glibc 版本：2.12</li>\n<li>curl 版本：curl 7.72.0 (x86_64-redhat-linux-gnu)</li>\n<li>go 版本：go1.15 linux&#x2F;amd64</li>\n<li>python 版本：Python 2.6.6</li>\n<li>nodejs 版本：v0.10.36</li>\n<li>java 版本：”11.0.8” 2020-07-14 LTS</li>\n<li>nginx 版本：nginx&#x2F;1.14.2</li>\n</ul>\n<p><strong>使用 coredns file 插件进行测试，针对上面七种场景，配置7个文件：</strong></p>\n<ul>\n<li>返回1个 IPv4 地址</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$<span class=\"hljs-keyword\">ORIGIN </span>example.<span class=\"hljs-keyword\">org.</span><br><span class=\"hljs-keyword\"></span>@\t<span class=\"hljs-number\">3600</span> IN\tSOA sns.dns.icann.<span class=\"hljs-keyword\">org. </span>noc.dns.icann.<span class=\"hljs-keyword\">org. </span>(<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> IN NS a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> IN NS <span class=\"hljs-keyword\">b.iana-servers.net.</span><br><span class=\"hljs-keyword\"></span><br>WWW     IN A     <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">64</span>.<span class=\"hljs-number\">78</span>.<span class=\"hljs-number\">34</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>返回1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$<span class=\"hljs-keyword\">ORIGIN </span>example.<span class=\"hljs-keyword\">org.</span><br><span class=\"hljs-keyword\"></span>@\t<span class=\"hljs-number\">3600</span> IN\tSOA sns.dns.icann.<span class=\"hljs-keyword\">org. </span>noc.dns.icann.<span class=\"hljs-keyword\">org. </span>(<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> IN NS a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> IN NS <span class=\"hljs-keyword\">b.iana-servers.net.</span><br><span class=\"hljs-keyword\"></span><br>WWW     IN AAAA  <span class=\"hljs-number\">2002</span>:a40:<span class=\"hljs-number\">4</span>c07:<span class=\"hljs-number\">1</span>::faf1<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和1个 broken IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf2</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 broken IPv4 地址和1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.35</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::aaa1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.33</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"41-ipv4-only\">4.1. IPv4 only</span></h2><p>执行命令禁用 IPv6:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl net.ipv6.conf.all.disable_ipv6=1<br>sysctl net.ipv6.conf.default.disable_ipv6=1<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>go</th>\n<th>curl</th>\n<th>python</th>\n<th>node.js</th>\n<th>java</th>\n<th>nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，nginx 无法启动</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s后对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 proxy_connect_timeout（默认1m） 时间后连接未建立，再使用正常 IPv4 地址发起连接，连接成功，后续连接如此循环</td>\n</tr>\n</tbody></table>\n<h2><span id=\"42-dual-stack\">4.2. Dual-stack</span></h2><table>\n<thead>\n<tr>\n<th>go</th>\n<th>curl</th>\n<th>python</th>\n<th>node.js</th>\n<th>java</th>\n<th>nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用IPv4 和 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用 IPv4 和 IPv6 地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv6 地址发起连接，200ms 后连接未建立，客户端使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv6 地址建立连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，客户端再使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv6 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv4 建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv4 地址建立连接，300ms IPv4 连接未建立，客户端再使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv4 地址发起连接，200ms 后连接未建立，客户端使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv4 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv6 建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv6 地址发起连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，对正常的 IPv6 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv6 地址发起连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 300ms 连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv4 地址发起连接</td>\n</tr>\n</tbody></table>\n<h1><span id=\"5-总结\">5. 总结</span></h1><p><strong>集群中主要存在以下集中域名解析请求：</strong></p>\n<ol>\n<li>Kubernetes IPv6 service 域名</li>\n<li>Kubernetes IPv4 service 域名</li>\n<li>特殊域名</li>\n<li>管理网服务域名</li>\n<li>科学上网域名</li>\n<li>外网域名</li>\n</ol>\n<ul>\n<li>对于第 1、2 两类域名，coredns Kubernetes  插件可以根据 service 的类别只返回对应的 IPv6 或者 IPv4 地址；</li>\n<li>对于第 3 类域名我们可以特殊配置 hosts，返回 IPv6 或 IPv4 地址；</li>\n<li>对于第 4 类域名，管理网服务可能不支持 IPv6，dns 服务器也不能直接探测管理网服务是否支持 IPv6，所以dns服务器返回 IPv4 地址和 6to4 地址，由客户端使用 Happy Eyeballs 算法进行连接竞速选择可用的服务地址，如果 IPv6 是不可达、不存在的地址或者没有listen对应的端口，那么连接竞速会快速完成，不会等待连接尝试延迟时间(go默认 300ms)；如果 IPv6 包被丢了，客户端可能会等待尝试延迟时间后再对另一个地址族发起连接，某些客户端比如 nginx 需要设置 proxy_connect_timeout，python urllib2.urlopen 需要设置timeout 时间，不然建立连接很慢；</li>\n<li>对于第 5、6 类地址由于集群现在只支持通过 IPv6 访问公网，所以直接返回 IPv6 地址；</li>\n</ul>\n<h1><span id=\"6-附录\">6. 附录</span></h1><h2><span id=\"61-客户端测试代码\">6.1. 客户端测试代码</span></h2><h3><span id=\"611-go\">6.1.1. go</span></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;bufio&quot;</span><br>\t<span class=\"hljs-string\">&quot;bytes&quot;</span><br>\t<span class=\"hljs-string\">&quot;crypto/tls&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io/ioutil&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultHttpClientTimeout = <span class=\"hljs-number\">5</span> * time.Second<br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\thttpReqTimeoutFlag = flag.Duration(<span class=\"hljs-string\">&quot;timeout&quot;</span>, defaultHttpClientTimeout, <span class=\"hljs-string\">&quot;Connection and read timeout value (for http)&quot;</span>)<br>\tnumConnFlag        = flag.Int(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;Number of connections per host&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(os.Args) &lt; <span class=\"hljs-number\">2</span> &#123;<br>\t\tusageErr(<span class=\"hljs-string\">&quot;Error: need at least 1 command parameter&quot;</span>)<br>\t&#125;<br><br>\tflag.Parse()<br><br>\t<span class=\"hljs-keyword\">var</span> client runner<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;Use Http for dr testing&quot;</span>)<br>\tclient = newHttpClient()<br><br>\t<span class=\"hljs-keyword\">if</span> res, err := client.do(<span class=\"hljs-string\">&quot;first&quot;</span>); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;Error: query failed, %v\\n&quot;</span>, err)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;Info: receive response, %s\\n&quot;</span>, res)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// Prints usage and error messages with StdErr writer.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">usageErr</span><span class=\"hljs-params\">(msgs ...<span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> &#123;<br>\tfmt.Println(msgs...)<br>\tos.Exit(<span class=\"hljs-number\">1</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> runner <span class=\"hljs-keyword\">interface</span> &#123;<br>\tdo(<span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> httpClient <span class=\"hljs-keyword\">struct</span> &#123;<br>\turl    <span class=\"hljs-type\">string</span><br>\tclient *http.Client<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newHttpClient</span><span class=\"hljs-params\">()</span></span> runner &#123;<br>\turl := strings.TrimLeft(flag.Arg(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">&quot; \\t\\r\\n&quot;</span>)<br><br>\ttimeout := httpReqTimeoutFlag<br>\ttransport := http.Transport&#123;<br>\t\tTLSClientConfig: &amp;tls.Config&#123;<br>\t\t\tInsecureSkipVerify: <span class=\"hljs-literal\">true</span>,<br>\t\t&#125;,<br>\t\t<span class=\"hljs-comment\">//DisableKeepAlives:   false,</span><br>\t\tMaxConnsPerHost:     *numConnFlag,<br>\t\tMaxIdleConns:        *numConnFlag,<br>\t\tMaxIdleConnsPerHost: *numConnFlag,<br>\t&#125;<br><br>\tclient := &amp;http.Client&#123;<br>\t\tTransport: &amp;transport,<br>\t\tTimeout:   *timeout,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;httpClient&#123;<br>\t\turl:    url,<br>\t\tclient: client,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *httpClient)</span></span> do(payload <span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, c.url, bytes.NewBufferString(time.Now().String()+<span class=\"hljs-string\">&quot;--&quot;</span>+payload))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br><br>\tresp, err := c.client.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> resp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> resp.StatusCode != http.StatusOK &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<br>\t\t\t<span class=\"hljs-string\">&quot;error get health information about Grafana, expected status 200 but got %v&quot;</span>,<br>\t\t\tresp.StatusCode)<br>\t&#125;<br><br>\tdata, err := ioutil.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(data), <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"612-getaddrinfo\">6.1.2. getaddrinfo</span></h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAddr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr * res)</span>;<br><br><span class=\"hljs-type\">int</span><br><span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> * argv[])</span> &#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> <span class=\"hljs-title\">hints</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> * <span class=\"hljs-title\">result</span>, * <span class=\"hljs-title\">rp</span>;</span><br>    <span class=\"hljs-type\">int</span> s;<br><br>    <span class=\"hljs-keyword\">if</span> (argc &lt; <span class=\"hljs-number\">2</span>) &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Usage: %s host port...\\n&quot;</span>, argv[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">memset</span>( &amp; hints, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> addrinfo));<br>    hints.ai_family = AF_UNSPEC; <span class=\"hljs-comment\">/* Allow IPv4 or IPv6 */</span><br>    hints.ai_socktype = SOCK_STREAM; <span class=\"hljs-comment\">/* Stream socket */</span><br>    hints.ai_flags = (AI_CANONNAME | AI_V4MAPPED | AI_ALL);<br>    <span class=\"hljs-comment\">//hints.ai_flags = 0;</span><br>    <span class=\"hljs-comment\">//hints.ai_protocol = 0;          /* Any protocol */</span><br><br>    s = getaddrinfo(argv[<span class=\"hljs-number\">1</span>], argv[<span class=\"hljs-number\">2</span>], &amp; hints, &amp; result);<br>    <span class=\"hljs-keyword\">if</span> (s != <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;getaddrinfo: %s\\n&quot;</span>, gai_strerror(s));<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/* getaddrinfo() returns a list of address structures.*/</span><br><br>    <span class=\"hljs-keyword\">for</span> (rp = result; rp != <span class=\"hljs-literal\">NULL</span>; rp = rp -&gt; ai_next) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Received ai_family:%d ai_socktype:%d ai_protocol:%d ai_addrlen:%d\\n&quot;</span>,<br>            rp -&gt; ai_family, rp -&gt; ai_socktype, rp -&gt; ai_protocol, rp -&gt; ai_addrlen);<br>        printAddr(rp -&gt; ai_addr);<br>    &#125;<br><br>    freeaddrinfo(result); <span class=\"hljs-comment\">/* No longer needed */</span><br><br>    <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAddr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr * res)</span> &#123;<br>    <span class=\"hljs-type\">char</span> * s = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">switch</span> (res -&gt; sa_family) &#123;<br>    <span class=\"hljs-keyword\">case</span> AF_INET: &#123;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> * <span class=\"hljs-title\">addr_in</span> =</span> (<span class=\"hljs-keyword\">struct</span> sockaddr_in * ) res;<br>        s = <span class=\"hljs-built_in\">malloc</span>(INET_ADDRSTRLEN);<br>        inet_ntop(AF_INET, &amp; (addr_in -&gt; sin_addr), s, INET_ADDRSTRLEN);<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">case</span> AF_INET6: &#123;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in6</span> * <span class=\"hljs-title\">addr_in6</span> =</span> (<span class=\"hljs-keyword\">struct</span> sockaddr_in6 * ) res;<br>        s = <span class=\"hljs-built_in\">malloc</span>(INET6_ADDRSTRLEN);<br>        inet_ntop(AF_INET6, &amp; (addr_in6 -&gt; sin6_addr), s, INET6_ADDRSTRLEN);<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;IP address: %s\\n&quot;</span>, s);<br>    <span class=\"hljs-built_in\">free</span>(s);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"613-python\">6.1.3. python</span></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#!/usr/bin/python</span><br><br><span class=\"hljs-keyword\">import</span> urllib<br><span class=\"hljs-keyword\">import</span> urllib2<br><br>url = <span class=\"hljs-string\">&#x27;http://www.example.org:8080&#x27;</span><br>values = &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span> : <span class=\"hljs-string\">&#x27;Michael&#x27;</span>&#125;<br>data = urllib.urlencode(values)<br>req = urllib2.Request(url, data)<br>response = urllib2.urlopen(req,timeout=<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-built_in\">print</span> response.read()<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.4</span>. node.js<br>var http = require(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><br>var options = &#123;<br>  host: <span class=\"hljs-string\">&#x27;www.example.org&#x27;</span>,<br>  path: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>  port: <span class=\"hljs-string\">&#x27;8080&#x27;</span>,<br>  method: <span class=\"hljs-string\">&#x27;POST&#x27;</span><br>&#125;;<br><br>callback = function(response) &#123;<br>  var <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&#x27;&#x27;</span><br>  response.on(<span class=\"hljs-string\">&#x27;data&#x27;</span>, function (chunk) &#123;<br>    <span class=\"hljs-built_in\">str</span> += chunk;<br>  &#125;);<br><br>  response.on(<span class=\"hljs-string\">&#x27;end&#x27;</span>, function () &#123;<br>    console.log(<span class=\"hljs-built_in\">str</span>);<br>  &#125;);<br>&#125;<br><br>var req = http.request(options, callback);<br>req.write(<span class=\"hljs-string\">&quot;hello world!&quot;</span>);<br>req.end();<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.5</span>. java<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URI;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpClient;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpRequest;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpResponse;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetRequestJava11</span> &#123;<br><br>    public static void main(String[] args) throws IOException, InterruptedException &#123;<br><br>        HttpClient client = HttpClient.newHttpClient();<br>        HttpRequest request = HttpRequest.newBuilder()<br>                .uri(URI.create(<span class=\"hljs-string\">&quot;http://www.example.org:8080/&quot;</span>))<br>                .build();<br><br>        HttpResponse&lt;String&gt; response = client.send(request,<br>                HttpResponse.BodyHandlers.ofString());<br><br>        System.out.println(response.body());<br>    &#125;<br>&#125;<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.6</span>. nginx<br>server &#123;<br>    listen       [::]:<span class=\"hljs-number\">9901</span>;<br>    listen       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">9901</span>;<br>    server_name  localhost;<br><br>    location / &#123;<br>        proxy_pass   http://www.example.org:<span class=\"hljs-number\">8080</span>;<br>    &#125;<br>&#125;<br><br>upstream myserver &#123;<br>    server  www.example.org:<span class=\"hljs-number\">8080</span>;<br>&#125;<br><br>server &#123;<br>    listen       [::]:<span class=\"hljs-number\">9902</span>;<br>    listen       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">9902</span>;<br>    server_name  localhost;<br><br>    location / &#123;<br>        proxy_pass   http://myserver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>原文链接： <a href=\"https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq\">https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq</a></p>\n<h1><span id=\"参考文献\">参考文献</span></h1><p><a href=\"https://tools.ietf.org/html/rfc3484\">https://tools.ietf.org/html/rfc3484</a><br><a href=\"https://tools.ietf.org/html/rfc6724\">https://tools.ietf.org/html/rfc6724</a><br><a href=\"https://tools.ietf.org/html/rfc6555\">https://tools.ietf.org/html/rfc6555</a><br><a href=\"https://tools.ietf.org/html/rfc8305\">https://tools.ietf.org/html/rfc8305</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1. 概述\"></a>1. 概述</h1><p>当客户端是双栈环境时，客户端在向 DNS 服务器请求地址解析时，会同时发起域名 A 记录和 AAAA 记录的解析请求，如果后台支持双栈（或者DNS自己返回了双栈的解析结果），就会拿到对应的两种解析地址结果：IPv4 和 IPv6，拿到解析结果后，由客户端选择地址发起连接。<br>为了推广 IPv6，客户端应该从解析结果中优先选择 IPv6 进行连接，但由于当前 IPv6 基础建设尚未完善，连通性问题和可靠性问题不能得到有效保证，链接超时或失败会造成用户可感知的负面体验，有这些负面体验用户可能就完全禁止 IPv6，所以还是需要使用 IPv4 协议适当的做降级和兜底。<br>针对 IPv6 的回退和降级策略，IETF 于2012年发布 <a href=\"https://datatracker.ietf.org/doc/html/rfc6555\">RFC6555</a> 和2017年发布 <a href=\"https://datatracker.ietf.org/doc/html/rfc8305\">RFC8305</a> 两版 RFC 算法来描述了关于在域名解析、地址排序和连接尝试阶段v4配合v6升级适配的详细方案，该方案称为：Happy Eyeballs。</p>\n<ul>\n<li>RFC6555: Happy Eyeballs: Success with Dual-Stack Hosts</li>\n<li>RFC8305: Happy Eyeballs Version 2: Better Connectivity Using Concurrency</li>\n</ul>\n<h2 id=\"Why-Happy-Eyeballs\"><a href=\"#Why-Happy-Eyeballs\" class=\"headerlink\" title=\"Why Happy Eyeballs ?\"></a>Why Happy Eyeballs ?</h2><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">The name <span class=\"hljs-string\">&quot;happy eyeballs&quot;</span> derives <span class=\"hljs-built_in\">from</span> <span class=\"hljs-keyword\">the</span> term <span class=\"hljs-string\">&quot;eyeball&quot;</span> <span class=\"hljs-built_in\">to</span> describe endpoints which represent human Internet <span class=\"hljs-keyword\">end</span>-users, <span class=\"hljs-keyword\">as</span> opposed <span class=\"hljs-built_in\">to</span> servers.<br></code></pre></td></tr></table></figure>\n<p>我的理解是，Happy Eyeballs 的关注点是人类本身而不是机器，人类在互联网上浏览网页，观看视频，不能因为 IPv6 和 IPv4 网络的连通性问题让他们眼球停留在加载页面，而应该让他们的眼球快乐起来。</p>\n<p>RFC6555 描述了 Happy Eyeballs 原始算法，RFC8305 在 RFC6555 的基础上，添加了如下内容：</p>\n<ul>\n<li>如何执行DNS查询以获取这些地址</li>\n<li>如何处理每个地址族的多个地址</li>\n<li>连接竞速时如何处理DNS更新</li>\n<li>如何利用历史信息</li>\n<li>如何适配使用NAT64和DNS64实现的单栈IPv6网络</li>\n</ul>\n<p>RFC8305 描述的算法仍然符合 RFC6555 的规范，只不过更加细节化，RFC8305 的中文版参考这里。</p>\n<h1 id=\"2-Happy-Eyeballs-快乐眼球算法\"><a href=\"#2-Happy-Eyeballs-快乐眼球算法\" class=\"headerlink\" title=\"2. Happy Eyeballs-快乐眼球算法\"></a>2. Happy Eyeballs-快乐眼球算法</h1><p>RFC8305 定义的 Happy Eyeballs 归纳如下：</p>\n<ol>\n<li>向DNS 服务器同时发起AAAA记录和A记录解析（AAAA 先于 A）</li>\n<li>如果v6地址先返回就直接开始握手建立连接，如果v4地址先返回，则等待 50ms 等待v6地址返回，以确保优先选择IPv6（AAAA响应跟随A响应几毫秒是很常见的）</li>\n<li>将所有已解析的目标地址排序，排序依据 ([RFC8305], Section 4) 及 ([RFC6724], Section 6)</li>\n<li>排序完成后，会依次有序的取地址发送握手请求，并启动定时任务，该任务在250ms后检查若未完成连接建立，则对第二个地址开始连接尝试</li>\n<li>只有有一个握手确认成功（建立了连接），就会取消所有其他的连接尝试</li>\n</ol>\n<p>RFC6555 中有一点不一样的是，对解析的所有目标地址选取的算法参考的是 [RFC3484] ，[RFC3484]  已经被 [RFC6724] 取代，目的地址排序规则会影响 IPv4 及 IPv6 地址的先后顺序，具体我们在下一节分析。</p>\n<p>Happy Eyeballs 要求在尝试连接之前，实现上不应该等待两个地址族都返回 answers，如果一个查询无法返回或者需要花费更长的时间返回，那么就会造成连接建立的延迟，因此，客户端应将 DNS 解析实现为异步。这一点在 curl 及 go 的实现中都没能做到，curl 会调用 getaddrinfo 方法获取所有地址解析结果后再尝试连接竞速，go 有自己实现的主机名到地址的解析函数，会根据系统及配置选择使用go原生的地址解析函数或者 getaddrinfo，但无论怎样，也是在获取所有地址解析结果后再尝试连接竞速。</p>\n<p>总体来看，Happy Eyeballs 分为目的地址排序和连接竞速两个主要阶段，我们一一来看。</p>\n<h2 id=\"2-1-目的地址排序\"><a href=\"#2-1-目的地址排序\" class=\"headerlink\" title=\"2.1. 目的地址排序\"></a>2.1. 目的地址排序</h2><p>目的地址选取依据 [RFC3484] 及 [RFC6724]，[RFC3484] 已经被 [RFC6724] 取代，但是 getaddrinfo 还是使用了 [RFC3484] 进行目的地址选取排序，go 实现的主机名到地址的解析函数使用了 [RFC6724]。<br>注：[RFC3484] 和 [RFC6724] 描述了源地址及目的地址选取算法，这里我们只关注目的地址选取。</p>\n<p>目的地址选取遵循 10 条规则，优先级 1 &gt; 2 &gt;3 &gt; 4 …，满足一条就返回。<br>目的地址中设计到一些名词我们重点关注一下：</p>\n<ul>\n<li>scope</li>\n<li>precedence</li>\n<li>label</li>\n<li>home addresses</li>\n<li>care-of address</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>规则</th>\n<th>RFC3484</th>\n<th>RFC6724</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Rule 1</td>\n<td>Rule 1: Avoid unusable destinations.</td>\n<td>Rule 1: Avoid unusable destinations.</td>\n</tr>\n<tr>\n<td>避免无法使用的地址</td>\n<td>If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer DB.</td>\n<td>If DB is known to be unreachable or if Source(DB) is undefined, then prefer DA. Similarly, if DA is known to be unreachable or if Source(DA) is undefined, then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 2</td>\n<td>Rule 2: Prefer matching scope.</td>\n<td>Rule 2: Prefer matching scope.</td>\n</tr>\n<tr>\n<td>匹配源地址 scope 优先</td>\n<td>If Scope(DA) &#x3D; Scope(Source(DA)) and Scope(DB) &lt;&gt; Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) &lt;&gt; Scope(Source(DA)) and Scope(DB) &#x3D; Scope(Source(DB)), then prefer DB.</td>\n<td>If Scope(DA) &#x3D; Scope(Source(DA)) and Scope(DB) &lt;&gt; Scope(Source(DB)), then prefer DA.  Similarly, if Scope(DA) &lt;&gt; Scope(Source(DA)) and Scope(DB) &#x3D; Scope(Source(DB)), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 3</td>\n<td>Rule 3: Avoid deprecated addresses.</td>\n<td>Rule 3: Avoid deprecated addresses.</td>\n</tr>\n<tr>\n<td>避免已经弃用的地址</td>\n<td>If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer DA.</td>\n<td>If Source(DA) is deprecated and Source(DB) is not, then prefer DB. Similarly, if Source(DA) is not deprecated and Source(DB) is deprecated, then prefer DA.</td>\n</tr>\n<tr>\n<td>Rule 4</td>\n<td>Rule 4: Prefer home addresses.</td>\n<td>Rule 4: Prefer home addresses.</td>\n</tr>\n<tr>\n<td>home addresses 优先</td>\n<td>If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.</td>\n<td>If Source(DA) is simultaneously a home address and care-of address and Source(DB) is not, then prefer DA.  Similarly, if Source(DB) is simultaneously a home address and care-of address and Source(DA) is not, then prefer DB. If Source(DA) is just a home address and Source(DB) is just a care-of address, then prefer DA.  Similarly, if Source(DA) is just a care-of address and Source(DB) is just a home address, then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 5</td>\n<td>Rule 5: Prefer matching label.</td>\n<td>Rule 5: Prefer matching label. If Label(Source(DA)) &#x3D; Label(DA) and Label(Source(DB)) &lt;&gt; Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) &lt;&gt; Label(DA) and Label(Source(DB)) &#x3D; Label(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>匹配 label 优先</td>\n<td>If Label(Source(DA)) &#x3D; Label(DA) and Label(Source(DB)) &lt;&gt; Label(DB), then prefer DA.  Similarly, if Label(Source(DA)) &lt;&gt; Label(DA) and Label(Source(DB)) &#x3D; Label(DB), then prefer DB.</td>\n<td></td>\n</tr>\n<tr>\n<td>Rule 6</td>\n<td>Rule 6: Prefer higher precedence.</td>\n<td>Rule 6: Prefer higher precedence.</td>\n</tr>\n<tr>\n<td>高优先级优先</td>\n<td>If Precedence(DA) &gt; Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) &lt; Precedence(DB), then prefer DB.</td>\n<td>If Precedence(DA) &gt; Precedence(DB), then prefer DA.  Similarly, if Precedence(DA) &lt; Precedence(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 7</td>\n<td>Rule 7: Prefer native transport.</td>\n<td>Rule 7: Prefer native transport.</td>\n</tr>\n<tr>\n<td>原生传输协议优先</td>\n<td>If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion:  6-over-4 [15], ISATAP [16], and configured tunnels [17] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table.  An implementation MAY generalize this rule by using a concept of interface preference, and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces).</td>\n<td>If DA is reached via an encapsulating transition mechanism (e.g., IPv6 in IPv4) and DB is not, then prefer DB.  Similarly, if DB is reached via encapsulation and DA is not, then prefer DA. Discussion: The IPv6 Rapid Deployment on IPv4 Infrastructures (6rd) Protocol [RFC5969], the Intra-Site Automatic Tunnel Addressing Protocol (ISATAP) [RFC5214], and configured tunnels [RFC4213] are examples of encapsulating transition mechanisms for which the destination address does not have a specific prefix and hence can not be assigned a lower precedence in the policy table. An implementation MAY generalize this rule by using a concept of interface preference and giving virtual interfaces (like the IPv6-in-IPv4 encapsulating interfaces) a lower preference than native interfaces (like ethernet interfaces).</td>\n</tr>\n<tr>\n<td>Rule 8</td>\n<td>Rule 8: Prefer smaller scope.</td>\n<td>Rule 8: Prefer smaller scope.</td>\n</tr>\n<tr>\n<td>更小的 scope 优先</td>\n<td>If Scope(DA) &lt; Scope(DB), then prefer DA.  Similarly, if Scope(DA) &gt; Scope(DB), then prefer DB.</td>\n<td>If Scope(DA) &lt; Scope(DB), then prefer DA.  Similarly, if Scope(DA) &gt; Scope(DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 9</td>\n<td>Rule 9: Use longest matching prefix.</td>\n<td>Rule 9: Use longest matching prefix.</td>\n</tr>\n<tr>\n<td>前缀匹配长度优先</td>\n<td>When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(DA, Source(DA)) &gt; CommonPrefixLen(DB, Source(DB)), then prefer DA.  Similarly, if CommonPrefixLen(DA, Source(DA)) &lt; CommonPrefixLen(DB, Source(DB)), then prefer DB.</td>\n<td>When DA and DB belong to the same address family (both are IPv6 or both are IPv4): If CommonPrefixLen(Source(DA), DA) &gt; CommonPrefixLen(Source(DB), DB), then prefer DA.  Similarly, if CommonPrefixLen(Source(DA), DA) &lt; CommonPrefixLen(Source(DB), DB), then prefer DB.</td>\n</tr>\n<tr>\n<td>Rule 10</td>\n<td>Rule 10: Otherwise, leave the order unchanged.</td>\n<td>Rule 10: Otherwise, leave the order unchanged.</td>\n</tr>\n<tr>\n<td>默认规则</td>\n<td>If DA preceded DB in the original list, prefer DA.  Otherwise prefer DB.</td>\n<td>If DA preceded DB in the original list, prefer DA.  Otherwise, prefer DB.</td>\n</tr>\n</tbody></table>\n<p>其中 label 和 precedence 在 默认策略表中定义，10 条规则基本没变，只是对默认策略表进行了一些更改：</p>\n<p>[RFC3484] 默认策略表</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\">Prefix        Precedence Label<br>::1/128               50     0<br>::/0                  40     1<br>2002::/16             30     2<br>::/96                 20     3<br><span class=\"hljs-meta\">::ffff:0:0/96</span>         10     4<br></code></pre></td></tr></table></figure>\n\n<p>[RFC6724]  默认策略表</p>\n<figure class=\"highlight tap\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs tap\">Prefix        Precedence Label<br>::1/128              <span class=\"hljs-number\"> 50 </span>    0<br>::/0                 <span class=\"hljs-number\"> 40 </span>    1<br>::ffff:0:0/96        <span class=\"hljs-number\"> 35 </span>    4<br>2002::/16            <span class=\"hljs-number\"> 30 </span>   <span class=\"hljs-number\"> 2 </span>6to4 地址<br>2001::/32             <span class=\"hljs-number\"> 5 </span>   <span class=\"hljs-number\"> 5 </span>Teredo 地址<br>fc00::/7              <span class=\"hljs-number\"> 3 </span>   13<br>::/96                 <span class=\"hljs-number\"> 1 </span>    3<br>fec0::/10             <span class=\"hljs-number\"> 1 </span>   11<br>3ffe::/16             <span class=\"hljs-number\"> 1 </span>   12<br></code></pre></td></tr></table></figure>\n<ol>\n<li>添加 Teredo [RFC4380] 地址前缀 (2001::&#x2F;32)，preference 和 label 值取自已经广泛使用的实现</li>\n<li>在原生 IPv6 地址前缀下添加 ULAs (fc00::&#x2F;7) 地址，因为它不是全球可达地址，参见 Section 10.6</li>\n<li>取消推荐 site-local addresses (fec0::&#x2F;10) ，因其已经被弃用 [RFC3879]</li>\n<li>调整原生 IPv4 地址优先 6to4 (2002::&#x2F;32) 地址</li>\n<li>取消推荐 IPv4-Compatible addresses (::&#x2F;96) 地址，因其被废弃且不再使用 [RFC4291]</li>\n<li>取消推荐  6bone testing addresses (3ffe::&#x2F;16) 地址，因其已经被淘汰而不再首选 [RFC3701]</li>\n<li>Added optional ability for an implementation to add automatic rows to the table for site-specific ULA prefixes and site-specific native 6to4 prefixes</li>\n</ol>\n<p>根据上述规则对 dns 服务器返回的地址进行初步排序，再依据 ([RFC8305], Section 4) 进行 IPv4 和 IPv6 地址交错排序，形成最终的地址排序列表：如果返回的地址包含多个 IPv6 和 IPv4 地址，([RFC8305], Section 4) 中提到了两种实现：</p>\n<ul>\n<li>第一种：v6 v6 v6 v4 v4 v4，地址族分段</li>\n<li>第二种：v6 v4 v6 v4 v6 v4，地址族交错</li>\n</ul>\n<p>地址排序之后，进行连接竞速。</p>\n<h3 id=\"2-1-1-自定义默认策略表\"><a href=\"#2-1-1-自定义默认策略表\" class=\"headerlink\" title=\"2.1.1. 自定义默认策略表\"></a>2.1.1. 自定义默认策略表</h3><p>策略表可以自己定义，用来控制不同地址的排序，比如 getaddrinfo 会读取 &#x2F;etc&#x2F;gai.conf 中的策略配置，如果没有特殊配置，getaddrinfo 使用默认的配置，默认将 6to4 地址排在原生 IPv4 地址前，我们可以：<br>将 precedence ::ffff:0:0&#x2F;96  10<br>改 precedence ::ffff:0:0&#x2F;96  35，使原生的 IPv4 地址优于 6to4 地址。</p>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-comment\"># Configuration for getaddrinfo(3).</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># So far only configuration for the destination address sorting is needed.</span><br><span class=\"hljs-comment\"># RFC 3484 governs the sorting.  But the RFC also says that system</span><br><span class=\"hljs-comment\"># administrators should be able to overwrite the defaults.  This can be</span><br><span class=\"hljs-comment\"># achieved here.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># All lines have an initial identifier specifying the option followed by</span><br><span class=\"hljs-comment\"># up to two values.  Information specified in this file replaces the</span><br><span class=\"hljs-comment\"># default information.  Complete absence of data of one kind causes the</span><br><span class=\"hljs-comment\"># appropriate default information to be used.  The supported commands include:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># reload  &lt;yes|no&gt;</span><br><span class=\"hljs-comment\">#    If set to yes, each getaddrinfo(3) call will check whether this file</span><br><span class=\"hljs-comment\">#    changed and if necessary reload.  This option should not really be</span><br><span class=\"hljs-comment\">#    used.  There are possible runtime problems.  The default is no.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># label   &lt;mask&gt;   &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 label table.  See section 2.1 in</span><br><span class=\"hljs-comment\">#    RFC 3484.  The default is:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">label</span> ::<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">128</span>       <span class=\"hljs-number\">0</span><br><span class=\"hljs-attribute\">label</span> ::/<span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">1</span><br><span class=\"hljs-attribute\">label</span> <span class=\"hljs-number\">2002</span>::/<span class=\"hljs-number\">16</span>     <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">label</span> ::/<span class=\"hljs-number\">96</span>         <span class=\"hljs-number\">3</span><br><span class=\"hljs-attribute\">label</span> ::ffff:<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">96</span> <span class=\"hljs-number\">4</span><br><span class=\"hljs-attribute\">label</span> fec0::/<span class=\"hljs-number\">10</span>     <span class=\"hljs-number\">5</span><br><span class=\"hljs-attribute\">label</span> fc00::/<span class=\"hljs-number\">7</span>      <span class=\"hljs-number\">6</span><br><span class=\"hljs-attribute\">label</span> <span class=\"hljs-number\">2001</span>:<span class=\"hljs-number\">0</span>::/<span class=\"hljs-number\">32</span>   <span class=\"hljs-number\">7</span><br><span class=\"hljs-attribute\">label</span> ::ffff:<span class=\"hljs-number\">7</span>f00:<span class=\"hljs-number\">0001</span>/<span class=\"hljs-number\">128</span> <span class=\"hljs-number\">8</span><br><br><span class=\"hljs-comment\">#    This default differs from the tables given in RFC 3484 by handling</span><br><span class=\"hljs-comment\">#    (now obsolete) site-local IPv6 addresses and Unique Local Addresses.</span><br><span class=\"hljs-comment\">#    The reason for this difference is that these addresses are never</span><br><span class=\"hljs-comment\">#    NATed while IPv4 site-local addresses most probably are.  Given</span><br><span class=\"hljs-comment\">#    the precedence of IPv6 over IPv4 (see below) on machines having only</span><br><span class=\"hljs-comment\">#    site-local IPv4 and IPv6 addresses a lookup for a global address would</span><br><span class=\"hljs-comment\">#    see the IPv6 be preferred.  The result is a long delay because the</span><br><span class=\"hljs-comment\">#    site-local IPv6 addresses cannot be used while the IPv4 address is</span><br><span class=\"hljs-comment\">#    (at least for the foreseeable future) NATed.  We also treat Teredo</span><br><span class=\"hljs-comment\">#    tunnels special.</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># precedence  &lt;mask&gt;   &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 precedence table.  See section 2.1</span><br><span class=\"hljs-comment\">#    and 10.3 in RFC 3484.  The default is:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">precedence</span>  ::<span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">128</span>       <span class=\"hljs-number\">50</span><br><span class=\"hljs-attribute\">precedence</span>  ::/<span class=\"hljs-number\">0</span>          <span class=\"hljs-number\">40</span><br><span class=\"hljs-attribute\">precedence</span>  <span class=\"hljs-number\">2002</span>::/<span class=\"hljs-number\">16</span>     <span class=\"hljs-number\">30</span><br><span class=\"hljs-attribute\">precedence</span> ::/<span class=\"hljs-number\">96</span>          <span class=\"hljs-number\">20</span><br><span class=\"hljs-attribute\">precedence</span> ::ffff:<span class=\"hljs-number\">0</span>:<span class=\"hljs-number\">0</span>/<span class=\"hljs-number\">96</span>  <span class=\"hljs-number\">35</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    For sites which prefer IPv4 connections change the last line to</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#precedence ::ffff:0:0/96  100</span><br><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\"># scopev4  &lt;mask&gt;  &lt;value&gt;</span><br><span class=\"hljs-comment\">#    Add another rule to the RFC 3484 scope table for IPv4 addresses.</span><br><span class=\"hljs-comment\">#    By default the scope IDs described in section 3.2 in RFC 3484 are</span><br><span class=\"hljs-comment\">#    used.  Changing these defaults should hardly ever be necessary.</span><br><span class=\"hljs-comment\">#    The defaults are equivalent to:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">169.254.0.0</span>/<span class=\"hljs-number\">112</span>  <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">127.0.0.0</span>/<span class=\"hljs-number\">104</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">96</span>       <span class=\"hljs-number\">14</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-comment\">#    For sites which use site-local IPv4 addresses behind NAT there is</span><br><span class=\"hljs-comment\">#    the problem that even if IPv4 addresses are preferred they do not</span><br><span class=\"hljs-comment\">#    have the same scope and are therefore not sorted first.  To change</span><br><span class=\"hljs-comment\">#    this use only these rules:</span><br><span class=\"hljs-comment\">#</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">169.254.0.0</span>/<span class=\"hljs-number\">112</span>  <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">127.0.0.0</span>/<span class=\"hljs-number\">104</span>    <span class=\"hljs-number\">2</span><br><span class=\"hljs-attribute\">scopev4</span> ::ffff:<span class=\"hljs-number\">0.0.0.0</span>/<span class=\"hljs-number\">96</span>       <span class=\"hljs-number\">14</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-2-连接竞速\"><a href=\"#2-2-连接竞速\" class=\"headerlink\" title=\"2.2. 连接竞速\"></a>2.2. 连接竞速</h2><p>● 为避免无意义的网络连接，连接竞速过程不应该并行，而是依次有序的单个启动<br>● 在一定的连接尝试延时（推荐250ms）过后，再使用列表中的后续ip地址开始逐个尝试连接。<br>● 一旦首个 IP 连接握手成功后，即取消其他未完成的连接尝试。另外，DNS 客户端解析器仍应在短时间内（建议为1秒）处理来自网络的DNS回复，因为它们将填充 DNS 缓存，并可用于后续连接。<br>● 连接尝试延迟推荐为250ms，可根据相同域名的历史RTT数据采集来动态调整延时，但区间应限制在100ms-2s</p>\n<h1 id=\"3-客户端实现\"><a href=\"#3-客户端实现\" class=\"headerlink\" title=\"3. 客户端实现\"></a>3. 客户端实现</h1><p>依据 Happy Eyeballs 算法，各语言的类库都有各自的实现，并且不会完全遵守 Happy Eyeballs。</p>\n<h2 id=\"3-1-Go-的实现\"><a href=\"#3-1-Go-的实现\" class=\"headerlink\" title=\"3.1. Go 的实现\"></a>3.1. Go 的实现</h2><p>Go 实现了自己的主机名到地址的解析函数 goLookupIPCNAMEOrder，依据操作系统版本及相关配置会选择使用 goLookupIPCNAMEOrder  或是 libc 的 getaddrinfo 。默认在 Linux 系统中如果没有特殊配置 &#x2F;etc&#x2F;nsswitch.conf 和 &#x2F;etc&#x2F;resolv.conf 的话，Go 会使用 goLookupIPCNAMEOrder 发起域名解析请求(当 &#x2F;etc&#x2F;resolv.conf 文件中配置了 single-request，Go 会使用 getaddrinfo)。 goLookupIPCNAMEOrder 使用 [RFC6724] 对返回的地址进行排序。</p>\n<p>假设 <a href=\"http://www.example.com/\">www.example.com</a> 有下列</p>\n<ul>\n<li><p>2002:a40:4c07:1::faf1 （6to4）</p>\n</li>\n<li><p>2002:a40:4c07:1::faf2（6to4）</p>\n</li>\n<li><p>2002:a40:4c07:1::faf3（6to4）</p>\n</li>\n<li><p>10.64.78.34</p>\n</li>\n<li><p>10.64.78.35<br>五个解析结果。</p>\n</li>\n<li><p>当 Go 使用 goLookupIPCNAMEOrder：</p>\n</li>\n<li><p>如果 Go 使用 getaddrinfo：</p>\n</li>\n</ul>\n<p>go 在调用 goLookupIPCNAMEOrder 或者 getaddrinfo 函数之后拿到排序过的地址解析列表，然后依据这个排序结果，如果在双栈环境下，地址列表第一个地址是 IPv4 地址，那么所有的 IPv4 放到 primaries 队列中，所有的 IPv6 地址放到 fallbacks 队列中（如果地址列表第一个地址是 IPv6 地址，所有的 IPv6 放到 primaries 队列中，所有的 IPv4 地址放到 fallbacks 队列中），接着优先顺序的对 primaries 队列中的地址尝试连接，如果 300ms（可配置）后连接未建立，那么顺序的对 fallbacks 队列中的地址发起连接（如果primaries队列地址连接出错会马上对 fallbacks 队列地址发起连接，不会等 300ms），任何一个连接成功后，其余连接将被关闭。</p>\n<h1 id=\"4-客户端测试\"><a href=\"#4-客户端测试\" class=\"headerlink\" title=\"4. 客户端测试\"></a>4. 客户端测试</h1><p><strong>dns 服务器针对特殊域名，返回如下几种结果：</strong></p>\n<ol>\n<li>返回1个 IPv4 地址</li>\n<li>返回1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和1个 broken IPv6 地址</li>\n<li>返回1个 broken IPv4 地址和1个 IPv6 地址</li>\n<li>返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken</li>\n<li>返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken</li>\n</ol>\n<div class=\"note note-warning\">\n            <p>上面的 IPv6 地址指的是 6to4 地址，broken 指的是网络包丢失的场景，这里我们使用 iptables DROP 掉特殊的地址来模拟 broken。</p>\n          </div>\n\n<p><strong>测试环境：</strong></p>\n<ul>\n<li>内核版本：Linux 4.1.0-15.el6.ucloud.x86_64</li>\n<li>操作系统：CentOS release 6.3 (Final)</li>\n<li>glibc 版本：2.12</li>\n<li>curl 版本：curl 7.72.0 (x86_64-redhat-linux-gnu)</li>\n<li>go 版本：go1.15 linux&#x2F;amd64</li>\n<li>python 版本：Python 2.6.6</li>\n<li>nodejs 版本：v0.10.36</li>\n<li>java 版本：”11.0.8” 2020-07-14 LTS</li>\n<li>nginx 版本：nginx&#x2F;1.14.2</li>\n</ul>\n<p><strong>使用 coredns file 插件进行测试，针对上面七种场景，配置7个文件：</strong></p>\n<ul>\n<li>返回1个 IPv4 地址</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$<span class=\"hljs-keyword\">ORIGIN </span>example.<span class=\"hljs-keyword\">org.</span><br><span class=\"hljs-keyword\"></span>@\t<span class=\"hljs-number\">3600</span> IN\tSOA sns.dns.icann.<span class=\"hljs-keyword\">org. </span>noc.dns.icann.<span class=\"hljs-keyword\">org. </span>(<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> IN NS a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> IN NS <span class=\"hljs-keyword\">b.iana-servers.net.</span><br><span class=\"hljs-keyword\"></span><br>WWW     IN A     <span class=\"hljs-number\">10</span>.<span class=\"hljs-number\">64</span>.<span class=\"hljs-number\">78</span>.<span class=\"hljs-number\">34</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>返回1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mipsasm\">$<span class=\"hljs-keyword\">ORIGIN </span>example.<span class=\"hljs-keyword\">org.</span><br><span class=\"hljs-keyword\"></span>@\t<span class=\"hljs-number\">3600</span> IN\tSOA sns.dns.icann.<span class=\"hljs-keyword\">org. </span>noc.dns.icann.<span class=\"hljs-keyword\">org. </span>(<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> IN NS a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> IN NS <span class=\"hljs-keyword\">b.iana-servers.net.</span><br><span class=\"hljs-keyword\"></span><br>WWW     IN AAAA  <span class=\"hljs-number\">2002</span>:a40:<span class=\"hljs-number\">4</span>c07:<span class=\"hljs-number\">1</span>::faf1<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和1个 broken IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf2</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 broken IPv4 地址和1个 IPv6 地址</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\">@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.35</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回1个 IPv4 地址和2个 IPv6 地址，其中一个 IPv6 地址 broken</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::aaa1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>返回2个 IPv4 地址和1个 IPv6 地址，其中一个 IPv4 地址 broken</li>\n</ul>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dns\"><span class=\"hljs-meta\">$ORIGIN</span> example.org.<br>@\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span>\t<span class=\"hljs-keyword\">SOA</span> sns.dns.icann.org. noc.dns.icann.org. (<br>\t\t\t\t<span class=\"hljs-number\">2017042745</span> <span class=\"hljs-comment\">; serial</span><br>\t\t\t\t<span class=\"hljs-number\">7200</span>       <span class=\"hljs-comment\">; refresh (2 hours)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; retry (1 hour)</span><br>\t\t\t\t<span class=\"hljs-number\">1209600</span>    <span class=\"hljs-comment\">; expire (2 weeks)</span><br>\t\t\t\t<span class=\"hljs-number\">3600</span>       <span class=\"hljs-comment\">; minimum (1 hour)</span><br>\t\t\t\t)<br><br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> a.iana-servers.net.<br>\t<span class=\"hljs-number\">3600</span> <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">NS</span> b.iana-servers.net.<br><br>WWW     <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">AAAA</span>  <span class=\"hljs-number\">2002:a40:4c07:1::faf1</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.33</span><br>        <span class=\"hljs-keyword\">IN</span> <span class=\"hljs-keyword\">A</span>     <span class=\"hljs-number\">10.64.78.34</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-1-IPv4-only\"><a href=\"#4-1-IPv4-only\" class=\"headerlink\" title=\"4.1. IPv4 only\"></a>4.1. IPv4 only</h2><p>执行命令禁用 IPv6:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl net.ipv6.conf.all.disable_ipv6=1<br>sysctl net.ipv6.conf.default.disable_ipv6=1<br></code></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>go</th>\n<th>curl</th>\n<th>python</th>\n<th>node.js</th>\n<th>java</th>\n<th>nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务 返回 NOERROR，nginx 无法启动</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4和1个 broken IPv6 地址，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 broken IPv4 地址，客户端无法完成连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端只发起 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待client 超时后（设置为5s）连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s后对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端只发起 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 proxy_connect_timeout（默认1m） 时间后连接未建立，再使用正常 IPv4 地址发起连接，连接成功，后续连接如此循环</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-2-Dual-stack\"><a href=\"#4-2-Dual-stack\" class=\"headerlink\" title=\"4.2. Dual-stack\"></a>4.2. Dual-stack</h2><table>\n<thead>\n<tr>\n<th>go</th>\n<th>curl</th>\n<th>python</th>\n<th>node.js</th>\n<th>java</th>\n<th>nginx</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 地址，客户端直接使用该地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用IPv4 和 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6和1个 IPv4 地址，客户端随机使用 IPv4 和 IPv6 地址建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv6 地址发起连接，200ms 后连接未建立，客户端使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv6 地址建立连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，客户端再使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv6 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv4 建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv4 地址建立连接，300ms IPv4 连接未建立，客户端再使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果使用 broken 的 IPv4 地址发起连接，200ms 后连接未建立，客户端使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv6 和1个 broken IPv4 地址，客户端只使用 IPv4 地址建立连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，DNS服务器返回1个 IPv4 和1个 broken IPv6 地址，客户端随机使用 IPv4 和 IPv6 地址，如果使用了 broken 的 IPv4 地址，等待 proxy_connect_timeout（默认1m） 时间后连接未建立再使用 IPv6 建立连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv6 地址发起连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，根据传递给 urllib2.urlopen 的 timeout 时间(设置为1s)，1s IPv6 连接未建立，对正常的 IPv6 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv4 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv6 地址在排在正常的 IPv6 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv6 地址发起连接</td>\n</tr>\n<tr>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先以顺序的形式对所有 IPv4 地址发起连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待 300ms 连接未建立，对正常的 IPv4 地址发起连接，连接成功</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，200ms 后连接未建立，客户端直接使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端首先使用 IPv6 地址建立连接</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端只使用 broken 地址发起连接，连接失败</td>\n<td>客户端同时发起 AAAA 和 A 记录解析请求，客户端随机使用IPv4 和 IPv6 地址建立连接，如果 broken 的 IPv4 地址在排在正常的 IPv4 地址前，客户端首先使用 broken 地址发起连接，等待proxy_connect_timeout（默认1m） 连接未建立，再使用正常 IPv4 地址发起连接</td>\n</tr>\n</tbody></table>\n<h1 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h1><p><strong>集群中主要存在以下集中域名解析请求：</strong></p>\n<ol>\n<li>Kubernetes IPv6 service 域名</li>\n<li>Kubernetes IPv4 service 域名</li>\n<li>特殊域名</li>\n<li>管理网服务域名</li>\n<li>科学上网域名</li>\n<li>外网域名</li>\n</ol>\n<ul>\n<li>对于第 1、2 两类域名，coredns Kubernetes  插件可以根据 service 的类别只返回对应的 IPv6 或者 IPv4 地址；</li>\n<li>对于第 3 类域名我们可以特殊配置 hosts，返回 IPv6 或 IPv4 地址；</li>\n<li>对于第 4 类域名，管理网服务可能不支持 IPv6，dns 服务器也不能直接探测管理网服务是否支持 IPv6，所以dns服务器返回 IPv4 地址和 6to4 地址，由客户端使用 Happy Eyeballs 算法进行连接竞速选择可用的服务地址，如果 IPv6 是不可达、不存在的地址或者没有listen对应的端口，那么连接竞速会快速完成，不会等待连接尝试延迟时间(go默认 300ms)；如果 IPv6 包被丢了，客户端可能会等待尝试延迟时间后再对另一个地址族发起连接，某些客户端比如 nginx 需要设置 proxy_connect_timeout，python urllib2.urlopen 需要设置timeout 时间，不然建立连接很慢；</li>\n<li>对于第 5、6 类地址由于集群现在只支持通过 IPv6 访问公网，所以直接返回 IPv6 地址；</li>\n</ul>\n<h1 id=\"6-附录\"><a href=\"#6-附录\" class=\"headerlink\" title=\"6. 附录\"></a>6. 附录</h1><h2 id=\"6-1-客户端测试代码\"><a href=\"#6-1-客户端测试代码\" class=\"headerlink\" title=\"6.1. 客户端测试代码\"></a>6.1. 客户端测试代码</h2><h3 id=\"6-1-1-go\"><a href=\"#6-1-1-go\" class=\"headerlink\" title=\"6.1.1. go\"></a>6.1.1. go</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;bufio&quot;</span><br>\t<span class=\"hljs-string\">&quot;bytes&quot;</span><br>\t<span class=\"hljs-string\">&quot;crypto/tls&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io/ioutil&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br>)<br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultHttpClientTimeout = <span class=\"hljs-number\">5</span> * time.Second<br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\thttpReqTimeoutFlag = flag.Duration(<span class=\"hljs-string\">&quot;timeout&quot;</span>, defaultHttpClientTimeout, <span class=\"hljs-string\">&quot;Connection and read timeout value (for http)&quot;</span>)<br>\tnumConnFlag        = flag.Int(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;Number of connections per host&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-keyword\">if</span> <span class=\"hljs-built_in\">len</span>(os.Args) &lt; <span class=\"hljs-number\">2</span> &#123;<br>\t\tusageErr(<span class=\"hljs-string\">&quot;Error: need at least 1 command parameter&quot;</span>)<br>\t&#125;<br><br>\tflag.Parse()<br><br>\t<span class=\"hljs-keyword\">var</span> client runner<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;Use Http for dr testing&quot;</span>)<br>\tclient = newHttpClient()<br><br>\t<span class=\"hljs-keyword\">if</span> res, err := client.do(<span class=\"hljs-string\">&quot;first&quot;</span>); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;Error: query failed, %v\\n&quot;</span>, err)<br>\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;Info: receive response, %s\\n&quot;</span>, res)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-comment\">// Prints usage and error messages with StdErr writer.</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">usageErr</span><span class=\"hljs-params\">(msgs ...<span class=\"hljs-keyword\">interface</span>&#123;&#125;)</span></span> &#123;<br>\tfmt.Println(msgs...)<br>\tos.Exit(<span class=\"hljs-number\">1</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> runner <span class=\"hljs-keyword\">interface</span> &#123;<br>\tdo(<span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>)<br>&#125;<br><br><span class=\"hljs-keyword\">type</span> httpClient <span class=\"hljs-keyword\">struct</span> &#123;<br>\turl    <span class=\"hljs-type\">string</span><br>\tclient *http.Client<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">newHttpClient</span><span class=\"hljs-params\">()</span></span> runner &#123;<br>\turl := strings.TrimLeft(flag.Arg(<span class=\"hljs-number\">0</span>), <span class=\"hljs-string\">&quot; \\t\\r\\n&quot;</span>)<br><br>\ttimeout := httpReqTimeoutFlag<br>\ttransport := http.Transport&#123;<br>\t\tTLSClientConfig: &amp;tls.Config&#123;<br>\t\t\tInsecureSkipVerify: <span class=\"hljs-literal\">true</span>,<br>\t\t&#125;,<br>\t\t<span class=\"hljs-comment\">//DisableKeepAlives:   false,</span><br>\t\tMaxConnsPerHost:     *numConnFlag,<br>\t\tMaxIdleConns:        *numConnFlag,<br>\t\tMaxIdleConnsPerHost: *numConnFlag,<br>\t&#125;<br><br>\tclient := &amp;http.Client&#123;<br>\t\tTransport: &amp;transport,<br>\t\tTimeout:   *timeout,<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;httpClient&#123;<br>\t\turl:    url,<br>\t\tclient: client,<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *httpClient)</span></span> do(payload <span class=\"hljs-type\">string</span>) (<span class=\"hljs-type\">string</span>, <span class=\"hljs-type\">error</span>) &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, c.url, bytes.NewBufferString(time.Now().String()+<span class=\"hljs-string\">&quot;--&quot;</span>+payload))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br><br>\tresp, err := c.client.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> resp != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> resp.StatusCode != http.StatusOK &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, fmt.Errorf(<br>\t\t\t<span class=\"hljs-string\">&quot;error get health information about Grafana, expected status 200 but got %v&quot;</span>,<br>\t\t\tresp.StatusCode)<br>\t&#125;<br><br>\tdata, err := ioutil.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;&quot;</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(data), <span class=\"hljs-literal\">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-2-getaddrinfo\"><a href=\"#6-1-2-getaddrinfo\" class=\"headerlink\" title=\"6.1.2. getaddrinfo\"></a>6.1.2. getaddrinfo</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs c\"><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/types.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;sys/socket.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;netdb.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdio.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;stdlib.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;unistd.h&gt;</span></span><br><span class=\"hljs-meta\">#<span class=\"hljs-keyword\">include</span> <span class=\"hljs-string\">&lt;string.h&gt;</span></span><br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAddr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr * res)</span>;<br><br><span class=\"hljs-type\">int</span><br><span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> argc, <span class=\"hljs-type\">char</span> * argv[])</span> &#123;<br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> <span class=\"hljs-title\">hints</span>;</span><br>    <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">addrinfo</span> * <span class=\"hljs-title\">result</span>, * <span class=\"hljs-title\">rp</span>;</span><br>    <span class=\"hljs-type\">int</span> s;<br><br>    <span class=\"hljs-keyword\">if</span> (argc &lt; <span class=\"hljs-number\">2</span>) &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;Usage: %s host port...\\n&quot;</span>, argv[<span class=\"hljs-number\">0</span>]);<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br>    <br>    <span class=\"hljs-built_in\">memset</span>( &amp; hints, <span class=\"hljs-number\">0</span>, <span class=\"hljs-keyword\">sizeof</span>(<span class=\"hljs-keyword\">struct</span> addrinfo));<br>    hints.ai_family = AF_UNSPEC; <span class=\"hljs-comment\">/* Allow IPv4 or IPv6 */</span><br>    hints.ai_socktype = SOCK_STREAM; <span class=\"hljs-comment\">/* Stream socket */</span><br>    hints.ai_flags = (AI_CANONNAME | AI_V4MAPPED | AI_ALL);<br>    <span class=\"hljs-comment\">//hints.ai_flags = 0;</span><br>    <span class=\"hljs-comment\">//hints.ai_protocol = 0;          /* Any protocol */</span><br><br>    s = getaddrinfo(argv[<span class=\"hljs-number\">1</span>], argv[<span class=\"hljs-number\">2</span>], &amp; hints, &amp; result);<br>    <span class=\"hljs-keyword\">if</span> (s != <span class=\"hljs-number\">0</span>) &#123;<br>        <span class=\"hljs-built_in\">fprintf</span>(<span class=\"hljs-built_in\">stderr</span>, <span class=\"hljs-string\">&quot;getaddrinfo: %s\\n&quot;</span>, gai_strerror(s));<br>        <span class=\"hljs-built_in\">exit</span>(EXIT_FAILURE);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/* getaddrinfo() returns a list of address structures.*/</span><br><br>    <span class=\"hljs-keyword\">for</span> (rp = result; rp != <span class=\"hljs-literal\">NULL</span>; rp = rp -&gt; ai_next) &#123;<br>        <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;Received ai_family:%d ai_socktype:%d ai_protocol:%d ai_addrlen:%d\\n&quot;</span>,<br>            rp -&gt; ai_family, rp -&gt; ai_socktype, rp -&gt; ai_protocol, rp -&gt; ai_addrlen);<br>        printAddr(rp -&gt; ai_addr);<br>    &#125;<br><br>    freeaddrinfo(result); <span class=\"hljs-comment\">/* No longer needed */</span><br><br>    <span class=\"hljs-built_in\">exit</span>(EXIT_SUCCESS);<br>&#125;<br><br><span class=\"hljs-type\">void</span> <span class=\"hljs-title function_\">printAddr</span><span class=\"hljs-params\">(<span class=\"hljs-type\">const</span> <span class=\"hljs-keyword\">struct</span> sockaddr * res)</span> &#123;<br>    <span class=\"hljs-type\">char</span> * s = <span class=\"hljs-literal\">NULL</span>;<br>    <span class=\"hljs-keyword\">switch</span> (res -&gt; sa_family) &#123;<br>    <span class=\"hljs-keyword\">case</span> AF_INET: &#123;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in</span> * <span class=\"hljs-title\">addr_in</span> =</span> (<span class=\"hljs-keyword\">struct</span> sockaddr_in * ) res;<br>        s = <span class=\"hljs-built_in\">malloc</span>(INET_ADDRSTRLEN);<br>        inet_ntop(AF_INET, &amp; (addr_in -&gt; sin_addr), s, INET_ADDRSTRLEN);<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">case</span> AF_INET6: &#123;<br>        <span class=\"hljs-class\"><span class=\"hljs-keyword\">struct</span> <span class=\"hljs-title\">sockaddr_in6</span> * <span class=\"hljs-title\">addr_in6</span> =</span> (<span class=\"hljs-keyword\">struct</span> sockaddr_in6 * ) res;<br>        s = <span class=\"hljs-built_in\">malloc</span>(INET6_ADDRSTRLEN);<br>        inet_ntop(AF_INET6, &amp; (addr_in6 -&gt; sin6_addr), s, INET6_ADDRSTRLEN);<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-keyword\">default</span>:<br>        <span class=\"hljs-keyword\">break</span>;<br>    &#125;<br>    <span class=\"hljs-built_in\">printf</span>(<span class=\"hljs-string\">&quot;IP address: %s\\n&quot;</span>, s);<br>    <span class=\"hljs-built_in\">free</span>(s);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-3-python\"><a href=\"#6-1-3-python\" class=\"headerlink\" title=\"6.1.3. python\"></a>6.1.3. python</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">#!/usr/bin/python</span><br><br><span class=\"hljs-keyword\">import</span> urllib<br><span class=\"hljs-keyword\">import</span> urllib2<br><br>url = <span class=\"hljs-string\">&#x27;http://www.example.org:8080&#x27;</span><br>values = &#123;<span class=\"hljs-string\">&#x27;name&#x27;</span> : <span class=\"hljs-string\">&#x27;Michael&#x27;</span>&#125;<br>data = urllib.urlencode(values)<br>req = urllib2.Request(url, data)<br>response = urllib2.urlopen(req,timeout=<span class=\"hljs-number\">1</span>)<br><span class=\"hljs-built_in\">print</span> response.read()<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.4</span>. node.js<br>var http = require(<span class=\"hljs-string\">&#x27;http&#x27;</span>);<br><br>var options = &#123;<br>  host: <span class=\"hljs-string\">&#x27;www.example.org&#x27;</span>,<br>  path: <span class=\"hljs-string\">&#x27;/&#x27;</span>,<br>  port: <span class=\"hljs-string\">&#x27;8080&#x27;</span>,<br>  method: <span class=\"hljs-string\">&#x27;POST&#x27;</span><br>&#125;;<br><br>callback = function(response) &#123;<br>  var <span class=\"hljs-built_in\">str</span> = <span class=\"hljs-string\">&#x27;&#x27;</span><br>  response.on(<span class=\"hljs-string\">&#x27;data&#x27;</span>, function (chunk) &#123;<br>    <span class=\"hljs-built_in\">str</span> += chunk;<br>  &#125;);<br><br>  response.on(<span class=\"hljs-string\">&#x27;end&#x27;</span>, function () &#123;<br>    console.log(<span class=\"hljs-built_in\">str</span>);<br>  &#125;);<br>&#125;<br><br>var req = http.request(options, callback);<br>req.write(<span class=\"hljs-string\">&quot;hello world!&quot;</span>);<br>req.end();<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.5</span>. java<br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.net.URI;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpClient;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpRequest;<br><span class=\"hljs-keyword\">import</span> java.net.http.HttpResponse;<br><br>public <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetRequestJava11</span> &#123;<br><br>    public static void main(String[] args) throws IOException, InterruptedException &#123;<br><br>        HttpClient client = HttpClient.newHttpClient();<br>        HttpRequest request = HttpRequest.newBuilder()<br>                .uri(URI.create(<span class=\"hljs-string\">&quot;http://www.example.org:8080/&quot;</span>))<br>                .build();<br><br>        HttpResponse&lt;String&gt; response = client.send(request,<br>                HttpResponse.BodyHandlers.ofString());<br><br>        System.out.println(response.body());<br>    &#125;<br>&#125;<br><span class=\"hljs-number\">6.1</span><span class=\"hljs-number\">.6</span>. nginx<br>server &#123;<br>    listen       [::]:<span class=\"hljs-number\">9901</span>;<br>    listen       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">9901</span>;<br>    server_name  localhost;<br><br>    location / &#123;<br>        proxy_pass   http://www.example.org:<span class=\"hljs-number\">8080</span>;<br>    &#125;<br>&#125;<br><br>upstream myserver &#123;<br>    server  www.example.org:<span class=\"hljs-number\">8080</span>;<br>&#125;<br><br>server &#123;<br>    listen       [::]:<span class=\"hljs-number\">9902</span>;<br>    listen       <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<span class=\"hljs-number\">9902</span>;<br>    server_name  localhost;<br><br>    location / &#123;<br>        proxy_pass   http://myserver;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>原文链接： <a href=\"https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq\">https://www.yuque.com/dogbrother-5valv/tzhl7q/rpuusg#tImdq</a></p>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://tools.ietf.org/html/rfc3484\">https://tools.ietf.org/html/rfc3484</a><br><a href=\"https://tools.ietf.org/html/rfc6724\">https://tools.ietf.org/html/rfc6724</a><br><a href=\"https://tools.ietf.org/html/rfc6555\">https://tools.ietf.org/html/rfc6555</a><br><a href=\"https://tools.ietf.org/html/rfc8305\">https://tools.ietf.org/html/rfc8305</a></p>\n"},{"layout":"golang","title":"golang 看这一篇就够了","date":"2023-07-29T05:20:35.000Z","_content":"\n{% note primary %}\n\n日积月累便封神\n\n{% endnote %}\n\n<!-- more -->\n \n# 常用\n\n# 1. time 包\n\n{% note primary %}\n\n时间格式、超时处理、定时器。\n\n{% endnote %}\n\n<!--more-->\n\n### 1.1 时间格式\n\n```go\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tfmt.Println(time.Now().Local().Format(\"2006-01-02 15:04:05\"))\n```\n\n### 1.2 超时处理\n\n#### 1.2.1. 使用select\n  \n```go\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(time.Second * 2)\n        c1 <- \"result 1\"\n    }()\n\n    select {\n    case res := <-c1:\n        fmt.Println(res)\n    case <-time.After(time.Second * 1):\n        fmt.Println(\"timeout 1\")\n    }\n```\n\n####  1.2.2. 使用 time.Since\n  \n```go\n\tstartTime := time.Now()\n\ttimeout := 5 * time.Second\n\n    time.Sleep(10 * time.Second)\n\n    if time.Since(startTime) > timeout {\n        return fmt.Errorf(\"timeout\")\n    }\n```\n###  1.3 定时器\n\n####  1.3.1. timer\n  \n```go\nfunc main() {\n\t// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间\n\ttimer1 := time.NewTimer(5 * time.Second)\n\n\tfmt.Println(\"开始时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\tgo func(t *time.Timer) {\n\t\ttimes := 0\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\n\t\t\ttimes++\n\t\t\tfmt.Println(\"调用 reset 重新设置一次timer定时器，并将时间修改为2秒\")\n\t\t\tt.Reset(2 * time.Second)\n\t\t\tif times > 3 {\n\t\t\t\tfmt.Println(\"调用 stop 停止定时器\")\n\t\t\t\tt.Stop()\n\t\t\t}\n\t\t}\n\t}(timer1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"结束时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n}\n```\n####  1.3.2. ticker\n  \n```go\nfunc main() {\n\tticker1 := time.NewTicker(5 * time.Second)\n\tdefer ticker1.Stop() // 一定要调用Stop()，回收资源\n\tgo func(t *time.Ticker) {\n\t\tfor {\n\t\t\t// 每5秒中从chan t.C 中读取一次\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"Ticker:\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"ok\")\n}\n```\n\n# 2 gin 跨域问题\n{% note warning %}\n\n解决跨域问题\n\n{% endnote %}\n\n代码加入这一段就可以了\n\n```go\nr := gin.Default()\nr.Use(Cors())\n\nfunc Cors() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tmethod := c.Request.Method\n\t\torigin := c.Request.Header.Get(\"Origin\")\n\t\tif origin != \"\" {\n\t\t\tc.Header(\"Access-Control-Allow-Origin\", \"*\") // 可将将 * 替换为指定的域名\n\t\t\tc.Header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE, UPDATE\")\n\t\t\tc.Header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")\n\t\t\tc.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type\")\n\t\t\tc.Header(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t}\n\t\tif method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(http.StatusNoContent)\n\t\t}\n\t\tc.Next()\n\t}\n}\n```\n\n# 3. 分配 IP\n{% note warning %}\n\n当我们有一段或者多段IP时，如何从IP池中分配出一个IP？\n\n{% endnote %}\n\n**创建配置文件**\n\n```sh\ncat <<EOF > ipam.json\n{\n  \"ranges\": [\n    {\n      \"start\": \"10.172.16.2\",\n      \"end\": \"10.172.16.3\"\n    },\n    {\n      \"start\": \"10.172.17.2\",\n      \"end\": \"10.172.17.3\"\n    }\n  ]\n}\nEOF\n```\n\n**代码实现**\n\n[ipam](https://github.com/oldwang12/ipam)\n\n# 4. 无法下载kubernetes包\n\n\n{% note warning %}\n\n解决无法直接下载 k8s.io/kubernetes 包问题\n\n{% endnote %}\n\n如果我们直接 go get k8s.io/kubernetes@v1.19.2 下载依赖，会出现以下错误:\n\n```go\ngo get k8s.io/kubernetes@v1.19.2\ngo: downloading k8s.io/kubernetes v1.19.2\ngo: k8s.io/kubernetes@v1.19.2 requires\n        k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0:\n```\n\n错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录./staging/src/k8s.io对应的依赖。\n\n保存内容为 go-get-kubernetes.sh, 执行 ./go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。\n```sh\n#!/bin/sh\nset -euo pipefail\n\nVERSION=${1#\"v\"}\nif [ -z \"$VERSION\" ]; then\n    echo \"Must specify version!\"\n    exit 1\nfi\nMODS=($(\n    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod |\n    sed -n 's|.*k8s.io/\\(.*\\) => ./staging/src/k8s.io/.*|k8s.io/\\1|p'\n))\nfor MOD in \"${MODS[@]}\"; do\n\n    V=$(\n        go mod download -json \"${MOD}@kubernetes-${VERSION}\" |\n        sed -n 's|.*\"Version\": \"\\(.*\\)\".*|\\1|p'\n    )\n    go mod edit \"-replace=${MOD}=${MOD}@${V}\"\ndone\ngo get \"k8s.io/kubernetes@v${VERSION}\"\n```\n\n\n# 面试\n\n## 2.1 结构体打印时，%v 和 %+v 的区别\n```go\nfunc printStruct(){\n\tpeople := People{\n\t\tName: \"lisi\",\n\t\tAge:  18,\n\t}\n\tfmt.Printf(\"%v\\n\", people)\n\tfmt.Printf(\"%+v\\n\", people)\n\tfmt.Printf(\"%#v\\n\", people)\n}\n// 输出:\n// {lisi 18}\n// {Name:lisi Age:18}\n// People{Name:\"lisi\", Age:18}\n```\n\n<p id=\"2\"></p>\n \n## 2.2 new 和 make的区别\n\n* new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&T{}\n* make只可用于slice,map,channel的初始化,返回的是引用。\n\n## 2.3 什么是协程？\n\n协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。\n\n## 2.4 defer执行顺序\n\n后进先出\n\n```go\nfunc test() int {\n\ti := 0\n\tdefer func() {\n\t\tfmt.Println(\"defer1\")\n\t}()\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// 输出:\n// defer2\n// defer1\n// return 0\n```\n\n上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）\n\n```go\nfunc test() (i int) {\n\ti = 0\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// defer2\n// return 1\n```\n\n这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。\n\n\n## 2.5 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n} else {\n}\n```\n\n## 2.6 如何获取一个结构体的所有tag？\n```go\npackage main\n\nimport (\n\t\"reflect\"\n\t\"fmt\"\n)\n\ntype Author struct {\n\tName         int      `json:Name`\n\tPublications []string `json:Publication,omitempty`\n}\n\nfunc main() {\n\tt := reflect.TypeOf(Author{})\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tname := t.Field(i).Name\n\t\ts, _ := t.FieldByName(name)\n\t\tfmt.Println(name, s.Tag)\n\t}\n}\n// Name json:Name\n// Publications json:Publication,omitempty\n```\n\n## 2.7 如何判断 2 个字符串切片（slice) 是相等的？\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\tx := \"abcd\"\n\ty := \"abcde\"\n\tfmt.Println(reflect.DeepEqual(x, y))\n\t// Output: false\n}\n```\n\n## 2.8 go里面的int和int32是同一个概念吗？\n不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。\n\nint8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。\n\n\n## 2.9 init() 函数\n\n- init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。\n- 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。\n- init()函数没有入参和返回值，不能被其他函数调用，\n- <span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span>\n- 一个文件可以有多个init()函数！\n- 执行顺序：import –> const –> var –>init()–>main()\n\n## 2.10 2 个 nil 可能不相等吗？\n可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：\n\n```go\nvar p *int = nil\nvar i interface{} = nil\nif(p == i){\n\tfmt.Println(\"Equal\")\n}\n```\n两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span>\n\n","source":"_posts/golang/golang面试.md","raw":"---\nlayout: golang\ntitle: golang 看这一篇就够了\ndate: 2023-07-29 13:20:35\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\n日积月累便封神\n\n{% endnote %}\n\n<!-- more -->\n \n# 常用\n\n# 1. time 包\n\n{% note primary %}\n\n时间格式、超时处理、定时器。\n\n{% endnote %}\n\n<!--more-->\n\n### 1.1 时间格式\n\n```go\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tfmt.Println(time.Now().Local().Format(\"2006-01-02 15:04:05\"))\n```\n\n### 1.2 超时处理\n\n#### 1.2.1. 使用select\n  \n```go\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(time.Second * 2)\n        c1 <- \"result 1\"\n    }()\n\n    select {\n    case res := <-c1:\n        fmt.Println(res)\n    case <-time.After(time.Second * 1):\n        fmt.Println(\"timeout 1\")\n    }\n```\n\n####  1.2.2. 使用 time.Since\n  \n```go\n\tstartTime := time.Now()\n\ttimeout := 5 * time.Second\n\n    time.Sleep(10 * time.Second)\n\n    if time.Since(startTime) > timeout {\n        return fmt.Errorf(\"timeout\")\n    }\n```\n###  1.3 定时器\n\n####  1.3.1. timer\n  \n```go\nfunc main() {\n\t// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间\n\ttimer1 := time.NewTimer(5 * time.Second)\n\n\tfmt.Println(\"开始时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\tgo func(t *time.Timer) {\n\t\ttimes := 0\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\n\t\t\ttimes++\n\t\t\tfmt.Println(\"调用 reset 重新设置一次timer定时器，并将时间修改为2秒\")\n\t\t\tt.Reset(2 * time.Second)\n\t\t\tif times > 3 {\n\t\t\t\tfmt.Println(\"调用 stop 停止定时器\")\n\t\t\t\tt.Stop()\n\t\t\t}\n\t\t}\n\t}(timer1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"结束时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n}\n```\n####  1.3.2. ticker\n  \n```go\nfunc main() {\n\tticker1 := time.NewTicker(5 * time.Second)\n\tdefer ticker1.Stop() // 一定要调用Stop()，回收资源\n\tgo func(t *time.Ticker) {\n\t\tfor {\n\t\t\t// 每5秒中从chan t.C 中读取一次\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"Ticker:\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"ok\")\n}\n```\n\n# 2 gin 跨域问题\n{% note warning %}\n\n解决跨域问题\n\n{% endnote %}\n\n代码加入这一段就可以了\n\n```go\nr := gin.Default()\nr.Use(Cors())\n\nfunc Cors() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tmethod := c.Request.Method\n\t\torigin := c.Request.Header.Get(\"Origin\")\n\t\tif origin != \"\" {\n\t\t\tc.Header(\"Access-Control-Allow-Origin\", \"*\") // 可将将 * 替换为指定的域名\n\t\t\tc.Header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE, UPDATE\")\n\t\t\tc.Header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")\n\t\t\tc.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type\")\n\t\t\tc.Header(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t}\n\t\tif method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(http.StatusNoContent)\n\t\t}\n\t\tc.Next()\n\t}\n}\n```\n\n# 3. 分配 IP\n{% note warning %}\n\n当我们有一段或者多段IP时，如何从IP池中分配出一个IP？\n\n{% endnote %}\n\n**创建配置文件**\n\n```sh\ncat <<EOF > ipam.json\n{\n  \"ranges\": [\n    {\n      \"start\": \"10.172.16.2\",\n      \"end\": \"10.172.16.3\"\n    },\n    {\n      \"start\": \"10.172.17.2\",\n      \"end\": \"10.172.17.3\"\n    }\n  ]\n}\nEOF\n```\n\n**代码实现**\n\n[ipam](https://github.com/oldwang12/ipam)\n\n# 4. 无法下载kubernetes包\n\n\n{% note warning %}\n\n解决无法直接下载 k8s.io/kubernetes 包问题\n\n{% endnote %}\n\n如果我们直接 go get k8s.io/kubernetes@v1.19.2 下载依赖，会出现以下错误:\n\n```go\ngo get k8s.io/kubernetes@v1.19.2\ngo: downloading k8s.io/kubernetes v1.19.2\ngo: k8s.io/kubernetes@v1.19.2 requires\n        k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0:\n```\n\n错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录./staging/src/k8s.io对应的依赖。\n\n保存内容为 go-get-kubernetes.sh, 执行 ./go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。\n```sh\n#!/bin/sh\nset -euo pipefail\n\nVERSION=${1#\"v\"}\nif [ -z \"$VERSION\" ]; then\n    echo \"Must specify version!\"\n    exit 1\nfi\nMODS=($(\n    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod |\n    sed -n 's|.*k8s.io/\\(.*\\) => ./staging/src/k8s.io/.*|k8s.io/\\1|p'\n))\nfor MOD in \"${MODS[@]}\"; do\n\n    V=$(\n        go mod download -json \"${MOD}@kubernetes-${VERSION}\" |\n        sed -n 's|.*\"Version\": \"\\(.*\\)\".*|\\1|p'\n    )\n    go mod edit \"-replace=${MOD}=${MOD}@${V}\"\ndone\ngo get \"k8s.io/kubernetes@v${VERSION}\"\n```\n\n\n# 面试\n\n## 2.1 结构体打印时，%v 和 %+v 的区别\n```go\nfunc printStruct(){\n\tpeople := People{\n\t\tName: \"lisi\",\n\t\tAge:  18,\n\t}\n\tfmt.Printf(\"%v\\n\", people)\n\tfmt.Printf(\"%+v\\n\", people)\n\tfmt.Printf(\"%#v\\n\", people)\n}\n// 输出:\n// {lisi 18}\n// {Name:lisi Age:18}\n// People{Name:\"lisi\", Age:18}\n```\n\n<p id=\"2\"></p>\n \n## 2.2 new 和 make的区别\n\n* new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&T{}\n* make只可用于slice,map,channel的初始化,返回的是引用。\n\n## 2.3 什么是协程？\n\n协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。\n\n## 2.4 defer执行顺序\n\n后进先出\n\n```go\nfunc test() int {\n\ti := 0\n\tdefer func() {\n\t\tfmt.Println(\"defer1\")\n\t}()\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// 输出:\n// defer2\n// defer1\n// return 0\n```\n\n上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）\n\n```go\nfunc test() (i int) {\n\ti = 0\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// defer2\n// return 1\n```\n\n这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。\n\n\n## 2.5 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n} else {\n}\n```\n\n## 2.6 如何获取一个结构体的所有tag？\n```go\npackage main\n\nimport (\n\t\"reflect\"\n\t\"fmt\"\n)\n\ntype Author struct {\n\tName         int      `json:Name`\n\tPublications []string `json:Publication,omitempty`\n}\n\nfunc main() {\n\tt := reflect.TypeOf(Author{})\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tname := t.Field(i).Name\n\t\ts, _ := t.FieldByName(name)\n\t\tfmt.Println(name, s.Tag)\n\t}\n}\n// Name json:Name\n// Publications json:Publication,omitempty\n```\n\n## 2.7 如何判断 2 个字符串切片（slice) 是相等的？\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\tx := \"abcd\"\n\ty := \"abcde\"\n\tfmt.Println(reflect.DeepEqual(x, y))\n\t// Output: false\n}\n```\n\n## 2.8 go里面的int和int32是同一个概念吗？\n不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。\n\nint8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。\n\n\n## 2.9 init() 函数\n\n- init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。\n- 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。\n- init()函数没有入参和返回值，不能被其他函数调用，\n- <span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span>\n- 一个文件可以有多个init()函数！\n- 执行顺序：import –> const –> var –>init()–>main()\n\n## 2.10 2 个 nil 可能不相等吗？\n可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：\n\n```go\nvar p *int = nil\nvar i interface{} = nil\nif(p == i){\n\tfmt.Println(\"Equal\")\n}\n```\n两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span>\n\n","slug":"golang/golang面试","published":1,"updated":"2023-09-06T08:47:16.025Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa1001a384wb88c0u7r","content":"<div class=\"note note-primary\">\n            <p>日积月累便封神</p>\n          </div>\n\n<span id=\"more\"></span>\n<h1><span id=\"常用\">常用</span></h1><h1><span id=\"1-time-包\">1. time 包</span></h1><div class=\"note note-primary\">\n            <p>时间格式、超时处理、定时器。</p>\n          </div>\n\n<!--more-->\n\n<h3><span id=\"11-时间格式\">1.1 时间格式</span></h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">timelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>time.Local = timelocal<br>fmt.Println(time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"12-超时处理\">1.2 超时处理</span></h3><h4><span id=\"121-使用select\">1.2.1. 使用select</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">c1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>    time.Sleep(time.Second * <span class=\"hljs-number\">2</span>)<br>    c1 &lt;- <span class=\"hljs-string\">&quot;result 1&quot;</span><br>&#125;()<br><br><span class=\"hljs-keyword\">select</span> &#123;<br><span class=\"hljs-keyword\">case</span> res := &lt;-c1:<br>    fmt.Println(res)<br><span class=\"hljs-keyword\">case</span> &lt;-time.After(time.Second * <span class=\"hljs-number\">1</span>):<br>    fmt.Println(<span class=\"hljs-string\">&quot;timeout 1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"122-使用-timesince\">1.2.2. 使用 time.Since</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">startTime := time.Now()<br>timeout := <span class=\"hljs-number\">5</span> * time.Second<br><br>   time.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>   <span class=\"hljs-keyword\">if</span> time.Since(startTime) &gt; timeout &#123;<br>       <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;timeout&quot;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h3><span id=\"13-定时器\">1.3 定时器</span></h3><h4><span id=\"131-timer\">1.3.1. timer</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间</span><br>\ttimer1 := time.NewTimer(<span class=\"hljs-number\">5</span> * time.Second)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;开始时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Timer)</span></span> &#123;<br>\t\ttimes := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;timer&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br><br>\t\t\ttimes++<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;</span>)<br>\t\t\tt.Reset(<span class=\"hljs-number\">2</span> * time.Second)<br>\t\t\t<span class=\"hljs-keyword\">if</span> times &gt; <span class=\"hljs-number\">3</span> &#123;<br>\t\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 stop 停止定时器&quot;</span>)<br>\t\t\t\tt.Stop()<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;(timer1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;结束时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4><span id=\"132-ticker\">1.3.2. ticker</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tticker1 := time.NewTicker(<span class=\"hljs-number\">5</span> * time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> ticker1.Stop() <span class=\"hljs-comment\">// 一定要调用Stop()，回收资源</span><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Ticker)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 每5秒中从chan t.C 中读取一次</span><br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Ticker:&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t\t&#125;<br>\t&#125;(ticker1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;ok&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"2-gin-跨域问题\">2 gin 跨域问题</span></h1><div class=\"note note-warning\">\n            <p>解决跨域问题</p>\n          </div>\n\n<p>代码加入这一段就可以了</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r := gin.Default()<br>r.Use(Cors())<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Cors</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tmethod := c.Request.Method<br>\t\torigin := c.Request.Header.Get(<span class=\"hljs-string\">&quot;Origin&quot;</span>)<br>\t\t<span class=\"hljs-keyword\">if</span> origin != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>) <span class=\"hljs-comment\">// 可将将 * 替换为指定的域名</span><br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\t\tc.AbortWithStatus(http.StatusNoContent)<br>\t\t&#125;<br>\t\tc.Next()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"3-分配-ip\">3. 分配 IP</span></h1><div class=\"note note-warning\">\n            <p>当我们有一段或者多段IP时，如何从IP池中分配出一个IP？</p>\n          </div>\n\n<p><strong>创建配置文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; ipam.json</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.16.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.16.3&quot;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.17.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.17.3&quot;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong></p>\n<p><a href=\"https://github.com/oldwang12/ipam\">ipam</a></p>\n<h1><span id=\"4-无法下载kubernetes包\">4. 无法下载kubernetes包</span></h1><div class=\"note note-warning\">\n            <p>解决无法直接下载 k8s.io&#x2F;kubernetes 包问题</p>\n          </div>\n\n<p>如果我们直接 go get k8s.io&#x2F;<a href=\"mailto:&#107;&#117;&#98;&#101;&#114;&#x6e;&#101;&#116;&#101;&#115;&#64;&#x76;&#x31;&#x2e;&#x31;&#57;&#46;&#50;\">&#107;&#117;&#98;&#101;&#114;&#x6e;&#101;&#116;&#101;&#115;&#64;&#x76;&#x31;&#x2e;&#x31;&#57;&#46;&#50;</a> 下载依赖，会出现以下错误:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> get k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: downloading k8s.io/kubernetes v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span> requires<br>        k8s.io/api@v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>: reading k8s.io/api/<span class=\"hljs-keyword\">go</span>.mod at revision v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<br></code></pre></td></tr></table></figure>\n\n<p>错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录.&#x2F;staging&#x2F;src&#x2F;k8s.io对应的依赖。</p>\n<p>保存内容为 go-get-kubernetes.sh, 执行 .&#x2F;go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">set</span> -euo pipefail<br><br>VERSION=<span class=\"hljs-variable\">$&#123;1#&quot;v&quot;&#125;</span><br><span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$VERSION</span>&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Must specify version!&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br>MODS=($(<br>    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>/go.mod |<br>    sed -n <span class=\"hljs-string\">&#x27;s|.*k8s.io/\\(.*\\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\\1|p&#x27;</span><br>))<br><span class=\"hljs-keyword\">for</span> MOD <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MODS[@]&#125;</span>&quot;</span>; <span class=\"hljs-keyword\">do</span><br><br>    V=$(<br>        go mod download -json <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@kubernetes-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span> |<br>        sed -n <span class=\"hljs-string\">&#x27;s|.*&quot;Version&quot;: &quot;\\(.*\\)&quot;.*|\\1|p&#x27;</span><br>    )<br>    go mod edit <span class=\"hljs-string\">&quot;-replace=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@<span class=\"hljs-variable\">$&#123;V&#125;</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br>go get <span class=\"hljs-string\">&quot;k8s.io/kubernetes@v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n<h1><span id=\"面试\">面试</span></h1><h2><span id=\"21-结构体打印时v-和-v-的区别\">2.1 结构体打印时，%v 和 %+v 的区别</span></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printStruct</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tpeople := People&#123;<br>\t\tName: <span class=\"hljs-string\">&quot;lisi&quot;</span>,<br>\t\tAge:  <span class=\"hljs-number\">18</span>,<br>\t&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%+v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n&quot;</span>, people)<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// &#123;lisi 18&#125;</span><br><span class=\"hljs-comment\">// &#123;Name:lisi Age:18&#125;</span><br><span class=\"hljs-comment\">// People&#123;Name:&quot;lisi&quot;, Age:18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"2\"></p>\n \n<h2><span id=\"22-new-和-make的区别\">2.2 new 和 make的区别</span></h2><ul>\n<li>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li>\n<li>make只可用于slice,map,channel的初始化,返回的是引用。</li>\n</ul>\n<h2><span id=\"23-什么是协程\">2.3 什么是协程？</span></h2><p>协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。</p>\n<h2><span id=\"24-defer执行顺序\">2.4 defer执行顺序</span></h2><p>后进先出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ti := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer1&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// defer1</span><br><span class=\"hljs-comment\">// return 0</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> (i <span class=\"hljs-type\">int</span>) &#123;<br>\ti = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// return 1</span><br></code></pre></td></tr></table></figure>\n\n<p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p>\n<h2><span id=\"25-如何判断-map-中是否包含某个-key\">2.5 如何判断 map 中是否包含某个 key ？</span></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> sample <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span><br><span class=\"hljs-keyword\">if</span> _, ok := sample[<span class=\"hljs-number\">10</span>]; ok &#123;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"26-如何获取一个结构体的所有tag\">2.6 如何获取一个结构体的所有tag？</span></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Author <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName         <span class=\"hljs-type\">int</span>      <span class=\"hljs-string\">`json:Name`</span><br>\tPublications []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:Publication,omitempty`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tt := reflect.TypeOf(Author&#123;&#125;)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; t.NumField(); i++ &#123;<br>\t\tname := t.Field(i).Name<br>\t\ts, _ := t.FieldByName(name)<br>\t\tfmt.Println(name, s.Tag)<br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">// Name json:Name</span><br><span class=\"hljs-comment\">// Publications json:Publication,omitempty</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"27-如何判断-2-个字符串切片slice-是相等的\">2.7 如何判断 2 个字符串切片（slice) 是相等的？</span></h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tx := <span class=\"hljs-string\">&quot;abcd&quot;</span><br>\ty := <span class=\"hljs-string\">&quot;abcde&quot;</span><br>\tfmt.Println(reflect.DeepEqual(x, y))<br>\t<span class=\"hljs-comment\">// Output: false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"28-go里面的int和int32是同一个概念吗\">2.8 go里面的int和int32是同一个概念吗？</span></h2><p>不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。</p>\n<p>int8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。</p>\n<h2><span id=\"29-init-函数\">2.9 init() 函数</span></h2><ul>\n<li>init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</li>\n<li>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。</li>\n<li>init()函数没有入参和返回值，不能被其他函数调用，</li>\n<li><span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span></li>\n<li>一个文件可以有多个init()函数！</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt;init()–&gt;main()</li>\n</ul>\n<h2><span id=\"210-2-个-nil-可能不相等吗\">2.10 2 个 nil 可能不相等吗？</span></h2><p>可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span> = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">interface</span>&#123;&#125; = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">if</span>(p == i)&#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Equal&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span></p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>日积月累便封神</p>\n          </div>","more":"<h1 id=\"常用\"><a href=\"#常用\" class=\"headerlink\" title=\"常用\"></a>常用</h1><h1 id=\"1-time-包\"><a href=\"#1-time-包\" class=\"headerlink\" title=\"1. time 包\"></a>1. time 包</h1><div class=\"note note-primary\">\n            <p>时间格式、超时处理、定时器。</p>\n          </div>\n\n<!--more-->\n\n<h3 id=\"1-1-时间格式\"><a href=\"#1-1-时间格式\" class=\"headerlink\" title=\"1.1 时间格式\"></a>1.1 时间格式</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">timelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>time.Local = timelocal<br>fmt.Println(time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-超时处理\"><a href=\"#1-2-超时处理\" class=\"headerlink\" title=\"1.2 超时处理\"></a>1.2 超时处理</h3><h4 id=\"1-2-1-使用select\"><a href=\"#1-2-1-使用select\" class=\"headerlink\" title=\"1.2.1. 使用select\"></a>1.2.1. 使用select</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">c1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>    time.Sleep(time.Second * <span class=\"hljs-number\">2</span>)<br>    c1 &lt;- <span class=\"hljs-string\">&quot;result 1&quot;</span><br>&#125;()<br><br><span class=\"hljs-keyword\">select</span> &#123;<br><span class=\"hljs-keyword\">case</span> res := &lt;-c1:<br>    fmt.Println(res)<br><span class=\"hljs-keyword\">case</span> &lt;-time.After(time.Second * <span class=\"hljs-number\">1</span>):<br>    fmt.Println(<span class=\"hljs-string\">&quot;timeout 1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"1-2-2-使用-time-Since\"><a href=\"#1-2-2-使用-time-Since\" class=\"headerlink\" title=\"1.2.2. 使用 time.Since\"></a>1.2.2. 使用 time.Since</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">startTime := time.Now()<br>timeout := <span class=\"hljs-number\">5</span> * time.Second<br><br>   time.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>   <span class=\"hljs-keyword\">if</span> time.Since(startTime) &gt; timeout &#123;<br>       <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;timeout&quot;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h3 id=\"1-3-定时器\"><a href=\"#1-3-定时器\" class=\"headerlink\" title=\"1.3 定时器\"></a>1.3 定时器</h3><h4 id=\"1-3-1-timer\"><a href=\"#1-3-1-timer\" class=\"headerlink\" title=\"1.3.1. timer\"></a>1.3.1. timer</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间</span><br>\ttimer1 := time.NewTimer(<span class=\"hljs-number\">5</span> * time.Second)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;开始时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Timer)</span></span> &#123;<br>\t\ttimes := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;timer&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br><br>\t\t\ttimes++<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;</span>)<br>\t\t\tt.Reset(<span class=\"hljs-number\">2</span> * time.Second)<br>\t\t\t<span class=\"hljs-keyword\">if</span> times &gt; <span class=\"hljs-number\">3</span> &#123;<br>\t\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 stop 停止定时器&quot;</span>)<br>\t\t\t\tt.Stop()<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;(timer1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;结束时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"1-3-2-ticker\"><a href=\"#1-3-2-ticker\" class=\"headerlink\" title=\"1.3.2. ticker\"></a>1.3.2. ticker</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tticker1 := time.NewTicker(<span class=\"hljs-number\">5</span> * time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> ticker1.Stop() <span class=\"hljs-comment\">// 一定要调用Stop()，回收资源</span><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Ticker)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 每5秒中从chan t.C 中读取一次</span><br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Ticker:&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t\t&#125;<br>\t&#125;(ticker1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;ok&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"2-gin-跨域问题\"><a href=\"#2-gin-跨域问题\" class=\"headerlink\" title=\"2 gin 跨域问题\"></a>2 gin 跨域问题</h1><div class=\"note note-warning\">\n            <p>解决跨域问题</p>\n          </div>\n\n<p>代码加入这一段就可以了</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r := gin.Default()<br>r.Use(Cors())<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Cors</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tmethod := c.Request.Method<br>\t\torigin := c.Request.Header.Get(<span class=\"hljs-string\">&quot;Origin&quot;</span>)<br>\t\t<span class=\"hljs-keyword\">if</span> origin != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>) <span class=\"hljs-comment\">// 可将将 * 替换为指定的域名</span><br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\t\tc.AbortWithStatus(http.StatusNoContent)<br>\t\t&#125;<br>\t\tc.Next()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-分配-IP\"><a href=\"#3-分配-IP\" class=\"headerlink\" title=\"3. 分配 IP\"></a>3. 分配 IP</h1><div class=\"note note-warning\">\n            <p>当我们有一段或者多段IP时，如何从IP池中分配出一个IP？</p>\n          </div>\n\n<p><strong>创建配置文件</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; ipam.json</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.16.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.16.3&quot;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.17.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.17.3&quot;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>代码实现</strong></p>\n<p><a href=\"https://github.com/oldwang12/ipam\">ipam</a></p>\n<h1 id=\"4-无法下载kubernetes包\"><a href=\"#4-无法下载kubernetes包\" class=\"headerlink\" title=\"4. 无法下载kubernetes包\"></a>4. 无法下载kubernetes包</h1><div class=\"note note-warning\">\n            <p>解决无法直接下载 k8s.io&#x2F;kubernetes 包问题</p>\n          </div>\n\n<p>如果我们直接 go get k8s.io&#x2F;<a href=\"mailto:&#107;&#117;&#98;&#101;&#114;&#x6e;&#101;&#116;&#101;&#115;&#64;&#x76;&#x31;&#x2e;&#x31;&#57;&#46;&#50;\">&#107;&#117;&#98;&#101;&#114;&#x6e;&#101;&#116;&#101;&#115;&#64;&#x76;&#x31;&#x2e;&#x31;&#57;&#46;&#50;</a> 下载依赖，会出现以下错误:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> get k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: downloading k8s.io/kubernetes v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span> requires<br>        k8s.io/api@v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>: reading k8s.io/api/<span class=\"hljs-keyword\">go</span>.mod at revision v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<br></code></pre></td></tr></table></figure>\n\n<p>错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录.&#x2F;staging&#x2F;src&#x2F;k8s.io对应的依赖。</p>\n<p>保存内容为 go-get-kubernetes.sh, 执行 .&#x2F;go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">set</span> -euo pipefail<br><br>VERSION=<span class=\"hljs-variable\">$&#123;1#&quot;v&quot;&#125;</span><br><span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$VERSION</span>&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Must specify version!&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br>MODS=($(<br>    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>/go.mod |<br>    sed -n <span class=\"hljs-string\">&#x27;s|.*k8s.io/\\(.*\\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\\1|p&#x27;</span><br>))<br><span class=\"hljs-keyword\">for</span> MOD <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MODS[@]&#125;</span>&quot;</span>; <span class=\"hljs-keyword\">do</span><br><br>    V=$(<br>        go mod download -json <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@kubernetes-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span> |<br>        sed -n <span class=\"hljs-string\">&#x27;s|.*&quot;Version&quot;: &quot;\\(.*\\)&quot;.*|\\1|p&#x27;</span><br>    )<br>    go mod edit <span class=\"hljs-string\">&quot;-replace=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@<span class=\"hljs-variable\">$&#123;V&#125;</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br>go get <span class=\"hljs-string\">&quot;k8s.io/kubernetes@v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"面试\"><a href=\"#面试\" class=\"headerlink\" title=\"面试\"></a>面试</h1><h2 id=\"2-1-结构体打印时，-v-和-v-的区别\"><a href=\"#2-1-结构体打印时，-v-和-v-的区别\" class=\"headerlink\" title=\"2.1 结构体打印时，%v 和 %+v 的区别\"></a>2.1 结构体打印时，%v 和 %+v 的区别</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printStruct</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tpeople := People&#123;<br>\t\tName: <span class=\"hljs-string\">&quot;lisi&quot;</span>,<br>\t\tAge:  <span class=\"hljs-number\">18</span>,<br>\t&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%+v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n&quot;</span>, people)<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// &#123;lisi 18&#125;</span><br><span class=\"hljs-comment\">// &#123;Name:lisi Age:18&#125;</span><br><span class=\"hljs-comment\">// People&#123;Name:&quot;lisi&quot;, Age:18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"2\"></p>\n \n<h2 id=\"2-2-new-和-make的区别\"><a href=\"#2-2-new-和-make的区别\" class=\"headerlink\" title=\"2.2 new 和 make的区别\"></a>2.2 new 和 make的区别</h2><ul>\n<li>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li>\n<li>make只可用于slice,map,channel的初始化,返回的是引用。</li>\n</ul>\n<h2 id=\"2-3-什么是协程？\"><a href=\"#2-3-什么是协程？\" class=\"headerlink\" title=\"2.3 什么是协程？\"></a>2.3 什么是协程？</h2><p>协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。</p>\n<h2 id=\"2-4-defer执行顺序\"><a href=\"#2-4-defer执行顺序\" class=\"headerlink\" title=\"2.4 defer执行顺序\"></a>2.4 defer执行顺序</h2><p>后进先出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ti := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer1&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// defer1</span><br><span class=\"hljs-comment\">// return 0</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> (i <span class=\"hljs-type\">int</span>) &#123;<br>\ti = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// return 1</span><br></code></pre></td></tr></table></figure>\n\n<p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p>\n<h2 id=\"2-5-如何判断-map-中是否包含某个-key-？\"><a href=\"#2-5-如何判断-map-中是否包含某个-key-？\" class=\"headerlink\" title=\"2.5 如何判断 map 中是否包含某个 key ？\"></a>2.5 如何判断 map 中是否包含某个 key ？</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> sample <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span><br><span class=\"hljs-keyword\">if</span> _, ok := sample[<span class=\"hljs-number\">10</span>]; ok &#123;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-6-如何获取一个结构体的所有tag？\"><a href=\"#2-6-如何获取一个结构体的所有tag？\" class=\"headerlink\" title=\"2.6 如何获取一个结构体的所有tag？\"></a>2.6 如何获取一个结构体的所有tag？</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Author <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName         <span class=\"hljs-type\">int</span>      <span class=\"hljs-string\">`json:Name`</span><br>\tPublications []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:Publication,omitempty`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tt := reflect.TypeOf(Author&#123;&#125;)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; t.NumField(); i++ &#123;<br>\t\tname := t.Field(i).Name<br>\t\ts, _ := t.FieldByName(name)<br>\t\tfmt.Println(name, s.Tag)<br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">// Name json:Name</span><br><span class=\"hljs-comment\">// Publications json:Publication,omitempty</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-7-如何判断-2-个字符串切片（slice-是相等的？\"><a href=\"#2-7-如何判断-2-个字符串切片（slice-是相等的？\" class=\"headerlink\" title=\"2.7 如何判断 2 个字符串切片（slice) 是相等的？\"></a>2.7 如何判断 2 个字符串切片（slice) 是相等的？</h2><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tx := <span class=\"hljs-string\">&quot;abcd&quot;</span><br>\ty := <span class=\"hljs-string\">&quot;abcde&quot;</span><br>\tfmt.Println(reflect.DeepEqual(x, y))<br>\t<span class=\"hljs-comment\">// Output: false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-8-go里面的int和int32是同一个概念吗？\"><a href=\"#2-8-go里面的int和int32是同一个概念吗？\" class=\"headerlink\" title=\"2.8 go里面的int和int32是同一个概念吗？\"></a>2.8 go里面的int和int32是同一个概念吗？</h2><p>不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。</p>\n<p>int8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。</p>\n<h2 id=\"2-9-init-函数\"><a href=\"#2-9-init-函数\" class=\"headerlink\" title=\"2.9 init() 函数\"></a>2.9 init() 函数</h2><ul>\n<li>init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</li>\n<li>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。</li>\n<li>init()函数没有入参和返回值，不能被其他函数调用，</li>\n<li><span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span></li>\n<li>一个文件可以有多个init()函数！</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt;init()–&gt;main()</li>\n</ul>\n<h2 id=\"2-10-2-个-nil-可能不相等吗？\"><a href=\"#2-10-2-个-nil-可能不相等吗？\" class=\"headerlink\" title=\"2.10 2 个 nil 可能不相等吗？\"></a>2.10 2 个 nil 可能不相等吗？</h2><p>可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span> = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">interface</span>&#123;&#125; = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">if</span>(p == i)&#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Equal&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span></p>"},{"layout":"golang","title":"viper配置文件","date":"2023-07-29T05:08:23.000Z","_content":"\n{% note primary %}\n\nviper配置文件，为项目的启动提速。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 配置文件\n```yaml\nmysql:\n  url: 127.0.0.1\n  port: 3306\nisvalid: true\n```\n\n#### 代码示例\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc main() {\n\t// 设置配置文件的名字\n\tviper.SetConfigName(\"config\")\n\t// 设置配置文件的类型\n\tviper.SetConfigType(\"yaml\")\n\t// 添加配置文件的路径，指定 config 目录下寻找\n\tviper.AddConfigPath(\"./config\")\n\t// 寻找配置文件并读取\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n\t}\n\tfmt.Println(viper.Get(\"mysql\"))\n\tfmt.Println(viper.GetString(\"mysql.url\"))\n\tfmt.Println(viper.GetInt(\"mysql.port\"))\n\tfmt.Println(viper.GetBool(\"isvalid\"))\n}\n```","source":"_posts/golang/viper配置文件.md","raw":"---\nlayout: golang\ntitle: viper配置文件\ndate: 2023-07-29 13:08:23\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\nviper配置文件，为项目的启动提速。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 配置文件\n```yaml\nmysql:\n  url: 127.0.0.1\n  port: 3306\nisvalid: true\n```\n\n#### 代码示例\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc main() {\n\t// 设置配置文件的名字\n\tviper.SetConfigName(\"config\")\n\t// 设置配置文件的类型\n\tviper.SetConfigType(\"yaml\")\n\t// 添加配置文件的路径，指定 config 目录下寻找\n\tviper.AddConfigPath(\"./config\")\n\t// 寻找配置文件并读取\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n\t}\n\tfmt.Println(viper.Get(\"mysql\"))\n\tfmt.Println(viper.GetString(\"mysql.url\"))\n\tfmt.Println(viper.GetInt(\"mysql.port\"))\n\tfmt.Println(viper.GetBool(\"isvalid\"))\n}\n```","slug":"golang/viper配置文件","published":1,"updated":"2023-08-23T09:19:05.444Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa1001c384w4i630mut","content":"<div class=\"note note-primary\">\n            <p>viper配置文件，为项目的启动提速。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4><span id=\"配置文件\">配置文件</span></h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">mysql:</span><br>  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span><br><span class=\"hljs-attr\">isvalid:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"代码示例\">代码示例</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 设置配置文件的名字</span><br>\tviper.SetConfigName(<span class=\"hljs-string\">&quot;config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 设置配置文件的类型</span><br>\tviper.SetConfigType(<span class=\"hljs-string\">&quot;yaml&quot;</span>)<br>\t<span class=\"hljs-comment\">// 添加配置文件的路径，指定 config 目录下寻找</span><br>\tviper.AddConfigPath(<span class=\"hljs-string\">&quot;./config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 寻找配置文件并读取</span><br>\terr := viper.ReadInConfig()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Errorf(<span class=\"hljs-string\">&quot;fatal error config file: %w&quot;</span>, err))<br>\t&#125;<br>\tfmt.Println(viper.Get(<span class=\"hljs-string\">&quot;mysql&quot;</span>))<br>\tfmt.Println(viper.GetString(<span class=\"hljs-string\">&quot;mysql.url&quot;</span>))<br>\tfmt.Println(viper.GetInt(<span class=\"hljs-string\">&quot;mysql.port&quot;</span>))<br>\tfmt.Println(viper.GetBool(<span class=\"hljs-string\">&quot;isvalid&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>viper配置文件，为项目的启动提速。</p>\n          </div>","more":"<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">mysql:</span><br>  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span><br><span class=\"hljs-attr\">isvalid:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 设置配置文件的名字</span><br>\tviper.SetConfigName(<span class=\"hljs-string\">&quot;config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 设置配置文件的类型</span><br>\tviper.SetConfigType(<span class=\"hljs-string\">&quot;yaml&quot;</span>)<br>\t<span class=\"hljs-comment\">// 添加配置文件的路径，指定 config 目录下寻找</span><br>\tviper.AddConfigPath(<span class=\"hljs-string\">&quot;./config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 寻找配置文件并读取</span><br>\terr := viper.ReadInConfig()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Errorf(<span class=\"hljs-string\">&quot;fatal error config file: %w&quot;</span>, err))<br>\t&#125;<br>\tfmt.Println(viper.Get(<span class=\"hljs-string\">&quot;mysql&quot;</span>))<br>\tfmt.Println(viper.GetString(<span class=\"hljs-string\">&quot;mysql.url&quot;</span>))<br>\tfmt.Println(viper.GetInt(<span class=\"hljs-string\">&quot;mysql.port&quot;</span>))<br>\tfmt.Println(viper.GetBool(<span class=\"hljs-string\">&quot;isvalid&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"k8s记不住的命令","date":"2023-07-22T16:29:39.000Z","_content":"\n{% note primary%}\n懒人笔记\n{% endnote %}\n\n\n<!-- more -->\n## 1. 创建pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```\n## 2. 更新镜像\n```sh\nkubectl set image deployment/provider provider=provider:latest\n```\n\n## 3. scale\n```sh\nkubectl scale deployment/provider --replicas=0\n```\n\n或者\n\n```sh\nkubectl scale deployment my-deployment --replicas=0\n```\n\n## 4. 给 node/pod 打标签\n```sh\nkubectl label nodes kube-node node=kube-node\n```\n\n## 5. 通过标签过滤\n```sh\nkubectl get node -l \"node=kube-node\"\n```\n\n## 6. cp\n\n### 6.1 拷贝pod数据到本地\n\n```sh\nkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/foo\n```\n\n### 6.2 拷贝本地数据到pod之中\n\n```sh\nkubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/foo\n```\n\n## 7. 查看支持的 apiVersion\n```sh\nkubectl api-versions\n```\n\n## 8. 回滚版本\n```sh\n# 查看历史版本\nkubectl rollout history deployment provider\n\n# 回滚到上一个版本\nkubectl rollout undo deployment provider\n\n# 回滚到指定版本\nkubectl rollout undo deployment provider --to-revision=2\n```\n\n## 9. 污点\n```sh\nkubectl taint nodes <node-name> <taint-key>=<taint-value>:<taint-effect>\n```\n\n{% note warning %}\n`<node-name>` 是要添加污点的节点的名称。\n`<taint-key>` 是污点的键。\n`<taint-value>` 是污点的值，可以留空。\n`<taint-effect>` 是污点的影响效果，可以是以下选项之一：\n- NoSchedule：表示不将新的Pod调度到有这个污点的节点上。\n- PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。\n- NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。\n{% endnote %}\n\n\n## 10. 探测\n### 10.1 livenessProbe: 存活探测\n* **failureThreshold**: 表示连续失败探测的次数，认为容器已经死亡，默认为3次\n* **initialDelaySeconds**: 表示在容器启动后多少秒开始进行探测，默认值为10秒。\n* **periodSeconds**: 表示多长时间重试一次探测，默认值为10秒\n* **successThreshold**: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次\n* **timeoutSeconds**: 表示探测请求的超时时间，默认为1秒。\n### 10.2 readinessProbe: 就绪探测\n  \n```yaml\nlivenessProbe:\n  failureThreshold: 10\n  initialDelaySeconds: 300\n  httpGet:\n    path: /-/healthy\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\nreadinessProbe:\n  initialDelaySeconds: 300\n  failureThreshold: 20\n  httpGet:\n    path: /-/ready\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\n```\n\n## 11. 进入pod命名空间\n### 11.1. 找到 pod 所在节点\n```sh\nk get po -owide\n\nssh root@xx.xx.xx.xx\n```\n\n### 11.2. 获取容器 pid\n\n```sh\n# docker\ndocker inspect --format '{{ .State.Pid }}' 容器名/ID\n\n# containerd\ncrictl inspect 容器ID | grep pid\n```\n\n### 11.3. 进入容器网络\n```sh\nnsenter -t $PID -n\n```\n\n### 12. 更改grafana密码\n```sh\ngrafana-cli admin reset-admin-password <password>\n```\n\n### 13. 生成 hub secret\n\n```sh\nkubectl create secret docker-registry <secret_name> \\\n  --docker-server=<registry_url> \\\n  --docker-username=<username> \\\n  --docker-password=<password> \\\n  --docker-email=<email>\n```\n\nk create secret docker-registry hub-aliyun \\\n  --docker-server=registry.cn-hangzhou.aliyuncs.com \\\n  --docker-username=w17691027323 \\\n  --docker-password=wang970425","source":"_posts/k8s/k8s记不住的命令.md","raw":"---\nlayout: k8s\ntitle: k8s记不住的命令\ndate: 2023-07-23 00:29:39\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n懒人笔记\n{% endnote %}\n\n\n<!-- more -->\n## 1. 创建pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```\n## 2. 更新镜像\n```sh\nkubectl set image deployment/provider provider=provider:latest\n```\n\n## 3. scale\n```sh\nkubectl scale deployment/provider --replicas=0\n```\n\n或者\n\n```sh\nkubectl scale deployment my-deployment --replicas=0\n```\n\n## 4. 给 node/pod 打标签\n```sh\nkubectl label nodes kube-node node=kube-node\n```\n\n## 5. 通过标签过滤\n```sh\nkubectl get node -l \"node=kube-node\"\n```\n\n## 6. cp\n\n### 6.1 拷贝pod数据到本地\n\n```sh\nkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/foo\n```\n\n### 6.2 拷贝本地数据到pod之中\n\n```sh\nkubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/foo\n```\n\n## 7. 查看支持的 apiVersion\n```sh\nkubectl api-versions\n```\n\n## 8. 回滚版本\n```sh\n# 查看历史版本\nkubectl rollout history deployment provider\n\n# 回滚到上一个版本\nkubectl rollout undo deployment provider\n\n# 回滚到指定版本\nkubectl rollout undo deployment provider --to-revision=2\n```\n\n## 9. 污点\n```sh\nkubectl taint nodes <node-name> <taint-key>=<taint-value>:<taint-effect>\n```\n\n{% note warning %}\n`<node-name>` 是要添加污点的节点的名称。\n`<taint-key>` 是污点的键。\n`<taint-value>` 是污点的值，可以留空。\n`<taint-effect>` 是污点的影响效果，可以是以下选项之一：\n- NoSchedule：表示不将新的Pod调度到有这个污点的节点上。\n- PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。\n- NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。\n{% endnote %}\n\n\n## 10. 探测\n### 10.1 livenessProbe: 存活探测\n* **failureThreshold**: 表示连续失败探测的次数，认为容器已经死亡，默认为3次\n* **initialDelaySeconds**: 表示在容器启动后多少秒开始进行探测，默认值为10秒。\n* **periodSeconds**: 表示多长时间重试一次探测，默认值为10秒\n* **successThreshold**: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次\n* **timeoutSeconds**: 表示探测请求的超时时间，默认为1秒。\n### 10.2 readinessProbe: 就绪探测\n  \n```yaml\nlivenessProbe:\n  failureThreshold: 10\n  initialDelaySeconds: 300\n  httpGet:\n    path: /-/healthy\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\nreadinessProbe:\n  initialDelaySeconds: 300\n  failureThreshold: 20\n  httpGet:\n    path: /-/ready\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\n```\n\n## 11. 进入pod命名空间\n### 11.1. 找到 pod 所在节点\n```sh\nk get po -owide\n\nssh root@xx.xx.xx.xx\n```\n\n### 11.2. 获取容器 pid\n\n```sh\n# docker\ndocker inspect --format '{{ .State.Pid }}' 容器名/ID\n\n# containerd\ncrictl inspect 容器ID | grep pid\n```\n\n### 11.3. 进入容器网络\n```sh\nnsenter -t $PID -n\n```\n\n### 12. 更改grafana密码\n```sh\ngrafana-cli admin reset-admin-password <password>\n```\n\n### 13. 生成 hub secret\n\n```sh\nkubectl create secret docker-registry <secret_name> \\\n  --docker-server=<registry_url> \\\n  --docker-username=<username> \\\n  --docker-password=<password> \\\n  --docker-email=<email>\n```\n\nk create secret docker-registry hub-aliyun \\\n  --docker-server=registry.cn-hangzhou.aliyuncs.com \\\n  --docker-username=w17691027323 \\\n  --docker-password=wang970425","slug":"k8s/k8s记不住的命令","published":1,"updated":"2023-09-16T06:29:49.645Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa1001h384w92cd3xzi","content":"<div class=\"note note-primary\">\n            <p>懒人笔记</p>\n          </div>\n\n\n<span id=\"more\"></span>\n<h2><span id=\"1-创建pod\">1. 创建pod</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>\n<h2><span id=\"2-更新镜像\">2. 更新镜像</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">set</span> image deployment/provider provider=provider:latest<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-scale\">3. scale</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl scale deployment/provider --replicas=0<br></code></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl scale deployment my-deployment --replicas=0<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-给-nodex2fpod-打标签\">4. 给 node&#x2F;pod 打标签</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl label nodes kube-node node=kube-node<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"5-通过标签过滤\">5. 通过标签过滤</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl get node -l <span class=\"hljs-string\">&quot;node=kube-node&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"6-cp\">6. cp</span></h2><h3><span id=\"61-拷贝pod数据到本地\">6.1 拷贝pod数据到本地</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">cp</span> &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"62-拷贝本地数据到pod之中\">6.2 拷贝本地数据到pod之中</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">cp</span> /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"7-查看支持的-apiversion\">7. 查看支持的 apiVersion</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl api-versions<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"8-回滚版本\">8. 回滚版本</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看历史版本</span><br>kubectl rollout <span class=\"hljs-built_in\">history</span> deployment provider<br><br><span class=\"hljs-comment\"># 回滚到上一个版本</span><br>kubectl rollout undo deployment provider<br><br><span class=\"hljs-comment\"># 回滚到指定版本</span><br>kubectl rollout undo deployment provider --to-revision=2<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"9-污点\">9. 污点</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt;<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><code>&lt;node-name&gt;</code> 是要添加污点的节点的名称。<br><code>&lt;taint-key&gt;</code> 是污点的键。<br><code>&lt;taint-value&gt;</code> 是污点的值，可以留空。<br><code>&lt;taint-effect&gt;</code> 是污点的影响效果，可以是以下选项之一：</p><ul><li>NoSchedule：表示不将新的Pod调度到有这个污点的节点上。</li><li>PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。</li><li>NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。</li></ul>\n          </div>\n\n\n<h2><span id=\"10-探测\">10. 探测</span></h2><h3><span id=\"101-livenessprobe-存活探测\">10.1 livenessProbe: 存活探测</span></h3><ul>\n<li><strong>failureThreshold</strong>: 表示连续失败探测的次数，认为容器已经死亡，默认为3次</li>\n<li><strong>initialDelaySeconds</strong>: 表示在容器启动后多少秒开始进行探测，默认值为10秒。</li>\n<li><strong>periodSeconds</strong>: 表示多长时间重试一次探测，默认值为10秒</li>\n<li><strong>successThreshold</strong>: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次</li>\n<li><strong>timeoutSeconds</strong>: 表示探测请求的超时时间，默认为1秒。</li>\n</ul>\n<h3><span id=\"102-readinessprobe-就绪探测\">10.2 readinessProbe: 就绪探测</span></h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">livenessProbe:</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/healthy</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-attr\">readinessProbe:</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">20</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/ready</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"11-进入pod命名空间\">11. 进入pod命名空间</span></h2><h3><span id=\"111-找到-pod-所在节点\">11.1. 找到 pod 所在节点</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">k get po -owide<br><br>ssh root@xx.xx.xx.xx<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"112-获取容器-pid\">11.2. 获取容器 pid</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># docker</span><br>docker inspect --format <span class=\"hljs-string\">&#x27;&#123;&#123; .State.Pid &#125;&#125;&#x27;</span> 容器名/ID<br><br><span class=\"hljs-comment\"># containerd</span><br>crictl inspect 容器ID | grep pid<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"113-进入容器网络\">11.3. 进入容器网络</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">nsenter -t <span class=\"hljs-variable\">$PID</span> -n<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"12-更改grafana密码\">12. 更改grafana密码</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">grafana-cli admin reset-admin-password &lt;password&gt;<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"13-生成-hub-secret\">13. 生成 hub secret</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl create secret docker-registry &lt;secret_name&gt; \\<br>  --docker-server=&lt;registry_url&gt; \\<br>  --docker-username=&lt;username&gt; \\<br>  --docker-password=&lt;password&gt; \\<br>  --docker-email=&lt;email&gt;<br></code></pre></td></tr></table></figure>\n\n<p>k create secret docker-registry hub-aliyun <br>  –docker-server&#x3D;registry.cn-hangzhou.aliyuncs.com <br>  –docker-username&#x3D;w17691027323 <br>  –docker-password&#x3D;wang970425</p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>懒人笔记</p>\n          </div>","more":"<h2 id=\"1-创建pod\"><a href=\"#1-创建pod\" class=\"headerlink\" title=\"1. 创建pod\"></a>1. 创建pod</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>\n<h2 id=\"2-更新镜像\"><a href=\"#2-更新镜像\" class=\"headerlink\" title=\"2. 更新镜像\"></a>2. 更新镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">set</span> image deployment/provider provider=provider:latest<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-scale\"><a href=\"#3-scale\" class=\"headerlink\" title=\"3. scale\"></a>3. scale</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl scale deployment/provider --replicas=0<br></code></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl scale deployment my-deployment --replicas=0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-给-node-pod-打标签\"><a href=\"#4-给-node-pod-打标签\" class=\"headerlink\" title=\"4. 给 node&#x2F;pod 打标签\"></a>4. 给 node&#x2F;pod 打标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl label nodes kube-node node=kube-node<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-通过标签过滤\"><a href=\"#5-通过标签过滤\" class=\"headerlink\" title=\"5. 通过标签过滤\"></a>5. 通过标签过滤</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl get node -l <span class=\"hljs-string\">&quot;node=kube-node&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-cp\"><a href=\"#6-cp\" class=\"headerlink\" title=\"6. cp\"></a>6. cp</h2><h3 id=\"6-1-拷贝pod数据到本地\"><a href=\"#6-1-拷贝pod数据到本地\" class=\"headerlink\" title=\"6.1 拷贝pod数据到本地\"></a>6.1 拷贝pod数据到本地</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">cp</span> &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-拷贝本地数据到pod之中\"><a href=\"#6-2-拷贝本地数据到pod之中\" class=\"headerlink\" title=\"6.2 拷贝本地数据到pod之中\"></a>6.2 拷贝本地数据到pod之中</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">cp</span> /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-查看支持的-apiVersion\"><a href=\"#7-查看支持的-apiVersion\" class=\"headerlink\" title=\"7. 查看支持的 apiVersion\"></a>7. 查看支持的 apiVersion</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl api-versions<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-回滚版本\"><a href=\"#8-回滚版本\" class=\"headerlink\" title=\"8. 回滚版本\"></a>8. 回滚版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看历史版本</span><br>kubectl rollout <span class=\"hljs-built_in\">history</span> deployment provider<br><br><span class=\"hljs-comment\"># 回滚到上一个版本</span><br>kubectl rollout undo deployment provider<br><br><span class=\"hljs-comment\"># 回滚到指定版本</span><br>kubectl rollout undo deployment provider --to-revision=2<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"9-污点\"><a href=\"#9-污点\" class=\"headerlink\" title=\"9. 污点\"></a>9. 污点</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt;<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><code>&lt;node-name&gt;</code> 是要添加污点的节点的名称。<br><code>&lt;taint-key&gt;</code> 是污点的键。<br><code>&lt;taint-value&gt;</code> 是污点的值，可以留空。<br><code>&lt;taint-effect&gt;</code> 是污点的影响效果，可以是以下选项之一：</p><ul><li>NoSchedule：表示不将新的Pod调度到有这个污点的节点上。</li><li>PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。</li><li>NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。</li></ul>\n          </div>\n\n\n<h2 id=\"10-探测\"><a href=\"#10-探测\" class=\"headerlink\" title=\"10. 探测\"></a>10. 探测</h2><h3 id=\"10-1-livenessProbe-存活探测\"><a href=\"#10-1-livenessProbe-存活探测\" class=\"headerlink\" title=\"10.1 livenessProbe: 存活探测\"></a>10.1 livenessProbe: 存活探测</h3><ul>\n<li><strong>failureThreshold</strong>: 表示连续失败探测的次数，认为容器已经死亡，默认为3次</li>\n<li><strong>initialDelaySeconds</strong>: 表示在容器启动后多少秒开始进行探测，默认值为10秒。</li>\n<li><strong>periodSeconds</strong>: 表示多长时间重试一次探测，默认值为10秒</li>\n<li><strong>successThreshold</strong>: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次</li>\n<li><strong>timeoutSeconds</strong>: 表示探测请求的超时时间，默认为1秒。</li>\n</ul>\n<h3 id=\"10-2-readinessProbe-就绪探测\"><a href=\"#10-2-readinessProbe-就绪探测\" class=\"headerlink\" title=\"10.2 readinessProbe: 就绪探测\"></a>10.2 readinessProbe: 就绪探测</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">livenessProbe:</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/healthy</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-attr\">readinessProbe:</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">20</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/ready</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"11-进入pod命名空间\"><a href=\"#11-进入pod命名空间\" class=\"headerlink\" title=\"11. 进入pod命名空间\"></a>11. 进入pod命名空间</h2><h3 id=\"11-1-找到-pod-所在节点\"><a href=\"#11-1-找到-pod-所在节点\" class=\"headerlink\" title=\"11.1. 找到 pod 所在节点\"></a>11.1. 找到 pod 所在节点</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">k get po -owide<br><br>ssh root@xx.xx.xx.xx<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-2-获取容器-pid\"><a href=\"#11-2-获取容器-pid\" class=\"headerlink\" title=\"11.2. 获取容器 pid\"></a>11.2. 获取容器 pid</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># docker</span><br>docker inspect --format <span class=\"hljs-string\">&#x27;&#123;&#123; .State.Pid &#125;&#125;&#x27;</span> 容器名/ID<br><br><span class=\"hljs-comment\"># containerd</span><br>crictl inspect 容器ID | grep pid<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"11-3-进入容器网络\"><a href=\"#11-3-进入容器网络\" class=\"headerlink\" title=\"11.3. 进入容器网络\"></a>11.3. 进入容器网络</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">nsenter -t <span class=\"hljs-variable\">$PID</span> -n<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"12-更改grafana密码\"><a href=\"#12-更改grafana密码\" class=\"headerlink\" title=\"12. 更改grafana密码\"></a>12. 更改grafana密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">grafana-cli admin reset-admin-password &lt;password&gt;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"13-生成-hub-secret\"><a href=\"#13-生成-hub-secret\" class=\"headerlink\" title=\"13. 生成 hub secret\"></a>13. 生成 hub secret</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl create secret docker-registry &lt;secret_name&gt; \\<br>  --docker-server=&lt;registry_url&gt; \\<br>  --docker-username=&lt;username&gt; \\<br>  --docker-password=&lt;password&gt; \\<br>  --docker-email=&lt;email&gt;<br></code></pre></td></tr></table></figure>\n\n<p>k create secret docker-registry hub-aliyun <br>  –docker-server&#x3D;registry.cn-hangzhou.aliyuncs.com <br>  –docker-username&#x3D;w17691027323 <br>  –docker-password&#x3D;wang970425</p>"},{"layout":"k8s","title":"使用client-go操作自定义CRD","date":"2023-07-25T09:18:17.000Z","_content":"\n{% note primary%}\n\n简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。\n\n个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。\n\n{% endnote %}\n<!-- more -->\n\n#### 代码实现\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"path/filepath\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\ntype KubernetesCrdExec interface {\n\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error)\n\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error)\n\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error)\n\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error\n}\n\ntype Alertmanager struct{}\n\nfunc main() {\n\tresource := schema.GroupVersionResource{\n\t\tGroup:    \"monitoring.coreos.com\",\n\t\tVersion:  \"v1\",\n\t\tResource: \"alertmanagers\", // 这里必须是复数形式\n\t}\n\n\tnamespace := \"default\"\n\tname := \"my-alertmanager\"\n\n\tdynamicClient, err := getClient()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar crd KubernetesCrdExec\n\tcrd = Alertmanager{}\n\n\tresult, err := crd.Get(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"])\n\n\tresultLists, err := crd.List(dynamicClient, resource, namespace)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, item := range resultLists.Items {\n\t\tname := item.Object[\"metadata\"].(map[string]interface{})[\"name\"]\n\t\tnamespace := item.Object[\"metadata\"].(map[string]interface{})[\"namespace\"]\n\t\tfmt.Printf(\"%v/%v\\n\", namespace, name)\n\t}\n\n\t// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093\n\tresult.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"] = \"http://127.0.0.1:9093\"\n\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\terr = crd.Delete(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (Alertmanager) Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n}\n\nfunc (Alertmanager) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})\n}\n\nfunc (Alertmanager) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions{})\n}\n\nfunc (Alertmanager) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})\n}\n\nfunc getClient() (dynamic.Interface, error) {\n\tkubeconfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn dynamic.NewForConfig(config)\n}\n```","source":"_posts/k8s/使用client-go操作自定义CRD.md","raw":"---\nlayout: k8s\ntitle: 使用client-go操作自定义CRD\ndate: 2023-07-25 17:18:17\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n\n简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。\n\n个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。\n\n{% endnote %}\n<!-- more -->\n\n#### 代码实现\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"path/filepath\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\ntype KubernetesCrdExec interface {\n\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error)\n\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error)\n\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error)\n\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error\n}\n\ntype Alertmanager struct{}\n\nfunc main() {\n\tresource := schema.GroupVersionResource{\n\t\tGroup:    \"monitoring.coreos.com\",\n\t\tVersion:  \"v1\",\n\t\tResource: \"alertmanagers\", // 这里必须是复数形式\n\t}\n\n\tnamespace := \"default\"\n\tname := \"my-alertmanager\"\n\n\tdynamicClient, err := getClient()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar crd KubernetesCrdExec\n\tcrd = Alertmanager{}\n\n\tresult, err := crd.Get(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"])\n\n\tresultLists, err := crd.List(dynamicClient, resource, namespace)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, item := range resultLists.Items {\n\t\tname := item.Object[\"metadata\"].(map[string]interface{})[\"name\"]\n\t\tnamespace := item.Object[\"metadata\"].(map[string]interface{})[\"namespace\"]\n\t\tfmt.Printf(\"%v/%v\\n\", namespace, name)\n\t}\n\n\t// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093\n\tresult.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"] = \"http://127.0.0.1:9093\"\n\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\terr = crd.Delete(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (Alertmanager) Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n}\n\nfunc (Alertmanager) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})\n}\n\nfunc (Alertmanager) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions{})\n}\n\nfunc (Alertmanager) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})\n}\n\nfunc getClient() (dynamic.Interface, error) {\n\tkubeconfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn dynamic.NewForConfig(config)\n}\n```","slug":"k8s/使用client-go操作自定义CRD","published":1,"updated":"2023-08-23T09:19:05.445Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa2001j384wgfmlaahq","content":"<div class=\"note note-primary\">\n            <p>简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。</p><p>个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。</p>\n          </div>\n<span id=\"more\"></span>\n\n<h4><span id=\"代码实现\">代码实现</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;path/filepath&quot;</span><br><br>\tmetav1 <span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/dynamic&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/util/homedir&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> KubernetesCrdExec <span class=\"hljs-keyword\">interface</span> &#123;<br>\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>)<br>\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Alertmanager <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresource := schema.GroupVersionResource&#123;<br>\t\tGroup:    <span class=\"hljs-string\">&quot;monitoring.coreos.com&quot;</span>,<br>\t\tVersion:  <span class=\"hljs-string\">&quot;v1&quot;</span>,<br>\t\tResource: <span class=\"hljs-string\">&quot;alertmanagers&quot;</span>, <span class=\"hljs-comment\">// 这里必须是复数形式</span><br>\t&#125;<br><br>\tnamespace := <span class=\"hljs-string\">&quot;default&quot;</span><br>\tname := <span class=\"hljs-string\">&quot;my-alertmanager&quot;</span><br><br>\tdynamicClient, err := getClient()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err.Error())<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> crd KubernetesCrdExec<br>\tcrd = Alertmanager&#123;&#125;<br><br>\tresult, err := crd.Get(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tfmt.Println(result.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>])<br><br>\tresultLists, err := crd.List(dynamicClient, resource, namespace)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> resultLists.Items &#123;<br>\t\tname := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;name&quot;</span>]<br>\t\tnamespace := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;namespace&quot;</span>]<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%v/%v\\n&quot;</span>, namespace, name)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093</span><br>\tresult.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>] = <span class=\"hljs-string\">&quot;http://127.0.0.1:9093&quot;</span><br>\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\terr = crd.Delete(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getClient</span><span class=\"hljs-params\">()</span></span> (dynamic.Interface, <span class=\"hljs-type\">error</span>) &#123;<br>\tkubeconfig := filepath.Join(homedir.HomeDir(), <span class=\"hljs-string\">&quot;.kube&quot;</span>, <span class=\"hljs-string\">&quot;config&quot;</span>)<br>\tconfig, err := clientcmd.BuildConfigFromFlags(<span class=\"hljs-string\">&quot;&quot;</span>, kubeconfig)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> dynamic.NewForConfig(config)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。</p><p>个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。</p>\n          </div>","more":"<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;path/filepath&quot;</span><br><br>\tmetav1 <span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/dynamic&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/util/homedir&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> KubernetesCrdExec <span class=\"hljs-keyword\">interface</span> &#123;<br>\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>)<br>\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Alertmanager <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresource := schema.GroupVersionResource&#123;<br>\t\tGroup:    <span class=\"hljs-string\">&quot;monitoring.coreos.com&quot;</span>,<br>\t\tVersion:  <span class=\"hljs-string\">&quot;v1&quot;</span>,<br>\t\tResource: <span class=\"hljs-string\">&quot;alertmanagers&quot;</span>, <span class=\"hljs-comment\">// 这里必须是复数形式</span><br>\t&#125;<br><br>\tnamespace := <span class=\"hljs-string\">&quot;default&quot;</span><br>\tname := <span class=\"hljs-string\">&quot;my-alertmanager&quot;</span><br><br>\tdynamicClient, err := getClient()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err.Error())<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> crd KubernetesCrdExec<br>\tcrd = Alertmanager&#123;&#125;<br><br>\tresult, err := crd.Get(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tfmt.Println(result.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>])<br><br>\tresultLists, err := crd.List(dynamicClient, resource, namespace)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> resultLists.Items &#123;<br>\t\tname := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;name&quot;</span>]<br>\t\tnamespace := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;namespace&quot;</span>]<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%v/%v\\n&quot;</span>, namespace, name)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093</span><br>\tresult.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>] = <span class=\"hljs-string\">&quot;http://127.0.0.1:9093&quot;</span><br>\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\terr = crd.Delete(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getClient</span><span class=\"hljs-params\">()</span></span> (dynamic.Interface, <span class=\"hljs-type\">error</span>) &#123;<br>\tkubeconfig := filepath.Join(homedir.HomeDir(), <span class=\"hljs-string\">&quot;.kube&quot;</span>, <span class=\"hljs-string\">&quot;config&quot;</span>)<br>\tconfig, err := clientcmd.BuildConfigFromFlags(<span class=\"hljs-string\">&quot;&quot;</span>, kubeconfig)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> dynamic.NewForConfig(config)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"使用kubeadm安装集群","date":"2023-07-26T02:09:12.000Z","_content":"\n{% note primary%}\n\n目前最主流的安装方式，使用kubeadm安装集群。\n\n{% endnote %}\n\n<!-- more -->\n\n## 图解k8s\n![master-worker](master-worker.png)\n## 1. containerd\n**1.1 使用 tar 包安装**\n[下载地址](https://github.com/containerd/containerd/releases)\n\n```sh\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\nmkdir -p /usr/local/lib/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nmv containerd.service /usr/local/lib/systemd/system/containerd.service\nsystemctl daemon-reload\nsystemctl enable --now containerd\n```\n\n**1.2 rpm、deb 包安装**\n- Centos [下载地址](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n- Ubuntu [下载地址](https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64)\n\n## 2. runc\n\n[下载地址](https://github.com/opencontainers/runc/releases)\n\n```sh\nwget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n## 3. ctrctl\n\n[下载地址](https://github.com/kubernetes-sigs/cri-tools/releases)\n\n```sh\n# 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags\nVERSION=\"v1.26.0\" # check latest version in /releases page\ncurl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz\nsudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin\nrm -f crictl-$VERSION-linux-amd64.tar.gz\n```\n\n**3.1 ctrctl 报错文件找不到**\n* 不同的部署方式，文件路径可能不同。\n\n```sh\n# 以 k3s 为例，指定 .sock 文件\ncrictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a\n```\n\n**3.2 查看 ctrctl 配置**\n```sh\ncat /etc/crictl.yaml\n```\n\n## 4. kubeadm、kubelet、kubectl\n```sh\nDOWNLOAD_DIR=\"/usr/local/bin\"\nsudo mkdir -p \"$DOWNLOAD_DIR\"\n\n# 安装最新版\nRELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n\n# 安装指定版本\n# RELEASE=\"v1.26.7\"\n\nARCH=\"amd64\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\nRELEASE_VERSION=\"v0.15.1\"\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n# 激活并启动 kubelet\nsystemctl enable --now kubelet\n```\n\n## 5. conntrack\n```sh\nyum install conntrack-tools -y\n```\n\n**测试**\n```sh\nconntrack -L\n```\n\n## 6. 设置内核参数\n\n{% note primary %}\n如果不设置参数，使用 kubeadm join 时可能会导致报错。\n{% endnote %}\n\n```log\nW0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH\n\t[WARNING FileExisting-socat]: socat not found in system path\nerror execution phase preflight: [preflight] Some fatal errors occurred:\n\t[ERROR FileExisting-crictl]: crictl not found in system path\n\t[ERROR FileExisting-conntrack]: conntrack not found in system path\n\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\n```\n\n### 6.1 加载 bridge 内核模块\n\n查看是否加载 br_netfilter 模块\n```sh\nlsmod | grep br_netfilter\n```\n\n如果没加载执行\n```sh\nsudo modprobe br_netfilter\n```\n\n### 6.2 更改内核参数\n\n打开 /etc/sysctl.conf 文件\n\n```sh\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\n```\n\n#### 6.3 重新加载 sysctl 配置\n```sh\nsysctl -p\n```\n\n## 7. 部署集群\n\n### 7.1 master\n```sh\nkubeadm init --v=5\n```\n\n\n此时，正常情况下你应该看到master安装成功提示\n```log\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.2 node\n```sh\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.3 参数说明\n```sh\n# 指定版本\n--kubernetes-version=v1.26.7\n\n# 指定镜像源为阿里\n--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers\n\n# 指定pod网段\n--pod-network-cidr=10.244.0.0/16\n```\n\n### 7.4 重新生成 token\n\n当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。\n\n```sh\nsudo kubeadm token create --print-join-command\n```\n### 7.5 查看 token\n```sh\nsudo kubeadm token list\n```\n\n## 8. kubeconfig 配置文件\n默认生成的 kubeconfig 文件在 /etc/kubernetes/admin.conf\n\n```sh\nmkdir $HOME/.kube\ncp /etc/kubernetes/admin.conf $HOME/.kube/config\nkubectl get no\n```\n\n## 9. 安装网络插件\n{% note danger %}\n不安装官方插件会报错，忘记了什么原因导致的。\n{% endnote %}\n\n### 9.1 先安装官方插件\n[下载地址](https://github.com/containernetworking/plugins/releases)\n```sh\nwget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz\ntar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin\nrm -f cni-plugins-linux-amd64-v1.3.0.tgz\n```\n### 9.2 安装 flannel 或 calico\n```sh\n# flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n```sh\n# calico\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n```\n\n安装完{% label default @cni %}后，此时{% label default @coredns %}应该为 {% label success @running %}\n\n#### 9.2.1 查看flannel模式\n\n{% label success @flannel %} 默认的模式为 {% label primary @vxlan %}，如果需要修改，可以修改 {% label default @configmap %}  {% label default @kube-flannel-cfg %}\n\n```sh\nkubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml\n```\n\n#### 9.2.2 创建测试pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```","source":"_posts/k8s/使用kubeadm安装集群.md","raw":"---\nlayout: k8s\ntitle: 使用kubeadm安装集群\ndate: 2023-07-26 10:09:12\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n\n目前最主流的安装方式，使用kubeadm安装集群。\n\n{% endnote %}\n\n<!-- more -->\n\n## 图解k8s\n![master-worker](master-worker.png)\n## 1. containerd\n**1.1 使用 tar 包安装**\n[下载地址](https://github.com/containerd/containerd/releases)\n\n```sh\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\nmkdir -p /usr/local/lib/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nmv containerd.service /usr/local/lib/systemd/system/containerd.service\nsystemctl daemon-reload\nsystemctl enable --now containerd\n```\n\n**1.2 rpm、deb 包安装**\n- Centos [下载地址](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n- Ubuntu [下载地址](https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64)\n\n## 2. runc\n\n[下载地址](https://github.com/opencontainers/runc/releases)\n\n```sh\nwget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n## 3. ctrctl\n\n[下载地址](https://github.com/kubernetes-sigs/cri-tools/releases)\n\n```sh\n# 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags\nVERSION=\"v1.26.0\" # check latest version in /releases page\ncurl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz\nsudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin\nrm -f crictl-$VERSION-linux-amd64.tar.gz\n```\n\n**3.1 ctrctl 报错文件找不到**\n* 不同的部署方式，文件路径可能不同。\n\n```sh\n# 以 k3s 为例，指定 .sock 文件\ncrictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a\n```\n\n**3.2 查看 ctrctl 配置**\n```sh\ncat /etc/crictl.yaml\n```\n\n## 4. kubeadm、kubelet、kubectl\n```sh\nDOWNLOAD_DIR=\"/usr/local/bin\"\nsudo mkdir -p \"$DOWNLOAD_DIR\"\n\n# 安装最新版\nRELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n\n# 安装指定版本\n# RELEASE=\"v1.26.7\"\n\nARCH=\"amd64\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\nRELEASE_VERSION=\"v0.15.1\"\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n# 激活并启动 kubelet\nsystemctl enable --now kubelet\n```\n\n## 5. conntrack\n```sh\nyum install conntrack-tools -y\n```\n\n**测试**\n```sh\nconntrack -L\n```\n\n## 6. 设置内核参数\n\n{% note primary %}\n如果不设置参数，使用 kubeadm join 时可能会导致报错。\n{% endnote %}\n\n```log\nW0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH\n\t[WARNING FileExisting-socat]: socat not found in system path\nerror execution phase preflight: [preflight] Some fatal errors occurred:\n\t[ERROR FileExisting-crictl]: crictl not found in system path\n\t[ERROR FileExisting-conntrack]: conntrack not found in system path\n\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\n```\n\n### 6.1 加载 bridge 内核模块\n\n查看是否加载 br_netfilter 模块\n```sh\nlsmod | grep br_netfilter\n```\n\n如果没加载执行\n```sh\nsudo modprobe br_netfilter\n```\n\n### 6.2 更改内核参数\n\n打开 /etc/sysctl.conf 文件\n\n```sh\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\n```\n\n#### 6.3 重新加载 sysctl 配置\n```sh\nsysctl -p\n```\n\n## 7. 部署集群\n\n### 7.1 master\n```sh\nkubeadm init --v=5\n```\n\n\n此时，正常情况下你应该看到master安装成功提示\n```log\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.2 node\n```sh\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.3 参数说明\n```sh\n# 指定版本\n--kubernetes-version=v1.26.7\n\n# 指定镜像源为阿里\n--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers\n\n# 指定pod网段\n--pod-network-cidr=10.244.0.0/16\n```\n\n### 7.4 重新生成 token\n\n当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。\n\n```sh\nsudo kubeadm token create --print-join-command\n```\n### 7.5 查看 token\n```sh\nsudo kubeadm token list\n```\n\n## 8. kubeconfig 配置文件\n默认生成的 kubeconfig 文件在 /etc/kubernetes/admin.conf\n\n```sh\nmkdir $HOME/.kube\ncp /etc/kubernetes/admin.conf $HOME/.kube/config\nkubectl get no\n```\n\n## 9. 安装网络插件\n{% note danger %}\n不安装官方插件会报错，忘记了什么原因导致的。\n{% endnote %}\n\n### 9.1 先安装官方插件\n[下载地址](https://github.com/containernetworking/plugins/releases)\n```sh\nwget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz\ntar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin\nrm -f cni-plugins-linux-amd64-v1.3.0.tgz\n```\n### 9.2 安装 flannel 或 calico\n```sh\n# flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n```sh\n# calico\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n```\n\n安装完{% label default @cni %}后，此时{% label default @coredns %}应该为 {% label success @running %}\n\n#### 9.2.1 查看flannel模式\n\n{% label success @flannel %} 默认的模式为 {% label primary @vxlan %}，如果需要修改，可以修改 {% label default @configmap %}  {% label default @kube-flannel-cfg %}\n\n```sh\nkubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml\n```\n\n#### 9.2.2 创建测试pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```","slug":"k8s/使用kubeadm安装集群","published":1,"updated":"2023-08-23T09:19:05.445Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa2001n384wdbc53h0a","content":"<div class=\"note note-primary\">\n            <p>目前最主流的安装方式，使用kubeadm安装集群。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2><span id=\"图解k8s\">图解k8s</span></h2><p><img src=\"master-worker.png\" alt=\"master-worker\"></p>\n<h2><span id=\"1-containerd\">1. containerd</span></h2><p><strong>1.1 使用 tar 包安装</strong><br><a href=\"https://github.com/containerd/containerd/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz<br>tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz<br><span class=\"hljs-built_in\">mkdir</span> -p /usr/local/lib/systemd/system<br>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service<br><span class=\"hljs-built_in\">mv</span> containerd.service /usr/local/lib/systemd/system/containerd.service<br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br></code></pre></td></tr></table></figure>\n\n<p><strong>1.2 rpm、deb 包安装</strong></p>\n<ul>\n<li>Centos <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\">下载地址</a></li>\n<li>Ubuntu <a href=\"https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64\">下载地址</a></li>\n</ul>\n<h2><span id=\"2-runc\">2. runc</span></h2><p><a href=\"https://github.com/opencontainers/runc/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64<br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-ctrctl\">3. ctrctl</span></h2><p><a href=\"https://github.com/kubernetes-sigs/cri-tools/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags</span><br>VERSION=<span class=\"hljs-string\">&quot;v1.26.0&quot;</span> <span class=\"hljs-comment\"># check latest version in /releases page</span><br>curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$VERSION</span>/crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz --output crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz<br>sudo tar zxvf crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin<br><span class=\"hljs-built_in\">rm</span> -f crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.1 ctrctl 报错文件找不到</strong></p>\n<ul>\n<li>不同的部署方式，文件路径可能不同。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以 k3s 为例，指定 .sock 文件</span><br>crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.2 查看 ctrctl 配置</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/crictl.yaml<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"4-kubeadm-kubelet-kubectl\">4. kubeadm、kubelet、kubectl</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br>sudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装最新版</span><br>RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装指定版本</span><br><span class=\"hljs-comment\"># RELEASE=&quot;v1.26.7&quot;</span><br><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br>sudo curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet,kubectl&#125;<br>sudo <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet,kubectl&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.15.1&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br>sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br><br><span class=\"hljs-comment\"># 激活并启动 kubelet</span><br>systemctl <span class=\"hljs-built_in\">enable</span> --now kubelet<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"5-conntrack\">5. conntrack</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum install conntrack-tools -y<br></code></pre></td></tr></table></figure>\n\n<p><strong>测试</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">conntrack -L<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"6-设置内核参数\">6. 设置内核参数</span></h2><div class=\"note note-primary\">\n            <p>如果不设置参数，使用 kubeadm join 时可能会导致报错。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">W0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH<br>\t[WARNING FileExisting-socat]: socat not found in system path<br>error execution phase preflight: [preflight] Some fatal errors occurred:<br>\t[ERROR FileExisting-crictl]: crictl not found in system path<br>\t[ERROR FileExisting-conntrack]: conntrack not found in system path<br>\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist<br>\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1<br>[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"61-加载-bridge-内核模块\">6.1 加载 bridge 内核模块</span></h3><p>查看是否加载 br_netfilter 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsmod | grep br_netfilter<br></code></pre></td></tr></table></figure>\n\n<p>如果没加载执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo modprobe br_netfilter<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"62-更改内核参数\">6.2 更改内核参数</span></h3><p>打开 &#x2F;etc&#x2F;sysctl.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"63-重新加载-sysctl-配置\">6.3 重新加载 sysctl 配置</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl -p<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"7-部署集群\">7. 部署集群</span></h2><h3><span id=\"71-master\">7.1 master</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm init --v=5<br></code></pre></td></tr></table></figure>\n\n\n<p>此时，正常情况下你应该看到master安装成功提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">kubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3><span id=\"72-node\">7.2 node</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm <span class=\"hljs-built_in\">join</span> 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3><span id=\"73-参数说明\">7.3 参数说明</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 指定版本</span><br>--kubernetes-version=v1.26.7<br><br><span class=\"hljs-comment\"># 指定镜像源为阿里</span><br>--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class=\"hljs-comment\"># 指定pod网段</span><br>--pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure>\n\n<h3><span id=\"74-重新生成-token\">7.4 重新生成 token</span></h3><p>当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token create --print-join-command<br></code></pre></td></tr></table></figure>\n<h3><span id=\"75-查看-token\">7.5 查看 token</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token list<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"8-kubeconfig-配置文件\">8. kubeconfig 配置文件</span></h2><p>默认生成的 kubeconfig 文件在 &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-variable\">$HOME</span>/.kube<br><span class=\"hljs-built_in\">cp</span> /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config<br>kubectl get no<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"9-安装网络插件\">9. 安装网络插件</span></h2><div class=\"note note-danger\">\n            <p>不安装官方插件会报错，忘记了什么原因导致的。</p>\n          </div>\n\n<h3><span id=\"91-先安装官方插件\">9.1 先安装官方插件</span></h3><p><a href=\"https://github.com/containernetworking/plugins/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz<br>tar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin<br><span class=\"hljs-built_in\">rm</span> -f cni-plugins-linux-amd64-v1.3.0.tgz<br></code></pre></td></tr></table></figure>\n<h3><span id=\"92-安装-flannel-或-calico\">9.2 安装 flannel 或 calico</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># flannel</span><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># calico</span><br>kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br></code></pre></td></tr></table></figure>\n\n<p>安装完<span class=\"label label-default\">cni</span>后，此时<span class=\"label label-default\">coredns</span>应该为 <span class=\"label label-success\">running</span></p>\n<h4><span id=\"921-查看flannel模式\">9.2.1 查看flannel模式</span></h4><span class=\"label label-success\">flannel</span> 默认的模式为 <span class=\"label label-primary\">vxlan</span>，如果需要修改，可以修改 <span class=\"label label-default\">configmap</span>  <span class=\"label label-default\">kube-flannel-cfg</span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"922-创建测试pod\">9.2.2 创建测试pod</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前最主流的安装方式，使用kubeadm安装集群。</p>\n          </div>","more":"<h2 id=\"图解k8s\"><a href=\"#图解k8s\" class=\"headerlink\" title=\"图解k8s\"></a>图解k8s</h2><p><img src=\"master-worker.png\" alt=\"master-worker\"></p>\n<h2 id=\"1-containerd\"><a href=\"#1-containerd\" class=\"headerlink\" title=\"1. containerd\"></a>1. containerd</h2><p><strong>1.1 使用 tar 包安装</strong><br><a href=\"https://github.com/containerd/containerd/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz<br>tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz<br><span class=\"hljs-built_in\">mkdir</span> -p /usr/local/lib/systemd/system<br>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service<br><span class=\"hljs-built_in\">mv</span> containerd.service /usr/local/lib/systemd/system/containerd.service<br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br></code></pre></td></tr></table></figure>\n\n<p><strong>1.2 rpm、deb 包安装</strong></p>\n<ul>\n<li>Centos <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\">下载地址</a></li>\n<li>Ubuntu <a href=\"https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64\">下载地址</a></li>\n</ul>\n<h2 id=\"2-runc\"><a href=\"#2-runc\" class=\"headerlink\" title=\"2. runc\"></a>2. runc</h2><p><a href=\"https://github.com/opencontainers/runc/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64<br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-ctrctl\"><a href=\"#3-ctrctl\" class=\"headerlink\" title=\"3. ctrctl\"></a>3. ctrctl</h2><p><a href=\"https://github.com/kubernetes-sigs/cri-tools/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags</span><br>VERSION=<span class=\"hljs-string\">&quot;v1.26.0&quot;</span> <span class=\"hljs-comment\"># check latest version in /releases page</span><br>curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$VERSION</span>/crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz --output crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz<br>sudo tar zxvf crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin<br><span class=\"hljs-built_in\">rm</span> -f crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.1 ctrctl 报错文件找不到</strong></p>\n<ul>\n<li>不同的部署方式，文件路径可能不同。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以 k3s 为例，指定 .sock 文件</span><br>crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.2 查看 ctrctl 配置</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/crictl.yaml<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-kubeadm、kubelet、kubectl\"><a href=\"#4-kubeadm、kubelet、kubectl\" class=\"headerlink\" title=\"4. kubeadm、kubelet、kubectl\"></a>4. kubeadm、kubelet、kubectl</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br>sudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装最新版</span><br>RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装指定版本</span><br><span class=\"hljs-comment\"># RELEASE=&quot;v1.26.7&quot;</span><br><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br>sudo curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet,kubectl&#125;<br>sudo <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet,kubectl&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.15.1&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br>sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br><br><span class=\"hljs-comment\"># 激活并启动 kubelet</span><br>systemctl <span class=\"hljs-built_in\">enable</span> --now kubelet<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-conntrack\"><a href=\"#5-conntrack\" class=\"headerlink\" title=\"5. conntrack\"></a>5. conntrack</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum install conntrack-tools -y<br></code></pre></td></tr></table></figure>\n\n<p><strong>测试</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">conntrack -L<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置内核参数\"><a href=\"#6-设置内核参数\" class=\"headerlink\" title=\"6. 设置内核参数\"></a>6. 设置内核参数</h2><div class=\"note note-primary\">\n            <p>如果不设置参数，使用 kubeadm join 时可能会导致报错。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">W0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH<br>\t[WARNING FileExisting-socat]: socat not found in system path<br>error execution phase preflight: [preflight] Some fatal errors occurred:<br>\t[ERROR FileExisting-crictl]: crictl not found in system path<br>\t[ERROR FileExisting-conntrack]: conntrack not found in system path<br>\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist<br>\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1<br>[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-加载-bridge-内核模块\"><a href=\"#6-1-加载-bridge-内核模块\" class=\"headerlink\" title=\"6.1 加载 bridge 内核模块\"></a>6.1 加载 bridge 内核模块</h3><p>查看是否加载 br_netfilter 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsmod | grep br_netfilter<br></code></pre></td></tr></table></figure>\n\n<p>如果没加载执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo modprobe br_netfilter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-更改内核参数\"><a href=\"#6-2-更改内核参数\" class=\"headerlink\" title=\"6.2 更改内核参数\"></a>6.2 更改内核参数</h3><p>打开 &#x2F;etc&#x2F;sysctl.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-3-重新加载-sysctl-配置\"><a href=\"#6-3-重新加载-sysctl-配置\" class=\"headerlink\" title=\"6.3 重新加载 sysctl 配置\"></a>6.3 重新加载 sysctl 配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl -p<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-部署集群\"><a href=\"#7-部署集群\" class=\"headerlink\" title=\"7. 部署集群\"></a>7. 部署集群</h2><h3 id=\"7-1-master\"><a href=\"#7-1-master\" class=\"headerlink\" title=\"7.1 master\"></a>7.1 master</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm init --v=5<br></code></pre></td></tr></table></figure>\n\n\n<p>此时，正常情况下你应该看到master安装成功提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">kubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-2-node\"><a href=\"#7-2-node\" class=\"headerlink\" title=\"7.2 node\"></a>7.2 node</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm <span class=\"hljs-built_in\">join</span> 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-3-参数说明\"><a href=\"#7-3-参数说明\" class=\"headerlink\" title=\"7.3 参数说明\"></a>7.3 参数说明</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 指定版本</span><br>--kubernetes-version=v1.26.7<br><br><span class=\"hljs-comment\"># 指定镜像源为阿里</span><br>--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class=\"hljs-comment\"># 指定pod网段</span><br>--pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-重新生成-token\"><a href=\"#7-4-重新生成-token\" class=\"headerlink\" title=\"7.4 重新生成 token\"></a>7.4 重新生成 token</h3><p>当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token create --print-join-command<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-5-查看-token\"><a href=\"#7-5-查看-token\" class=\"headerlink\" title=\"7.5 查看 token\"></a>7.5 查看 token</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token list<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-kubeconfig-配置文件\"><a href=\"#8-kubeconfig-配置文件\" class=\"headerlink\" title=\"8. kubeconfig 配置文件\"></a>8. kubeconfig 配置文件</h2><p>默认生成的 kubeconfig 文件在 &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-variable\">$HOME</span>/.kube<br><span class=\"hljs-built_in\">cp</span> /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config<br>kubectl get no<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"9-安装网络插件\"><a href=\"#9-安装网络插件\" class=\"headerlink\" title=\"9. 安装网络插件\"></a>9. 安装网络插件</h2><div class=\"note note-danger\">\n            <p>不安装官方插件会报错，忘记了什么原因导致的。</p>\n          </div>\n\n<h3 id=\"9-1-先安装官方插件\"><a href=\"#9-1-先安装官方插件\" class=\"headerlink\" title=\"9.1 先安装官方插件\"></a>9.1 先安装官方插件</h3><p><a href=\"https://github.com/containernetworking/plugins/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz<br>tar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin<br><span class=\"hljs-built_in\">rm</span> -f cni-plugins-linux-amd64-v1.3.0.tgz<br></code></pre></td></tr></table></figure>\n<h3 id=\"9-2-安装-flannel-或-calico\"><a href=\"#9-2-安装-flannel-或-calico\" class=\"headerlink\" title=\"9.2 安装 flannel 或 calico\"></a>9.2 安装 flannel 或 calico</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># flannel</span><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># calico</span><br>kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br></code></pre></td></tr></table></figure>\n\n<p>安装完<span class=\"label label-default\">cni</span>后，此时<span class=\"label label-default\">coredns</span>应该为 <span class=\"label label-success\">running</span></p>\n<h4 id=\"9-2-1-查看flannel模式\"><a href=\"#9-2-1-查看flannel模式\" class=\"headerlink\" title=\"9.2.1 查看flannel模式\"></a>9.2.1 查看flannel模式</h4><span class=\"label label-success\">flannel</span> 默认的模式为 <span class=\"label label-primary\">vxlan</span>，如果需要修改，可以修改 <span class=\"label label-default\">configmap</span>  <span class=\"label label-default\">kube-flannel-cfg</span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"9-2-2-创建测试pod\"><a href=\"#9-2-2-创建测试pod\" class=\"headerlink\" title=\"9.2.2 创建测试pod\"></a>9.2.2 创建测试pod</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"安装kubectl快捷命令","date":"2023-07-23T07:12:24.000Z","_content":"\n## 1. 简介\n\n{% note primary %}\nk8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。\n\n{% endnote %}\n\n<!-- more -->\n\n默认快捷命令保存在 ~/.bashrc 文件。\n\n## 2. 安装\n\n你可以通过该命令一键安装\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -\n```\n\n如果你的环境默认并不是 {% label primary @~/.bashrc %}，可以通过下面的命令\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```\nsource ~/.bashrc\n```\n\n## 3. 测试\n\n```sh\n# 获取pod\n$ p\nNAME                              READY   STATUS    RESTARTS   AGE\ntest-deployment-d5b769945-q29d4   1/1     Running   0          6d7h\n\n# 进入pod\n$ ke test-deployment-d5b769945-q29d4\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n\n# 查看日志\n$ kl\n\n# 查看帮助\n$ kh\nalias k=\"kubectl\"\nalias kk=\"kubectl -n kube-system\"\nalias kl=\"kubectl logs -f\"\nalias kd=\"kubectl describe\"\nalias p=\"kubectl get po\"\nalias svc=\"kubectl get svc\"\nalias no=\"kubectl get no\"\nalias pvc=\"kubectl get pvc\"\nalias sa=\"kubectl get sa\"\nalias ds=\"kubectl get ds\"\nalias rs=\"kubectl get rs\"\nalias ep=\"kubectl get ep\"\nke=kubectl exec -it POD_NAME sh\n```\n\n{% note primary %}\n至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。\n{% endnote %}\n\n## 4. 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}\n\n## 5. kubens、kubectx\n\n### 5.1 安装\n安装脚本\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -\n```\n\n你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色\n\n```sh\n# vim ~/.bashrc\n# 颜色对照表参考: https://github.com/medikoo/cli-color\nexport KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text\nexport KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background\n```\n### 5.2 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}","source":"_posts/k8s/安装kubectl快捷命令.md","raw":"---\nlayout: k8s\ntitle: 安装kubectl快捷命令\ndate: 2023-07-23 15:12:24\ntags: [kubectl,alias,k8s]\ncategories: k8s\n---\n\n## 1. 简介\n\n{% note primary %}\nk8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。\n\n{% endnote %}\n\n<!-- more -->\n\n默认快捷命令保存在 ~/.bashrc 文件。\n\n## 2. 安装\n\n你可以通过该命令一键安装\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -\n```\n\n如果你的环境默认并不是 {% label primary @~/.bashrc %}，可以通过下面的命令\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```\nsource ~/.bashrc\n```\n\n## 3. 测试\n\n```sh\n# 获取pod\n$ p\nNAME                              READY   STATUS    RESTARTS   AGE\ntest-deployment-d5b769945-q29d4   1/1     Running   0          6d7h\n\n# 进入pod\n$ ke test-deployment-d5b769945-q29d4\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n\n# 查看日志\n$ kl\n\n# 查看帮助\n$ kh\nalias k=\"kubectl\"\nalias kk=\"kubectl -n kube-system\"\nalias kl=\"kubectl logs -f\"\nalias kd=\"kubectl describe\"\nalias p=\"kubectl get po\"\nalias svc=\"kubectl get svc\"\nalias no=\"kubectl get no\"\nalias pvc=\"kubectl get pvc\"\nalias sa=\"kubectl get sa\"\nalias ds=\"kubectl get ds\"\nalias rs=\"kubectl get rs\"\nalias ep=\"kubectl get ep\"\nke=kubectl exec -it POD_NAME sh\n```\n\n{% note primary %}\n至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。\n{% endnote %}\n\n## 4. 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}\n\n## 5. kubens、kubectx\n\n### 5.1 安装\n安装脚本\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -\n```\n\n你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色\n\n```sh\n# vim ~/.bashrc\n# 颜色对照表参考: https://github.com/medikoo/cli-color\nexport KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text\nexport KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background\n```\n### 5.2 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}","slug":"k8s/安装kubectl快捷命令","published":1,"updated":"2023-08-23T09:19:05.445Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa2001o384w1zmugk7z","content":"<h2><span id=\"1-简介\">1. 简介</span></h2><div class=\"note note-primary\">\n            <p>k8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p>默认快捷命令保存在 ~&#x2F;.bashrc 文件。</p>\n<h2><span id=\"2-安装\">2. 安装</span></h2><p>你可以通过该命令一键安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的环境默认并不是 <span class=\"label label-primary\">~/.bashrc</span>，可以通过下面的命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"3-测试\">3. 测试</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 获取pod</span><br>$ p<br>NAME                              READY   STATUS    RESTARTS   AGE<br>test-deployment-d5b769945-q29d4   1/1     Running   0          6d7h<br><br><span class=\"hljs-comment\"># 进入pod</span><br>$ ke test-deployment-d5b769945-q29d4<br>kubectl <span class=\"hljs-built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"hljs-keyword\">in</span> a future version. Use kubectl <span class=\"hljs-built_in\">exec</span> [POD] -- [COMMAND] instead.<br><br><span class=\"hljs-comment\"># 查看日志</span><br>$ kl<br><br><span class=\"hljs-comment\"># 查看帮助</span><br>$ kh<br><span class=\"hljs-built_in\">alias</span> k=<span class=\"hljs-string\">&quot;kubectl&quot;</span><br><span class=\"hljs-built_in\">alias</span> kk=<span class=\"hljs-string\">&quot;kubectl -n kube-system&quot;</span><br><span class=\"hljs-built_in\">alias</span> kl=<span class=\"hljs-string\">&quot;kubectl logs -f&quot;</span><br><span class=\"hljs-built_in\">alias</span> kd=<span class=\"hljs-string\">&quot;kubectl describe&quot;</span><br><span class=\"hljs-built_in\">alias</span> p=<span class=\"hljs-string\">&quot;kubectl get po&quot;</span><br><span class=\"hljs-built_in\">alias</span> svc=<span class=\"hljs-string\">&quot;kubectl get svc&quot;</span><br><span class=\"hljs-built_in\">alias</span> no=<span class=\"hljs-string\">&quot;kubectl get no&quot;</span><br><span class=\"hljs-built_in\">alias</span> pvc=<span class=\"hljs-string\">&quot;kubectl get pvc&quot;</span><br><span class=\"hljs-built_in\">alias</span> sa=<span class=\"hljs-string\">&quot;kubectl get sa&quot;</span><br><span class=\"hljs-built_in\">alias</span> ds=<span class=\"hljs-string\">&quot;kubectl get ds&quot;</span><br><span class=\"hljs-built_in\">alias</span> rs=<span class=\"hljs-string\">&quot;kubectl get rs&quot;</span><br><span class=\"hljs-built_in\">alias</span> ep=<span class=\"hljs-string\">&quot;kubectl get ep&quot;</span><br>ke=kubectl <span class=\"hljs-built_in\">exec</span> -it POD_NAME sh<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-primary\">\n            <p>至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。</p>\n          </div>\n\n<h2><span id=\"4-卸载\">4. 卸载</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>\n\n<h2><span id=\"5-kubens-kubectx\">5. kubens、kubectx</span></h2><h3><span id=\"51-安装\">5.1 安装</span></h3><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># vim ~/.bashrc</span><br><span class=\"hljs-comment\"># 颜色对照表参考: https://github.com/medikoo/cli-color</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) <span class=\"hljs-comment\"># blue text</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) <span class=\"hljs-comment\"># white background</span><br></code></pre></td></tr></table></figure>\n<h3><span id=\"52-卸载\">5.2 卸载</span></h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>","site":{"data":{}},"excerpt":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><div class=\"note note-primary\">\n            <p>k8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。</p>\n          </div>","more":"<p>默认快捷命令保存在 ~&#x2F;.bashrc 文件。</p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>你可以通过该命令一键安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的环境默认并不是 <span class=\"label label-primary\">~/.bashrc</span>，可以通过下面的命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 获取pod</span><br>$ p<br>NAME                              READY   STATUS    RESTARTS   AGE<br>test-deployment-d5b769945-q29d4   1/1     Running   0          6d7h<br><br><span class=\"hljs-comment\"># 进入pod</span><br>$ ke test-deployment-d5b769945-q29d4<br>kubectl <span class=\"hljs-built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"hljs-keyword\">in</span> a future version. Use kubectl <span class=\"hljs-built_in\">exec</span> [POD] -- [COMMAND] instead.<br><br><span class=\"hljs-comment\"># 查看日志</span><br>$ kl<br><br><span class=\"hljs-comment\"># 查看帮助</span><br>$ kh<br><span class=\"hljs-built_in\">alias</span> k=<span class=\"hljs-string\">&quot;kubectl&quot;</span><br><span class=\"hljs-built_in\">alias</span> kk=<span class=\"hljs-string\">&quot;kubectl -n kube-system&quot;</span><br><span class=\"hljs-built_in\">alias</span> kl=<span class=\"hljs-string\">&quot;kubectl logs -f&quot;</span><br><span class=\"hljs-built_in\">alias</span> kd=<span class=\"hljs-string\">&quot;kubectl describe&quot;</span><br><span class=\"hljs-built_in\">alias</span> p=<span class=\"hljs-string\">&quot;kubectl get po&quot;</span><br><span class=\"hljs-built_in\">alias</span> svc=<span class=\"hljs-string\">&quot;kubectl get svc&quot;</span><br><span class=\"hljs-built_in\">alias</span> no=<span class=\"hljs-string\">&quot;kubectl get no&quot;</span><br><span class=\"hljs-built_in\">alias</span> pvc=<span class=\"hljs-string\">&quot;kubectl get pvc&quot;</span><br><span class=\"hljs-built_in\">alias</span> sa=<span class=\"hljs-string\">&quot;kubectl get sa&quot;</span><br><span class=\"hljs-built_in\">alias</span> ds=<span class=\"hljs-string\">&quot;kubectl get ds&quot;</span><br><span class=\"hljs-built_in\">alias</span> rs=<span class=\"hljs-string\">&quot;kubectl get rs&quot;</span><br><span class=\"hljs-built_in\">alias</span> ep=<span class=\"hljs-string\">&quot;kubectl get ep&quot;</span><br>ke=kubectl <span class=\"hljs-built_in\">exec</span> -it POD_NAME sh<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-primary\">\n            <p>至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。</p>\n          </div>\n\n<h2 id=\"4-卸载\"><a href=\"#4-卸载\" class=\"headerlink\" title=\"4. 卸载\"></a>4. 卸载</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>\n\n<h2 id=\"5-kubens、kubectx\"><a href=\"#5-kubens、kubectx\" class=\"headerlink\" title=\"5. kubens、kubectx\"></a>5. kubens、kubectx</h2><h3 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h3><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># vim ~/.bashrc</span><br><span class=\"hljs-comment\"># 颜色对照表参考: https://github.com/medikoo/cli-color</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) <span class=\"hljs-comment\"># blue text</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) <span class=\"hljs-comment\"># white background</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"5-2-卸载\"><a href=\"#5-2-卸载\" class=\"headerlink\" title=\"5.2 卸载\"></a>5.2 卸载</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>"},{"layout":"k8s","title":"容器网络接口（CNI）","date":"2023-07-27T06:31:00.000Z","_content":"\n{% note primary %}\n\n详解 cni 中 flannel、calico 的原理实现。\n\n{% endnote %}\n\n<!-- more -->\n\n# 1. CNI交互逻辑\n## 1.1 Pod IP地址分配机制\n![image](pod-allow-ip.png)\n## 1.2 CRI插件与CNI插件的交互\n![cri-cni](cri-cni.png)\n\n## 1.3 CNI插件间的交互\n![cni](cni-plugins.png)\n\n# 2. flannel 3种模式\n\n![flannel](flannel-modes.jpg)\n\nUDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。\n\n## 2.1 vxlan模式\n\nVXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。\n\n### 2.1.1 节点内通信\n\n![flannel-vxlan-1](flannel-vxlan-1.png)\n\n### 2.1.2 跨节点通信\n\n![flannel-vxlan-2](flannel-vxlan-2.png)\n\n**大致过程:**\n- 发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。\n- 接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。\n\n**哪些IP要交由 flannel.1 处理?**\n\nflanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。\n\n**flannel 封包过程**\n   \nVXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。\n\n**原始L2帧**\n要生成原始的L2帧， flannel.1 需要得知：\n\n- 内层源/目的IP地址\n- 内层源/目的MAC地址\n\n内层的源/目的IP地址是已知的，即为PodA/PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。\n内层源/目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：\n\n下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；\n报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。\n\n要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。\n```sh\n# 查看ARP表\n[root@Node1 ~]# ip n | grep flannel.1\n10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT # PERMANENT 表示永不过期\n```\n有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：\n\n![flannel_packet_1.png](flannel-vxlan-3.png)\n\n**外层VXLAN UDP报文**\n要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源/目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。\n\nFDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。\n\n可以使用 bridge fdb show 查看FDB表：\n```sh\n[root@Node1 ~]# bridge fdb show | grep flannel.1\nba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent\n```\n源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。\n```sh\n[root@Node1 ~]# ip -d a show flannel.1\n6: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default\n    link/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0\n    vxlan id 1 local 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535\n    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::3002:78ff:fe2f:2cb/64 scope link\n       valid_lft forever preferred_lft forever\n```\n至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：\n\nFlannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。\n\n\n## 2.2 host-gw模式\n\n![host-gw模式](flannel-host-gw-1.png)\n\n在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要`flannel.1`虚机网卡。 `flanneld` 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中`路由表①`所示。\n\n要使用`host-gw`模式，需要修改 ConfigMap `kube-flannel-cfg` ，将 `Backend.Type` 从 `vxlan`改为`host-gw`，然后重启所有`kube-flannel Pod`即可：\n\n```sh\nkubectl -n kube-flannel edit configmap kube-flannel-cfg\n\n...\n  net-conf.json: |\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"host-gw\" // <- 改成host-gw\n      }\n    }\n...\n```\n\n# 3. calico 两种网络模式\n\n## 3.1 IPIP 模式\n\n#### 3.1.1 概要\nIPIP模式是calico的默认网络架构，calico中用环境变量`CALICO_IPV4POOL_IPIP`来标识是否开启`IPIP Mode`， 如果该变量的值为`Always`那么就是开启`IPIP`，如果关闭需要设置为`Never`(大小写不敏感，代码里有strings.ToLower操作)。\n\n- 从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。\n- 它的作用其实基本上就相当于一个基于IP层的网桥！\n- 一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- ipip 的源代码在内核 net/ipv4/ipip.c 中可以找到。\n\n#### 3.1.2 工作原理\n\n![ipip](calico-ipip-1.png)\n\nCalico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备\n\n在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：\n\n![ipip](calico-ipip-2.png)\n\n## 3.2 BGP 模式\n\n#### 3.2.1 概要\n- 边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。\n- 它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。\n- BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。\n- BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。\n- BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过`IPIP`网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了`tunl0`这个环节。\n\n#### 3.2.2 工作原理\n![bgp](calico-bgp-1.png)\n\n# 参考文章\nhttps://ost.51cto.com/posts/15845\nhttps://juejin.cn/post/6994825163757846565","source":"_posts/k8s/容器网络接口（CNI）.md","raw":"---\nlayout: k8s\ntitle: 容器网络接口（CNI）\ndate: 2023-07-27 14:31:00\ntags: [k8s,cni]\ncategories: k8s\n---\n\n{% note primary %}\n\n详解 cni 中 flannel、calico 的原理实现。\n\n{% endnote %}\n\n<!-- more -->\n\n# 1. CNI交互逻辑\n## 1.1 Pod IP地址分配机制\n![image](pod-allow-ip.png)\n## 1.2 CRI插件与CNI插件的交互\n![cri-cni](cri-cni.png)\n\n## 1.3 CNI插件间的交互\n![cni](cni-plugins.png)\n\n# 2. flannel 3种模式\n\n![flannel](flannel-modes.jpg)\n\nUDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。\n\n## 2.1 vxlan模式\n\nVXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。\n\n### 2.1.1 节点内通信\n\n![flannel-vxlan-1](flannel-vxlan-1.png)\n\n### 2.1.2 跨节点通信\n\n![flannel-vxlan-2](flannel-vxlan-2.png)\n\n**大致过程:**\n- 发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。\n- 接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。\n\n**哪些IP要交由 flannel.1 处理?**\n\nflanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。\n\n**flannel 封包过程**\n   \nVXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。\n\n**原始L2帧**\n要生成原始的L2帧， flannel.1 需要得知：\n\n- 内层源/目的IP地址\n- 内层源/目的MAC地址\n\n内层的源/目的IP地址是已知的，即为PodA/PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。\n内层源/目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：\n\n下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；\n报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。\n\n要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。\n```sh\n# 查看ARP表\n[root@Node1 ~]# ip n | grep flannel.1\n10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT # PERMANENT 表示永不过期\n```\n有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：\n\n![flannel_packet_1.png](flannel-vxlan-3.png)\n\n**外层VXLAN UDP报文**\n要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源/目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。\n\nFDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。\n\n可以使用 bridge fdb show 查看FDB表：\n```sh\n[root@Node1 ~]# bridge fdb show | grep flannel.1\nba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent\n```\n源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。\n```sh\n[root@Node1 ~]# ip -d a show flannel.1\n6: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default\n    link/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0\n    vxlan id 1 local 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535\n    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::3002:78ff:fe2f:2cb/64 scope link\n       valid_lft forever preferred_lft forever\n```\n至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：\n\nFlannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。\n\n\n## 2.2 host-gw模式\n\n![host-gw模式](flannel-host-gw-1.png)\n\n在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要`flannel.1`虚机网卡。 `flanneld` 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中`路由表①`所示。\n\n要使用`host-gw`模式，需要修改 ConfigMap `kube-flannel-cfg` ，将 `Backend.Type` 从 `vxlan`改为`host-gw`，然后重启所有`kube-flannel Pod`即可：\n\n```sh\nkubectl -n kube-flannel edit configmap kube-flannel-cfg\n\n...\n  net-conf.json: |\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"host-gw\" // <- 改成host-gw\n      }\n    }\n...\n```\n\n# 3. calico 两种网络模式\n\n## 3.1 IPIP 模式\n\n#### 3.1.1 概要\nIPIP模式是calico的默认网络架构，calico中用环境变量`CALICO_IPV4POOL_IPIP`来标识是否开启`IPIP Mode`， 如果该变量的值为`Always`那么就是开启`IPIP`，如果关闭需要设置为`Never`(大小写不敏感，代码里有strings.ToLower操作)。\n\n- 从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。\n- 它的作用其实基本上就相当于一个基于IP层的网桥！\n- 一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- ipip 的源代码在内核 net/ipv4/ipip.c 中可以找到。\n\n#### 3.1.2 工作原理\n\n![ipip](calico-ipip-1.png)\n\nCalico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备\n\n在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：\n\n![ipip](calico-ipip-2.png)\n\n## 3.2 BGP 模式\n\n#### 3.2.1 概要\n- 边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。\n- 它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。\n- BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。\n- BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。\n- BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过`IPIP`网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了`tunl0`这个环节。\n\n#### 3.2.2 工作原理\n![bgp](calico-bgp-1.png)\n\n# 参考文章\nhttps://ost.51cto.com/posts/15845\nhttps://juejin.cn/post/6994825163757846565","slug":"k8s/容器网络接口（CNI）","published":1,"updated":"2023-09-06T08:24:38.325Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa3001s384wbykdd8ms","content":"<div class=\"note note-primary\">\n            <p>详解 cni 中 flannel、calico 的原理实现。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h1><span id=\"1-cni交互逻辑\">1. CNI交互逻辑</span></h1><h2><span id=\"11-pod-ip地址分配机制\">1.1 Pod IP地址分配机制</span></h2><p><img src=\"pod-allow-ip.png\" alt=\"image\"></p>\n<h2><span id=\"12-cri插件与cni插件的交互\">1.2 CRI插件与CNI插件的交互</span></h2><p><img src=\"cri-cni.png\" alt=\"cri-cni\"></p>\n<h2><span id=\"13-cni插件间的交互\">1.3 CNI插件间的交互</span></h2><p><img src=\"cni-plugins.png\" alt=\"cni\"></p>\n<h1><span id=\"2-flannel-3种模式\">2. flannel 3种模式</span></h1><p><img src=\"flannel-modes.jpg\" alt=\"flannel\"></p>\n<p>UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。</p>\n<h2><span id=\"21-vxlan模式\">2.1 vxlan模式</span></h2><p>VXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。</p>\n<h3><span id=\"211-节点内通信\">2.1.1 节点内通信</span></h3><p><img src=\"flannel-vxlan-1.png\" alt=\"flannel-vxlan-1\"></p>\n<h3><span id=\"212-跨节点通信\">2.1.2 跨节点通信</span></h3><p><img src=\"flannel-vxlan-2.png\" alt=\"flannel-vxlan-2\"></p>\n<p><strong>大致过程:</strong></p>\n<ul>\n<li>发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。</li>\n<li>接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。</li>\n</ul>\n<p><strong>哪些IP要交由 flannel.1 处理?</strong></p>\n<p>flanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。</p>\n<p><strong>flannel 封包过程</strong></p>\n<p>VXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。</p>\n<p><strong>原始L2帧</strong><br>要生成原始的L2帧， flannel.1 需要得知：</p>\n<ul>\n<li>内层源&#x2F;目的IP地址</li>\n<li>内层源&#x2F;目的MAC地址</li>\n</ul>\n<p>内层的源&#x2F;目的IP地址是已知的，即为PodA&#x2F;PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。<br>内层源&#x2F;目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：</p>\n<p>下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；<br>报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。</p>\n<p>要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看ARP表</span><br>[root@Node1 ~]<span class=\"hljs-comment\"># ip n | grep flannel.1</span><br>10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT <span class=\"hljs-comment\"># PERMANENT 表示永不过期</span><br></code></pre></td></tr></table></figure>\n<p>有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：</p>\n<p><img src=\"flannel-vxlan-3.png\" alt=\"flannel_packet_1.png\"></p>\n<p><strong>外层VXLAN UDP报文</strong><br>要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源&#x2F;目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。</p>\n<p>FDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。</p>\n<p>可以使用 bridge fdb show 查看FDB表：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># bridge fdb show | grep flannel.1</span><br>ba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent<br></code></pre></td></tr></table></figure>\n<p>源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># ip -d a show flannel.1</span><br>6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default<br>    <span class=\"hljs-built_in\">link</span>/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0<br>    vxlan <span class=\"hljs-built_in\">id</span> 1 <span class=\"hljs-built_in\">local</span> 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535<br>    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::3002:78ff:fe2f:2cb/64 scope <span class=\"hljs-built_in\">link</span><br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure>\n<p>至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：</p>\n<p>Flannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。</p>\n<h2><span id=\"22-host-gw模式\">2.2 host-gw模式</span></h2><p><img src=\"flannel-host-gw-1.png\" alt=\"host-gw模式\"></p>\n<p>在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要<code>flannel.1</code>虚机网卡。 <code>flanneld</code> 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中<code>路由表①</code>所示。</p>\n<p>要使用<code>host-gw</code>模式，需要修改 ConfigMap <code>kube-flannel-cfg</code> ，将 <code>Backend.Type</code> 从 <code>vxlan</code>改为<code>host-gw</code>，然后重启所有<code>kube-flannel Pod</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel edit configmap kube-flannel-cfg<br><br>...<br>  net-conf.json: |<br>    &#123;<br>      <span class=\"hljs-string\">&quot;Network&quot;</span>: <span class=\"hljs-string\">&quot;10.244.0.0/16&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Backend&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;Type&quot;</span>: <span class=\"hljs-string\">&quot;host-gw&quot;</span> // &lt;- 改成host-gw<br>      &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"3-calico-两种网络模式\">3. calico 两种网络模式</span></h1><h2><span id=\"31-ipip-模式\">3.1 IPIP 模式</span></h2><h4><span id=\"311-概要\">3.1.1 概要</span></h4><p>IPIP模式是calico的默认网络架构，calico中用环境变量<code>CALICO_IPV4POOL_IPIP</code>来标识是否开启<code>IPIP Mode</code>， 如果该变量的值为<code>Always</code>那么就是开启<code>IPIP</code>，如果关闭需要设置为<code>Never</code>(大小写不敏感，代码里有strings.ToLower操作)。</p>\n<ul>\n<li>从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。</li>\n<li>它的作用其实基本上就相当于一个基于IP层的网桥！</li>\n<li>一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>ipip 的源代码在内核 net&#x2F;ipv4&#x2F;ipip.c 中可以找到。</li>\n</ul>\n<h4><span id=\"312-工作原理\">3.1.2 工作原理</span></h4><p><img src=\"calico-ipip-1.png\" alt=\"ipip\"></p>\n<p>Calico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备</p>\n<p>在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：</p>\n<p><img src=\"calico-ipip-2.png\" alt=\"ipip\"></p>\n<h2><span id=\"32-bgp-模式\">3.2 BGP 模式</span></h2><h4><span id=\"321-概要\">3.2.1 概要</span></h4><ul>\n<li>边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。</li>\n<li>它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。</li>\n<li>BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。</li>\n<li>BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。</li>\n<li>BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过<code>IPIP</code>网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了<code>tunl0</code>这个环节。</li>\n</ul>\n<h4><span id=\"322-工作原理\">3.2.2 工作原理</span></h4><p><img src=\"calico-bgp-1.png\" alt=\"bgp\"></p>\n<h1><span id=\"参考文章\">参考文章</span></h1><p><a href=\"https://ost.51cto.com/posts/15845\">https://ost.51cto.com/posts/15845</a><br><a href=\"https://juejin.cn/post/6994825163757846565\">https://juejin.cn/post/6994825163757846565</a></p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>详解 cni 中 flannel、calico 的原理实现。</p>\n          </div>","more":"<h1 id=\"1-CNI交互逻辑\"><a href=\"#1-CNI交互逻辑\" class=\"headerlink\" title=\"1. CNI交互逻辑\"></a>1. CNI交互逻辑</h1><h2 id=\"1-1-Pod-IP地址分配机制\"><a href=\"#1-1-Pod-IP地址分配机制\" class=\"headerlink\" title=\"1.1 Pod IP地址分配机制\"></a>1.1 Pod IP地址分配机制</h2><p><img src=\"pod-allow-ip.png\" alt=\"image\"></p>\n<h2 id=\"1-2-CRI插件与CNI插件的交互\"><a href=\"#1-2-CRI插件与CNI插件的交互\" class=\"headerlink\" title=\"1.2 CRI插件与CNI插件的交互\"></a>1.2 CRI插件与CNI插件的交互</h2><p><img src=\"cri-cni.png\" alt=\"cri-cni\"></p>\n<h2 id=\"1-3-CNI插件间的交互\"><a href=\"#1-3-CNI插件间的交互\" class=\"headerlink\" title=\"1.3 CNI插件间的交互\"></a>1.3 CNI插件间的交互</h2><p><img src=\"cni-plugins.png\" alt=\"cni\"></p>\n<h1 id=\"2-flannel-3种模式\"><a href=\"#2-flannel-3种模式\" class=\"headerlink\" title=\"2. flannel 3种模式\"></a>2. flannel 3种模式</h1><p><img src=\"flannel-modes.jpg\" alt=\"flannel\"></p>\n<p>UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。</p>\n<h2 id=\"2-1-vxlan模式\"><a href=\"#2-1-vxlan模式\" class=\"headerlink\" title=\"2.1 vxlan模式\"></a>2.1 vxlan模式</h2><p>VXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。</p>\n<h3 id=\"2-1-1-节点内通信\"><a href=\"#2-1-1-节点内通信\" class=\"headerlink\" title=\"2.1.1 节点内通信\"></a>2.1.1 节点内通信</h3><p><img src=\"flannel-vxlan-1.png\" alt=\"flannel-vxlan-1\"></p>\n<h3 id=\"2-1-2-跨节点通信\"><a href=\"#2-1-2-跨节点通信\" class=\"headerlink\" title=\"2.1.2 跨节点通信\"></a>2.1.2 跨节点通信</h3><p><img src=\"flannel-vxlan-2.png\" alt=\"flannel-vxlan-2\"></p>\n<p><strong>大致过程:</strong></p>\n<ul>\n<li>发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。</li>\n<li>接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。</li>\n</ul>\n<p><strong>哪些IP要交由 flannel.1 处理?</strong></p>\n<p>flanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。</p>\n<p><strong>flannel 封包过程</strong></p>\n<p>VXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。</p>\n<p><strong>原始L2帧</strong><br>要生成原始的L2帧， flannel.1 需要得知：</p>\n<ul>\n<li>内层源&#x2F;目的IP地址</li>\n<li>内层源&#x2F;目的MAC地址</li>\n</ul>\n<p>内层的源&#x2F;目的IP地址是已知的，即为PodA&#x2F;PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。<br>内层源&#x2F;目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：</p>\n<p>下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；<br>报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。</p>\n<p>要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看ARP表</span><br>[root@Node1 ~]<span class=\"hljs-comment\"># ip n | grep flannel.1</span><br>10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT <span class=\"hljs-comment\"># PERMANENT 表示永不过期</span><br></code></pre></td></tr></table></figure>\n<p>有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：</p>\n<p><img src=\"flannel-vxlan-3.png\" alt=\"flannel_packet_1.png\"></p>\n<p><strong>外层VXLAN UDP报文</strong><br>要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源&#x2F;目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。</p>\n<p>FDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。</p>\n<p>可以使用 bridge fdb show 查看FDB表：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># bridge fdb show | grep flannel.1</span><br>ba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent<br></code></pre></td></tr></table></figure>\n<p>源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># ip -d a show flannel.1</span><br>6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default<br>    <span class=\"hljs-built_in\">link</span>/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0<br>    vxlan <span class=\"hljs-built_in\">id</span> 1 <span class=\"hljs-built_in\">local</span> 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535<br>    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::3002:78ff:fe2f:2cb/64 scope <span class=\"hljs-built_in\">link</span><br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure>\n<p>至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：</p>\n<p>Flannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。</p>\n<h2 id=\"2-2-host-gw模式\"><a href=\"#2-2-host-gw模式\" class=\"headerlink\" title=\"2.2 host-gw模式\"></a>2.2 host-gw模式</h2><p><img src=\"flannel-host-gw-1.png\" alt=\"host-gw模式\"></p>\n<p>在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要<code>flannel.1</code>虚机网卡。 <code>flanneld</code> 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中<code>路由表①</code>所示。</p>\n<p>要使用<code>host-gw</code>模式，需要修改 ConfigMap <code>kube-flannel-cfg</code> ，将 <code>Backend.Type</code> 从 <code>vxlan</code>改为<code>host-gw</code>，然后重启所有<code>kube-flannel Pod</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel edit configmap kube-flannel-cfg<br><br>...<br>  net-conf.json: |<br>    &#123;<br>      <span class=\"hljs-string\">&quot;Network&quot;</span>: <span class=\"hljs-string\">&quot;10.244.0.0/16&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Backend&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;Type&quot;</span>: <span class=\"hljs-string\">&quot;host-gw&quot;</span> // &lt;- 改成host-gw<br>      &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-calico-两种网络模式\"><a href=\"#3-calico-两种网络模式\" class=\"headerlink\" title=\"3. calico 两种网络模式\"></a>3. calico 两种网络模式</h1><h2 id=\"3-1-IPIP-模式\"><a href=\"#3-1-IPIP-模式\" class=\"headerlink\" title=\"3.1 IPIP 模式\"></a>3.1 IPIP 模式</h2><h4 id=\"3-1-1-概要\"><a href=\"#3-1-1-概要\" class=\"headerlink\" title=\"3.1.1 概要\"></a>3.1.1 概要</h4><p>IPIP模式是calico的默认网络架构，calico中用环境变量<code>CALICO_IPV4POOL_IPIP</code>来标识是否开启<code>IPIP Mode</code>， 如果该变量的值为<code>Always</code>那么就是开启<code>IPIP</code>，如果关闭需要设置为<code>Never</code>(大小写不敏感，代码里有strings.ToLower操作)。</p>\n<ul>\n<li>从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。</li>\n<li>它的作用其实基本上就相当于一个基于IP层的网桥！</li>\n<li>一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>ipip 的源代码在内核 net&#x2F;ipv4&#x2F;ipip.c 中可以找到。</li>\n</ul>\n<h4 id=\"3-1-2-工作原理\"><a href=\"#3-1-2-工作原理\" class=\"headerlink\" title=\"3.1.2 工作原理\"></a>3.1.2 工作原理</h4><p><img src=\"calico-ipip-1.png\" alt=\"ipip\"></p>\n<p>Calico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备</p>\n<p>在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：</p>\n<p><img src=\"calico-ipip-2.png\" alt=\"ipip\"></p>\n<h2 id=\"3-2-BGP-模式\"><a href=\"#3-2-BGP-模式\" class=\"headerlink\" title=\"3.2 BGP 模式\"></a>3.2 BGP 模式</h2><h4 id=\"3-2-1-概要\"><a href=\"#3-2-1-概要\" class=\"headerlink\" title=\"3.2.1 概要\"></a>3.2.1 概要</h4><ul>\n<li>边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。</li>\n<li>它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。</li>\n<li>BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。</li>\n<li>BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。</li>\n<li>BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过<code>IPIP</code>网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了<code>tunl0</code>这个环节。</li>\n</ul>\n<h4 id=\"3-2-2-工作原理\"><a href=\"#3-2-2-工作原理\" class=\"headerlink\" title=\"3.2.2 工作原理\"></a>3.2.2 工作原理</h4><p><img src=\"calico-bgp-1.png\" alt=\"bgp\"></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://ost.51cto.com/posts/15845\">https://ost.51cto.com/posts/15845</a><br><a href=\"https://juejin.cn/post/6994825163757846565\">https://juejin.cn/post/6994825163757846565</a></p>"},{"layout":"golang","title":"grpc如何使用","date":"2023-07-31T09:04:16.000Z","_content":"\n{% note primary %}\n\ngrpc 最基本的使用。\n\n{% endnote %}\n\n<!-- more -->\n\n<!-- toc -->\n\n#### 安装grpc\n```sh\ngo get google.golang.org/grpc@latest\n```\n\n#### 安装Protocol Buffers v3\n\nprotoc [下载](https://github.com/google/protobuf/releases)\n\n#### 安装插件\n```sh\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2\n```\n\n# 入门示例\n\n[代码实现](https://github.com/oldwang12/grpc-demo)\n\n## 服务端\n\n#### 编写proto代码\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"server/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令：\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### 编写Server端Go代码\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"hello_server/pb\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// hello server\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, error) {\n\treturn &pb.HelloResponse{Reply: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\t// 监听本地的8972端口\n\tlis, err := net.Listen(\"tcp\", \":8972\")\n\tif err != nil {\n\t\tfmt.Printf(\"failed to listen: %v\", err)\n\t\treturn\n\t}\n\ts := grpc.NewServer()                  // 创建gRPC服务器\n\tpb.RegisterGreeterServer(s, &server{}) // 在gRPC服务端注册服务\n\t// 启动服务\n\terr = s.Serve(lis)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to serve: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n#### 代码结构\n\n```\nserver\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n#### 运行\n```sh\ngo run main.go\n```\n\n## 客户端\n\n#### 编写proto代码\n\n新建 client 项目\n\n将 go_package 改为 \"client/db\"\n\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"client/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### client 端代码\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"hello_client/pb\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\n// hello_client\n\nconst (\n\tdefaultName = \"world\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\t// 连接到server端，此处禁用安全传输\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\t// 执行RPC调用并打印收到的响应数据\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: *name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}\n```\n\n#### 代码结构\n```\nhttp_client\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n## 结果\n```sh\n$ go run main.go -name=李四\nGreeting: Hello 李四\n```","source":"_posts/golang/grpc如何使用.md","raw":"---\nlayout: golang\ntitle: grpc如何使用\ndate: 2023-07-31 17:04:16\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\ngrpc 最基本的使用。\n\n{% endnote %}\n\n<!-- more -->\n\n<!-- toc -->\n\n#### 安装grpc\n```sh\ngo get google.golang.org/grpc@latest\n```\n\n#### 安装Protocol Buffers v3\n\nprotoc [下载](https://github.com/google/protobuf/releases)\n\n#### 安装插件\n```sh\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2\n```\n\n# 入门示例\n\n[代码实现](https://github.com/oldwang12/grpc-demo)\n\n## 服务端\n\n#### 编写proto代码\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"server/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令：\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### 编写Server端Go代码\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"hello_server/pb\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// hello server\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, error) {\n\treturn &pb.HelloResponse{Reply: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\t// 监听本地的8972端口\n\tlis, err := net.Listen(\"tcp\", \":8972\")\n\tif err != nil {\n\t\tfmt.Printf(\"failed to listen: %v\", err)\n\t\treturn\n\t}\n\ts := grpc.NewServer()                  // 创建gRPC服务器\n\tpb.RegisterGreeterServer(s, &server{}) // 在gRPC服务端注册服务\n\t// 启动服务\n\terr = s.Serve(lis)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to serve: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n#### 代码结构\n\n```\nserver\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n#### 运行\n```sh\ngo run main.go\n```\n\n## 客户端\n\n#### 编写proto代码\n\n新建 client 项目\n\n将 go_package 改为 \"client/db\"\n\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"client/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### client 端代码\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"hello_client/pb\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\n// hello_client\n\nconst (\n\tdefaultName = \"world\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\t// 连接到server端，此处禁用安全传输\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\t// 执行RPC调用并打印收到的响应数据\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: *name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}\n```\n\n#### 代码结构\n```\nhttp_client\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n## 结果\n```sh\n$ go run main.go -name=李四\nGreeting: Hello 李四\n```","slug":"golang/grpc如何使用","published":1,"updated":"2023-09-06T08:49:38.026Z","comments":1,"photos":[],"link":"","_id":"clmo9lsa3001v384w401y1kz8","content":"<div class=\"note note-primary\">\n            <p>grpc 最基本的使用。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<!-- toc -->\n\n<pre><code class=\"hljs\">  - [安装grpc](#安装grpc)\n  - [安装Protocol Buffers v3](#安装protocol-buffers-v3)\n  - [安装插件](#安装插件)\n</code></pre>\n<ul>\n<li><a href=\"#%E5%85%A5%E9%97%A8%E7%A4%BA%E4%BE%8B\">入门示例</a><ul>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF\">服务端</a><ul>\n<li><a href=\"#%E7%BC%96%E5%86%99proto%E4%BB%A3%E7%A0%81\">编写proto代码</a></li>\n<li><a href=\"#%E7%BC%96%E5%86%99server%E7%AB%AFgo%E4%BB%A3%E7%A0%81\">编写Server端Go代码</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\">代码结构</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C\">运行</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\">客户端</a><ul>\n<li><a href=\"#%E7%BC%96%E5%86%99proto%E4%BB%A3%E7%A0%81-1\">编写proto代码</a></li>\n<li><a href=\"#client-%E7%AB%AF%E4%BB%A3%E7%A0%81\">client 端代码</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84-1\">代码结构</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BB%93%E6%9E%9C\">结果</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h4><span id=\"安装grpc\">安装grpc</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go get google.golang.org/grpc@latest<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"安装protocol-buffers-v3\">安装Protocol Buffers v3</span></h4><p>protoc <a href=\"https://github.com/google/protobuf/releases\">下载</a></p>\n<h4><span id=\"安装插件\">安装插件</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28<br>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2<br></code></pre></td></tr></table></figure>\n\n<h1><span id=\"入门示例\">入门示例</span></h1><p><a href=\"https://github.com/oldwang12/grpc-demo\">代码实现</a></p>\n<h2><span id=\"服务端\">服务端</span></h2><h4><span id=\"编写proto代码\">编写proto代码</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;server/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4><span id=\"编写server端go代码\">编写Server端Go代码</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;hello_server/pb&quot;</span><br>\t<span class=\"hljs-string\">&quot;net&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello server</span><br><br><span class=\"hljs-keyword\">type</span> server <span class=\"hljs-keyword\">struct</span> &#123;<br>\tpb.UnimplementedGreeterServer<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;pb.HelloResponse&#123;Reply: <span class=\"hljs-string\">&quot;Hello &quot;</span> + in.Name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 监听本地的8972端口</span><br>\tlis, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, <span class=\"hljs-string\">&quot;:8972&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to listen: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\ts := grpc.NewServer()                  <span class=\"hljs-comment\">// 创建gRPC服务器</span><br>\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class=\"hljs-comment\">// 在gRPC服务端注册服务</span><br>\t<span class=\"hljs-comment\">// 启动服务</span><br>\terr = s.Serve(lis)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to serve: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"代码结构\">代码结构</span></h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">server<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"运行\">运行</span></h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go run main.go<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"客户端\">客户端</span></h2><h4><span id=\"编写proto代码\">编写proto代码</span></h4><p>新建 client 项目</p>\n<p>将 go_package 改为 “client&#x2F;db”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;client/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4><span id=\"client-端代码\">client 端代码</span></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;hello_client/pb&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello_client</span><br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultName = <span class=\"hljs-string\">&quot;world&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\taddr = flag.String(<span class=\"hljs-string\">&quot;addr&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1:8972&quot;</span>, <span class=\"hljs-string\">&quot;the address to connect to&quot;</span>)<br>\tname = flag.String(<span class=\"hljs-string\">&quot;name&quot;</span>, defaultName, <span class=\"hljs-string\">&quot;Name to greet&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tflag.Parse()<br>\t<span class=\"hljs-comment\">// 连接到server端，此处禁用安全传输</span><br>\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;did not connect: %v&quot;</span>, err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br>\tc := pb.NewGreeterClient(conn)<br><br>\t<span class=\"hljs-comment\">// 执行RPC调用并打印收到的响应数据</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;could not greet: %v&quot;</span>, err)<br>\t&#125;<br>\tlog.Printf(<span class=\"hljs-string\">&quot;Greeting: %s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4><span id=\"代码结构\">代码结构</span></h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">http_client<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h2><span id=\"结果\">结果</span></h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ go run main.go -name=李四<br>Greeting: Hello 李四<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>grpc 最基本的使用。</p>\n          </div>","more":"<!-- toc -->\n\n<pre><code>  - [安装grpc](#安装grpc)\n  - [安装Protocol Buffers v3](#安装protocol-buffers-v3)\n  - [安装插件](#安装插件)\n</code></pre>\n<ul>\n<li><a href=\"#%E5%85%A5%E9%97%A8%E7%A4%BA%E4%BE%8B\">入门示例</a><ul>\n<li><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF\">服务端</a><ul>\n<li><a href=\"#%E7%BC%96%E5%86%99proto%E4%BB%A3%E7%A0%81\">编写proto代码</a></li>\n<li><a href=\"#%E7%BC%96%E5%86%99server%E7%AB%AFgo%E4%BB%A3%E7%A0%81\">编写Server端Go代码</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84\">代码结构</a></li>\n<li><a href=\"#%E8%BF%90%E8%A1%8C\">运行</a></li>\n</ul>\n</li>\n<li><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF\">客户端</a><ul>\n<li><a href=\"#%E7%BC%96%E5%86%99proto%E4%BB%A3%E7%A0%81-1\">编写proto代码</a></li>\n<li><a href=\"#client-%E7%AB%AF%E4%BB%A3%E7%A0%81\">client 端代码</a></li>\n<li><a href=\"#%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84-1\">代码结构</a></li>\n</ul>\n</li>\n<li><a href=\"#%E7%BB%93%E6%9E%9C\">结果</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n\n<h4 id=\"安装grpc\"><a href=\"#安装grpc\" class=\"headerlink\" title=\"安装grpc\"></a>安装grpc</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go get google.golang.org/grpc@latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装Protocol-Buffers-v3\"><a href=\"#安装Protocol-Buffers-v3\" class=\"headerlink\" title=\"安装Protocol Buffers v3\"></a>安装Protocol Buffers v3</h4><p>protoc <a href=\"https://github.com/google/protobuf/releases\">下载</a></p>\n<h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28<br>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"入门示例\"><a href=\"#入门示例\" class=\"headerlink\" title=\"入门示例\"></a>入门示例</h1><p><a href=\"https://github.com/oldwang12/grpc-demo\">代码实现</a></p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h4 id=\"编写proto代码\"><a href=\"#编写proto代码\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;server/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"编写Server端Go代码\"><a href=\"#编写Server端Go代码\" class=\"headerlink\" title=\"编写Server端Go代码\"></a>编写Server端Go代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;hello_server/pb&quot;</span><br>\t<span class=\"hljs-string\">&quot;net&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello server</span><br><br><span class=\"hljs-keyword\">type</span> server <span class=\"hljs-keyword\">struct</span> &#123;<br>\tpb.UnimplementedGreeterServer<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;pb.HelloResponse&#123;Reply: <span class=\"hljs-string\">&quot;Hello &quot;</span> + in.Name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 监听本地的8972端口</span><br>\tlis, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, <span class=\"hljs-string\">&quot;:8972&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to listen: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\ts := grpc.NewServer()                  <span class=\"hljs-comment\">// 创建gRPC服务器</span><br>\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class=\"hljs-comment\">// 在gRPC服务端注册服务</span><br>\t<span class=\"hljs-comment\">// 启动服务</span><br>\terr = s.Serve(lis)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to serve: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">server<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go run main.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h4 id=\"编写proto代码-1\"><a href=\"#编写proto代码-1\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><p>新建 client 项目</p>\n<p>将 go_package 改为 “client&#x2F;db”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;client/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"client-端代码\"><a href=\"#client-端代码\" class=\"headerlink\" title=\"client 端代码\"></a>client 端代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;hello_client/pb&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello_client</span><br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultName = <span class=\"hljs-string\">&quot;world&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\taddr = flag.String(<span class=\"hljs-string\">&quot;addr&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1:8972&quot;</span>, <span class=\"hljs-string\">&quot;the address to connect to&quot;</span>)<br>\tname = flag.String(<span class=\"hljs-string\">&quot;name&quot;</span>, defaultName, <span class=\"hljs-string\">&quot;Name to greet&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tflag.Parse()<br>\t<span class=\"hljs-comment\">// 连接到server端，此处禁用安全传输</span><br>\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;did not connect: %v&quot;</span>, err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br>\tc := pb.NewGreeterClient(conn)<br><br>\t<span class=\"hljs-comment\">// 执行RPC调用并打印收到的响应数据</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;could not greet: %v&quot;</span>, err)<br>\t&#125;<br>\tlog.Printf(<span class=\"hljs-string\">&quot;Greeting: %s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构-1\"><a href=\"#代码结构-1\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">http_client<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ go run main.go -name=李四<br>Greeting: Hello 李四<br></code></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/工具/工具大全/iterm.png","post":"clmo9ls9z000t384w8p3410kc","slug":"iterm.png","modified":1,"renderable":1},{"_id":"source/_posts/linux/linux-命令大全/top-01.png","post":"clmo9lsa00011384w7njr7808","slug":"top-01.png","modified":1,"renderable":1},{"_id":"source/_posts/linux/linux-命令大全/top-02.png","post":"clmo9lsa00011384w7njr7808","slug":"top-02.png","modified":1,"renderable":1},{"_id":"source/_posts/golang/golang垃圾回收/1.png","post":"clmo9lsa00015384w7v9cbui1","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/使用kubeadm安装集群/master-worker.png","post":"clmo9lsa2001n384wdbc53h0a","slug":"master-worker.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-bgp-1.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"calico-bgp-1.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-1.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"calico-ipip-1.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-2.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"calico-ipip-2.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cni-plugins.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"cni-plugins.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cri-cni.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"cri-cni.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"flannel-host-gw-1.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-modes.jpg","post":"clmo9lsa3001s384wbykdd8ms","slug":"flannel-modes.jpg","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"flannel-vxlan-1.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"flannel-vxlan-2.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"flannel-vxlan-3.png","modified":1,"renderable":1},{"_id":"source/_posts/k8s/容器网络接口（CNI）/pod-allow-ip.png","post":"clmo9lsa3001s384wbykdd8ms","slug":"pod-allow-ip.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"clmo9ls9r0001384w0n733g7m","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9ls9w000e384w2hf54waa"},{"post_id":"clmo9ls9t0003384w787h93f1","category_id":"clmo9ls9w000a384wgf8771p5","_id":"clmo9ls9y000l384w0wp0bfgw"},{"post_id":"clmo9ls9u0006384w75pi1bb4","category_id":"clmo9ls9w000a384wgf8771p5","_id":"clmo9ls9z000s384w0ojya8xc"},{"post_id":"clmo9ls9v0008384waaq5fusq","category_id":"clmo9ls9w000a384wgf8771p5","_id":"clmo9ls9z000x384w6ifp2bo8"},{"post_id":"clmo9ls9v0009384wc790db55","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa00014384w1p5r975r"},{"post_id":"clmo9ls9w000b384w6te1d5lm","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa10019384w8zqh05sd"},{"post_id":"clmo9lsa00011384w7njr7808","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa1001b384wgtr95fer"},{"post_id":"clmo9ls9w000d384wh3i4aqi7","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa1001f384w26wy7loo"},{"post_id":"clmo9ls9x000g384w7qmf1s0d","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa2001m384w2qrp7zwv"},{"post_id":"clmo9lsa1001h384w92cd3xzi","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9lsa2001p384w4seba07k"},{"post_id":"clmo9ls9x000i384w4y6209de","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa3001t384w9iq3f8ki"},{"post_id":"clmo9lsa2001j384wgfmlaahq","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9lsa3001w384w11ckf78y"},{"post_id":"clmo9lsa2001n384wdbc53h0a","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9lsa30020384wgxlfhlhu"},{"post_id":"clmo9ls9y000m384wdgfh8q05","category_id":"clmo9ls9z000r384w6wt7ab1z","_id":"clmo9lsa30021384w3ckb9ds4"},{"post_id":"clmo9lsa2001o384w1zmugk7z","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9lsa40024384w2cvk2fwu"},{"post_id":"clmo9lsa3001s384wbykdd8ms","category_id":"clmo9ls9t0004384w3zio66nt","_id":"clmo9lsa40025384wbreh90oq"},{"post_id":"clmo9ls9y000p384w643sblt0","category_id":"clmo9lsa3001r384w1bvcgfha","_id":"clmo9lsa40027384wbgn0707h"},{"post_id":"clmo9ls9z000t384w8p3410kc","category_id":"clmo9lsa3001r384w1bvcgfha","_id":"clmo9lsa4002a384w8gn97dbg"},{"post_id":"clmo9ls9z000v384w35oh4928","category_id":"clmo9lsa3001r384w1bvcgfha","_id":"clmo9lsa4002d384wb72t4eb0"},{"post_id":"clmo9ls9z000z384w7p447m3f","category_id":"clmo9lsa3001r384w1bvcgfha","_id":"clmo9lsa4002g384w1utx7umh"},{"post_id":"clmo9lsa00015384w7v9cbui1","category_id":"clmo9lsa4002c384w4hs8hlfl","_id":"clmo9lsa4002k384wbfc08m3j"},{"post_id":"clmo9lsa00017384w87b157ep","category_id":"clmo9lsa4002h384w07imggwz","_id":"clmo9lsa5002p384w1on51cb6"},{"post_id":"clmo9lsa1001a384wb88c0u7r","category_id":"clmo9lsa4002c384w4hs8hlfl","_id":"clmo9lsa5002t384wguqz658k"},{"post_id":"clmo9lsa1001c384w4i630mut","category_id":"clmo9lsa4002c384w4hs8hlfl","_id":"clmo9lsa5002w384w9hx08am4"},{"post_id":"clmo9lsa3001v384w401y1kz8","category_id":"clmo9lsa4002c384w4hs8hlfl","_id":"clmo9lsa5002z384w3lb629c0"}],"PostTag":[{"post_id":"clmo9ls9t0003384w787h93f1","tag_id":"clmo9ls9v0007384wf87b6n1g","_id":"clmo9ls9y000j384wddz05ynv"},{"post_id":"clmo9ls9t0003384w787h93f1","tag_id":"clmo9ls9w000c384w47qr36c8","_id":"clmo9ls9y000n384w0pl38g9p"},{"post_id":"clmo9ls9u0006384w75pi1bb4","tag_id":"clmo9ls9v0007384wf87b6n1g","_id":"clmo9ls9z000q384w8ein9sje"},{"post_id":"clmo9ls9v0008384waaq5fusq","tag_id":"clmo9ls9v0007384wf87b6n1g","_id":"clmo9ls9z000w384wdrmec87x"},{"post_id":"clmo9ls9v0009384wc790db55","tag_id":"clmo9ls9z000u384wfj4m84pv","_id":"clmo9lsa00012384w4tfx87eu"},{"post_id":"clmo9ls9w000b384w6te1d5lm","tag_id":"clmo9lsa00010384w7ehrdnep","_id":"clmo9lsa1001g384w1fea29x3"},{"post_id":"clmo9ls9w000b384w6te1d5lm","tag_id":"clmo9lsa00016384wdhw95rdq","_id":"clmo9lsa2001i384wf07xdn4h"},{"post_id":"clmo9ls9w000d384wh3i4aqi7","tag_id":"clmo9lsa1001d384wdejg8ey2","_id":"clmo9lsa3001u384w3kajgq09"},{"post_id":"clmo9ls9w000d384wh3i4aqi7","tag_id":"clmo9lsa2001k384we28nfplw","_id":"clmo9lsa3001x384w2nm66m4z"},{"post_id":"clmo9ls9x000g384w7qmf1s0d","tag_id":"clmo9lsa3001q384w48yfg5ny","_id":"clmo9lsa40029384w4a2ug17j"},{"post_id":"clmo9ls9x000g384w7qmf1s0d","tag_id":"clmo9lsa00016384wdhw95rdq","_id":"clmo9lsa4002b384w9gxg2bn3"},{"post_id":"clmo9ls9x000g384w7qmf1s0d","tag_id":"clmo9lsa30022384w880xhbpp","_id":"clmo9lsa4002f384wbgxdhrck"},{"post_id":"clmo9ls9x000i384w4y6209de","tag_id":"clmo9lsa40028384wgv1f8k61","_id":"clmo9lsa4002j384w6oab0new"},{"post_id":"clmo9ls9x000i384w4y6209de","tag_id":"clmo9lsa4002e384w1or06630","_id":"clmo9lsa4002l384w7syffr8i"},{"post_id":"clmo9ls9y000m384wdgfh8q05","tag_id":"clmo9lsa4002i384wbm0p9g7n","_id":"clmo9lsa5002r384w8eq5e1b7"},{"post_id":"clmo9ls9y000m384wdgfh8q05","tag_id":"clmo9lsa4002n384w96gngq3b","_id":"clmo9lsa5002u384whfj91yhc"},{"post_id":"clmo9ls9y000p384w643sblt0","tag_id":"clmo9lsa5002q384wgsdocjil","_id":"clmo9lsa5002y384whqakceog"},{"post_id":"clmo9ls9y000p384w643sblt0","tag_id":"clmo9lsa5002v384w3uly1yyk","_id":"clmo9lsa50030384w10qg4gxs"},{"post_id":"clmo9ls9z000t384w8p3410kc","tag_id":"clmo9lsa5002q384wgsdocjil","_id":"clmo9lsa50033384w0jp92uoe"},{"post_id":"clmo9ls9z000t384w8p3410kc","tag_id":"clmo9lsa50031384w8l6h8lc4","_id":"clmo9lsa50034384weszhhm8l"},{"post_id":"clmo9ls9z000v384w35oh4928","tag_id":"clmo9lsa50032384wbmiwcvxh","_id":"clmo9lsa50038384whvbv5sfz"},{"post_id":"clmo9ls9z000v384w35oh4928","tag_id":"clmo9lsa50035384wg4urfnvs","_id":"clmo9lsa50039384w639ma4j6"},{"post_id":"clmo9ls9z000v384w35oh4928","tag_id":"clmo9lsa50036384wgze8g55q","_id":"clmo9lsa6003b384w5j3qacyz"},{"post_id":"clmo9ls9z000z384w7p447m3f","tag_id":"clmo9lsa5002q384wgsdocjil","_id":"clmo9lsa6003d384wa67aaiy2"},{"post_id":"clmo9ls9z000z384w7p447m3f","tag_id":"clmo9lsa5003a384wc70ravlf","_id":"clmo9lsa6003e384wh5zg17tn"},{"post_id":"clmo9lsa00011384w7njr7808","tag_id":"clmo9lsa1001d384wdejg8ey2","_id":"clmo9lsa6003g384w8gq0581a"},{"post_id":"clmo9lsa00015384w7v9cbui1","tag_id":"clmo9lsa6003f384wcht3e3ox","_id":"clmo9lsa6003i384w0hmm9cib"},{"post_id":"clmo9lsa00017384w87b157ep","tag_id":"clmo9lsa6003h384w1d135vt8","_id":"clmo9lsa6003k384wcp393qs8"},{"post_id":"clmo9lsa1001a384wb88c0u7r","tag_id":"clmo9lsa6003f384wcht3e3ox","_id":"clmo9lsa6003m384wa6o8cpa2"},{"post_id":"clmo9lsa1001c384w4i630mut","tag_id":"clmo9lsa6003f384wcht3e3ox","_id":"clmo9lsa6003o384w1m9xg5lc"},{"post_id":"clmo9lsa1001h384w92cd3xzi","tag_id":"clmo9lsa6003n384wawkfczzt","_id":"clmo9lsa6003q384w26rx8m7a"},{"post_id":"clmo9lsa2001j384wgfmlaahq","tag_id":"clmo9lsa6003n384wawkfczzt","_id":"clmo9lsa6003s384w6mn71ir4"},{"post_id":"clmo9lsa2001n384wdbc53h0a","tag_id":"clmo9lsa6003n384wawkfczzt","_id":"clmo9lsa6003u384w7vxw3mns"},{"post_id":"clmo9lsa2001o384w1zmugk7z","tag_id":"clmo9lsa6003t384w9peq5jre","_id":"clmo9lsa7003y384wahh07pzv"},{"post_id":"clmo9lsa2001o384w1zmugk7z","tag_id":"clmo9lsa6003v384wb3hf4amp","_id":"clmo9lsa7003z384wcehf2rn9"},{"post_id":"clmo9lsa2001o384w1zmugk7z","tag_id":"clmo9lsa6003n384wawkfczzt","_id":"clmo9lsa70041384w4i2c2alf"},{"post_id":"clmo9lsa3001s384wbykdd8ms","tag_id":"clmo9lsa6003n384wawkfczzt","_id":"clmo9lsa70043384w59ap0ka7"},{"post_id":"clmo9lsa3001s384wbykdd8ms","tag_id":"clmo9lsa70040384wa6e299cp","_id":"clmo9lsa70044384w6k6l3lwz"},{"post_id":"clmo9lsa3001v384w401y1kz8","tag_id":"clmo9lsa6003f384wcht3e3ox","_id":"clmo9lsa70045384w96t1hgyn"}],"Tag":[{"name":"docker","_id":"clmo9ls9v0007384wf87b6n1g"},{"name":"dockerfile","_id":"clmo9ls9w000c384w47qr36c8"},{"name":"sql","_id":"clmo9ls9z000u384wfj4m84pv"},{"name":"frp","_id":"clmo9lsa00010384w7ehrdnep"},{"name":"nas","_id":"clmo9lsa00016384wdhw95rdq"},{"name":"linux","_id":"clmo9lsa1001d384wdejg8ey2"},{"name":"fzf","_id":"clmo9lsa2001k384we28nfplw"},{"name":"shell","_id":"clmo9lsa3001q384w48yfg5ny"},{"name":"alist","_id":"clmo9lsa30022384w880xhbpp"},{"name":"Makefile","_id":"clmo9lsa40028384wgv1f8k61"},{"name":"Dockerfile","_id":"clmo9lsa4002e384w1or06630"},{"name":"玩客云","_id":"clmo9lsa4002i384wbm0p9g7n"},{"name":"armbian","_id":"clmo9lsa4002n384w96gngq3b"},{"name":"工具","_id":"clmo9lsa5002q384wgsdocjil"},{"name":"git","_id":"clmo9lsa5002v384w3uly1yyk"},{"name":"ssh","_id":"clmo9lsa50031384w8l6h8lc4"},{"name":"markdown","_id":"clmo9lsa50032384wbmiwcvxh"},{"name":"fluid","_id":"clmo9lsa50035384wg4urfnvs"},{"name":"hexo","_id":"clmo9lsa50036384wgze8g55q"},{"name":"oh my zsh","_id":"clmo9lsa5003a384wc70ravlf"},{"name":"golang","_id":"clmo9lsa6003f384wcht3e3ox"},{"name":"dns","_id":"clmo9lsa6003h384w1d135vt8"},{"name":"k8s","_id":"clmo9lsa6003n384wawkfczzt"},{"name":"kubectl","_id":"clmo9lsa6003t384w9peq5jre"},{"name":"alias","_id":"clmo9lsa6003v384wb3hf4amp"},{"name":"cni","_id":"clmo9lsa70040384wa6e299cp"}]}}