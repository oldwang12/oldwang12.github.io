{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"source/shells/k8s_alias_install.sh","path":"shells/k8s_alias_install.sh","modified":0,"renderable":0},{"_id":"source/shells/k8s_alias_uninstall.sh","path":"shells/k8s_alias_uninstall.sh","modified":0,"renderable":0},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/duration.js","path":"js/duration.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.bak.png","path":"img/default.bak.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/titles/markdown.png","path":"img/titles/markdown.png","modified":0,"renderable":1},{"_id":"source/shells/kubectx_kubens_install.sh","path":"shells/kubectx_kubens_install.sh","modified":0,"renderable":0},{"_id":"source/shells/kubectx_kubens_uninstall.sh","path":"shells/kubectx_kubens_uninstall.sh","modified":0,"renderable":0},{"_id":"source/shells/chatgpt_test.sh","path":"shells/chatgpt_test.sh","modified":0,"renderable":0},{"_id":"themes/fluid/source/img/fluid.png.bak","path":"img/fluid.png.bak","modified":0,"renderable":1},{"_id":"themes/fluid/source/CNAME","path":"CNAME","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1690040188938},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"1a9b279e6dd29fd19245f913f0c4a316ffaa62db","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"4bf95d52f77edf811f23f6d264a7493311a8d078","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"377d257d5d16e0158a4405c72401517b074fd7ff","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"56597e951203dd662a6d2c817c7c4f1c920d4a25","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f05bced793b0314d4f2ef0c993b3a51d0b7d203a","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"2d1f6f79ebf9cb55ebdb3865a2474437eb2b37c6","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1690040028733},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1690040028733},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398519},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398506},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398506},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398519},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398519},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398517},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398517},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1690040398517},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1690040398501},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1690040398501},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1690040398501},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1690040398501},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1690040398501},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1690040398502},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1690040398502},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1690040398502},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1690040398502},{"_id":"themes/next/README.cn.md","hash":"263b74f1ac7c0f6f9424b8cced4b0b320ae61efc","modified":1690040398502},{"_id":"themes/next/README.md","hash":"287c7e6b7a6ddf75d815dda0df8bd228e3f285c5","modified":1690040398502},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1690040398502},{"_id":"themes/next/_config.yml","hash":"5ff37e90e4d6812c8fc40c03fa6e1d903d743470","modified":1690040398502},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1690040398510},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1690040398502},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1690040398502},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1690040398501},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1690040398501},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1690040398503},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1690040398502},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1690040398503},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1690040398503},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1690040398501},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1690040398501},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1690040398503},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1690040398503},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1690040398503},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1690040398503},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1690040398503},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1690040398503},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1690040398503},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1690040398503},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1690040398503},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1690040398503},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1690040398503},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1690040398504},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1690040398504},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1690040398509},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1690040398509},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1690040398509},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1690040398509},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1690040398509},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1690040398509},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1690040398510},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1690040398510},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1690040398509},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1690040398539},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1690040398539},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1690040398539},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1690040398505},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1690040398505},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1690040398505},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1690040398504},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1690040398504},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1690040398505},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1690040398505},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1690040398505},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1690040398504},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1690040398504},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1690040398504},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1690040398505},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1690040398504},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1690040398506},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1690040398504},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1690040398506},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1690040398506},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1690040398508},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1690040398508},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1690040398508},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1690040398504},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1690040398508},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1690040398508},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1690040398510},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1690040398510},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1690040398508},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1690040398510},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1690040398508},{"_id":"themes/next/scripts/tags/exturl.js","hash":"919ab7496c0031020c7b7242486531b1f7a135a7","modified":1690040398510},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1690040398510},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1690040398510},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1690040398510},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1690040398511},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1690040398519},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1690040398520},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1690040398520},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1690040398510},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1690040398520},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1690040398520},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1690040398520},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1690040398520},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1690040398520},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1690040398520},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1690040398520},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1690040398520},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1690040398520},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1690040398520},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1690040398521},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1690040398521},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1690040398521},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1690040398521},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1690040398505},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1690040398521},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1690040398505},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1690040398505},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1690040398505},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1690040398506},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1690040398506},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1690040398505},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1690040398521},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1690040398506},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1690040398505},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1690040398506},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1690040398506},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1690040398506},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1690040398507},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1690040398505},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1690040398507},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1690040398507},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1690040398508},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1690040398507},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1690040398507},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1690040398507},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1690040398508},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1690040398508},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1690040398508},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1690040398508},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1690040398508},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1690040398509},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1690040398508},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1690040398507},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1690040398509},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1690040398509},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1690040398509},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1690040398519},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1690040398519},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1690040398517},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1690040398519},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1690040398519},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1690040398517},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1690040398521},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1690040398517},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1690040398517},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1690040398521},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1690040398521},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1690040398521},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1690040398521},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1690040398522},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1690040398521},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1690040398522},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1690040398522},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1690040398522},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1690040398521},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1690040398525},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1690040398525},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1690040398524},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1690040398525},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1690040398533},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1690040398534},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1690040398534},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1690040398525},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1690040398534},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1690040398534},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1690040398534},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1690040398534},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1690040398527},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1690040398535},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1690040398527},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1690040398527},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1690040398527},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1690040398534},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1690040398527},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1690040398534},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1690040398528},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1690040398528},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1690040398527},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1690040398528},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1690040398536},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1690040398536},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1690040398538},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1690040398538},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1690040398536},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1690040398539},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1690040398539},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1690040398535},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1690040398539},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1690040398535},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1690040398536},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1690040398535},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1690040398509},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1690040398509},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1690040398512},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1690040398517},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1690040398514},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1690040398516},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1690040398517},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1690040398517},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1690040398518},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1690040398519},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1690040398519},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1690040398519},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1690040398519},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1690040398519},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1690040398516},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1690040398516},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1690040398519},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1690040398516},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1690040398516},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1690040398516},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1690040398522},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1690040398523},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1690040398517},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1690040398525},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1690040398526},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1690040398523},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1690040398525},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1690040398526},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1690040398523},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1690040398527},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1690040398527},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1690040398525},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1690040398527},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1690040398528},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1690040398528},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1690040398526},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1690040398528},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1690040398538},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1690040398538},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1690040398511},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1690040398512},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1690040398514},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1690040398513},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1690040398516},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1690040398516},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1690040398516},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1690040398516},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1690040398515},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1690040398515},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1690040398522},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1690040398518},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1690040398522},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1690040398519},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1690040398522},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1690040398518},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1690040398526},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1690040398523},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1690040398522},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1690040398526},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1690040398526},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1690040398534},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1690040398523},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1690040398533},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1690040398533},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1690040398529},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1690040398530},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1690040398533},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1690040398539},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1690040398525},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1690040398532},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1690040398538},{"_id":"themes/pure/.gitignore","hash":"efd53f4f9fa11c505c11daa7d6e59fc8594ba96a","modified":1690857248247},{"_id":"themes/pure/README.cn.md","hash":"ddf15a1feb7a2630210aae0528df3504fca23b5e","modified":1690040728215},{"_id":"themes/pure/_config.yml","hash":"36282d186fbe0e9279e23de9e9fa5d01c34fe918","modified":1692172307165},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1690040728215},{"_id":"themes/pure/package.json","hash":"32f9dfeeee3efdf7a4c0b0e73fa3f2b9b86a000a","modified":1690040802518},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1690040728216},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1690040728215},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1690040728224},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1690040728224},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1690040728224},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1690040728224},{"_id":"themes/pure/layout/archive.ejs","hash":"0e9e67a82202ca3971be59579744d43ec6696bbf","modified":1690040728224},{"_id":"themes/pure/layout/layout.ejs","hash":"e72268bdff7610da6e2ce239d3bcd34b00c06eff","modified":1690128129876},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1690040728225},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1690040728224},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1690040728225},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1690040728225},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1690040728225},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1690040728225},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1690040728225},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1690040728234},{"_id":"themes/pure/languages/default.yml","hash":"734cd4246b808e2bd1c5828416bb0970ba1c6769","modified":1690045132329},{"_id":"themes/pure/languages/en.yml","hash":"77cec61179f3049074ce48d95d916c9945990770","modified":1690127597928},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1690040728217},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1690040728217},{"_id":"themes/pure/source/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1690040728236},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/bug_report.md","hash":"83d211c67c12e8c1f6e9f796cfd0cecbf5160e15","modified":1690040728215},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/custom.md","hash":"84208538d48505ee8e49812cb336eb9882e08dc7","modified":1690040728215},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1690040728216},{"_id":"themes/pure/.github/ISSUE_TEMPLATE/feature_request.md","hash":"f6867a2f0417fe89a0f2008730ee19dd38422021","modified":1690040728215},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1690040728216},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1690040728216},{"_id":"themes/pure/_source/about/index.md","hash":"9c95cabb533409d06daefc4295021ad199761efc","modified":1690040728216},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1690040728216},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1690040728216},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1690040728217},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"20ae8574d809e46e55291a0d63df6151ca3bbc1b","modified":1690126787677},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1690040728218},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1690040728217},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1690040728218},{"_id":"themes/pure/layout/_common/script.ejs","hash":"7afd6cb9230af196c68c30243aff052577a355c0","modified":1691652065904},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1690040728218},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1690040728223},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1690040728223},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1690040728223},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1690040728223},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1690040728222},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1690040728222},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"ee21c4e7ccac26ff2ab6d1d178447fd11fea4d7e","modified":1690040728222},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1690040728222},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1690040728222},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1690040728223},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"32f0ac36fa68d8786506957338e552661f2f809c","modified":1690040728223},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1690040728223},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1690040728223},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1690040728223},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1690040728224},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1690040728223},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1690040728224},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1690040728224},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1690040728224},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1690040728218},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1690040728218},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1690040728218},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1690040728219},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"dd91a34ea0d88e85c6107f3d8b267511a270ef93","modified":1690127481979},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1690040728219},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1690040728219},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"2f3790257d6ad07fdad2043b27950842c9011daa","modified":1690040728219},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"46da1ee327b8af107335146bd8fc131eee6c9c4f","modified":1690040728220},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"c792537723b59f437967262c9575a20fac02e911","modified":1690040728219},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"fa9e2041c4a6e03f566545db1385c5ae1a80f879","modified":1690040728220},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1690040728220},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1690040728217},{"_id":"themes/pure/source/js/application.js","hash":"fd0b7529e7c0b387f88c4f28c9e272bb01169490","modified":1690127324054},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"1081974f182e8e1ce452d701b8f6575b6dc45b0c","modified":1690040728218},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1690040728238},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1690040728236},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1690040728238},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1690040728236},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1690040728237},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1690040728237},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1690040728238},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1690040728238},{"_id":"themes/pure/source/images/avatar.jpg","hash":"5a2ecb3a8c19885475ae99afe751f40c718833a9","modified":1692081309545},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1690040728221},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1690040728221},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"de4c43d3056825c14283fe426b8cc677dea59617","modified":1690040728221},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1690040728221},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"3464682ae0359ba23034ac40e8153699c37fb7be","modified":1690040728218},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"93d4be04aa8d61e553405575e03fea105445dae0","modified":1692157325010},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1690040728221},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1690040728221},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1690040728221},{"_id":"themes/pure/layout/_script/_repository/github.ejs","hash":"a4762135de6816c85156e85886f50fb32b0adc89","modified":1690040728222},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1690040728221},{"_id":"themes/pure/layout/_script/_repository/legacy.ejs","hash":"b5e5c666e89550abb5004e35c7ef165c6edab62d","modified":1690040728222},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1690040728222},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1690040728219},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1690040728219},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"456d140a031d9adf1ee565c4f5fb0b00af2da5d1","modified":1692172254479},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1690040728222},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"c6e88170e4104825714a1baf2c7b7c4d32a09787","modified":1691653937915},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1690040728219},{"_id":"themes/pure/layout/_script/_repository/gitee.ejs","hash":"0e1ecabe809f149ebe3ce3ac393f6e6155dd6780","modified":1690040728221},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"fcbe3695ae9b164a4a2d27a66a6827dcf3ee76f1","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1690040728220},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1690040728220},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1690040728238},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1690040728238},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"925c456c6f7696dc26103e21fddebf3a984d7d83","modified":1690045488452},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"b85b03b2ea162ada14d40efb129db716fe1b3c6f","modified":1690045425911},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1690040728238},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1690040728221},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1690040728226},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1690040728226},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1690040728227},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1690040728227},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1690040728228},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1690040728239},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1690040728241},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1690040728239},{"_id":"themes/pure/source/css/style.css","hash":"d5e448217265211d2089cb78f5c444d06ba1fb0c","modified":1691654009470},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1690040728240},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1690040728236},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1690040728237},{"_id":"themes/pure/package-lock.json","hash":"a5c033452f20cd017500bb373e8f6ced2a798be8","modified":1690040802518},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1690040728234},{"_id":"source/_posts/test.md","hash":"729323a0c432382217aff5398ab46ce349d704a4","modified":1690042204505},{"_id":"source/_posts/无法下载kubernetes包.md","hash":"d52f450ae3a9fd8e7bef605ca3a6ff56a345f84d","modified":1690043313190},{"_id":"source/_posts/Macos-好用工具推荐.md","hash":"58c70acf436e287f73a318ffa0d45fb72444766c","modified":1690043806231},{"_id":"source/_posts/chrome浏览器如何屏蔽无效请求.md","hash":"c8acf520c09ba09a2a0ca0a804ab50b09453700a","modified":1690042748164},{"_id":"source/_posts/docker记不住的命令.md","hash":"43b878a16174c86b46b8554865299fa634feaaa0","modified":1690043484474},{"_id":"source/_posts/Makefile模版.md","hash":"d71313ea618a6cb4bf3f7e04dfacbd8167ea2368","modified":1690043904214},{"_id":"source/_posts/k8s记不住的命令.md","hash":"dc3f0579ff00f2267c60d181e676f64c91a02a4c","modified":1690043391639},{"_id":"source/_posts/vscode必备插件.md","hash":"6048dbbdb60d494e4c4ff04aff62542cad03b50e","modified":1690042661637},{"_id":"source/_posts/gin跨域问题.md","hash":"f7bb9406f67a500de767595715334d64d5420260","modified":1690042478841},{"_id":"source/golang/index.md","hash":"742a431b8794104e313ef6a67012c27b8209d0a3","modified":1690043127713},{"_id":"source/k8s/index.md","hash":"cbcb6dd5158ddc34eefb24dd2e0294d99a5514bb","modified":1690043118642},{"_id":"source/docker/index.md","hash":"415ad73ebaff0eb40d47bde66d6ba14b9bf78477","modified":1690043123670},{"_id":"source/tages/index.md","hash":"b679621d505b6ce842cbe1d36ec048474e5d5bc0","modified":1690043689854},{"_id":"source/工具/index.md","hash":"511921cdcdb400d1e323f7821e256d2e7cae9bca","modified":1690043730710},{"_id":"source/linux/index.md","hash":"01ce0f1a63fbf974ed1ba29122fbee323fabadc6","modified":1690043131725},{"_id":"source/k8s/k8s记不住的命令.md","hash":"14b5c84b74a93c3d24649c78e452417834c531ca","modified":1690043240457},{"_id":"source/tags/index.md","hash":"b679621d505b6ce842cbe1d36ec048474e5d5bc0","modified":1690043689854},{"_id":"source/工具/Macos-好用工具推荐.md","hash":"0d04073bc5b593b4a4b5310bdc187980ff3836ef","modified":1690043744004},{"_id":"source/tools/Macos-好用工具推荐.md","hash":"58c70acf436e287f73a318ffa0d45fb72444766c","modified":1690043806231},{"_id":"source/tools/index.md","hash":"d0b531476426f640c2d35a1de61591c1fa7f6964","modified":1690043927029},{"_id":"source/_posts/tools/Macos-好用工具推荐.md","hash":"58c70acf436e287f73a318ffa0d45fb72444766c","modified":1690043806231},{"_id":"source/_posts/tools/index.md","hash":"d0b531476426f640c2d35a1de61591c1fa7f6964","modified":1690043927029},{"_id":"source/_posts/工具/index.md","hash":"848a1a9a9677a1e38dc07188c51e0abd9e58034e","modified":1690044037947},{"_id":"source/_posts/工具/Macos-好用工具推荐.md","hash":"67e7ffd225e213af296518bec153f0c370152f16","modified":1692265190037},{"_id":"source/_posts/工具/vscode必备插件.md","hash":"6325edcb78278d383033a895c4d9aea82c499adb","modified":1692265182538},{"_id":"source/_posts/k8s/k8s记不住的命令.md","hash":"9c143ffb86efe6e06c684dd8d2ff7c8f8f65f526","modified":1692265628358},{"_id":"source/_posts/linux/Makefile模版.md","hash":"150a98ffb146506067b4ca5cac6706d74ee73277","modified":1693216238833},{"_id":"source/_posts/工具/chrome浏览器如何屏蔽无效请求.md","hash":"f27e5ea0ed9e7420ad988e809287c890fd90ff36","modified":1692265197303},{"_id":"source/_posts/docker/docker记不住的命令.md","hash":"44a8bb4f40057a53778657aa85db0beb2f8ffa51","modified":1693881709220},{"_id":"source/_posts/docker/gin跨域问题.md","hash":"ae813ce71dfb36280edae99c5fa412d17666dec6","modified":1690044196066},{"_id":"source/_posts/golang/无法下载kubernetes包.md","hash":"3a13921e0c694d820d39283ffc29611326760a11","modified":1692265240067},{"_id":"source/_posts/k8s/一键安装快捷命令.md","hash":"d0720013076ad0d63bfe96ddf10c6bf024870979","modified":1690209493887},{"_id":"source/shells/shell.sh","hash":"7a5c6c538edda2603e700647833369ce713704a6","modified":1690098219032},{"_id":"source/_posts/linux/网络.md","hash":"10c4ce76e589b3a6f049326e3ac709dc7c2d84e4","modified":1692182053758},{"_id":"themes/pure/layout/_partial/article-copy-code.ejs","hash":"87c3048e7f450807d479f3520768cd490b1c8a6c","modified":1690127522911},{"_id":"source/_posts/golang/如何分配IP.md","hash":"a6c9c2d9ff398ac2842777a016273cc6911f8d15","modified":1692265237594},{"_id":"source/_posts/golang不失优雅.md","hash":"6a40cefa4c9f35fa8d925b596ac6bc78d9403d65","modified":1690425850923},{"_id":"source/_posts/k8s/使用kubeadm安装集群.md","hash":"9e9887faae947c8408977fdbcf76314e78bf9f02","modified":1692266542990},{"_id":"source/shells/k8s_alias_uninstall.sh","hash":"bca8d34cf5adf6bf9b197cf10e920f7aab2c2ee9","modified":1692254354353},{"_id":"source/_posts/k8s/使用client-go操作自定义CRD.md","hash":"80ea8cf5ef11ef838aa7987920b2f3e1ce80a003","modified":1692266567299},{"_id":"source/_posts/linux/文件、磁盘相关命令.md","hash":"aec2a40ac3fec412b118962c2c7d2e8d673e2ccf","modified":1692182057125},{"_id":"source/shells/k8s_alias_install.sh","hash":"519712816fce11b75d558b9b20df01d7385dc53d","modified":1692252959388},{"_id":"source/_posts/golang/golang time包用法.md","hash":"a032ac03dec6483390243755ae8d165b1a0d47b7","modified":1690430185470},{"_id":"source/_posts/k8s/flannel、calico.md","hash":"8cd6880a9673905900ff4036a415f2161c02953e","modified":1691578617786},{"_id":"source/_posts/docker/Dockerfile模板.md","hash":"542b49d7e8b8bfe0bdcf534704199fb9a9360a93","modified":1690443250217},{"_id":"source/_posts/golang/golang-time包用法.md","hash":"419df6e548fc0e46fda87930954e4f7ca4f2a8b6","modified":1692503669390},{"_id":"source/_posts/k8s/一键安装kubectl快捷命令.md","hash":"2c0d084e3a3a3b844fd093842f68dd0ef65bd58c","modified":1690448484400},{"_id":"source/_posts/docker/Dockerfile使用.md","hash":"66874c0b3427d1b262859aeffab0628b3f0c697e","modified":1690451584474},{"_id":"source/_posts/golang/golang细节.md","hash":"23377a6f796ca1604d1b8858968d3fa27743107e","modified":1692172198703},{"_id":"source/_posts/golang/viper配置文件.md","hash":"f3ecca3d1937d5013fdaf6fd6736b550ebd3d4f2","modified":1692265259956},{"_id":"source/_posts/工具/xui客户端配置.md","hash":"c7d6999281dd4019942ee26c8f5a78fc82e8d8e5","modified":1692266635655},{"_id":"source/_posts/k8s/安装kubectl快捷命令.md","hash":"bc048b11399cff716d380d03bd5b356264ac3c06","modified":1692265263034},{"_id":"source/_posts/工具/oh-my-zsh-让终端飞.md","hash":"647271a31d1bc2bebdb7f1af17ef2234bbbd9e2e","modified":1693302854592},{"_id":"source/_posts/工具/chatgpt.md","hash":"f960bafe603aaf7e949c863d4f13933751032232","modified":1692265224625},{"_id":"public/atom.xml","hash":"dae0966fabb1a4f3d724ea75dd19e16c4ea8b6f2","modified":1692171018980},{"_id":"public/baidusitemap.xml","hash":"30e2231d39ce073b95fe48f348b6b521871e6c2e","modified":1692171018980},{"_id":"public/sitemap.xml","hash":"0d22e5eb0a97e03b3a1ead4c01fc871efd650434","modified":1692171018980},{"_id":"public/sitemap.txt","hash":"2ec0c376d980e0dda2126d39ef09a0c2f6b0521b","modified":1692171018980},{"_id":"public/content.json","hash":"c2e3beef2d698cf4d0abf8fff2635d6d79d93e63","modified":1692171018980},{"_id":"public/archives/2023/page/3/index.html","hash":"f295b24b9f5b59527042526be5719c6054f8e7bc","modified":1693302987470},{"_id":"public/archives/page/3/index.html","hash":"587e4e4710351d852e8f05d3f8c0a88fecfc88e8","modified":1693302987470},{"_id":"public/archives/2023/07/page/3/index.html","hash":"1a227b817fc76d7ce5f8f50b5884f4101255d6f9","modified":1692847431196},{"_id":"public/tags/linux/index.html","hash":"f85e8849f02fc50abe7a124211a87dd170994443","modified":1693302987470},{"_id":"public/tags/index.html","hash":"f21488107d44a8388ed052c2f1468fde13f4af11","modified":1693302987470},{"_id":"public/2023/07/29/golang/golang细节/index.html","hash":"ebf2b589e21fbf12fea6bb3e464e726627a14a0e","modified":1692171018980},{"_id":"public/2023/07/28/工具/xui客户端配置/index.html","hash":"b7373a8b0d3912dd5c31774c3c185acd3ce4ca59","modified":1692872423324},{"_id":"public/2023/07/28/工具/chatgpt/index.html","hash":"9b4924d7161fe377dc1735ae88a164c463a2b84b","modified":1692872423324},{"_id":"public/2023/07/29/golang/viper配置文件/index.html","hash":"299a0fd78b9a20a0a6c030e6c9f0138f53f9c794","modified":1693881888827},{"_id":"public/2023/07/27/工具/oh-my-zsh-让终端飞/index.html","hash":"1eff22fe79ee5acc6a9e1e79d9c935c63e47c7b8","modified":1693881888827},{"_id":"public/2023/07/27/docker/Dockerfile使用/index.html","hash":"b40f38c9f4d11ff92442845db07f893d358a69e9","modified":1690876607198},{"_id":"public/2023/07/27/golang/golang-time包用法/index.html","hash":"151665dbafc87dbedf7334a8e1bbd13223df598a","modified":1693881888827},{"_id":"public/2023/07/27/k8s/flannel、calico/index.html","hash":"0053b545ad17bc016228ce43c6edbc8c2ea0e4c4","modified":1691483365135},{"_id":"public/2023/07/26/k8s/使用kubeadm安装集群/index.html","hash":"0c7e0e44cfe18e3b084ae3b5b68a9e4e425c4c46","modified":1693881888827},{"_id":"public/2023/07/25/k8s/使用client-go操作自定义CRD/index.html","hash":"f42e0657d60330531644dc6654984b45fee3ef0a","modified":1693881888827},{"_id":"public/2023/07/24/golang/如何分配IP/index.html","hash":"69ae79807eabec1344ea86a27e825baa90c9db51","modified":1693881888827},{"_id":"public/2023/07/23/k8s/安装kubectl快捷命令/index.html","hash":"f27da5bfbbab708ca65aa9dec337d94312baa61a","modified":1693881888827},{"_id":"public/2023/07/25/linux/文件、磁盘相关命令/index.html","hash":"d6bb641cb1f2c6ea0a8fa793f19ecf431592878a","modified":1692183175039},{"_id":"public/2023/07/23/k8s/k8s记不住的命令/index.html","hash":"8cfe5a360d9dda4ee46fefca2902589deff92063","modified":1693881888827},{"_id":"public/2023/07/23/linux/网络/index.html","hash":"9cde6bc9bffcafdda302e49c41a89a55a115bf2c","modified":1692183175039},{"_id":"public/2023/07/23/docker/docker记不住的命令/index.html","hash":"90bd448e295a09e2ede3810be452b2d0432df05c","modified":1693881888827},{"_id":"public/2023/07/23/工具/chrome浏览器如何屏蔽无效请求/index.html","hash":"0aeae395fb38ce70639aad2825feaedd3c916214","modified":1692872423324},{"_id":"public/2023/07/23/工具/vscode必备插件/index.html","hash":"7757f9c9ae5f48d2a32dc4476eabc74fb990f9f1","modified":1692872423324},{"_id":"public/2023/07/23/工具/Macos-好用工具推荐/index.html","hash":"0c9e7634c0ad122467082d3b88cdc6ca0dbf5469","modified":1692872423324},{"_id":"public/2023/07/23/linux/Makefile模版/index.html","hash":"f0c815386c03357936bdde7cbbf5577be5b1ec63","modified":1692872423324},{"_id":"public/2023/07/23/docker/gin跨域问题/index.html","hash":"6582c37b18434221d7fcef796468aca483d1046b","modified":1691048010791},{"_id":"public/archives/index.html","hash":"dad918acea2897316c5b18f69782826f9c2a8ece","modified":1693302987470},{"_id":"public/archives/2023/index.html","hash":"bce3e0d7875bd54a12b1c380defce8e70a7336a2","modified":1693302987470},{"_id":"public/archives/page/2/index.html","hash":"26c378ab828c0d33dfad94bee9c98079495e4147","modified":1693302987470},{"_id":"public/2023/07/23/golang/无法下载kubernetes包/index.html","hash":"1384a983f11e0a4e48c95bfdfcc7f2cf2e3f5075","modified":1693881888827},{"_id":"public/archives/2023/page/2/index.html","hash":"8c34c9f082026c33424e5b3a01b11a993f4b1870","modified":1693302987470},{"_id":"public/archives/2023/07/index.html","hash":"f07cb6f33a3a85907fdf931df9d2089059ef65ac","modified":1693302987470},{"_id":"public/archives/2023/07/page/2/index.html","hash":"6e38c0cce7ad1ab7f23ae6097d9e9bf6427cd201","modified":1693302987470},{"_id":"public/index.html","hash":"49ab44fca3fdf3d44951a46b724afadf9341f838","modified":1693881888827},{"_id":"public/tags/k8s/index.html","hash":"de4b3cb83789a28cce92910efdbe48c2c0783c1a","modified":1692847431196},{"_id":"public/tags/golang/index.html","hash":"d9c3b00d07dc85cd90c6fef38c5f0613ec3fccb0","modified":1692847431196},{"_id":"public/page/2/index.html","hash":"c244e6d59ddd04852ef8e8b0844bf1fa54972ee3","modified":1693881888827},{"_id":"public/tags/docker/index.html","hash":"a371f502c5d26225e6ed9ab8ebf8971fdeef8e20","modified":1693302987470},{"_id":"public/page/3/index.html","hash":"516e4c7328c548a7989b54d105814342b1ec0feb","modified":1693302987470},{"_id":"public/tags/工具/index.html","hash":"6e92ca1fd7837716e5e2e4ba0663c069b162b0a2","modified":1693302987470},{"_id":"public/favicon.png","hash":"89875d3b018552e396fc5f0bd8ff5d9f5d4a5d71","modified":1690785245970},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1690785245970},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1690785245970},{"_id":"public/images/avatar.jpg","hash":"5a2ecb3a8c19885475ae99afe751f40c718833a9","modified":1692081320205},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1690785245970},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1690785245970},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1690785245970},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1690785245970},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1690785245970},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1690785245970},{"_id":"public/shells/k8s_alias_install.sh","hash":"e2d660818a3e82ef0f9e5cc6153244ff4b968bcb","modified":1690785245970},{"_id":"public/shells/k8s_alias_uninstall.sh","hash":"9583e19558fe014228bfdf2c8d4591380950ce55","modified":1690785245970},{"_id":"public/images/donate/alipayimg.png","hash":"b85b03b2ea162ada14d40efb129db716fe1b3c6f","modified":1690785245970},{"_id":"public/images/donate/wechatpayimg.png","hash":"925c456c6f7696dc26103e21fddebf3a984d7d83","modified":1690785245970},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1690785245970},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1690785245970},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1690785245970},{"_id":"public/js/application.js","hash":"fd0b7529e7c0b387f88c4f28c9e272bb01169490","modified":1690785245970},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1690785245970},{"_id":"public/fonts/README.html","hash":"3b9daaf126709e3bbce5926e15d599f1fe877921","modified":1690785245970},{"_id":"public/css/style.css","hash":"d5e448217265211d2089cb78f5c444d06ba1fb0c","modified":1691657238499},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1690785245970},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1690785245970},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1690785245970},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1690785245970},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1690785245970},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1690785245970},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1690785245970},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1690785245970},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1690785245970},{"_id":"source/_posts/golang/grpc如何使用.md","hash":"e7a3e1ccd33b6eab156c2062626f558cf923a897","modified":1692265257488},{"_id":"source/_posts/golang/test.md","hash":"6d7cc1ab7b0796cd4d145ffd85e4614a86fc62e8","modified":1690800562188},{"_id":"public/2023/07/31/golang/test/index.html","hash":"4a564ccb8765e90424a281591d0e4885df04ad5d","modified":1690856296315},{"_id":"public/2023/07/31/golang/grpc如何使用/index.html","hash":"72331c39953aa70855352d6b8b57c9eb27ab1866","modified":1693881888827},{"_id":"themes/pure/source/CANME","hash":"15c5fb1d986e21e53e29f989ed097ff5c949c341","modified":1690857244345},{"_id":"public/CANME","hash":"15c5fb1d986e21e53e29f989ed097ff5c949c341","modified":1690857255409},{"_id":"themes/pure/source/CNAME","hash":"15c5fb1d986e21e53e29f989ed097ff5c949c341","modified":1690857619632},{"_id":"public/CNAME","hash":"814d4c2899886a22c1efdcb962f4701d5892bbc8","modified":1692847048190},{"_id":"source/_posts/linux/linux命令.md","hash":"2e750dc698eaab9707ed0abdacb0aa85821fe6a9","modified":1690876585306},{"_id":"public/archives/2023/08/index.html","hash":"cef895bcd1fb1abf7e323c793059522bc3c1eb4a","modified":1693302987470},{"_id":"public/2023/08/01/linux/linux命令/index.html","hash":"8f805ebb58dbc98adbeac599029a92ea3dbcd152","modified":1691048257631},{"_id":"source/_posts/docker/Dockerfile模版.md","hash":"806520d22036c9a84714f952552a077a38b44840","modified":1693019033769},{"_id":"public/2023/07/27/docker/Dockerfile模版/index.html","hash":"fd662c7c0ad883e275facdcc7260a7c0106d566b","modified":1692872423324},{"_id":"source/_posts/docker/buildx构建多版本镜像.md","hash":"a2542072cfe538a84f00cb2cc13817b14073d481","modified":1692266220521},{"_id":"public/2023/08/03/docker/buildx构建多版本镜像/index.html","hash":"10d727534815252665cf53704d4ac44a35877df2","modified":1693881888827},{"_id":"source/_posts/golang/gin跨域问题.md","hash":"0cfe105894c70e3c086d4c4b8bee054635304713","modified":1692503726102},{"_id":"public/2023/07/23/golang/gin跨域问题/index.html","hash":"d7166806df0f26039e0aee5624743627751bad7a","modified":1693881888827},{"_id":"source/_posts/linux/解压、压缩.md","hash":"d040f7cbcc0984384b712a70ed59eeddae8814b8","modified":1692182048037},{"_id":"source/_posts/linux/cronjob 定时任务.md","hash":"2a0a3e80c3c70916381bd5b4c6e6fcae2dcfc0db","modified":1692182059839},{"_id":"public/2023/08/03/linux/解压、压缩/index.html","hash":"33d8ab968c19fbf95130cc18e47f844536f6a97f","modified":1692183175039},{"_id":"public/2023/08/01/linux/cronjob 定时任务/index.html","hash":"dd3f45a19a95004de28338f5124a59c9cba511d5","modified":1692183175039},{"_id":"source/_posts/k8s/进入pod网络命名空间.md","hash":"688b32370ebe573e54d3000ede84a886980a556d","modified":1692182028703},{"_id":"public/2023/08/03/k8s/进入pod网络命名空间/index.html","hash":"ba3dff23635c5aa37846ba91d74a82fa42f054c3","modified":1692183175039},{"_id":"themes/pure/source/images copy/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1691399902627},{"_id":"themes/pure/source/images copy/avatar.jpg","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1691399902620},{"_id":"themes/pure/source/images copy/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1691399902627},{"_id":"themes/pure/source/images copy/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1691399902625},{"_id":"themes/pure/source/images copy/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1691399902626},{"_id":"themes/pure/source/images copy/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1691399902626},{"_id":"themes/pure/source/images copy/donate/alipayimg.png","hash":"b85b03b2ea162ada14d40efb129db716fe1b3c6f","modified":1691399902622},{"_id":"themes/pure/source/images copy/donate/wechatpayimg.png","hash":"925c456c6f7696dc26103e21fddebf3a984d7d83","modified":1691399902624},{"_id":"source/_posts/linux/快速开启http服务.md","hash":"1473eadf941e308c106159e5527dd0a8b1303f01","modified":1692182051049},{"_id":"themes/pure/source/images/avatar.jpg.bak","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1690040728237},{"_id":"public/2023/08/07/linux/快速开启http服务/index.html","hash":"c9e622ff81c062e2f3c071859fa2f4888fb9c868","modified":1692183175039},{"_id":"public/images/avatar.jpg.bak","hash":"f86eafc318f3900319b25057811720168f24d248","modified":1691400222890},{"_id":"source/_posts/linux/重命名文件.md","hash":"cfafba1ac62fc0f48e589e65242c5948fa54e3ed","modified":1691483357603},{"_id":"public/2023/08/08/linux/重命名文件/index.html","hash":"f5f929a9ccf1e6bf2fcb2243b8f87ec3369f4a86","modified":1692153493953},{"_id":"source/_posts/k8s/图解k8s.md","hash":"6d733cb2f9986ab423433a18f646060d82ec11af","modified":1691578101343},{"_id":"source/_posts/images/README.md","hash":"ba21732c04a9cc673f2b9769236186379b259812","modified":1691576185772},{"_id":"source/_posts/images/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691571003713},{"_id":"source/_posts/images/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691572467511},{"_id":"source/_posts/images/master-worker.jpg","hash":"d540a0df47eb53e5525c57824246e7d93e97fadd","modified":1691569452158},{"_id":"source/_posts/images/pod-allow-ip.jpg","hash":"4c260d428ee070893070b87e29f0b734b2028ce5","modified":1691571592854},{"_id":"source/_posts/images/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691572612099},{"_id":"source/_posts/images/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691576046973},{"_id":"source/_posts/images/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691576185225},{"_id":"source/_posts/k8s/图解k8s/master-worker.jpg","hash":"d540a0df47eb53e5525c57824246e7d93e97fadd","modified":1691569452158},{"_id":"source/_posts/k8s/images/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691571003713},{"_id":"source/_posts/k8s/images/README.md","hash":"ba21732c04a9cc673f2b9769236186379b259812","modified":1691576185772},{"_id":"source/_posts/k8s/images/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691572467511},{"_id":"source/_posts/k8s/images/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691576046973},{"_id":"source/_posts/k8s/images/pod-allow-ip.jpg","hash":"4c260d428ee070893070b87e29f0b734b2028ce5","modified":1691571592854},{"_id":"source/_posts/k8s/images/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691572612099},{"_id":"source/_posts/k8s/images/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691576185225},{"_id":"source/_posts/k8s/flannel、calico/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691571003713},{"_id":"source/_posts/k8s/flannel、calico/README.md","hash":"da932ce20608020f8d4fae9d16a65674c46f2f9f","modified":1691578397034},{"_id":"source/_posts/k8s/flannel、calico/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691572467511},{"_id":"source/_posts/k8s/flannel、calico/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691576046973},{"_id":"source/_posts/k8s/flannel、calico/pod-allow-ip.jpg","hash":"4c260d428ee070893070b87e29f0b734b2028ce5","modified":1691571592854},{"_id":"source/_posts/k8s/flannel、calico/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691572612099},{"_id":"source/_posts/k8s/flannel、calico/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691576185225},{"_id":"source/_posts/k8s/flannel、calico/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1691578360348},{"_id":"source/_posts/k8s/flannel、calico/pod-allow-ip.png","hash":"b26dc61cdb4d3f63d603f72b26654f81a0fb2647","modified":1691578226970},{"_id":"source/_posts/k8s/使用kubeadm安装集群/master-worker.jpg","hash":"d540a0df47eb53e5525c57824246e7d93e97fadd","modified":1691569452158},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1691578360348},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691571003713},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691576046973},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/pod-allow-ip.png","hash":"b26dc61cdb4d3f63d603f72b26654f81a0fb2647","modified":1691578226970},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691572612099},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/flannel-host-gw-1.png","hash":"5dd02878b32076dfa3288f36cfc713aa15534106","modified":1691650443683},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691572467511},{"_id":"source/_posts/k8s/kubernetes神经元--CNI/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691576185225},{"_id":"source/_posts/k8s/kubernetes神经元--CNI.md","hash":"300e23c545a9093deceaf50b90e87cfca5d18de2","modified":1691650893519},{"_id":"source/_posts/k8s/使用kubeadm安装集群/master-worker.png","hash":"205b80d0850b32e3fcf44ed1029a9a48d1535e6a","modified":1691648037505},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691571003713},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1691578360348},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691572467511},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691576046973},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691572612099},{"_id":"source/_posts/k8s/容器网络接口（CNI）/pod-allow-ip.png","hash":"5cb1e108b920544d265a70d74cbb1d47dc9d4a75","modified":1693218882712},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","hash":"5dd02878b32076dfa3288f36cfc713aa15534106","modified":1691650443683},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691576185225},{"_id":"source/_posts/k8s/容器网络接口（CNI）.md","hash":"6e45ecc48deca771ed517b765a6952a258c021aa","modified":1692265265715},{"_id":"themes/pure/layout/_partial/post/updated.ejs","hash":"08949c1b8508036e37d070af48ae36c7bf311b19","modified":1691653512165},{"_id":"themes/pure/source/css/.style.css.swp","hash":"aab5853d97563760b71d2343a97d19abb880d23b","modified":1691652967910},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-2.png","hash":"0973ffa76ac0dee1a848298003b1bfd82a136868","modified":1691656497420},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-1.png","hash":"c2983f7064f783bae2f3a3196afe379c7e981ef0","modified":1691656403899},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-bgp-1.png","hash":"95729aad6f8a558b9d0eac944d700d51ce1b1faa","modified":1691656635624},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/index.html","hash":"c638cc6b792d15d8cdb9dca4048e3a240324e0bc","modified":1693881888827},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-modes.jpg","hash":"b13ae2281669e95a8a5dce1e2df78793fafaec25","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-ipip-2.png","hash":"0973ffa76ac0dee1a848298003b1bfd82a136868","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","hash":"3639b068d101d8511e417231907fa45ab1c2ee90","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-ipip-1.png","hash":"c2983f7064f783bae2f3a3196afe379c7e981ef0","modified":1691657238499},{"_id":"public/2023/07/26/k8s/使用kubeadm安装集群/master-worker.png","hash":"205b80d0850b32e3fcf44ed1029a9a48d1535e6a","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/cri-cni.png","hash":"802b673acd5f8a76a1effcb4cefc0f807d696495","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/calico-bgp-1.png","hash":"95729aad6f8a558b9d0eac944d700d51ce1b1faa","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","hash":"b6149599f5d0df51635744f9443ce10a11d16e99","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/pod-allow-ip.png","hash":"5cb1e108b920544d265a70d74cbb1d47dc9d4a75","modified":1693302987470},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/cni-plugins.png","hash":"6fbe21d39c3c8366ec5badae48040b682a46a66f","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","hash":"5dd02878b32076dfa3288f36cfc713aa15534106","modified":1691657238499},{"_id":"public/2023/07/27/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","hash":"a4a1f4402542d2743fe0e352abe506cdbd6651ba","modified":1691657238499},{"_id":"source/_posts/工具/git使用指南.md","hash":"204df4b1fd937dcabdfae9c131df7014c84f94ee","modified":1692867088090},{"_id":"public/2023/08/16/工具/git使用指南/index.html","hash":"a4e9c0afe6623b0c290dfbb1c35835485f7c54b6","modified":1693881888827},{"_id":"source/_posts/linux-命令大全.md","hash":"210fa74c0b27e2f75936d163a2afa4131b68c19d","modified":1692168265995},{"_id":"source/_posts/linux/nas中重命名文件.md","hash":"0149d4d04a65388182bb05800a3b2f9df2ed2836","modified":1692265821791},{"_id":"public/archives/page/4/index.html","hash":"c358cdf842486502049f32d47d0e0822f4ae9bab","modified":1692183175039},{"_id":"public/archives/2023/page/4/index.html","hash":"e8b27b8b57771a3942412b5058d2b253dc9193b5","modified":1692183175039},{"_id":"public/page/4/index.html","hash":"379bc2e05309e9665abd661c15242af82476e93d","modified":1692183175039},{"_id":"public/2023/08/16/linux-命令大全/index.html","hash":"8a5752868de3993a34f3136509a361799e4d7457","modified":1692168394592},{"_id":"public/2023/08/08/linux/nas中重命名文件/index.html","hash":"d8087a99f4d96ec8a0075e2b46c3349df29ead3b","modified":1692847980165},{"_id":"source/_posts/linux/linux-命令大全.md","hash":"6ce8dbe5c608d14e34f5accd5325450d31566574","modified":1693448830462},{"_id":"public/2023/08/16/linux/linux-命令大全/index.html","hash":"b57fed08a8bbfa2e4d130936444ea6ef804272c5","modified":1693881888827},{"_id":"source/_posts/golang/golang垃圾回收.md","hash":"5711a0ad9db3eba97b01d9066c0f48f2231eaa47","modified":1692265251239},{"_id":"source/_posts/工具/markdown使用.md","hash":"97d10efe0b0fe549dc1dd6480137d1baa9711464","modified":1692265187998},{"_id":"source/_posts/golang/golang面试.md","hash":"d202b500bbf5cd542ed2616d137f74ccd34576e2","modified":1692265254976},{"_id":"source/_posts/golang/golang垃圾回收/1.png","hash":"b02af1ab675cbf98ebf8c8e1ca5c017334fd31a7","modified":1692177548078},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1692179605811},{"_id":"themes/butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1692179605821},{"_id":"themes/butterfly/_config.yml","hash":"da4b4829e1a6bd4a2d0efdb6467d1ddd974ea085","modified":1692180041372},{"_id":"themes/butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1692179605821},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1692179605811},{"_id":"themes/butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1692179605811},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1692179605811},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1692179605812},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1692179605820},{"_id":"themes/butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1692179605811},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1692179605812},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1692179605820},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1692179605820},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1692179605821},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1692179605810},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1692179605811},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1692179605812},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1692179605812},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1692179605810},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1692179605811},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1692179605812},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1692179605821},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1692179605811},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1692179605814},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1692179605821},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1692179605821},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1692179605821},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1692179605821},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1692179605821},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1692179605814},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1692179605821},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1692179605821},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1692179605814},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1692179605822},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1692179605822},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1692179605822},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1692179605822},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1692179605822},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1692179605823},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1692179605823},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1692179605823},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1692179605822},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1692179605823},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1692179605822},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1692179605826},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1692179605827},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1692179605823},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692179605827},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692179605827},{"_id":"themes/butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1692179605828},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1692179605828},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692179605827},{"_id":"themes/butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1692179605827},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1692179605812},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1692179605813},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"a05638a31629182a332f431b2ac597fb6eeddcd6","modified":1692179837476},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1692179605814},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1692179605820},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1692179605819},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1692179605825},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1692179605824},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1692179605825},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1692179605825},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1692179605824},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1692179605825},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1692179605823},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1692179605823},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1692179605825},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1692179605825},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1692179605823},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1692179605825},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1692179605826},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1692179605826},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1692179605825},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1692179605825},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1692179605825},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1692179605825},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1692179605825},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1692179605826},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1692179605825},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1692179605826},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1692179605826},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1692179605828},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1692179605826},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1692179605828},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1692179605826},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1692179605815},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1692179605816},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"e55b9c0f8ced231f47eb88bd7f4ec99f29c5c29d","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1692179605817},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1692179605818},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1692179605819},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1692179605823},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1692179605823},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1692179605824},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1692179605824},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1692179605819},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1692179605819},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1692179605824},{"_id":"themes/matery/.gitignore","hash":"727607929a51db7ea10968f547c26041eee9cfff","modified":1692180320626},{"_id":"themes/matery/README.md","hash":"9d98fe84a60bd6b222740f238d83f0999eaa77a3","modified":1692180320627},{"_id":"themes/matery/_config.yml","hash":"204d1fc39c410562457f61ed5e561ae154baa239","modified":1692180320627},{"_id":"themes/matery/languages/default.yml","hash":"2ed57824573d7bed71e56023ed92500734a8886d","modified":1692180320627},{"_id":"themes/matery/CHANGELOG.md","hash":"084ec8b110a20170d08a0aa5fd8accf601051835","modified":1692180320627},{"_id":"themes/matery/LICENSE","hash":"7df059597099bb7dcf25d2a9aedfaf4465f72d8d","modified":1692180320627},{"_id":"themes/matery/README_CN.md","hash":"497c6645c55dce9f190ec7625de76083262e1707","modified":1692180320627},{"_id":"themes/matery/languages/jp.yml","hash":"a811cec0b6d91f405e8c7386a57039cd8c3448bb","modified":1692180320628},{"_id":"themes/matery/layout/404.ejs","hash":"36f8d3e530e8144bf80d0772284edd9b0da362fe","modified":1692180320628},{"_id":"themes/matery/languages/zh-CN.yml","hash":"a2695fdb7579a77daec7773a9bb8e71b9edbf16b","modified":1692180320628},{"_id":"themes/matery/languages/zh-HK.yml","hash":"51c06005927e8bde5b3e23353d2bf2c32ed855f3","modified":1692180320628},{"_id":"themes/matery/layout/about.ejs","hash":"99a74316aed478efb0db823c4460ee2e660f101c","modified":1692180320632},{"_id":"themes/matery/layout/bb.ejs","hash":"21959d702f17a3d98b716daf44c8b5eecd59c7c5","modified":1692180320632},{"_id":"themes/matery/layout/category.ejs","hash":"00019bca11fb46477f22017cb1f5ad8444da0580","modified":1692180320632},{"_id":"themes/matery/layout/contact.ejs","hash":"71ef2540fa586cd0c3b1f216f59fa9ec85fc6a38","modified":1692180320632},{"_id":"themes/matery/layout/categories.ejs","hash":"8e54665cc25d7c333da7d9f312987190be6215da","modified":1692180320632},{"_id":"themes/matery/layout/index.ejs","hash":"1656c2db90e24a360282d15c71144b4f14edb43d","modified":1692180320633},{"_id":"themes/matery/layout/friends.ejs","hash":"534511d9f38f281b531e24c19d9c1526cc7e5e27","modified":1692180320633},{"_id":"themes/matery/layout/musics.ejs","hash":"9ac6053e09ed2c8a844d7e93c3fdce4ded95248a","modified":1692180320633},{"_id":"themes/matery/layout/gallery.ejs","hash":"fcc7364b03329148ba4920cddb0d34d5b7410788","modified":1692180320633},{"_id":"themes/matery/layout/tag.ejs","hash":"85a4b05bd8a6ad0f17ff2e97dae56949b379c204","modified":1692180320633},{"_id":"themes/matery/scripts/tags/index.js","hash":"223a31ea3aa4a689d45a033c7d680cb4fff8d8af","modified":1692180320633},{"_id":"themes/matery/scripts/tags/note.js","hash":"84b0122b92342834540f69b19600cb54c50ab69e","modified":1692180320633},{"_id":"themes/matery/scripts/tags/button.js","hash":"ab02fb2da648f4f7afa0c2381aaca334bdeb54e6","modified":1692180320633},{"_id":"themes/matery/layout/layout.ejs","hash":"94c2fee85418370ca8f7d54050c852267e924eb7","modified":1692180320633},{"_id":"themes/matery/layout/archive.ejs","hash":"cdac701de8370f9f3794a0eed4165983993a1ca7","modified":1692180320632},{"_id":"themes/matery/layout/post.ejs","hash":"3d4f40121dbb75bcb71837c35ec5ee17cdffae31","modified":1692180320633},{"_id":"themes/matery/layout/tags.ejs","hash":"cf9517aa6a0111355121f44615d6923e312283c7","modified":1692180320633},{"_id":"themes/matery/layout/movies.ejs","hash":"abce85ffdd99e787e3652fbd466447e032b626bd","modified":1692180320633},{"_id":"themes/matery/layout/_partial/back-top.ejs","hash":"47ee36a042bb6d52bbe1d0f329637e8ffcf1d0aa","modified":1692180320628},{"_id":"themes/matery/layout/_partial/bg-cover-content.ejs","hash":"9e6b10d5cf4b5faf0d851f4777f75a7297ce68b9","modified":1692180320628},{"_id":"themes/matery/layout/_partial/bg-cover.ejs","hash":"02191109712f61c0e487b8f0b8466597181a9004","modified":1692180320628},{"_id":"themes/matery/layout/_partial/baidu-push.ejs","hash":"2cebcc5ea3614d7f76ec36670e68050cbe611202","modified":1692180320628},{"_id":"themes/matery/layout/_partial/background.ejs","hash":"12350c0d366141b5c27792bb414d4adc303b0a9f","modified":1692180320628},{"_id":"themes/matery/layout/_partial/baidu-analytics.ejs","hash":"3bbcdb474ca1dcad514bdc4b7763e17c55df04fd","modified":1692180320628},{"_id":"themes/matery/layout/_partial/changyan.ejs","hash":"cd919d31564e118c2ee8d5cbfb7d51ee6da15d82","modified":1692180320628},{"_id":"themes/matery/source/favicon.png","hash":"774fee8c6d0be9dbb010b20f36c06848d06e3da0","modified":1692180320635},{"_id":"themes/matery/layout/_partial/disqus.ejs","hash":"b2dc2c8b5ed56815e55cc2ea54a6dc4eeba2375d","modified":1692180320629},{"_id":"themes/matery/layout/_partial/bg-video.ejs","hash":"963422029eb5158eb5f5bc97ce19b66e5399db97","modified":1692180320628},{"_id":"themes/matery/layout/_partial/cover-style.ejs","hash":"4288b9d91b2d71404e7a509a81a5d7f7a4b8b5e8","modified":1692180320628},{"_id":"themes/matery/layout/_partial/codeblock.ejs","hash":"086a06863a0f88888707409936aa06a09ff50e3a","modified":1692180320628},{"_id":"themes/matery/layout/_partial/google-analytics.ejs","hash":"5f4992205617da5f8cc5863c62b5ec46e414e2fb","modified":1692180320629},{"_id":"themes/matery/layout/_partial/footer.ejs","hash":"e8958bc066b3c2fcd4152604cc12f30020106848","modified":1692180320629},{"_id":"themes/matery/layout/_partial/github-link.ejs","hash":"3aeb581bd78ab8e15b858e4c44c03bcf92f20b9e","modified":1692180320629},{"_id":"themes/matery/layout/_partial/gitment.ejs","hash":"90f6218512ef2eab63ada7ad2fc766ae635a2297","modified":1692180320629},{"_id":"themes/matery/layout/_partial/header.ejs","hash":"59e38c70f3d8e7165e686e5e84a627835f4321b0","modified":1692180320629},{"_id":"themes/matery/layout/_partial/head.ejs","hash":"f5c00f21af281a09dc7de89e82a3b442903451a7","modified":1692180320629},{"_id":"themes/matery/layout/_partial/gitalk.ejs","hash":"2aa8fbb04b046fa7679092a48372d7e036835dff","modified":1692180320629},{"_id":"themes/matery/layout/_partial/index-cover.ejs","hash":"e8b44268b59add61af44b7338527523d10d9d742","modified":1692180320629},{"_id":"themes/matery/layout/_partial/livere.ejs","hash":"9c3401b42ea7f26410a5593bae93ada7e57b43be","modified":1692180320629},{"_id":"themes/matery/layout/_partial/post-cover.ejs","hash":"d1c873c5de54498c722e155aadb8c0ec39485dfa","modified":1692180320630},{"_id":"themes/matery/layout/_partial/navigation.ejs","hash":"0953217f4e19a51dfc5a0ffc7d066406df18060b","modified":1692180320629},{"_id":"themes/matery/layout/_partial/paging.ejs","hash":"e2df12cf92a82b1a7a7add2eac1db1d954bc5511","modified":1692180320630},{"_id":"themes/matery/layout/_partial/post-statis.ejs","hash":"04889f9031743c6b081d02fa4027b0dbfcc45ecf","modified":1692180320630},{"_id":"themes/matery/layout/_partial/post-detail-toc.ejs","hash":"70fccaea75ce48364222c4e5de0496e556b01cb1","modified":1692180320630},{"_id":"themes/matery/layout/_partial/main-style.ejs","hash":"8819b334509682355a5e53fa0f307f90166d175c","modified":1692180320629},{"_id":"themes/matery/layout/_partial/post-detail.ejs","hash":"6261f8191c3c1159f63ec7f9293bb93f7d2a3dbb","modified":1692180320630},{"_id":"themes/matery/layout/_partial/mobile-nav.ejs","hash":"52de0cf3ce13a3477b0a1659d2b8aa41db1f622d","modified":1692180320629},{"_id":"themes/matery/layout/_partial/reprint-statement.ejs","hash":"0ce3f9361f558b99cc2f059c5e50b0e2a152ae38","modified":1692180320630},{"_id":"themes/matery/layout/_partial/share.ejs","hash":"c941730a2471d6aab367cbb6e09ed08b56c83143","modified":1692180320630},{"_id":"themes/matery/layout/_partial/post-style.ejs","hash":"243c3ba783553f25955d524fd47a5bb59a5e732b","modified":1692180320630},{"_id":"themes/matery/layout/_partial/search.ejs","hash":"150529c9fb9aa8ddb42ec3e02645d301faa2503b","modified":1692180320630},{"_id":"themes/matery/layout/_partial/twikoo.ejs","hash":"f9cb8c82b9d2a7cdb644e10718f1cdeb9400414c","modified":1692180320631},{"_id":"themes/matery/layout/_partial/reward-style.ejs","hash":"8256ed940c0185ccf01890d59fb4262f196e2323","modified":1692180320630},{"_id":"themes/matery/layout/_partial/valine.ejs","hash":"2ac48566bb806336f1e5bc5c66fc816a580d63c3","modified":1692180320631},{"_id":"themes/matery/layout/_partial/prev-next.ejs","hash":"c76b78782ea82340104fccc089417572e0adece4","modified":1692180320630},{"_id":"themes/matery/layout/_partial/waline.ejs","hash":"2658cb73ef984a30b248351d7858ee15596a6e7a","modified":1692180320631},{"_id":"themes/matery/layout/_widget/artitalk.ejs","hash":"b14e486f12b9ac42a273b80e4d785fcb94cf04b2","modified":1692180320631},{"_id":"themes/matery/layout/_partial/social-link.ejs","hash":"6f871bd3a70f720e4e451f1f4f625cbc6d8994a4","modified":1692180320630},{"_id":"themes/matery/layout/_widget/category-radar.ejs","hash":"1d8747fda89a0b2ca3c7008867cbfeecad0578a6","modified":1692180320631},{"_id":"themes/matery/layout/_widget/dream.ejs","hash":"9a472ad5591100cdb65d0df9d01034163bd6dd9d","modified":1692180320631},{"_id":"themes/matery/layout/_widget/category-cloud.ejs","hash":"1b3df1009234c0112424b497b18b4ad8240b3bc7","modified":1692180320631},{"_id":"themes/matery/layout/_widget/my-projects.ejs","hash":"ef60b64021fa349b0048425d858dfcf6c906fede","modified":1692180320631},{"_id":"themes/matery/layout/_widget/my-skills.ejs","hash":"89a0092df72d23093128f2fbbdc8ca7f83ebcfd9","modified":1692180320631},{"_id":"themes/matery/layout/_widget/day-night.ejs","hash":"ff21dd5e49e1fc9a9ab8c7d164fd4b32a8265ea2","modified":1692180320631},{"_id":"themes/matery/layout/_partial/reward.ejs","hash":"236668e72b01db91f5bf29eec4c79e34e2746d98","modified":1692180320630},{"_id":"themes/matery/layout/_widget/music.ejs","hash":"bb25a6fa51eb5ebfba687b2cbadff6c7a4b4bfef","modified":1692180320631},{"_id":"themes/matery/layout/_widget/tag-wordcloud.ejs","hash":"487aacb2454d6bf0d21cdb07ddd1fd5ddbca9038","modified":1692180320632},{"_id":"themes/matery/layout/_widget/post-calendar.ejs","hash":"48821e644bc73553d7c5c56d2e8ee111a70cd776","modified":1692180320632},{"_id":"themes/matery/layout/_widget/video.ejs","hash":"5e5ec78f8ab229d54786ef2e0ea2864af2dc459f","modified":1692180320632},{"_id":"themes/matery/layout/_widget/musics.ejs","hash":"bfebdf0731fee0cd4fd51efa0da1d0184565ae25","modified":1692180320631},{"_id":"themes/matery/layout/_widget/my-gallery.ejs","hash":"65a2d2f9722f84c7fd98f6bdf79087a14848ebd8","modified":1692180320631},{"_id":"themes/matery/layout/_widget/post-charts.ejs","hash":"ab5f986f428215941aeaa0c88aefd440c47d3bcf","modified":1692180320632},{"_id":"themes/matery/layout/_widget/tag-cloud.ejs","hash":"fc42b72cddc231f7485cdc1fd6852b66be6add26","modified":1692180320632},{"_id":"themes/matery/layout/galleries.ejs","hash":"85b8b9e583ffa7a4ee6d0c2be4779cb2f7d91777","modified":1692180320633},{"_id":"themes/matery/source/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1692180320634},{"_id":"themes/matery/source/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1692180320634},{"_id":"themes/matery/layout/_widget/recommend.ejs","hash":"8551137e94ca4e2e3b8b63d5626255884cb60cb5","modified":1692180320632},{"_id":"themes/matery/source/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1692180320634},{"_id":"themes/matery/source/css/gallery.css","hash":"015097ca1271dd44e6d663332587dbe58ae2ade8","modified":1692180320634},{"_id":"themes/matery/source/css/post.css","hash":"1ebbf9ddee7db4b3039d8d4e25f2605072ab6e24","modified":1692180320634},{"_id":"themes/matery/source/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1692180320634},{"_id":"themes/matery/source/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1692180320634},{"_id":"themes/matery/source/css/indexcover.css","hash":"00f4f498ae8514022004f2281cab8ff304cd0f37","modified":1692180320634},{"_id":"themes/matery/source/js/gallery-encrypt.js","hash":"f611a391d62da17b71f75577a72ad246ef6c5a71","modified":1692180320635},{"_id":"themes/matery/source/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1692180320634},{"_id":"themes/matery/source/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1692180320636},{"_id":"themes/matery/source/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1692180320634},{"_id":"themes/matery/source/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1692180320635},{"_id":"themes/matery/source/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1692180320636},{"_id":"themes/matery/source/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1692180320636},{"_id":"themes/matery/source/css/reward.css","hash":"56f8d21c3bb1dc57c762a63d13b08161d8260738","modified":1692180320635},{"_id":"themes/matery/source/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1692180320676},{"_id":"themes/matery/source/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1692180320636},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1692180320636},{"_id":"themes/matery/source/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1692180320683},{"_id":"themes/matery/source/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1692180320686},{"_id":"themes/matery/source/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1692180320637},{"_id":"themes/matery/source/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1692180320673},{"_id":"themes/matery/source/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1692180320642},{"_id":"themes/matery/source/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1692180320642},{"_id":"themes/matery/source/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1692180320642},{"_id":"themes/matery/source/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1692180320642},{"_id":"themes/matery/source/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1692180320637},{"_id":"themes/matery/source/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1692180320636},{"_id":"themes/matery/source/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1692180320636},{"_id":"themes/matery/source/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1692180320642},{"_id":"themes/matery/source/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1692180320642},{"_id":"themes/matery/source/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1692180320642},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1692180320642},{"_id":"themes/matery/source/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1692180320642},{"_id":"themes/matery/source/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1692180320641},{"_id":"themes/matery/source/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1692180320648},{"_id":"themes/matery/source/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1692180320646},{"_id":"themes/matery/source/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1692180320648},{"_id":"themes/matery/source/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1692180320649},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.css","hash":"b9323091d50785ad6c617d7cae76a41a89eb44b3","modified":1692180320649},{"_id":"themes/matery/source/libs/justifiedGallery/justifiedGallery.min.js","hash":"6f5433cc9f19ce2403e903e5d01a4c7b38f0969b","modified":1692180320649},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1692180320661},{"_id":"themes/matery/source/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1692180320649},{"_id":"themes/matery/source/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1692180320665},{"_id":"themes/matery/source/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1692180320664},{"_id":"themes/matery/source/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1692180320651},{"_id":"themes/matery/source/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1692180320646},{"_id":"themes/matery/source/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1692180320664},{"_id":"themes/matery/source/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1692180320664},{"_id":"themes/matery/source/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1692180320665},{"_id":"themes/matery/source/libs/others/TencentCaptcha.js","hash":"fb4d34c48567b7b992aac1c75f0d24c3eb2cc3fa","modified":1692180320664},{"_id":"themes/matery/source/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1692180320665},{"_id":"themes/matery/source/libs/others/sakura.js","hash":"b6ebe8f040c84f067300996a5f377846f01605fa","modified":1692180320665},{"_id":"themes/matery/source/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1692180320665},{"_id":"themes/matery/source/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1692180320665},{"_id":"themes/matery/source/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1692180320665},{"_id":"themes/matery/source/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1692180320667},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1692180320670},{"_id":"themes/matery/source/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1692180320671},{"_id":"themes/matery/source/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1692180320669},{"_id":"themes/matery/source/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1692180320669},{"_id":"themes/matery/source/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1692180320676},{"_id":"themes/matery/source/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1692180320676},{"_id":"themes/matery/source/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1692180320676},{"_id":"themes/matery/source/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1692180320676},{"_id":"themes/matery/source/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1692180320678},{"_id":"themes/matery/source/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1692180320679},{"_id":"themes/matery/source/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1692180320679},{"_id":"themes/matery/source/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1692180320678},{"_id":"themes/matery/source/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1692180320680},{"_id":"themes/matery/source/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1692180320680},{"_id":"themes/matery/source/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1692180320681},{"_id":"themes/matery/source/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1692180320681},{"_id":"themes/matery/source/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1692180320682},{"_id":"themes/matery/source/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1692180320681},{"_id":"themes/matery/source/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1692180320686},{"_id":"themes/matery/source/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1692180320682},{"_id":"themes/matery/source/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1692180320686},{"_id":"themes/matery/source/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1692180320682},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1692180320639},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1692180320641},{"_id":"themes/matery/source/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1692180320650},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1692180320650},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1692180320650},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1692180320639},{"_id":"themes/matery/source/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1692180320650},{"_id":"themes/matery/source/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1692180320650},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1692180320641},{"_id":"themes/matery/source/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1692180320650},{"_id":"themes/matery/source/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1692180320649},{"_id":"themes/matery/source/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1692180320669},{"_id":"themes/matery/source/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1692180320668},{"_id":"themes/matery/source/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1692180320650},{"_id":"themes/matery/source/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1692180320650},{"_id":"themes/matery/source/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1692180320668},{"_id":"themes/matery/source/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1692180320668},{"_id":"themes/matery/source/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1692180320668},{"_id":"themes/matery/source/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1692180320668},{"_id":"themes/matery/source/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1692180320668},{"_id":"themes/matery/source/libs/fancybox/fancybox.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1692180320646},{"_id":"themes/matery/source/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1692180320649},{"_id":"themes/matery/source/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1692180320648},{"_id":"themes/matery/source/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1692180320673},{"_id":"themes/matery/source/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1692180320674},{"_id":"themes/matery/source/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1692180320675},{"_id":"themes/matery/source/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1692180320677},{"_id":"themes/matery/source/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1692180320679},{"_id":"themes/matery/source/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1692180320677},{"_id":"themes/matery/source/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1692180320679},{"_id":"themes/matery/source/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1692180320678},{"_id":"themes/matery/source/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1692180320680},{"_id":"themes/matery/source/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1692180320679},{"_id":"themes/matery/source/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1692180320680},{"_id":"themes/matery/source/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1692180320678},{"_id":"themes/matery/source/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1692180320682},{"_id":"themes/matery/source/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1692180320682},{"_id":"themes/matery/source/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1692180320681},{"_id":"themes/matery/source/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1692180320638},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1692180320639},{"_id":"themes/matery/source/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1692180320677},{"_id":"themes/matery/source/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1692180320643},{"_id":"themes/matery/source/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1692180320652},{"_id":"themes/matery/source/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1692180320651},{"_id":"themes/matery/source/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1692180320673},{"_id":"themes/matery/source/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1692180320671},{"_id":"themes/matery/source/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1692180320676},{"_id":"themes/matery/source/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1692180320674},{"_id":"themes/matery/source/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1692180320676},{"_id":"themes/matery/source/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1692180320637},{"_id":"themes/matery/source/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1692180320684},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1692180320639},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1692180320641},{"_id":"themes/matery/source/js/crypto-js.js","hash":"ddacd177f23f65ff97b93b0417048f51928ee17e","modified":1692180320635},{"_id":"themes/matery/source/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1692180320672},{"_id":"themes/matery/source/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1692180320675},{"_id":"themes/matery/source/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1692180320686},{"_id":"themes/matery/source/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1692180320641},{"_id":"themes/matery/source/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1692180320670},{"_id":"themes/matery/source/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1692180320667},{"_id":"themes/matery/source/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1692180320684},{"_id":"themes/matery/source/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1692180320645},{"_id":"themes/matery/source/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1692180320648},{"_id":"themes/matery/source/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1692180320664},{"_id":"themes/matery/source/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1692180320660},{"_id":"source/about/index.md","hash":"12e90474b3046c6986a3ee5fe07225e6d830c29c","modified":1692251643763},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1688287284000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1688287284000},{"_id":"themes/fluid/.gitignore","hash":"ae3bfcb89777657c5dfb5169d91445dcb0e5ab98","modified":1688287284000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1688287284000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1688287284000},{"_id":"themes/fluid/package.json","hash":"41983970c0977b3c626c3f1e3c714cf78ac6a04e","modified":1688287284000},{"_id":"themes/fluid/README.md","hash":"49f681a203eecfa7127ac22edc13bd3b49693d0a","modified":1688287284000},{"_id":"themes/fluid/README_en.md","hash":"49541d4ec48c4b517c5b3fe17a2e92d87090d007","modified":1688287284000},{"_id":"themes/fluid/LICENSE","hash":"26f9356fd6e84b5a88df6d9014378f41b65ba209","modified":1688287284000},{"_id":"themes/fluid/languages/en.yml","hash":"cb11b39f44ea069652c9647179606b6cecc98d50","modified":1688287284000},{"_id":"themes/fluid/languages/es.yml","hash":"7112594259c88c04714be152af7fd377687dad40","modified":1688287284000},{"_id":"themes/fluid/languages/ru.yml","hash":"7dc78f22696649a4c68dc65a9b52d9a992fa82a0","modified":1688287284000},{"_id":"themes/fluid/_config.yml","hash":"affb11139ecade037249a72788dba88e59ff00a7","modified":1692847429239},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"f96a22f989897ecddc69d5867a206e1cf6b8f610","modified":1688287284000},{"_id":"themes/fluid/languages/zh-HK.yml","hash":"80ed400a7adaa92ea54fc7f5d534c9af795bed00","modified":1688287284000},{"_id":"themes/fluid/languages/de.yml","hash":"0e7d455d9e004ff15d8924b7a0c35cea25ee5b1d","modified":1688287284000},{"_id":"themes/fluid/layout/404.ejs","hash":"b84d575c7b7f778b4cb64e89ad3d0aed4a896820","modified":1688287284000},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"596d031dff3826ae8e4ffc8931fff28977b73247","modified":1688287284000},{"_id":"themes/fluid/layout/about.ejs","hash":"163bee643e6a38912d3ae70923c83c48d57222e7","modified":1688287284000},{"_id":"themes/fluid/layout/archive.ejs","hash":"7c1f44005849791feae4abaa10fae4cb983d3277","modified":1688287284000},{"_id":"themes/fluid/layout/categories.ejs","hash":"13859726c27b6c79b5876ec174176d0f9c1ee164","modified":1688287284000},{"_id":"themes/fluid/languages/ja.yml","hash":"3dd6d20f8d26585a7c154a8e59fe8d5d902f4c6a","modified":1688287284000},{"_id":"themes/fluid/layout/links.ejs","hash":"1cac32ec4579aaf7b9fa39d317497331d4c5e1dd","modified":1688287284000},{"_id":"themes/fluid/layout/category.ejs","hash":"f099161b738a16a32253f42085b5444f902018ed","modified":1688287284000},{"_id":"themes/fluid/layout/index.ejs","hash":"9b4c154462ce78de4c9ea7dd15dce4ca8e8c1cf8","modified":1688287284000},{"_id":"themes/fluid/layout/page.ejs","hash":"ed5007a3feb8f14d3d2843271bfb298eb0c56219","modified":1688287284000},{"_id":"themes/fluid/layout/layout.ejs","hash":"7e0023474128fbe4d68c467704c41f1712432415","modified":1688287284000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1688287284000},{"_id":"themes/fluid/layout/post.ejs","hash":"75ab6958d929e92566ca580d0b8bd0eeae10649a","modified":1688287284000},{"_id":"themes/fluid/layout/tag.ejs","hash":"9d686364c4d16a1a9219471623af452035c5b966","modified":1688287284000},{"_id":"themes/fluid/.github/workflows/publish.yaml","hash":"6f02e6440d88629229556e3fd47d0280fe2240db","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1688287284000},{"_id":"themes/fluid/languages/eo.yml","hash":"a556251cc50a5680578c03f1efbf252b1f4ab860","modified":1688287284000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"554c0d0e086a0784d83ee71c83f8bceeb60aecc8","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"fff07ce0472afc368d388637cb9d438195da9b5b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/archive-list.ejs","hash":"7520fbf91f762207c2ab06b2c293235cd5b23905","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-list.ejs","hash":"f8d2f1907450e61968e6d54443e9be8138196a77","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments.ejs","hash":"d707c47b2638c94e489bc43d4cfd098b7c58447f","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer.ejs","hash":"10ccfb8eef4e16182183c9a3e175c90d5b6397d3","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/head.ejs","hash":"7b7b1d098726e86687a15fe3d520d178577ffcae","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header.ejs","hash":"0d5e397d30051e5fbabe7b47cfd1f1e6a5820af1","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/css.ejs","hash":"85f6e051550907681ab4ed2e268ac8f6e9ebf931","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/category-chains.ejs","hash":"18309584aab83bc4deb20723ebad832149dd2e24","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/markdown-plugins.ejs","hash":"fc4bdf7de0cf1a66d0e5e4fba1b31d6f7ed49468","modified":1688287284000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"c8b0d49c49e3c88872fd3b37909345ff5b2b6aa0","modified":1688287284000},{"_id":"themes/fluid/scripts/events/index.js","hash":"79de5a379b28cad759a49048351c7f6b8915bd7d","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"0047666f996c54017e06668b5242ed8a311ebce0","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/default-injects.js","hash":"b2013ae8e189cd07ebc8a2ff48a78e153345210f","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/search.ejs","hash":"70e1c929e084ca8a2648cedabf29b372511ea2b8","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/index-generator.js","hash":"9159fc22fa84a7b605dd15fe4104f01fe9c71147","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"9ac5ddad06e9b0e6015ce531430018182a4bc0fa","modified":1688287284000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/engine.js","hash":"d3a231d106795ce99cb0bc77eb65f9ae44515933","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/date.js","hash":"9bda6382f61b40a20c24af466fe10c8366ebb74c","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/import.js","hash":"ca53e8dbf7d44cfd372cfa79ac60f35a7d5b0076","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/scripts.ejs","hash":"da5810785105e5075861593c7ac22c7aa9665a72","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"8e67b522c47aa250860e3fe2c733f1f958a506c0","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/scope.js","hash":"d41d9d658fcb54964b388598e996747aadb85b0f","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"2a6a8288176d0e0f6ec008056bf2745a86e8943e","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"226f99b465ff513de075a8e78b321d6cb62592ca","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/injects.js","hash":"1ad2ae6b11bd8806ee7dd6eb7140d8b54a95d613","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1688287284000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"4543b8954c5c2ca91191cc0d53cf071b3f26faaa","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"4938610c3543a921a341bc074626d511cb1a4b45","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1688287284000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"e3b456a079e5dc0032473b516c865b20f83d2c26","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/compare-versions.js","hash":"dbbc928c914fc2bd242cd66aa0c45971aec13a5d","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/resolve.js","hash":"8c4a8b62aa8608f12f1e9046231dff04859dc3e9","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/url-join.js","hash":"718aab5e7b2059a06b093ca738de420d9afa44ba","modified":1688287284000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1688287284000},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1688287284000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"33b57e4decdc5e75c518859f168c8ba80b2c665b","modified":1688287284000},{"_id":"themes/fluid/source/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1688287284000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1688287284000},{"_id":"themes/fluid/source/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1688287284000},{"_id":"themes/fluid/source/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1688287284000},{"_id":"themes/fluid/source/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1688287284000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1688287284000},{"_id":"themes/fluid/source/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1688287284000},{"_id":"themes/fluid/source/css/main.styl","hash":"855ae5fe229c51afa57f7645f6997a27a705d7e4","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight-dark.styl","hash":"45695ef75c31a4aa57324dd408b7e2327a337018","modified":1688287284000},{"_id":"themes/fluid/source/css/highlight.styl","hash":"a9efc52a646a9e585439c768557e3e3c9e3326dc","modified":1688287284000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1688287284000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1688287284000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/changyan.ejs","hash":"c9b2d68ed3d375f1953e7007307d2a3f75ed6249","modified":1688287284000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/disqus.ejs","hash":"aab4a4d24c55231a37db308ae94414319cecdd9b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/discuss.ejs","hash":"98d065b58ce06b7d18bff3c974e96fa0f34ae03a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/giscus.ejs","hash":"95f8b866b158eff9352c381c243b332a155a5110","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/utterances.ejs","hash":"c7ccf7f28308334a6da6f5425b141a24b5eca0e2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/valine.ejs","hash":"19ba937553dddd317f827d682661a1066a7b1f30","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/twikoo.ejs","hash":"d84bcb5ccd78470a60c067fc914ac0ac67ac8777","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/beian.ejs","hash":"4fb9b5dd3f3e41a586d6af44e5069afe7c81fff2","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/waline.ejs","hash":"12727da7cf3ac83443270f550be4d1c06135b52b","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/footer/statistics.ejs","hash":"454d8dd4c39f9494ebeb03ca0746f5bc122af76a","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/anchorjs.ejs","hash":"40181442d3a2b8734783a0ad7caf2d2522e3f2ab","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/analytics.ejs","hash":"4f68c80bd1395e2f6d11e373116e54de11cb62e8","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/code-widget.ejs","hash":"3a505cba37942badf62a56bbb8b605b72af330aa","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/fancybox.ejs","hash":"9d1ea2a46b8c8ad8c168594d578f40764818ef13","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/banner.ejs","hash":"e07757b59e7b89eea213d0e595cb5932f812fd32","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/math.ejs","hash":"dcbf9a381ee76f2f1f75fcbc22c50a502ec85023","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/header/navigation.ejs","hash":"870db75e4e403a840c4463dfeed2c9114846e7cc","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/highlight.ejs","hash":"7529dd215b09d3557804333942377b9e20fa554e","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/copyright.ejs","hash":"529f3069742b3d338c769ba2d836e7f3c342a09d","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/mermaid.ejs","hash":"03ac02762f801970d1c4e73d6ec8d4c503780e50","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/category-bar.ejs","hash":"8772bce97ed297e7a88523f4e939ed6436c22f87","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-top.ejs","hash":"bd01b2efc3295e9700e0a8ab38526ff87c9bb034","modified":1692337908304},{"_id":"themes/fluid/layout/_partials/post/sidebar-left.ejs","hash":"9992c99b3eb728ad195970e1b84d665f2c8691c4","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/toc.ejs","hash":"635a89060fbf72eeda066fc4bd0a97462f069417","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/meta-bottom.ejs","hash":"375974ec017696e294dc12469fb0ae257800dc2d","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"ef474d1fa5bbafc52619ced0f9dc7eaf2affb363","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/post/sidebar-right.ejs","hash":"d5fcc9b60e02f869a29a8c17a16a6028ecc1e6d8","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"44c5eb97b98813a07c659d6afedd17fad63b1821","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/encrypt.ejs","hash":"0fff24cf5bf99fbe5c56c292e2eac4a89bf29db4","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/injects.js","hash":"5ae4b07204683e54b5a1b74e931702bbce2ac23e","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"7c944c43b2ece5dd84859bd9d1fe955d13427387","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"9ba0d4bc224e22af8a5a48d6ff13e5a0fcfee2a4","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"8d3ae1ec6660fbb0e563bc08c2f8deefde1f3bf6","modified":1688287284000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"4ed5f0ae105ef4c7dd92eaf652ceda176c38e502","modified":1688287284000},{"_id":"themes/fluid/layout/_partials/plugins/typed.ejs","hash":"f345374885cd6a334f09a11f59c443b5d577c06c","modified":1688287284000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1688287284000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"b2f61b91fffb17d11ad56811f07d52d23f012741","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"97fe42516ea531fdad771489b68aa8b2a7f6ae46","modified":1688287284000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"c475e6681546d30350eaed11f23081ecae80c375","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-bar.styl","hash":"cc6df43fef6bb3efecbfdd8b9e467424a1dea581","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-chain.styl","hash":"0cdf7ef50dfd0669d3b257821384ff31cd81b7c9","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"643284c567665f96915f0b64e59934dda315f74d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"411a3fa3f924a87e00ff04d18b5c83283b049a4d","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_category/category-list.styl","hash":"7edfe1b571ecca7d08f5f4dbcf76f4ffdcfbf0b5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"e413212e5a667d5b8299c4d2a39c4dfa1378d119","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"5c7f2044e3f1da05a3229537c06bd879836f8d6e","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/print.styl","hash":"166afbc596ea4b552bad7290ec372d25ec34db7b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/comment.styl","hash":"780f3788e7357bcd3f3262d781cb91bb53976a93","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/highlight.styl","hash":"4df764d298fe556e501db4afc2b05686fe6ebcfb","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"0acbd71633bcc7191672ea4e1b2277bea350d73b","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-tag.styl","hash":"27f70062415ccf66a9b6f4952db124fc1471fda5","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/post-page.styl","hash":"ecf3488566b374d564ae985c61e08562ba908023","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_post/markdown.styl","hash":"1e3d3a82721e7c10bcfcecec6d81cf2979039452","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"7a0bd629bc234fc75e3cc8e3715ffada92f09e73","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"e0cebda4a6f499aff75e71417d88caa7ceb13b94","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"b66ab013f0f37d724a149b85b3c7432afcf460ad","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"26f71a9cd60d96bb0cb5bbdf58150b8e524d9707","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"4397037fc3f0033dbe546c33cd9dbdabd8cb1632","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"c4459248c66ea1326feed021179b847ae91d465f","modified":1688287284000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d3e75f53c59674d171309e50702954671f31f1a4","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"78704a94c0436097abfb0e0a57abeb3429c749b7","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"8bb1b68e5f3552cb48c2ffa31edbc53646a8fb4c","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"0cf2f2bb44f456150d428016675d5876a9d2e2aa","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"f0e429a27fa8a7658fcbddbb4d4dbe4afa12499a","modified":1688287284000},{"_id":"themes/fluid/source/img/fluid.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692600912198},{"_id":"themes/fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"5d225357b4a58d46118e6616377168336ed44cb2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/toc.styl","hash":"9e7452aa2372153f25d7a4675c9d36d281a65d24","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/modal.styl","hash":"adf6c1e5c8e1fb41c77ce6e2258001df61245aa2","modified":1688287284000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"2caaca71dd1ff63d583099ed817677dd267b457e","modified":1688287284000},{"_id":"themes/fluid/source/img/default.png","hash":"fe9cba3d1b9a0f06afa594497a5a3e27f85da857","modified":1692241229070},{"_id":"source/categories/index.md","hash":"35aafe0868d4ac7f2c11d161bc6be2a334f92945","modified":1692181901693},{"_id":"public/local-search.xml","hash":"45d12e1c6bcd7e011a6c0baffc33929c98d89bac","modified":1693881888827},{"_id":"public/about/index.html","hash":"362436161545fa52e1c100c2aacc7600d36fac64","modified":1692847431196},{"_id":"public/categories/golang/index.html","hash":"19ab91cd694608a7b1d5e30ed0f098ba4c8d72ce","modified":1692847431196},{"_id":"public/categories/工具/index.html","hash":"fd06f758c3c2e227f0e7ef04c1b2a0e1c61e4b36","modified":1693302987470},{"_id":"public/categories/k8s/index.html","hash":"26b785ff20466958cb3f5a5a16b2d36193f4c022","modified":1692847431196},{"_id":"public/categories/linux/index.html","hash":"be946b0bc2e20ee9007e756e664231d05c41a952","modified":1693302987470},{"_id":"public/categories/docker/index.html","hash":"df8ab0fd2323e40fc852413493409ce05d3a8472","modified":1693302987470},{"_id":"public/tags/kubectl-alias/index.html","hash":"659380f25ebf842b4bf3c8ecf2ef6a066197f521","modified":1692183175039},{"_id":"public/tags/markdown/index.html","hash":"a61649d2efbab43297b45c116f92816a4180ceaa","modified":1692847431196},{"_id":"public/404.html","hash":"15072cad995e79b34242b47f42436b4430c0d490","modified":1692847431196},{"_id":"public/links/index.html","hash":"a28f4c53f1d125bc820b551d8c770c6f9f57509b","modified":1692847431196},{"_id":"public/tags/shell/index.html","hash":"97273c1a64aa68c1c3bbcb76e4e04a06fe893d68","modified":1692872423324},{"_id":"public/categories/index.html","hash":"fcff3ac2c70fb9517789d868b8ab5d8586cbfd30","modified":1693302987470},{"_id":"public/2023/08/16/工具/markdown使用/index.html","hash":"95ded44ea13b86d3762a926cfecbd60e9aa42307","modified":1693881888827},{"_id":"public/2023/08/16/golang/golang垃圾回收/index.html","hash":"7e3686ade9ed4b2611d7005f8dfe4ca8c0667b0b","modified":1693881888827},{"_id":"public/2023/07/29/golang/golang面试/index.html","hash":"9abb1d3d90c00f8d30a68be496650d18730bb193","modified":1693881888827},{"_id":"public/css/index.css","hash":"c5e811f08e420a096391b3e555da81239347f291","modified":1692183175039},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1692183175039},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1692183175039},{"_id":"public/medias/comment_bg.png","hash":"dfc93d24081884fbc58cab0f8fd19e77d31d6123","modified":1692183175039},{"_id":"public/medias/avatar.jpg","hash":"2a6287308628881ce27b9a7de53ba15c2be00d02","modified":1692183175039},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1692183175039},{"_id":"public/medias/icp.png","hash":"27a96f31f7d0413c6ade6f40e06f021f501151c7","modified":1692183175039},{"_id":"public/medias/logo.png","hash":"d9095f5ea8719374d9d1ff020279426f5b2a1396","modified":1692183175039},{"_id":"public/medias/barrager/1.png","hash":"b8c211690dba3addedfe7b928e3936cd487df0d6","modified":1692183175039},{"_id":"public/medias/barrager/2.png","hash":"52b2b13373fe611ad2327b9b40426d6dc05b69cd","modified":1692183175039},{"_id":"public/medias/barrager/close.png","hash":"045346df61ee01abe5018c5d9ba805d2831ce7b1","modified":1692183175039},{"_id":"public/medias/barrager/0.png","hash":"b30416fd3b3aec5af3fa90823a7e2e9c0af4cda8","modified":1692183175039},{"_id":"public/libs/twikoo/twikoo.all.min.js.LICENSE.txt","hash":"1e286a31ef472fb864fe2b9502e87df9242df56b","modified":1692183175039},{"_id":"public/medias/featureimages/10.jpg","hash":"98e7f6fd9c97d4de9044b6871ca08ebf14db11b9","modified":1692183175039},{"_id":"public/medias/featureimages/15.jpg","hash":"da0fbee3b7bde1607eace377ddf834c0be99edfe","modified":1692183175039},{"_id":"public/medias/featureimages/16.jpg","hash":"97a829c4bc94f9d2929b20a1a9b798c57b9f7205","modified":1692183175039},{"_id":"public/medias/featureimages/13.jpg","hash":"35a320174f8e316e3eadaec658024276b651c6e9","modified":1692183175039},{"_id":"public/medias/featureimages/2.jpg","hash":"4bba691cf71a517ecaeaf42afd3e8f8b31e346c1","modified":1692183175039},{"_id":"public/medias/featureimages/23.jpg","hash":"7d7f37da3fa7128343adac23866449eb2c6a549a","modified":1692183175039},{"_id":"public/medias/featureimages/22.jpg","hash":"754579747a3e99747d890fca3162f370b96a7941","modified":1692183175039},{"_id":"public/medias/featureimages/21.jpg","hash":"b26edb128bb0bf58b23fd2f014e9555e89a2ca3b","modified":1692183175039},{"_id":"public/medias/featureimages/3.jpg","hash":"6ec646c2a70f5f11edacf225c1477f2200a37a96","modified":1692183175039},{"_id":"public/medias/featureimages/5.jpg","hash":"41ca20129a37fedc573eec28dd7d7b9e5b09228a","modified":1692183175039},{"_id":"public/medias/reward/alipay.jpg","hash":"1abc719b95d1b26f1f898e6b0a9b7609146e332f","modified":1692183175039},{"_id":"public/medias/reward/wechat.png","hash":"fe93385aa92fe328e01c8221a80b039be9e4e140","modified":1692183175039},{"_id":"public/medias/featureimages/7.jpg","hash":"7975141cd64e875122c0ea33daaca1a06bf00b8e","modified":1692183175039},{"_id":"public/medias/featureimages/8.jpg","hash":"8e4b7186352085483ca1174c7c0800114c48df8b","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-regular-400.woff2","hash":"f7a09bcbd996fd634045d4e79b6504c945730686","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-regular-400.ttf","hash":"9b26d745a1e69b23d71b7ea36d5de1209c997901","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.woff2","hash":"37ab2a6a0810d5a6c10a355fe1d7af0042bd6a2a","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-v4compatibility.ttf","hash":"3fc15c8154f8bd2d7bd1dfe55ae5ab1c33e5e40f","modified":1692183175039},{"_id":"public/libs/lightGallery/fonts/lg.ttf","hash":"49693fa946534a56d7e5d4274e1ce55b05d782c3","modified":1692183175039},{"_id":"public/libs/lightGallery/fonts/lg.woff","hash":"04f09ad797ced119d6608909d06e500f16a03bbb","modified":1692183175039},{"_id":"public/libs/lightGallery/img/loading.gif","hash":"15a76af2739482d8de7354abc6d8dc4fca8d145e","modified":1692183175039},{"_id":"public/libs/lightGallery/img/vimeo-play.png","hash":"9b72fc0f86a01467ed0b68c9cc4d604ec316d517","modified":1692183175039},{"_id":"public/libs/lightGallery/img/youtube-play.png","hash":"f8d11384d33b7a79ee2ba8d522844f14d5067a80","modified":1692183175039},{"_id":"public/libs/lightGallery/fonts/lg.svg","hash":"509c56c80732a1cd80df8f2b4b0ac1128c31999f","modified":1692183175039},{"_id":"public/libs/lightGallery/img/video-play.png","hash":"2962e03ddbe04d7e201a5acccac531a2bbccddfc","modified":1692183175039},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1692183175039},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1692183175039},{"_id":"public/libs/share/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1692183175039},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1692183175039},{"_id":"public/libs/share/fonts/iconfont.svg","hash":"1d56c9d5db0273f07c43cc1397e440f98ba7827a","modified":1692183175039},{"_id":"public/libs/share/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1692183175039},{"_id":"public/libs/share/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1692183175039},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1692183175039},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1692183175039},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1692183175039},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1692183175039},{"_id":"public/js/utils.js","hash":"b82e7c289a66dfd36064470fd41c0e96fc598b43","modified":1692183175039},{"_id":"public/css/bb.css","hash":"aa15633888c7cf9baea8bb48d796c68b57cf14bf","modified":1692183175039},{"_id":"public/css/gallery.css","hash":"79dfdf68d675c17782271647283c568d086e4b98","modified":1692183175039},{"_id":"public/css/post.css","hash":"d38c71eddb8af1752c48eb48595fbaf89450ff40","modified":1692183175039},{"_id":"public/css/indexcover.css","hash":"bd027eb8192b4d1b0dc9b4f965fa264e8437f847","modified":1692183175039},{"_id":"public/css/my.css","hash":"497e50351f7838f8546cac76850a42e7e380a110","modified":1692183175039},{"_id":"public/css/my-gitalk.css","hash":"af18dd29e58642c18bab9b89541767b494c468dd","modified":1692183175039},{"_id":"public/css/reward.css","hash":"98b32aabeb908727844af04c31f08da6cab08335","modified":1692183175039},{"_id":"public/css/gitment.css","hash":"2bd15cc17dca35ac3ecc0acf167a23a1dd362acd","modified":1692183175039},{"_id":"public/js/gallery-encrypt.js","hash":"18dcfa4a8da8847b64be75f287f45c0e830bbcab","modified":1692183175039},{"_id":"public/js/matery.js","hash":"aa957ea8cf6787f0ed6095fedc6cb9d7d1bf3522","modified":1692183175039},{"_id":"public/css/barrager.css","hash":"862879d9313ed8d4c721fa32ef8f94ac2f0a28ae","modified":1692183175039},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1692183175039},{"_id":"public/js/jquery.barrager.js","hash":"19c8b2498ca1083e537f7f443172970912107f83","modified":1692183175039},{"_id":"public/js/search.js","hash":"5caa2d6e3d34c334ac68dfaafc81a583d6123382","modified":1692183175039},{"_id":"public/libs/aos/aos.js","hash":"02bfb40b0c4b6e9b0b4081218357145cbb327d74","modified":1692183175039},{"_id":"public/libs/aplayer/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1692183175039},{"_id":"public/libs/aplayer/Meting.min.js","hash":"f2b3d20b8bd64ccd031c64628f2b1323078ae324","modified":1692183175039},{"_id":"public/libs/codeBlock/codeShrink.js","hash":"201e8cd761b4be557247bdaf1ebc7c11c83194f6","modified":1692183175039},{"_id":"public/libs/codeBlock/codeCopy.js","hash":"6d39a766af62e625f177c4d5cf3adc35eed71e61","modified":1692183175039},{"_id":"public/libs/codeBlock/codeBlockFuction.js","hash":"c7ab06d27a525b15b1eb69027135269e9b9132fb","modified":1692183175039},{"_id":"public/libs/codeBlock/codeLang.js","hash":"bac88b4d4e3679732d29bd037c34f089cf27cf05","modified":1692183175039},{"_id":"public/libs/background/ribbon-refresh.min.js","hash":"6d98692b2cad8c746a562db18b170b35c24402f4","modified":1692183175039},{"_id":"public/libs/background/canvas-nest.js","hash":"65333d0dbb9c1173a1b13031b230161fc42c8b2f","modified":1692183175039},{"_id":"public/libs/background/ribbon-dynamic.js","hash":"052b80c29e6bc585aa28d4504b743bdbac220a88","modified":1692183175039},{"_id":"public/libs/fancybox/jquery.fancybox.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1692183175039},{"_id":"public/libs/instantpage/instantpage.js","hash":"83ce8919b1a69b2f1809ffaf99b52a8627e650e9","modified":1692183175039},{"_id":"public/libs/background/ribbon.min.js","hash":"6a99d494c030388f96f6086a7aaa0f03f3fe532e","modified":1692183175039},{"_id":"public/libs/jqcloud/jqcloud.css","hash":"20d9f11a19d95c70e27cb922e0d6dccbec4eae89","modified":1692183175039},{"_id":"public/libs/jqcloud/jqcloud-1.0.4.min.js","hash":"257eaae3020599e4939f50d5008a743827f25b8c","modified":1692183175039},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.css","hash":"89fb099880771c23dce3005a87db36053c8c491c","modified":1692183175039},{"_id":"public/libs/mermaid/mermaid.min.css","hash":"1dbcd9312e57f2a0b569451d0028d88316614481","modified":1692183175039},{"_id":"public/libs/minivaline/MiniValine.js","hash":"f7f6cdc1b22297e02334e304444e9a8351acb455","modified":1692183175039},{"_id":"public/libs/others/busuanzi.pure.mini.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1692183175039},{"_id":"public/libs/others/TencentCaptcha.js","hash":"10a034ac0b4ebe97ec5916b092b36fa2d6e9edd0","modified":1692183175039},{"_id":"public/libs/others/clicklove.js","hash":"6a39b8c683ba5dcd92f70c6ab45d1cfac3213e8e","modified":1692183175039},{"_id":"public/libs/others/snow.js","hash":"02b1eeaca737c47be637b304feb3d36d792ee0c4","modified":1692183175039},{"_id":"public/libs/others/star.js","hash":"cf32f8ce2a1a51ba65d3b6063fe2ee1482550190","modified":1692183175039},{"_id":"public/libs/prism/prism.min.css","hash":"ed3896649670cf142e514685da2b060cca5fd43a","modified":1692183175039},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1692183175039},{"_id":"public/js/tw_cn.js","hash":"29157cdfa87aec28e56d3d5717d486bf4de07db6","modified":1692183175039},{"_id":"public/css/dark.css","hash":"be4ef08494f3c965d513d9413685c0e723f671cd","modified":1692183175039},{"_id":"public/css/matery.css","hash":"413ad9731332810823b57dd0f4c0284e3af2af63","modified":1692183175039},{"_id":"public/js/crypto-js.js","hash":"3dd73b6f13dc818a3a9c5c7424c1c4a9649b00a2","modified":1692183175039},{"_id":"public/libs/aos/aos.css","hash":"191a3705a8f63e589a50a0ff2f2c5559f1a1b6b2","modified":1692183175039},{"_id":"public/libs/aplayer/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1692183175039},{"_id":"public/libs/animate/animate.min.css","hash":"97afa151569f046b2e01f27c1871646e9cd87caf","modified":1692183175039},{"_id":"public/libs/dplayer/DPlayer.min.js","hash":"490148a22ab2b03a880495cc733ecd1840c02ed6","modified":1692183175039},{"_id":"public/libs/cryptojs/crypto-js.min.js","hash":"5989527a378b55011a59522f41eeb3981518325c","modified":1692183175039},{"_id":"public/libs/dplayer/DPlayer.min.css","hash":"f7d19655f873b813ffba5d1a17145c91f82631b8","modified":1692183175039},{"_id":"public/libs/fancybox/fancybox.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1692183175039},{"_id":"public/libs/gitment/gitment.js","hash":"28c02c45ce568e084cd1041dc493f83f9c6c88c6","modified":1692183175039},{"_id":"public/libs/jquery/jquery-3.6.0.min.js","hash":"b82d238d4e31fdf618bae8ac11a6c812c03dd0d4","modified":1692183175039},{"_id":"public/libs/materialize/materialize.min.js","hash":"8eee32acbfac59744b4053a7290f503ef623d3ab","modified":1692183175039},{"_id":"public/libs/materialize/materialize.min.css","hash":"d1328a7872827bc63e7cc4d33745397681accda8","modified":1692183175039},{"_id":"public/libs/gitalk/gitalk.css","hash":"61d71cb30f5f34cbb1f2b5bc469784d6cb908c22","modified":1692183175039},{"_id":"public/libs/gitment/gitment-default.css","hash":"2903c59ee06b965bef32e937bd69f5b0b2190717","modified":1692183175039},{"_id":"public/libs/masonry/masonry.pkgd.min.js","hash":"d20252cf76c3be8af37a8415d13ad368c762b4d8","modified":1692183175039},{"_id":"public/libs/justifiedGallery/justifiedGallery.min.js","hash":"82ab395176c927ffbb2f7c95132ee0a06cd5d64a","modified":1692183175039},{"_id":"public/libs/others/sakura-half.js","hash":"a41b64af88fdd0e2d3502752d059661c1bc743dc","modified":1692183175039},{"_id":"public/libs/others/sakura.js","hash":"9e196ab241799126e6a2dd23ee1708b1505ccbf0","modified":1692183175039},{"_id":"public/libs/others/sakura-small.js","hash":"3284a9ab71454e574d80663f3a05735cd12a6a05","modified":1692183175039},{"_id":"public/libs/others/sakura-reduce.js","hash":"f7527e9fb4e6fe2cc7c8880692d77bcda95900c7","modified":1692183175039},{"_id":"public/medias/banner/0.jpg","hash":"69ec96cd9b4bc3aa631adc9da61353f50c39f031","modified":1692183175039},{"_id":"public/medias/banner/3.jpg","hash":"4ac047e92d0363b1a61ab756aca6dac13fb77494","modified":1692183175039},{"_id":"public/medias/banner/2.jpg","hash":"39fb2535460ce66cc0b34e07ffb9411db1405f09","modified":1692183175039},{"_id":"public/medias/featureimages/11.jpg","hash":"f55972ce7175684f2b11c3c9fc2b5b14bccbfae8","modified":1692183175039},{"_id":"public/medias/featureimages/0.jpg","hash":"1c3300f029fc85d6dda6fa4f1d699551034cdaf7","modified":1692183175039},{"_id":"public/medias/featureimages/1.jpg","hash":"684ae89de8cb7acefae19f5aee6c612037c46393","modified":1692183175039},{"_id":"public/medias/featureimages/12.jpg","hash":"8a4b2e7d92ae95c3b0c921db23c35aa9a41a7d58","modified":1692183175039},{"_id":"public/medias/featureimages/17.jpg","hash":"42d47903551ee81885c1386022982cae165841c5","modified":1692183175039},{"_id":"public/medias/featureimages/14.jpg","hash":"38e11221406785bcd93aa9cd23e568e164630ef1","modified":1692183175039},{"_id":"public/medias/featureimages/18.jpg","hash":"64829272ec85bb819d55ff89e5b5fd6f64aa436b","modified":1692183175039},{"_id":"public/medias/featureimages/20.jpg","hash":"3b11f9b461168d907073f793190865fe621a8573","modified":1692183175039},{"_id":"public/medias/featureimages/19.jpg","hash":"eb250906fdbc0c408f42ae9933725bc1a05d79fb","modified":1692183175039},{"_id":"public/medias/featureimages/4.jpg","hash":"e06c47de27619984be9d5d02947f8370a432dfea","modified":1692183175039},{"_id":"public/medias/featureimages/6.jpg","hash":"c8f2aa4bbb041158b4e73733a341e6a77c8583f7","modified":1692183175039},{"_id":"public/medias/featureimages/9.jpg","hash":"b956a2291a04b2132366b53666cf34858b8bdb1f","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-brands-400.woff2","hash":"e219af1e3bbc2219359d3d0916e263b279c4abfd","modified":1692183175039},{"_id":"public/2023/08/16/golang/golang垃圾回收/1.png","hash":"b02af1ab675cbf98ebf8c8e1ca5c017334fd31a7","modified":1692183175039},{"_id":"public/libs/typed/typed.js","hash":"eaf2798298790ec3fad17f6c68b5d3b02dfd069c","modified":1692183175039},{"_id":"public/libs/scrollprogress/scrollProgress.min.js","hash":"777ffe5d07e85a14fbe97d846f45ffc0087251cc","modified":1692183175039},{"_id":"public/libs/tocbot/tocbot.min.js","hash":"39055053a477e7d54b46cfb46591f84cc3818eeb","modified":1692183175039},{"_id":"public/libs/tocbot/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1692183175039},{"_id":"public/js/color-schema.js","hash":"76a198f8721352ebeaf5b2ef2f4db00612da4796","modified":1692183175039},{"_id":"public/libs/share/css/share.min.css","hash":"8a778a86f3ce9a042df6be63a9f1039631e351a5","modified":1692183175039},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1692183175039},{"_id":"public/js/boot.js","hash":"38bd26c6b7acdafda86dda3560e6a3ca488d3c76","modified":1692183175039},{"_id":"public/js/events.js","hash":"89e3561488a618ed0caeb9edf18e441978e29c25","modified":1692183175039},{"_id":"public/js/local-search.js","hash":"b9945f76f8682f3ec32edfb285b26eb559f7b7e8","modified":1692183175039},{"_id":"public/js/plugins.js","hash":"c34916291e392a774ff3e85c55badb83e8661297","modified":1692183175039},{"_id":"public/css/highlight-dark.css","hash":"923fab6dedc88bee302659e982f9f75c5ed7d90b","modified":1692183175039},{"_id":"public/css/highlight.css","hash":"c1d8d593b6a46123391b71fcf435baba398b20bf","modified":1692183175039},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1692183175039},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1692183175039},{"_id":"public/libs/twikoo/twikoo.all.min.js","hash":"c3f5f0a69b7864e7ef5bbf99fc774bec37947d7c","modified":1692183175039},{"_id":"public/libs/valine/av-min.js","hash":"db56ef6acb789da00d39bd6b97c1b09c2d429195","modified":1692183175039},{"_id":"public/libs/valine/Valine.min.js","hash":"d081a412c63411a75a3a880ddece65335d1c3ee8","modified":1692183175039},{"_id":"public/libs/waline/Waline.min.js","hash":"94f70e622e2a1ab05adb205033a9ddf371c61534","modified":1692183175039},{"_id":"public/libs/awesome/css/all.min.css","hash":"0ae47fa834fb55de7b50c79021aeabecfae50c9c","modified":1692183175039},{"_id":"public/libs/lightGallery/css/lightgallery.min.css","hash":"7873d80020ae04955bb57521bd249a6974d1180f","modified":1692183175039},{"_id":"public/libs/awesome/css/all.css","hash":"8d63fa8b0f60a50b07ac0f7e751f6f5e02ecdc44","modified":1692183175039},{"_id":"public/libs/lightGallery/js/lightgallery-all.min.js","hash":"aab2633f69581c2e26e22a23712f1501d7fcec18","modified":1692183175039},{"_id":"public/libs/share/js/jquery.share.min.js","hash":"41367dcb857e02e3c417ebe68a554ce1d4430806","modified":1692183175039},{"_id":"public/css/main.css","hash":"21a5089e5f42c576e687f1bd9f34fffd0ca199ac","modified":1692183175039},{"_id":"public/libs/share/js/social-share.min.js","hash":"a3090a02786dcd4efc6355c1c1dc978add8d6827","modified":1692183175039},{"_id":"public/libs/echarts/echarts.min.js","hash":"9496f386a0da4601cad22c479cc5543913a4d67f","modified":1692183175039},{"_id":"public/libs/gitalk/gitalk.min.js","hash":"564fc7c731d05fa70d71ef853a2c8cc7725739e2","modified":1692183175039},{"_id":"public/libs/prism/prism.min.js","hash":"6fc9b7be93e51b4017a61483c13187af0149f194","modified":1692183175039},{"_id":"public/medias/cover.jpg","hash":"d4957ff7cc5e88555cd840f2956ab0561e6f1ccf","modified":1692183175039},{"_id":"public/medias/banner/6.jpg","hash":"ed7282cc129c4ff9f322d2f2897fb4aac5c48589","modified":1692183175039},{"_id":"public/medias/banner/1.jpg","hash":"ab122a36998a4f62a61e61a4fc5e00248113413b","modified":1692183175039},{"_id":"public/medias/banner/5.jpg","hash":"852418f4f09e796e12bc3bab7a1488d3f37d6486","modified":1692183175039},{"_id":"public/medias/images/02.jpg","hash":"a5b656606811f4d7e10307f48c0e3c373e0b886d","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-brands-400.ttf","hash":"fa5745d421c0fc90928626be98e9f8cf7580b327","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-solid-900.woff2","hash":"1979128e8ba1517d85f5e4ee505abf486c51557c","modified":1692183175039},{"_id":"public/libs/mermaid/mermaid.min.js","hash":"6bee48c26c32b90f50519f125890fcbb04779da6","modified":1692183175039},{"_id":"public/medias/banner/4.jpg","hash":"e5ac5033678afa9d69edffe9a61004f836cb5734","modified":1692183175039},{"_id":"public/medias/images/03.jpg","hash":"2bd3815508a9f5b0ae79aa780bc02ac80b2a354e","modified":1692183175039},{"_id":"public/libs/awesome/webfonts/fa-solid-900.ttf","hash":"e3339400ef6214cfa077d003daed2bfa659e2956","modified":1692183175039},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1692183175039},{"_id":"public/libs/mermaid/mermaid.js","hash":"a7933bef8aba190825ba7716497209187ac1de5d","modified":1692183175039},{"_id":"public/medias/images/01.jpg","hash":"6a81f437fb876666bafaa98b2a09bd8bd7f21832","modified":1692183175039},{"_id":"source/shells/chatgpt_test.sh","hash":"153234e06890dc43415baab400ea69957a4a6d92","modified":1692261830393},{"_id":"source/_posts/linux/linux-命令大全/top-01.png","hash":"1585417e98ad1c44f1abee8d3cf5ce5be570022c","modified":1692326344650},{"_id":"source/_posts/linux/fzf-搜索神器.md","hash":"13886c5660720ba8c07b55714b1d54c51d6cca3f","modified":1692265647329},{"_id":"source/shells/kubectx_kubens_uninstall.sh","hash":"8e456e50ac666c409ceb6e73045bbb983613a183","modified":1692254376414},{"_id":"source/shells/kubectx_kubens_install.sh","hash":"e0decb2f4c7d6f3b59064b9e2370c79ee7faedae","modified":1692254132705},{"_id":"themes/fluid/source/js/duration.js","hash":"076ade6cc598ec882028c57c353194b13e3c55fa","modified":1692240290170},{"_id":"themes/fluid/source/img/titles/markdown.png","hash":"5886c03d6c6e9e4a0b7a2e85231db4d2c7254581","modified":1692241860608},{"_id":"themes/fluid/source/img/default.bak.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1688287284000},{"_id":"source/_posts/linux/test/top-01.png","hash":"1585417e98ad1c44f1abee8d3cf5ce5be570022c","modified":1692326344650},{"_id":"source/_posts/linux/1.md","hash":"7e5598ce2cfcccd70ecf5a02bb4f44e52fb4d37f","modified":1692326876006},{"_id":"source/_posts/linux/linux-命令大全/top-02.png","hash":"51a34e7c21fc98c37f2f5b175d3bfb7ca2a47992","modified":1692330612035},{"_id":"public/tags/kubectl/index.html","hash":"bc6d0fca9085e45077791fee8b9b6f468eb423d2","modified":1692847431196},{"_id":"public/tags/alias/index.html","hash":"6fbf210da5f8471c8309aaf5aef10f486d230c08","modified":1692847431196},{"_id":"public/tags/fzf/index.html","hash":"6e07ca8fc8ea3b6abb86f0fafd38c0e74799931d","modified":1692847431196},{"_id":"public/tags/fluid/index.html","hash":"d3ef2b8421484cbe7ce1eaf428ac38c40b8835b5","modified":1692847431196},{"_id":"public/tags/alist/index.html","hash":"3012003f57466d6802565050f69fe77dc8529ac2","modified":1692872423324},{"_id":"public/tags/hexo/index.html","hash":"47c04472aef9b103353396766f1f30059ff751bb","modified":1692847431196},{"_id":"public/tags/git/index.html","hash":"19b82f7bd0f12d3f337a5c670f2299fa09272276","modified":1692847431196},{"_id":"public/tags/oh-my-zsh/index.html","hash":"6e9d72aa104e004fab286c8f1d372dcc1c92a744","modified":1692847431196},{"_id":"public/tags/cni/index.html","hash":"6f36f77f3c062214e9948588a2c9292f3eacb296","modified":1692847431196},{"_id":"public/tags/mod/index.html","hash":"2dcf46c51c46a3e8522b7439ce3157321d59ea7e","modified":1692847431196},{"_id":"public/tags/nas/index.html","hash":"d8ae8912a1949d85285b1eb5801dc70be210d09b","modified":1692872423324},{"_id":"public/2023/08/17/linux/fzf-搜索神器/index.html","hash":"80e3d056ccd701c72c7ed97838a6389e27d05a28","modified":1693881888827},{"_id":"public/2023/08/16/linux/linux-命令大全/top-01.png","hash":"1585417e98ad1c44f1abee8d3cf5ce5be570022c","modified":1692331260149},{"_id":"public/2023/08/16/linux/linux-命令大全/top-02.png","hash":"51a34e7c21fc98c37f2f5b175d3bfb7ca2a47992","modified":1692331260149},{"_id":"source/_posts/linux/玩客云入门.md","hash":"a9f291ce7de8434acba4d2b64ed5399079ce6105","modified":1692503538774},{"_id":"source/_posts/linux/frp-内网穿透.md","hash":"b0be2d09608725c29f4969c82fe4bb8308fb17ea","modified":1692503587749},{"_id":"public/tags/玩客云/index.html","hash":"d3c7841eb203f89856d8f8e11d8977cc53746973","modified":1692847431196},{"_id":"public/tags/armbian/index.html","hash":"603a6af6e9667fd3725601c2c5623545293db6b4","modified":1692847431196},{"_id":"public/tags/frp/index.html","hash":"b791cd1582dda400dd748c5bc10cc2632e5f8f4a","modified":1692847431196},{"_id":"public/2023/08/19/linux/frp-内网穿透/index.html","hash":"1c42d96f69d0aafa292c9bdf8dff54ddb4588161","modified":1693881888827},{"_id":"public/2023/08/19/linux/玩客云入门/index.html","hash":"65f3804a01f87b5229efdfc45310532a9de63871","modified":1693881888827},{"_id":"themes/fluid/source/img/fluid.png.bak","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1688287284000},{"_id":"public/img/fluid.png.bak","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1692774363455},{"_id":"themes/fluid/source/CNAME","hash":"814d4c2899886a22c1efdcb962f4701d5892bbc8","modified":1692847046562},{"_id":"themes/fluid/source/img/abcd.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692782345500},{"_id":"public/img/abcd.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692847340582},{"_id":"themes/fluid/source/img/logo.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692782345500},{"_id":"public/img/logo.png","hash":"ddb2770f72442c8b5be1a2e7a7bff8935760e88c","modified":1692847380669},{"_id":"source/_posts/linux/nas整理.md","hash":"c4e2e69822776abf170ade72f8b43d3a5056f51a","modified":1692867484713},{"_id":"public/2023/08/08/linux/nas整理/index.html","hash":"c7a52974bc132b2c7e454e179cfaeccfe16e4bd2","modified":1693881888827},{"_id":"source/_posts/linux/常用服务模板.md","hash":"34cbdb8f2f0da867a67b59fddee30dd400ee9032","modified":1693552866510},{"_id":"source/_posts/docker/Dockerfile命令.md","hash":"8238cb4ec4a8a6b3dd003d28a07c51fa3f4d720d","modified":1693216615834},{"_id":"source/_posts/linux/Sql-操作.md","hash":"720f945fd97b081ed3f6efcd187da8ff345910cd","modified":1693301254901},{"_id":"source/_posts/工具/工具大全.md","hash":"4a7e88e9427fdf678cf3c2c69e56985cd3b1748a","modified":1693302856598},{"_id":"source/_posts/工具/工具大全/iterm.png","hash":"f0feccde2da2e79050834046d2357ad875c5b4de","modified":1693302501893},{"_id":"public/archives/2023/08/page/2/index.html","hash":"59f141270cd237979de6d155232e13d7ac91b428","modified":1693302987470},{"_id":"public/tags/dockerfile/index.html","hash":"a91f975ee72b251bd56b1327d2cb49d5ceea5cbd","modified":1693302987470},{"_id":"public/tags/Makefile/index.html","hash":"d84f0dc5dd220824f5f54a1d0ec16f176bc2f964","modified":1693302987470},{"_id":"public/tags/Dockerfile/index.html","hash":"5ed0b2ff9e9786235b7b3294eb716b5e7d85989e","modified":1693302987470},{"_id":"public/tags/sql/index.html","hash":"76e8971e4b3773a926a0345fe388a1ca9a044743","modified":1693302987470},{"_id":"public/tags/ssh/index.html","hash":"255033a3d617db65216e06c44a39ff4b56de4db8","modified":1693302987470},{"_id":"public/2023/08/29/工具/工具大全/index.html","hash":"a380add79f85de0a75ec6b1b90f01e00f1134677","modified":1693881888827},{"_id":"public/2023/08/28/linux/Sql-操作/index.html","hash":"31ada20612b830c8e648a3b9a6c97056d85089fb","modified":1693881888827},{"_id":"public/2023/07/27/docker/Dockerfile命令/index.html","hash":"84f084ae466e5165c89eae404442aaa7b33c04c2","modified":1693881888827},{"_id":"public/2023/07/23/linux/常用服务模板/index.html","hash":"e1339b889b169d2afdc96f82dc656d157fe63fe2","modified":1693881888827},{"_id":"public/2023/08/29/工具/工具大全/iterm.png","hash":"f0feccde2da2e79050834046d2357ad875c5b4de","modified":1693302987470}],"Category":[{"name":"golang","_id":"clldlfbdb0001le4wglv8hsyd"},{"name":"docker","_id":"clldlgf78000ble4w2xbte8ec"},{"name":"工具","_id":"clldlgtwu000fle4wgtauhj31"},{"name":"k8s","_id":"clldlhiog000ole4w3dlgcrr3"},{"name":"linux","_id":"clldli0yp000vle4wdhdm33lj"}],"Data":[],"Page":[{"title":"tags","type":"tags","layout":"tags","date":"2023-07-22T16:24:49.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\nlayout: \"tags\"\ndate: 2023-07-23 00:24:49\n---\n","updated":"2023-07-22T16:34:49.854Z","path":"tags/index.html","_id":"clke8f2bz0002yj4w89rrge00","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"关于","date":"2023-08-16T10:06:38.000Z","_content":"\n仅供个人使用。","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2023-08-16 18:06:38\n---\n\n仅供个人使用。","updated":"2023-08-17T05:54:03.763Z","path":"about/index.html","_id":"clldkizqb0000k24w02ek0qyz","comments":1,"layout":"page","content":"<p>仅供个人使用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>仅供个人使用。</p>\n"},{"title":"categories","date":"2023-08-16T10:31:38.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-08-16 18:31:38\n---\n","updated":"2023-08-17T10:05:45.110Z","path":"categories/index.html","_id":"clldlfbd90000le4wb9ijdrph","comments":1,"layout":"page","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"layout":"docker","title":"docker记不住的命令","date":"2023-07-22T16:20:28.000Z","type":"tags","_content":"\n{% note primary%}\n\n不想记，也记不住\n\n{% endnote %}\n\n<!--more-->\n\n#### 启动一个容器\n\n```yaml\n# -p: 8888为主机端口，3306为容器端口\n# -e: 环境变量设置\n# 最后的 mysql 为镜像 \ndocker run -itd --name mysql-test -p 8888:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n#### 列出所有的容器 ID\n```sh\ndocker ps -aq\n```\n\n#### 停止所有的容器\n```sh\ndocker stop $(docker ps -aq)\n```\n\n#### 删除所有的容器\n```sh\ndocker rm $(docker ps -aq)\n```\n\n#### 删除所有的镜像\n```sh\ndocker rmi $(docker images -q)\n```\n#### 删除所有未使用的镜像\n```sh\n docker system prune -a\n```\n#### 删除 none 相关镜像\n```sh\ndocker rmi $(docker images | grep none | awk '{print $3}')     \n```\n\n#### 拉取指定版本镜像\n```sh\ndocker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7\n```\n\n#### mac 清理镜像层\n```sh\nrm ~/Library/Containers/com.docker.docker\n```\n#### 复制文件\n\n```sh\ndocker cp mycontainer:/opt/file.txt /opt/local/\ndocker cp /opt/local/file.txt mycontainer:/opt/\n```\n#### 启动 x-ui\n```sh\ndocker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest\n```\n\n#### 安装最新版 docker\n```sh\nyum update -y\n```\n你可以单独执行更新。\n\n```sh\n# 删除旧版本的Docker\nsudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\n# 安装依赖软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 添加Docker软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 更新yum缓存\nsudo yum makecache fast\n# 安装最新版Docker\nsudo yum install -y docker-ce\n# 启动Docker服务并设置开机自启动\nsudo systemctl start docker\nsudo systemctl enable docker\n# 确认Docker已安装并正在运行\ndocker --version\nsudo docker info\n```\n\n#### 查看容器资源占用\n```sh\n# 持续监控\ndocker stats\n\n# 输出当前\ndocker stats --no-stream\n```","source":"_posts/docker/docker记不住的命令.md","raw":"---\nlayout: docker\ntitle: docker记不住的命令\ndate: 2023-07-23 00:20:28\ntype: \"tags\"\ntags: \"docker\"\ncategories: docker\n---\n\n{% note primary%}\n\n不想记，也记不住\n\n{% endnote %}\n\n<!--more-->\n\n#### 启动一个容器\n\n```yaml\n# -p: 8888为主机端口，3306为容器端口\n# -e: 环境变量设置\n# 最后的 mysql 为镜像 \ndocker run -itd --name mysql-test -p 8888:3306 -e MYSQL_ROOT_PASSWORD=123456 mysql\n```\n#### 列出所有的容器 ID\n```sh\ndocker ps -aq\n```\n\n#### 停止所有的容器\n```sh\ndocker stop $(docker ps -aq)\n```\n\n#### 删除所有的容器\n```sh\ndocker rm $(docker ps -aq)\n```\n\n#### 删除所有的镜像\n```sh\ndocker rmi $(docker images -q)\n```\n#### 删除所有未使用的镜像\n```sh\n docker system prune -a\n```\n#### 删除 none 相关镜像\n```sh\ndocker rmi $(docker images | grep none | awk '{print $3}')     \n```\n\n#### 拉取指定版本镜像\n```sh\ndocker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7\n```\n\n#### mac 清理镜像层\n```sh\nrm ~/Library/Containers/com.docker.docker\n```\n#### 复制文件\n\n```sh\ndocker cp mycontainer:/opt/file.txt /opt/local/\ndocker cp /opt/local/file.txt mycontainer:/opt/\n```\n#### 启动 x-ui\n```sh\ndocker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest\n```\n\n#### 安装最新版 docker\n```sh\nyum update -y\n```\n你可以单独执行更新。\n\n```sh\n# 删除旧版本的Docker\nsudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine\n# 安装依赖软件包\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n# 添加Docker软件源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 更新yum缓存\nsudo yum makecache fast\n# 安装最新版Docker\nsudo yum install -y docker-ce\n# 启动Docker服务并设置开机自启动\nsudo systemctl start docker\nsudo systemctl enable docker\n# 确认Docker已安装并正在运行\ndocker --version\nsudo docker info\n```\n\n#### 查看容器资源占用\n```sh\n# 持续监控\ndocker stats\n\n# 输出当前\ndocker stats --no-stream\n```","slug":"docker/docker记不住的命令","published":1,"updated":"2023-09-05T02:41:49.220Z","_id":"clke8jrxr00033w4w3v7o1h18","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>不想记，也记不住</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4 id=\"启动一个容器\"><a href=\"#启动一个容器\" class=\"headerlink\" title=\"启动一个容器\"></a>启动一个容器</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># -p: 8888为主机端口，3306为容器端口</span><br><span class=\"hljs-comment\"># -e: 环境变量设置</span><br><span class=\"hljs-comment\"># 最后的 mysql 为镜像 </span><br><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-itd</span> <span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">mysql-test</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">8888</span><span class=\"hljs-string\">:3306</span> <span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=123456</span> <span class=\"hljs-string\">mysql</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"列出所有的容器-ID\"><a href=\"#列出所有的容器-ID\" class=\"headerlink\" title=\"列出所有的容器 ID\"></a>列出所有的容器 ID</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker ps -aq<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"停止所有的容器\"><a href=\"#停止所有的容器\" class=\"headerlink\" title=\"停止所有的容器\"></a>停止所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker stop $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的容器\"><a href=\"#删除所有的容器\" class=\"headerlink\" title=\"删除所有的容器\"></a>删除所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">rm</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的镜像\"><a href=\"#删除所有的镜像\" class=\"headerlink\" title=\"删除所有的镜像\"></a>删除所有的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images -q)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除所有未使用的镜像\"><a href=\"#删除所有未使用的镜像\" class=\"headerlink\" title=\"删除所有未使用的镜像\"></a>删除所有未使用的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker system prune -a<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-none-相关镜像\"><a href=\"#删除-none-相关镜像\" class=\"headerlink\" title=\"删除 none 相关镜像\"></a>删除 none 相关镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images | grep none | awk <span class=\"hljs-string\">&#x27;&#123;print $3&#125;&#x27;</span>)     <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"拉取指定版本镜像\"><a href=\"#拉取指定版本镜像\" class=\"headerlink\" title=\"拉取指定版本镜像\"></a>拉取指定版本镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mac-清理镜像层\"><a href=\"#mac-清理镜像层\" class=\"headerlink\" title=\"mac 清理镜像层\"></a>mac 清理镜像层</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">rm</span> ~/Library/Containers/com.docker.docker<br></code></pre></td></tr></table></figure>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">cp</span> mycontainer:/opt/file.txt /opt/local/<br>docker <span class=\"hljs-built_in\">cp</span> /opt/local/file.txt mycontainer:/opt/<br></code></pre></td></tr></table></figure>\n<h4 id=\"启动-x-ui\"><a href=\"#启动-x-ui\" class=\"headerlink\" title=\"启动 x-ui\"></a>启动 x-ui</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装最新版-docker\"><a href=\"#安装最新版-docker\" class=\"headerlink\" title=\"安装最新版 docker\"></a>安装最新版 docker</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum update -y<br></code></pre></td></tr></table></figure>\n<p>你可以单独执行更新。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除旧版本的Docker</span><br>sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine<br><span class=\"hljs-comment\"># 安装依赖软件包</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-comment\"># 添加Docker软件源</span><br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class=\"hljs-comment\"># 更新yum缓存</span><br>sudo yum makecache fast<br><span class=\"hljs-comment\"># 安装最新版Docker</span><br>sudo yum install -y docker-ce<br><span class=\"hljs-comment\"># 启动Docker服务并设置开机自启动</span><br>sudo systemctl start docker<br>sudo systemctl <span class=\"hljs-built_in\">enable</span> docker<br><span class=\"hljs-comment\"># 确认Docker已安装并正在运行</span><br>docker --version<br>sudo docker info<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器资源占用\"><a href=\"#查看容器资源占用\" class=\"headerlink\" title=\"查看容器资源占用\"></a>查看容器资源占用</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 持续监控</span><br>docker stats<br><br><span class=\"hljs-comment\"># 输出当前</span><br>docker stats --no-stream<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>不想记，也记不住</p>\n          </div>","more":"<h4 id=\"启动一个容器\"><a href=\"#启动一个容器\" class=\"headerlink\" title=\"启动一个容器\"></a>启动一个容器</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># -p: 8888为主机端口，3306为容器端口</span><br><span class=\"hljs-comment\"># -e: 环境变量设置</span><br><span class=\"hljs-comment\"># 最后的 mysql 为镜像 </span><br><span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">run</span> <span class=\"hljs-string\">-itd</span> <span class=\"hljs-string\">--name</span> <span class=\"hljs-string\">mysql-test</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-number\">8888</span><span class=\"hljs-string\">:3306</span> <span class=\"hljs-string\">-e</span> <span class=\"hljs-string\">MYSQL_ROOT_PASSWORD=123456</span> <span class=\"hljs-string\">mysql</span><br></code></pre></td></tr></table></figure>\n<h4 id=\"列出所有的容器-ID\"><a href=\"#列出所有的容器-ID\" class=\"headerlink\" title=\"列出所有的容器 ID\"></a>列出所有的容器 ID</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker ps -aq<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"停止所有的容器\"><a href=\"#停止所有的容器\" class=\"headerlink\" title=\"停止所有的容器\"></a>停止所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker stop $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的容器\"><a href=\"#删除所有的容器\" class=\"headerlink\" title=\"删除所有的容器\"></a>删除所有的容器</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">rm</span> $(docker ps -aq)<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"删除所有的镜像\"><a href=\"#删除所有的镜像\" class=\"headerlink\" title=\"删除所有的镜像\"></a>删除所有的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images -q)<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除所有未使用的镜像\"><a href=\"#删除所有未使用的镜像\" class=\"headerlink\" title=\"删除所有未使用的镜像\"></a>删除所有未使用的镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker system prune -a<br></code></pre></td></tr></table></figure>\n<h4 id=\"删除-none-相关镜像\"><a href=\"#删除-none-相关镜像\" class=\"headerlink\" title=\"删除 none 相关镜像\"></a>删除 none 相关镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker rmi $(docker images | grep none | awk <span class=\"hljs-string\">&#x27;&#123;print $3&#125;&#x27;</span>)     <br></code></pre></td></tr></table></figure>\n\n<h4 id=\"拉取指定版本镜像\"><a href=\"#拉取指定版本镜像\" class=\"headerlink\" title=\"拉取指定版本镜像\"></a>拉取指定版本镜像</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker pull tickstep/aliyunpan-sync:v0.2.7 --platform=linux/arm/v7<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"mac-清理镜像层\"><a href=\"#mac-清理镜像层\" class=\"headerlink\" title=\"mac 清理镜像层\"></a>mac 清理镜像层</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">rm</span> ~/Library/Containers/com.docker.docker<br></code></pre></td></tr></table></figure>\n<h4 id=\"复制文件\"><a href=\"#复制文件\" class=\"headerlink\" title=\"复制文件\"></a>复制文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker <span class=\"hljs-built_in\">cp</span> mycontainer:/opt/file.txt /opt/local/<br>docker <span class=\"hljs-built_in\">cp</span> /opt/local/file.txt mycontainer:/opt/<br></code></pre></td></tr></table></figure>\n<h4 id=\"启动-x-ui\"><a href=\"#启动-x-ui\" class=\"headerlink\" title=\"启动 x-ui\"></a>启动 x-ui</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">docker run -d --net=host --name x-ui -v /etc/x-ui:/etc/x-ui/ xxx/xxx/x-ui:latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装最新版-docker\"><a href=\"#安装最新版-docker\" class=\"headerlink\" title=\"安装最新版 docker\"></a>安装最新版 docker</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum update -y<br></code></pre></td></tr></table></figure>\n<p>你可以单独执行更新。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除旧版本的Docker</span><br>sudo yum remove docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine<br><span class=\"hljs-comment\"># 安装依赖软件包</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br><span class=\"hljs-comment\"># 添加Docker软件源</span><br>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br><span class=\"hljs-comment\"># 更新yum缓存</span><br>sudo yum makecache fast<br><span class=\"hljs-comment\"># 安装最新版Docker</span><br>sudo yum install -y docker-ce<br><span class=\"hljs-comment\"># 启动Docker服务并设置开机自启动</span><br>sudo systemctl start docker<br>sudo systemctl <span class=\"hljs-built_in\">enable</span> docker<br><span class=\"hljs-comment\"># 确认Docker已安装并正在运行</span><br>docker --version<br>sudo docker info<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看容器资源占用\"><a href=\"#查看容器资源占用\" class=\"headerlink\" title=\"查看容器资源占用\"></a>查看容器资源占用</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 持续监控</span><br>docker stats<br><br><span class=\"hljs-comment\"># 输出当前</span><br>docker stats --no-stream<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"k8s记不住的命令","date":"2023-07-22T16:29:39.000Z","_content":"\n{% note primary%}\n懒人笔记\n{% endnote %}\n\n\n<!-- more -->\n## 创建pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```\n## 更新镜像\n```sh\nkubectl set image deployment/provider provider=provider:latest\n```\n\n## 给 node/pod 打标签\n```sh\nkubectl label nodes kube-node node=kube-node\n```\n\n## 通过标签过滤\n```sh\nkubectl get node -l \"node=kube-node\"\n```\n\n## kubectl cp\n```sh\n# 拷贝pod数据到本地\nkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/foo\n\n# 拷贝本地数据到pod之中\nkubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/foo\n```\n\n## 回滚版本\n```sh\n# 查看历史版本\nkubectl rollout history deployment provider\n\n# 回滚到上一个版本\nkubectl rollout undo deployment provider\n\n# 回滚到指定版本\nkubectl rollout undo deployment provider --to-revision=2\n```\n\n## 污点\n```sh\n# <node-name> 是要添加污点的节点的名称。\n# <taint-key> 是污点的键。\n# <taint-value> 是污点的值，可以留空。\n# <taint-effect> 是污点的影响效果，可以是以下选项之一：\n# NoSchedule：表示不将新的Pod调度到有这个污点的节点上。\n# PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。\n# NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。\nkubectl taint nodes <node-name> <taint-key>=<taint-value>:<taint-effect>\n```\n\n## 探测\n* livenessProbe: 存活探测\n    * failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次\n    * initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。\n    * periodSeconds: 表示多长时间重试一次探测，默认值为10秒\n    * successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次\n    * timeoutSeconds: 表示探测请求的超时时间，默认为1秒。\n* readinessProbe: 就绪探测\n```yaml\nlivenessProbe:\n  failureThreshold: 10\n  initialDelaySeconds: 300\n  httpGet:\n    path: /-/healthy\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\nreadinessProbe:\n  initialDelaySeconds: 300\n  failureThreshold: 20\n  httpGet:\n    path: /-/ready\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\n```\n\n## 进入pod命名空间\n**1. 找到 pod 所在节点**\n```sh\nk get po -owide\n\nssh root@xx.xx.xx.xx\n```\n\n**2. 获取容器 pid**\n\n```sh\n# docker\ndocker inspect --format '{{ .State.Pid }}' 容器名/ID\n\n# containerd\ncrictl inspect 容器ID | grep pid\n```\n\n**3. 进入容器网络**\n```sh\nnsenter -t $PID -n\n```","source":"_posts/k8s/k8s记不住的命令.md","raw":"---\nlayout: k8s\ntitle: k8s记不住的命令\ndate: 2023-07-23 00:29:39\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n懒人笔记\n{% endnote %}\n\n\n<!-- more -->\n## 创建pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```\n## 更新镜像\n```sh\nkubectl set image deployment/provider provider=provider:latest\n```\n\n## 给 node/pod 打标签\n```sh\nkubectl label nodes kube-node node=kube-node\n```\n\n## 通过标签过滤\n```sh\nkubectl get node -l \"node=kube-node\"\n```\n\n## kubectl cp\n```sh\n# 拷贝pod数据到本地\nkubectl cp <some-namespace>/<some-pod>:/tmp/foo /tmp/foo\n\n# 拷贝本地数据到pod之中\nkubectl cp /tmp/foo <some-namespace>/<some-pod>:/tmp/foo\n```\n\n## 回滚版本\n```sh\n# 查看历史版本\nkubectl rollout history deployment provider\n\n# 回滚到上一个版本\nkubectl rollout undo deployment provider\n\n# 回滚到指定版本\nkubectl rollout undo deployment provider --to-revision=2\n```\n\n## 污点\n```sh\n# <node-name> 是要添加污点的节点的名称。\n# <taint-key> 是污点的键。\n# <taint-value> 是污点的值，可以留空。\n# <taint-effect> 是污点的影响效果，可以是以下选项之一：\n# NoSchedule：表示不将新的Pod调度到有这个污点的节点上。\n# PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。\n# NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。\nkubectl taint nodes <node-name> <taint-key>=<taint-value>:<taint-effect>\n```\n\n## 探测\n* livenessProbe: 存活探测\n    * failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次\n    * initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。\n    * periodSeconds: 表示多长时间重试一次探测，默认值为10秒\n    * successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次\n    * timeoutSeconds: 表示探测请求的超时时间，默认为1秒。\n* readinessProbe: 就绪探测\n```yaml\nlivenessProbe:\n  failureThreshold: 10\n  initialDelaySeconds: 300\n  httpGet:\n    path: /-/healthy\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\nreadinessProbe:\n  initialDelaySeconds: 300\n  failureThreshold: 20\n  httpGet:\n    path: /-/ready\n    port: web\n    scheme: HTTP\n  periodSeconds: 5\n  successThreshold: 1\n  timeoutSeconds: 3\n```\n\n## 进入pod命名空间\n**1. 找到 pod 所在节点**\n```sh\nk get po -owide\n\nssh root@xx.xx.xx.xx\n```\n\n**2. 获取容器 pid**\n\n```sh\n# docker\ndocker inspect --format '{{ .State.Pid }}' 容器名/ID\n\n# containerd\ncrictl inspect 容器ID | grep pid\n```\n\n**3. 进入容器网络**\n```sh\nnsenter -t $PID -n\n```","slug":"k8s/k8s记不住的命令","published":1,"updated":"2023-08-28T10:34:47.269Z","_id":"clke8k2dq00053w4whx9jgpie","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>懒人笔记</p>\n          </div>\n\n\n<span id=\"more\"></span>\n<h2 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>\n<h2 id=\"更新镜像\"><a href=\"#更新镜像\" class=\"headerlink\" title=\"更新镜像\"></a>更新镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">set</span> image deployment/provider provider=provider:latest<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"给-node-pod-打标签\"><a href=\"#给-node-pod-打标签\" class=\"headerlink\" title=\"给 node&#x2F;pod 打标签\"></a>给 node&#x2F;pod 打标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl label nodes kube-node node=kube-node<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"通过标签过滤\"><a href=\"#通过标签过滤\" class=\"headerlink\" title=\"通过标签过滤\"></a>通过标签过滤</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl get node -l <span class=\"hljs-string\">&quot;node=kube-node&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"kubectl-cp\"><a href=\"#kubectl-cp\" class=\"headerlink\" title=\"kubectl cp\"></a>kubectl cp</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 拷贝pod数据到本地</span><br>kubectl <span class=\"hljs-built_in\">cp</span> &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo<br><br><span class=\"hljs-comment\"># 拷贝本地数据到pod之中</span><br>kubectl <span class=\"hljs-built_in\">cp</span> /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"回滚版本\"><a href=\"#回滚版本\" class=\"headerlink\" title=\"回滚版本\"></a>回滚版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看历史版本</span><br>kubectl rollout <span class=\"hljs-built_in\">history</span> deployment provider<br><br><span class=\"hljs-comment\"># 回滚到上一个版本</span><br>kubectl rollout undo deployment provider<br><br><span class=\"hljs-comment\"># 回滚到指定版本</span><br>kubectl rollout undo deployment provider --to-revision=2<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"污点\"><a href=\"#污点\" class=\"headerlink\" title=\"污点\"></a>污点</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># &lt;node-name&gt; 是要添加污点的节点的名称。</span><br><span class=\"hljs-comment\"># &lt;taint-key&gt; 是污点的键。</span><br><span class=\"hljs-comment\"># &lt;taint-value&gt; 是污点的值，可以留空。</span><br><span class=\"hljs-comment\"># &lt;taint-effect&gt; 是污点的影响效果，可以是以下选项之一：</span><br><span class=\"hljs-comment\"># NoSchedule：表示不将新的Pod调度到有这个污点的节点上。</span><br><span class=\"hljs-comment\"># PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。</span><br><span class=\"hljs-comment\"># NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。</span><br>kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"探测\"><a href=\"#探测\" class=\"headerlink\" title=\"探测\"></a>探测</h2><ul>\n<li>livenessProbe: 存活探测<ul>\n<li>failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次</li>\n<li>initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。</li>\n<li>periodSeconds: 表示多长时间重试一次探测，默认值为10秒</li>\n<li>successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次</li>\n<li>timeoutSeconds: 表示探测请求的超时时间，默认为1秒。</li>\n</ul>\n</li>\n<li>readinessProbe: 就绪探测<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">livenessProbe:</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/healthy</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-attr\">readinessProbe:</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">20</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/ready</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"进入pod命名空间\"><a href=\"#进入pod命名空间\" class=\"headerlink\" title=\"进入pod命名空间\"></a>进入pod命名空间</h2><p><strong>1. 找到 pod 所在节点</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">k get po -owide<br><br>ssh root@xx.xx.xx.xx<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 获取容器 pid</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># docker</span><br>docker inspect --format <span class=\"hljs-string\">&#x27;&#123;&#123; .State.Pid &#125;&#125;&#x27;</span> 容器名/ID<br><br><span class=\"hljs-comment\"># containerd</span><br>crictl inspect 容器ID | grep pid<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 进入容器网络</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">nsenter -t <span class=\"hljs-variable\">$PID</span> -n<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>懒人笔记</p>\n          </div>","more":"<h2 id=\"创建pod\"><a href=\"#创建pod\" class=\"headerlink\" title=\"创建pod\"></a>创建pod</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>\n<h2 id=\"更新镜像\"><a href=\"#更新镜像\" class=\"headerlink\" title=\"更新镜像\"></a>更新镜像</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl <span class=\"hljs-built_in\">set</span> image deployment/provider provider=provider:latest<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"给-node-pod-打标签\"><a href=\"#给-node-pod-打标签\" class=\"headerlink\" title=\"给 node&#x2F;pod 打标签\"></a>给 node&#x2F;pod 打标签</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl label nodes kube-node node=kube-node<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"通过标签过滤\"><a href=\"#通过标签过滤\" class=\"headerlink\" title=\"通过标签过滤\"></a>通过标签过滤</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl get node -l <span class=\"hljs-string\">&quot;node=kube-node&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"kubectl-cp\"><a href=\"#kubectl-cp\" class=\"headerlink\" title=\"kubectl cp\"></a>kubectl cp</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 拷贝pod数据到本地</span><br>kubectl <span class=\"hljs-built_in\">cp</span> &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo /tmp/foo<br><br><span class=\"hljs-comment\"># 拷贝本地数据到pod之中</span><br>kubectl <span class=\"hljs-built_in\">cp</span> /tmp/foo &lt;some-namespace&gt;/&lt;some-pod&gt;:/tmp/foo<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"回滚版本\"><a href=\"#回滚版本\" class=\"headerlink\" title=\"回滚版本\"></a>回滚版本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看历史版本</span><br>kubectl rollout <span class=\"hljs-built_in\">history</span> deployment provider<br><br><span class=\"hljs-comment\"># 回滚到上一个版本</span><br>kubectl rollout undo deployment provider<br><br><span class=\"hljs-comment\"># 回滚到指定版本</span><br>kubectl rollout undo deployment provider --to-revision=2<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"污点\"><a href=\"#污点\" class=\"headerlink\" title=\"污点\"></a>污点</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># &lt;node-name&gt; 是要添加污点的节点的名称。</span><br><span class=\"hljs-comment\"># &lt;taint-key&gt; 是污点的键。</span><br><span class=\"hljs-comment\"># &lt;taint-value&gt; 是污点的值，可以留空。</span><br><span class=\"hljs-comment\"># &lt;taint-effect&gt; 是污点的影响效果，可以是以下选项之一：</span><br><span class=\"hljs-comment\"># NoSchedule：表示不将新的Pod调度到有这个污点的节点上。</span><br><span class=\"hljs-comment\"># PreferNoSchedule：表示尽量不将新的Pod调度到有这个污点的节点上。</span><br><span class=\"hljs-comment\"># NoExecute：表示不将新的Pod调度到有这个污点的节点上，并且将已经运行在节点上的Pod驱逐出节点（如果它们不匹配Pod的容忍度）。</span><br>kubectl taint nodes &lt;node-name&gt; &lt;taint-key&gt;=&lt;taint-value&gt;:&lt;taint-effect&gt;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"探测\"><a href=\"#探测\" class=\"headerlink\" title=\"探测\"></a>探测</h2><ul>\n<li>livenessProbe: 存活探测<ul>\n<li>failureThreshold: 表示连续失败探测的次数，认为容器已经死亡，默认为3次</li>\n<li>initialDelaySeconds: 表示在容器启动后多少秒开始进行探测，默认值为10秒。</li>\n<li>periodSeconds: 表示多长时间重试一次探测，默认值为10秒</li>\n<li>successThreshold: 表示连续成功探测的次数，认为容器仍处于健康状态，默认为1次</li>\n<li>timeoutSeconds: 表示探测请求的超时时间，默认为1秒。</li>\n</ul>\n</li>\n<li>readinessProbe: 就绪探测<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">livenessProbe:</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">10</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/healthy</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br><span class=\"hljs-attr\">readinessProbe:</span><br>  <span class=\"hljs-attr\">initialDelaySeconds:</span> <span class=\"hljs-number\">300</span><br>  <span class=\"hljs-attr\">failureThreshold:</span> <span class=\"hljs-number\">20</span><br>  <span class=\"hljs-attr\">httpGet:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/-/ready</span><br>    <span class=\"hljs-attr\">port:</span> <span class=\"hljs-string\">web</span><br>    <span class=\"hljs-attr\">scheme:</span> <span class=\"hljs-string\">HTTP</span><br>  <span class=\"hljs-attr\">periodSeconds:</span> <span class=\"hljs-number\">5</span><br>  <span class=\"hljs-attr\">successThreshold:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">timeoutSeconds:</span> <span class=\"hljs-number\">3</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"进入pod命名空间\"><a href=\"#进入pod命名空间\" class=\"headerlink\" title=\"进入pod命名空间\"></a>进入pod命名空间</h2><p><strong>1. 找到 pod 所在节点</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">k get po -owide<br><br>ssh root@xx.xx.xx.xx<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. 获取容器 pid</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># docker</span><br>docker inspect --format <span class=\"hljs-string\">&#x27;&#123;&#123; .State.Pid &#125;&#125;&#x27;</span> 容器名/ID<br><br><span class=\"hljs-comment\"># containerd</span><br>crictl inspect 容器ID | grep pid<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. 进入容器网络</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">nsenter -t <span class=\"hljs-variable\">$PID</span> -n<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"Golang 无法下载kubernetes包","date":"2023-07-22T16:11:45.000Z","_content":"\n\n{% note primary%}\n\n解决无法直接下载 k8s.io/kubernetes 包问题\n\n{% endnote %}\n\n<!--more-->\n\n如果我们直接 go get k8s.io/kubernetes@v1.19.2 下载依赖，会出现以下错误:\n\n```go\ngo get k8s.io/kubernetes@v1.19.2\ngo: downloading k8s.io/kubernetes v1.19.2\ngo: k8s.io/kubernetes@v1.19.2 requires\n        k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0:\n```\n\n错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录./staging/src/k8s.io对应的依赖。\n\n保存内容为 go-get-kubernetes.sh, 执行 ./go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。\n```sh\n#!/bin/sh\nset -euo pipefail\n\nVERSION=${1#\"v\"}\nif [ -z \"$VERSION\" ]; then\n    echo \"Must specify version!\"\n    exit 1\nfi\nMODS=($(\n    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod |\n    sed -n 's|.*k8s.io/\\(.*\\) => ./staging/src/k8s.io/.*|k8s.io/\\1|p'\n))\nfor MOD in \"${MODS[@]}\"; do\n\n    V=$(\n        go mod download -json \"${MOD}@kubernetes-${VERSION}\" |\n        sed -n 's|.*\"Version\": \"\\(.*\\)\".*|\\1|p'\n    )\n    go mod edit \"-replace=${MOD}=${MOD}@${V}\"\ndone\ngo get \"k8s.io/kubernetes@v${VERSION}\"\n```\n\n","source":"_posts/golang/无法下载kubernetes包.md","raw":"---\nlayout: golang\ntitle: Golang 无法下载kubernetes包\ndate: 2023-07-23 00:11:45\ntags: [golang,k8s,mod]\ncategories: golang\n---\n\n\n{% note primary%}\n\n解决无法直接下载 k8s.io/kubernetes 包问题\n\n{% endnote %}\n\n<!--more-->\n\n如果我们直接 go get k8s.io/kubernetes@v1.19.2 下载依赖，会出现以下错误:\n\n```go\ngo get k8s.io/kubernetes@v1.19.2\ngo: downloading k8s.io/kubernetes v1.19.2\ngo: k8s.io/kubernetes@v1.19.2 requires\n        k8s.io/api@v0.0.0: reading k8s.io/api/go.mod at revision v0.0.0:\n```\n\n错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录./staging/src/k8s.io对应的依赖。\n\n保存内容为 go-get-kubernetes.sh, 执行 ./go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。\n```sh\n#!/bin/sh\nset -euo pipefail\n\nVERSION=${1#\"v\"}\nif [ -z \"$VERSION\" ]; then\n    echo \"Must specify version!\"\n    exit 1\nfi\nMODS=($(\n    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v${VERSION}/go.mod |\n    sed -n 's|.*k8s.io/\\(.*\\) => ./staging/src/k8s.io/.*|k8s.io/\\1|p'\n))\nfor MOD in \"${MODS[@]}\"; do\n\n    V=$(\n        go mod download -json \"${MOD}@kubernetes-${VERSION}\" |\n        sed -n 's|.*\"Version\": \"\\(.*\\)\".*|\\1|p'\n    )\n    go mod edit \"-replace=${MOD}=${MOD}@${V}\"\ndone\ngo get \"k8s.io/kubernetes@v${VERSION}\"\n```\n\n","slug":"golang/无法下载kubernetes包","published":1,"updated":"2023-08-17T09:40:40.067Z","_id":"clke8lpvj000h3w4w3l9oegjr","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>解决无法直接下载 k8s.io&#x2F;kubernetes 包问题</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p>如果我们直接 go get k8s.io&#x2F;<a href=\"mailto:&#x6b;&#117;&#x62;&#101;&#x72;&#110;&#x65;&#x74;&#101;&#x73;&#x40;&#x76;&#49;&#x2e;&#49;&#x39;&#x2e;&#50;\">&#x6b;&#117;&#x62;&#101;&#x72;&#110;&#x65;&#x74;&#101;&#x73;&#x40;&#x76;&#49;&#x2e;&#49;&#x39;&#x2e;&#50;</a> 下载依赖，会出现以下错误:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> get k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: downloading k8s.io/kubernetes v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span> requires<br>        k8s.io/api@v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>: reading k8s.io/api/<span class=\"hljs-keyword\">go</span>.mod at revision v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<br></code></pre></td></tr></table></figure>\n\n<p>错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录.&#x2F;staging&#x2F;src&#x2F;k8s.io对应的依赖。</p>\n<p>保存内容为 go-get-kubernetes.sh, 执行 .&#x2F;go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">set</span> -euo pipefail<br><br>VERSION=<span class=\"hljs-variable\">$&#123;1#&quot;v&quot;&#125;</span><br><span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$VERSION</span>&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Must specify version!&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br>MODS=($(<br>    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>/go.mod |<br>    sed -n <span class=\"hljs-string\">&#x27;s|.*k8s.io/\\(.*\\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\\1|p&#x27;</span><br>))<br><span class=\"hljs-keyword\">for</span> MOD <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MODS[@]&#125;</span>&quot;</span>; <span class=\"hljs-keyword\">do</span><br><br>    V=$(<br>        go mod download -json <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@kubernetes-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span> |<br>        sed -n <span class=\"hljs-string\">&#x27;s|.*&quot;Version&quot;: &quot;\\(.*\\)&quot;.*|\\1|p&#x27;</span><br>    )<br>    go mod edit <span class=\"hljs-string\">&quot;-replace=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@<span class=\"hljs-variable\">$&#123;V&#125;</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br>go get <span class=\"hljs-string\">&quot;k8s.io/kubernetes@v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>解决无法直接下载 k8s.io&#x2F;kubernetes 包问题</p>\n          </div>","more":"<p>如果我们直接 go get k8s.io&#x2F;<a href=\"mailto:&#x6b;&#117;&#x62;&#101;&#x72;&#110;&#x65;&#x74;&#101;&#x73;&#x40;&#x76;&#49;&#x2e;&#49;&#x39;&#x2e;&#50;\">&#x6b;&#117;&#x62;&#101;&#x72;&#110;&#x65;&#x74;&#101;&#x73;&#x40;&#x76;&#49;&#x2e;&#49;&#x39;&#x2e;&#50;</a> 下载依赖，会出现以下错误:</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">go</span> get k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: downloading k8s.io/kubernetes v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span><br><span class=\"hljs-keyword\">go</span>: k8s.io/kubernetes@v1<span class=\"hljs-number\">.19</span><span class=\"hljs-number\">.2</span> requires<br>        k8s.io/api@v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>: reading k8s.io/api/<span class=\"hljs-keyword\">go</span>.mod at revision v0<span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>:<br></code></pre></td></tr></table></figure>\n\n<p>错误的原因是在kubernetes主仓中，也使用了公共库，不过go.mod文件中所有公共库版本都指定为了v0.0.0（显然这个版本不存在）， 然后通过Go Module的replace机制，将版本替换为子目录.&#x2F;staging&#x2F;src&#x2F;k8s.io对应的依赖。</p>\n<p>保存内容为 go-get-kubernetes.sh, 执行 .&#x2F;go-get-kubernetes.sh v1.19.2，会自动在go.mod中替换。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/sh</span><br><span class=\"hljs-built_in\">set</span> -euo pipefail<br><br>VERSION=<span class=\"hljs-variable\">$&#123;1#&quot;v&quot;&#125;</span><br><span class=\"hljs-keyword\">if</span> [ -z <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$VERSION</span>&quot;</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Must specify version!&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br>MODS=($(<br>    curl -sS https://raw.githubusercontent.com/kubernetes/kubernetes/v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>/go.mod |<br>    sed -n <span class=\"hljs-string\">&#x27;s|.*k8s.io/\\(.*\\) =&gt; ./staging/src/k8s.io/.*|k8s.io/\\1|p&#x27;</span><br>))<br><span class=\"hljs-keyword\">for</span> MOD <span class=\"hljs-keyword\">in</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MODS[@]&#125;</span>&quot;</span>; <span class=\"hljs-keyword\">do</span><br><br>    V=$(<br>        go mod download -json <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@kubernetes-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span> |<br>        sed -n <span class=\"hljs-string\">&#x27;s|.*&quot;Version&quot;: &quot;\\(.*\\)&quot;.*|\\1|p&#x27;</span><br>    )<br>    go mod edit <span class=\"hljs-string\">&quot;-replace=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>=<span class=\"hljs-variable\">$&#123;MOD&#125;</span>@<span class=\"hljs-variable\">$&#123;V&#125;</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br>go get <span class=\"hljs-string\">&quot;k8s.io/kubernetes@v<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"如何分配IP","date":"2023-07-24T10:33:58.000Z","_content":"\n\n{% note primary%}\n\n当我们有一段或者多段IP时，如何从IP池中分配出一个IP？\n\n{% endnote %}\n\n<!-- more -->\n\n## 创建配置文件\n\n```sh\ncat <<EOF > ipam.json\n{\n  \"ranges\": [\n    {\n      \"start\": \"10.172.16.2\",\n      \"end\": \"10.172.16.3\"\n    },\n    {\n      \"start\": \"10.172.17.2\",\n      \"end\": \"10.172.17.3\"\n    }\n  ]\n}\nEOF\n```\n\n## 代码实现\n\n[ipam](https://github.com/oldwang12/ipam)\n","source":"_posts/golang/如何分配IP.md","raw":"---\nlayout: golang\ntitle: 如何分配IP\ndate: 2023-07-24 18:33:58\ntags: golang\ncategories: golang\n---\n\n\n{% note primary%}\n\n当我们有一段或者多段IP时，如何从IP池中分配出一个IP？\n\n{% endnote %}\n\n<!-- more -->\n\n## 创建配置文件\n\n```sh\ncat <<EOF > ipam.json\n{\n  \"ranges\": [\n    {\n      \"start\": \"10.172.16.2\",\n      \"end\": \"10.172.16.3\"\n    },\n    {\n      \"start\": \"10.172.17.2\",\n      \"end\": \"10.172.17.3\"\n    }\n  ]\n}\nEOF\n```\n\n## 代码实现\n\n[ipam](https://github.com/oldwang12/ipam)\n","slug":"golang/如何分配IP","published":1,"updated":"2023-08-17T09:40:37.594Z","_id":"clkgr6kqj0000ga4w8w9sggqw","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>当我们有一段或者多段IP时，如何从IP池中分配出一个IP？</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; ipam.json</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.16.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.16.3&quot;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.17.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.17.3&quot;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><a href=\"https://github.com/oldwang12/ipam\">ipam</a></p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>当我们有一段或者多段IP时，如何从IP池中分配出一个IP？</p>\n          </div>","more":"<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; ipam.json</span><br><span class=\"hljs-string\">&#123;</span><br><span class=\"hljs-string\">  &quot;ranges&quot;: [</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.16.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.16.3&quot;</span><br><span class=\"hljs-string\">    &#125;,</span><br><span class=\"hljs-string\">    &#123;</span><br><span class=\"hljs-string\">      &quot;start&quot;: &quot;10.172.17.2&quot;,</span><br><span class=\"hljs-string\">      &quot;end&quot;: &quot;10.172.17.3&quot;</span><br><span class=\"hljs-string\">    &#125;</span><br><span class=\"hljs-string\">  ]</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><p><a href=\"https://github.com/oldwang12/ipam\">ipam</a></p>"},{"layout":"k8s","title":"使用client-go操作自定义CRD","date":"2023-07-25T09:18:17.000Z","_content":"\n{% note primary%}\n\n简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。\n\n个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。\n\n{% endnote %}\n<!-- more -->\n\n#### 代码实现\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"path/filepath\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\ntype KubernetesCrdExec interface {\n\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error)\n\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error)\n\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error)\n\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error\n}\n\ntype Alertmanager struct{}\n\nfunc main() {\n\tresource := schema.GroupVersionResource{\n\t\tGroup:    \"monitoring.coreos.com\",\n\t\tVersion:  \"v1\",\n\t\tResource: \"alertmanagers\", // 这里必须是复数形式\n\t}\n\n\tnamespace := \"default\"\n\tname := \"my-alertmanager\"\n\n\tdynamicClient, err := getClient()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar crd KubernetesCrdExec\n\tcrd = Alertmanager{}\n\n\tresult, err := crd.Get(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"])\n\n\tresultLists, err := crd.List(dynamicClient, resource, namespace)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, item := range resultLists.Items {\n\t\tname := item.Object[\"metadata\"].(map[string]interface{})[\"name\"]\n\t\tnamespace := item.Object[\"metadata\"].(map[string]interface{})[\"namespace\"]\n\t\tfmt.Printf(\"%v/%v\\n\", namespace, name)\n\t}\n\n\t// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093\n\tresult.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"] = \"http://127.0.0.1:9093\"\n\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\terr = crd.Delete(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (Alertmanager) Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n}\n\nfunc (Alertmanager) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})\n}\n\nfunc (Alertmanager) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions{})\n}\n\nfunc (Alertmanager) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})\n}\n\nfunc getClient() (dynamic.Interface, error) {\n\tkubeconfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn dynamic.NewForConfig(config)\n}\n```","source":"_posts/k8s/使用client-go操作自定义CRD.md","raw":"---\nlayout: k8s\ntitle: 使用client-go操作自定义CRD\ndate: 2023-07-25 17:18:17\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n\n简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。\n\n个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。\n\n{% endnote %}\n<!-- more -->\n\n#### 代码实现\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"path/filepath\"\n\n\tmetav1 \"k8s.io/apimachinery/pkg/apis/meta/v1\"\n\t\"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured\"\n\t\"k8s.io/apimachinery/pkg/runtime/schema\"\n\t\"k8s.io/client-go/dynamic\"\n\t\"k8s.io/client-go/tools/clientcmd\"\n\t\"k8s.io/client-go/util/homedir\"\n)\n\ntype KubernetesCrdExec interface {\n\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error)\n\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error)\n\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error)\n\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error\n}\n\ntype Alertmanager struct{}\n\nfunc main() {\n\tresource := schema.GroupVersionResource{\n\t\tGroup:    \"monitoring.coreos.com\",\n\t\tVersion:  \"v1\",\n\t\tResource: \"alertmanagers\", // 这里必须是复数形式\n\t}\n\n\tnamespace := \"default\"\n\tname := \"my-alertmanager\"\n\n\tdynamicClient, err := getClient()\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tvar crd KubernetesCrdExec\n\tcrd = Alertmanager{}\n\n\tresult, err := crd.Get(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfmt.Println(result.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"])\n\n\tresultLists, err := crd.List(dynamicClient, resource, namespace)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tfor _, item := range resultLists.Items {\n\t\tname := item.Object[\"metadata\"].(map[string]interface{})[\"name\"]\n\t\tnamespace := item.Object[\"metadata\"].(map[string]interface{})[\"namespace\"]\n\t\tfmt.Printf(\"%v/%v\\n\", namespace, name)\n\t}\n\n\t// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093\n\tresult.Object[\"spec\"].(map[string]interface{})[\"externalUrl\"] = \"http://127.0.0.1:9093\"\n\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\terr = crd.Delete(dynamicClient, resource, namespace, name)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\nfunc (Alertmanager) Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions{})\n}\n\nfunc (Alertmanager) List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace string) (*unstructured.UnstructuredList, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions{})\n}\n\nfunc (Alertmanager) Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name string) (*unstructured.Unstructured, error) {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions{})\n}\n\nfunc (Alertmanager) Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name string) error {\n\treturn dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions{})\n}\n\nfunc getClient() (dynamic.Interface, error) {\n\tkubeconfig := filepath.Join(homedir.HomeDir(), \".kube\", \"config\")\n\tconfig, err := clientcmd.BuildConfigFromFlags(\"\", kubeconfig)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn dynamic.NewForConfig(config)\n}\n```","slug":"k8s/使用client-go操作自定义CRD","published":1,"updated":"2023-08-17T10:02:47.299Z","_id":"clkkk2yo00001e94w72lxehna","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。</p><p>个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。</p>\n          </div>\n<span id=\"more\"></span>\n\n<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;path/filepath&quot;</span><br><br>\tmetav1 <span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/dynamic&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/util/homedir&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> KubernetesCrdExec <span class=\"hljs-keyword\">interface</span> &#123;<br>\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>)<br>\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Alertmanager <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresource := schema.GroupVersionResource&#123;<br>\t\tGroup:    <span class=\"hljs-string\">&quot;monitoring.coreos.com&quot;</span>,<br>\t\tVersion:  <span class=\"hljs-string\">&quot;v1&quot;</span>,<br>\t\tResource: <span class=\"hljs-string\">&quot;alertmanagers&quot;</span>, <span class=\"hljs-comment\">// 这里必须是复数形式</span><br>\t&#125;<br><br>\tnamespace := <span class=\"hljs-string\">&quot;default&quot;</span><br>\tname := <span class=\"hljs-string\">&quot;my-alertmanager&quot;</span><br><br>\tdynamicClient, err := getClient()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err.Error())<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> crd KubernetesCrdExec<br>\tcrd = Alertmanager&#123;&#125;<br><br>\tresult, err := crd.Get(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tfmt.Println(result.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>])<br><br>\tresultLists, err := crd.List(dynamicClient, resource, namespace)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> resultLists.Items &#123;<br>\t\tname := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;name&quot;</span>]<br>\t\tnamespace := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;namespace&quot;</span>]<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%v/%v\\n&quot;</span>, namespace, name)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093</span><br>\tresult.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>] = <span class=\"hljs-string\">&quot;http://127.0.0.1:9093&quot;</span><br>\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\terr = crd.Delete(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getClient</span><span class=\"hljs-params\">()</span></span> (dynamic.Interface, <span class=\"hljs-type\">error</span>) &#123;<br>\tkubeconfig := filepath.Join(homedir.HomeDir(), <span class=\"hljs-string\">&quot;.kube&quot;</span>, <span class=\"hljs-string\">&quot;config&quot;</span>)<br>\tconfig, err := clientcmd.BuildConfigFromFlags(<span class=\"hljs-string\">&quot;&quot;</span>, kubeconfig)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> dynamic.NewForConfig(config)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>简洁、高效、无需定义 CR 相关结构体，实现了四种方法： Get、List、Update、Delete 来操作 CR。</p><p>个人觉得这只适合对 CR 字段更改不是很多的环境，如果参数过多可能会有些繁琐。</p>\n          </div>","more":"<h4 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;path/filepath&quot;</span><br><br>\tmetav1 <span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/apis/meta/v1/unstructured&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/apimachinery/pkg/runtime/schema&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/dynamic&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/tools/clientcmd&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/client-go/util/homedir&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> KubernetesCrdExec <span class=\"hljs-keyword\">interface</span> &#123;<br>\tGet(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tList(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>)<br>\tUpdate(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>)<br>\tDelete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> Alertmanager <span class=\"hljs-keyword\">struct</span>&#123;&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tresource := schema.GroupVersionResource&#123;<br>\t\tGroup:    <span class=\"hljs-string\">&quot;monitoring.coreos.com&quot;</span>,<br>\t\tVersion:  <span class=\"hljs-string\">&quot;v1&quot;</span>,<br>\t\tResource: <span class=\"hljs-string\">&quot;alertmanagers&quot;</span>, <span class=\"hljs-comment\">// 这里必须是复数形式</span><br>\t&#125;<br><br>\tnamespace := <span class=\"hljs-string\">&quot;default&quot;</span><br>\tname := <span class=\"hljs-string\">&quot;my-alertmanager&quot;</span><br><br>\tdynamicClient, err := getClient()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err.Error())<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">var</span> crd KubernetesCrdExec<br>\tcrd = Alertmanager&#123;&#125;<br><br>\tresult, err := crd.Get(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tfmt.Println(result.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>])<br><br>\tresultLists, err := crd.List(dynamicClient, resource, namespace)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, item := <span class=\"hljs-keyword\">range</span> resultLists.Items &#123;<br>\t\tname := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;name&quot;</span>]<br>\t\tnamespace := item.Object[<span class=\"hljs-string\">&quot;metadata&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;namespace&quot;</span>]<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;%v/%v\\n&quot;</span>, namespace, name)<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">// 在这里对 Object 进行修改，更新字段值。这里相当于更新了 spec.externalUrl = http://127.0.0.1:9093</span><br>\tresult.Object[<span class=\"hljs-string\">&quot;spec&quot;</span>].(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-keyword\">interface</span>&#123;&#125;)[<span class=\"hljs-string\">&quot;externalUrl&quot;</span>] = <span class=\"hljs-string\">&quot;http://127.0.0.1:9093&quot;</span><br>\tresult, err = crd.Update(dynamicClient, resource, result, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\terr = crd.Delete(dynamicClient, resource, namespace, name)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Get(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Get(context.TODO(), name, metav1.GetOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> List(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace <span class=\"hljs-type\">string</span>) (*unstructured.UnstructuredList, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).List(context.TODO(), metav1.ListOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Update(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, result *unstructured.Unstructured, namespace, name <span class=\"hljs-type\">string</span>) (*unstructured.Unstructured, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Update(context.TODO(), result, metav1.UpdateOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(Alertmanager)</span></span> Delete(dynamicClient dynamic.Interface, resource schema.GroupVersionResource, namespace, name <span class=\"hljs-type\">string</span>) <span class=\"hljs-type\">error</span> &#123;<br>\t<span class=\"hljs-keyword\">return</span> dynamicClient.Resource(resource).Namespace(namespace).Delete(context.TODO(), name, metav1.DeleteOptions&#123;&#125;)<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getClient</span><span class=\"hljs-params\">()</span></span> (dynamic.Interface, <span class=\"hljs-type\">error</span>) &#123;<br>\tkubeconfig := filepath.Join(homedir.HomeDir(), <span class=\"hljs-string\">&quot;.kube&quot;</span>, <span class=\"hljs-string\">&quot;config&quot;</span>)<br>\tconfig, err := clientcmd.BuildConfigFromFlags(<span class=\"hljs-string\">&quot;&quot;</span>, kubeconfig)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">nil</span>, err<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> dynamic.NewForConfig(config)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"使用kubeadm安装集群","date":"2023-07-26T02:09:12.000Z","_content":"\n{% note primary%}\n\n目前最主流的安装方式，使用kubeadm安装集群。\n\n{% endnote %}\n\n<!-- more -->\n\n## 图解k8s\n![master-worker](master-worker.png)\n## 1. containerd\n**1.1 使用 tar 包安装**\n[下载地址](https://github.com/containerd/containerd/releases)\n\n```sh\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\nmkdir -p /usr/local/lib/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nmv containerd.service /usr/local/lib/systemd/system/containerd.service\nsystemctl daemon-reload\nsystemctl enable --now containerd\n```\n\n**1.2 rpm、deb 包安装**\n- Centos [下载地址](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n- Ubuntu [下载地址](https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64)\n\n## 2. runc\n\n[下载地址](https://github.com/opencontainers/runc/releases)\n\n```sh\nwget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n## 3. ctrctl\n\n[下载地址](https://github.com/kubernetes-sigs/cri-tools/releases)\n\n```sh\n# 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags\nVERSION=\"v1.26.0\" # check latest version in /releases page\ncurl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz\nsudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin\nrm -f crictl-$VERSION-linux-amd64.tar.gz\n```\n\n**3.1 ctrctl 报错文件找不到**\n* 不同的部署方式，文件路径可能不同。\n\n```sh\n# 以 k3s 为例，指定 .sock 文件\ncrictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a\n```\n\n**3.2 查看 ctrctl 配置**\n```sh\ncat /etc/crictl.yaml\n```\n\n## 4. kubeadm、kubelet、kubectl\n```sh\nDOWNLOAD_DIR=\"/usr/local/bin\"\nsudo mkdir -p \"$DOWNLOAD_DIR\"\n\n# 安装最新版\nRELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n\n# 安装指定版本\n# RELEASE=\"v1.26.7\"\n\nARCH=\"amd64\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\nRELEASE_VERSION=\"v0.15.1\"\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n# 激活并启动 kubelet\nsystemctl enable --now kubelet\n```\n\n## 5. conntrack\n```sh\nyum install conntrack-tools -y\n```\n\n**测试**\n```sh\nconntrack -L\n```\n\n## 6. 设置内核参数\n\n{% note primary %}\n如果不设置参数，使用 kubeadm join 时可能会导致报错。\n{% endnote %}\n\n```log\nW0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH\n\t[WARNING FileExisting-socat]: socat not found in system path\nerror execution phase preflight: [preflight] Some fatal errors occurred:\n\t[ERROR FileExisting-crictl]: crictl not found in system path\n\t[ERROR FileExisting-conntrack]: conntrack not found in system path\n\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\n```\n\n### 6.1 加载 bridge 内核模块\n\n查看是否加载 br_netfilter 模块\n```sh\nlsmod | grep br_netfilter\n```\n\n如果没加载执行\n```sh\nsudo modprobe br_netfilter\n```\n\n### 6.2 更改内核参数\n\n打开 /etc/sysctl.conf 文件\n\n```sh\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\n```\n\n#### 6.3 重新加载 sysctl 配置\n```sh\nsysctl -p\n```\n\n## 7. 部署集群\n\n### 7.1 master\n```sh\nkubeadm init --v=5\n```\n\n\n此时，正常情况下你应该看到master安装成功提示\n```log\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.2 node\n```sh\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.3 参数说明\n```sh\n# 指定版本\n--kubernetes-version=v1.26.7\n\n# 指定镜像源为阿里\n--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers\n\n# 指定pod网段\n--pod-network-cidr=10.244.0.0/16\n```\n\n### 7.4 重新生成 token\n\n当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。\n\n```sh\nsudo kubeadm token create --print-join-command\n```\n### 7.5 查看 token\n```sh\nsudo kubeadm token list\n```\n\n## 8. kubeconfig 配置文件\n默认生成的 kubeconfig 文件在 /etc/kubernetes/admin.conf\n\n```sh\nmkdir $HOME/.kube\ncp /etc/kubernetes/admin.conf $HOME/.kube/config\nkubectl get no\n```\n\n## 9. 安装网络插件\n{% note danger %}\n不安装官方插件会报错，忘记了什么原因导致的。\n{% endnote %}\n\n### 9.1 先安装官方插件\n[下载地址](https://github.com/containernetworking/plugins/releases)\n```sh\nwget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz\ntar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin\nrm -f cni-plugins-linux-amd64-v1.3.0.tgz\n```\n### 9.2 安装 flannel 或 calico\n```sh\n# flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n```sh\n# calico\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n```\n\n安装完{% label default @cni %}后，此时{% label default @coredns %}应该为 {% label success @running %}\n\n#### 9.2.1 查看flannel模式\n\n{% label success @flannel %} 默认的模式为 {% label primary @vxlan %}，如果需要修改，可以修改 {% label default @configmap %}  {% label default @kube-flannel-cfg %}\n\n```sh\nkubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml\n```\n\n#### 9.2.2 创建测试pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```","source":"_posts/k8s/使用kubeadm安装集群.md","raw":"---\nlayout: k8s\ntitle: 使用kubeadm安装集群\ndate: 2023-07-26 10:09:12\ntags: k8s\ncategories: k8s\n---\n\n{% note primary%}\n\n目前最主流的安装方式，使用kubeadm安装集群。\n\n{% endnote %}\n\n<!-- more -->\n\n## 图解k8s\n![master-worker](master-worker.png)\n## 1. containerd\n**1.1 使用 tar 包安装**\n[下载地址](https://github.com/containerd/containerd/releases)\n\n```sh\nwget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz\ntar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz\nmkdir -p /usr/local/lib/systemd/system\nwget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service\nmv containerd.service /usr/local/lib/systemd/system/containerd.service\nsystemctl daemon-reload\nsystemctl enable --now containerd\n```\n\n**1.2 rpm、deb 包安装**\n- Centos [下载地址](https://download.docker.com/linux/centos/7/x86_64/stable/Packages/)\n- Ubuntu [下载地址](https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64)\n\n## 2. runc\n\n[下载地址](https://github.com/opencontainers/runc/releases)\n\n```sh\nwget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64\ninstall -m 755 runc.amd64 /usr/local/sbin/runc\n```\n\n## 3. ctrctl\n\n[下载地址](https://github.com/kubernetes-sigs/cri-tools/releases)\n\n```sh\n# 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags\nVERSION=\"v1.26.0\" # check latest version in /releases page\ncurl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/$VERSION/crictl-${VERSION}-linux-amd64.tar.gz --output crictl-${VERSION}-linux-amd64.tar.gz\nsudo tar zxvf crictl-$VERSION-linux-amd64.tar.gz -C /usr/local/bin\nrm -f crictl-$VERSION-linux-amd64.tar.gz\n```\n\n**3.1 ctrctl 报错文件找不到**\n* 不同的部署方式，文件路径可能不同。\n\n```sh\n# 以 k3s 为例，指定 .sock 文件\ncrictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a\n```\n\n**3.2 查看 ctrctl 配置**\n```sh\ncat /etc/crictl.yaml\n```\n\n## 4. kubeadm、kubelet、kubectl\n```sh\nDOWNLOAD_DIR=\"/usr/local/bin\"\nsudo mkdir -p \"$DOWNLOAD_DIR\"\n\n# 安装最新版\nRELEASE=\"$(curl -sSL https://dl.k8s.io/release/stable.txt)\"\n\n# 安装指定版本\n# RELEASE=\"v1.26.7\"\n\nARCH=\"amd64\"\ncd $DOWNLOAD_DIR\nsudo curl -L --remote-name-all https://dl.k8s.io/release/${RELEASE}/bin/linux/${ARCH}/{kubeadm,kubelet,kubectl}\nsudo chmod +x {kubeadm,kubelet,kubectl}\n\nRELEASE_VERSION=\"v0.15.1\"\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service\nsudo mkdir -p /etc/systemd/system/kubelet.service.d\ncurl -sSL \"https://raw.githubusercontent.com/kubernetes/release/${RELEASE_VERSION}/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf\" | sed \"s:/usr/bin:${DOWNLOAD_DIR}:g\" | sudo tee /etc/systemd/system/kubelet.service.d/10-kubeadm.conf\n\n# 激活并启动 kubelet\nsystemctl enable --now kubelet\n```\n\n## 5. conntrack\n```sh\nyum install conntrack-tools -y\n```\n\n**测试**\n```sh\nconntrack -L\n```\n\n## 6. 设置内核参数\n\n{% note primary %}\n如果不设置参数，使用 kubeadm join 时可能会导致报错。\n{% endnote %}\n\n```log\nW0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn't create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH\n\t[WARNING FileExisting-socat]: socat not found in system path\nerror execution phase preflight: [preflight] Some fatal errors occurred:\n\t[ERROR FileExisting-crictl]: crictl not found in system path\n\t[ERROR FileExisting-conntrack]: conntrack not found in system path\n\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist\n\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1\n[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`\n```\n\n### 6.1 加载 bridge 内核模块\n\n查看是否加载 br_netfilter 模块\n```sh\nlsmod | grep br_netfilter\n```\n\n如果没加载执行\n```sh\nsudo modprobe br_netfilter\n```\n\n### 6.2 更改内核参数\n\n打开 /etc/sysctl.conf 文件\n\n```sh\nnet.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\n```\n\n#### 6.3 重新加载 sysctl 配置\n```sh\nsysctl -p\n```\n\n## 7. 部署集群\n\n### 7.1 master\n```sh\nkubeadm init --v=5\n```\n\n\n此时，正常情况下你应该看到master安装成功提示\n```log\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.2 node\n```sh\nkubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\\n\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804\n```\n### 7.3 参数说明\n```sh\n# 指定版本\n--kubernetes-version=v1.26.7\n\n# 指定镜像源为阿里\n--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers\n\n# 指定pod网段\n--pod-network-cidr=10.244.0.0/16\n```\n\n### 7.4 重新生成 token\n\n当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。\n\n```sh\nsudo kubeadm token create --print-join-command\n```\n### 7.5 查看 token\n```sh\nsudo kubeadm token list\n```\n\n## 8. kubeconfig 配置文件\n默认生成的 kubeconfig 文件在 /etc/kubernetes/admin.conf\n\n```sh\nmkdir $HOME/.kube\ncp /etc/kubernetes/admin.conf $HOME/.kube/config\nkubectl get no\n```\n\n## 9. 安装网络插件\n{% note danger %}\n不安装官方插件会报错，忘记了什么原因导致的。\n{% endnote %}\n\n### 9.1 先安装官方插件\n[下载地址](https://github.com/containernetworking/plugins/releases)\n```sh\nwget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz\ntar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin\nrm -f cni-plugins-linux-amd64-v1.3.0.tgz\n```\n### 9.2 安装 flannel 或 calico\n```sh\n# flannel\nkubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml\n```\n```sh\n# calico\nkubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml\n```\n\n安装完{% label default @cni %}后，此时{% label default @coredns %}应该为 {% label success @running %}\n\n#### 9.2.1 查看flannel模式\n\n{% label success @flannel %} 默认的模式为 {% label primary @vxlan %}，如果需要修改，可以修改 {% label default @configmap %}  {% label default @kube-flannel-cfg %}\n\n```sh\nkubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml\n```\n\n#### 9.2.2 创建测试pod\n```sh\nkubectl run my-pod --image=nginx:latest\n```","slug":"k8s/使用kubeadm安装集群","published":1,"updated":"2023-08-17T10:02:22.990Z","_id":"clkkk2yo20003e94w2emv7j83","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>目前最主流的安装方式，使用kubeadm安装集群。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"图解k8s\"><a href=\"#图解k8s\" class=\"headerlink\" title=\"图解k8s\"></a>图解k8s</h2><p><img src=\"master-worker.png\" alt=\"master-worker\"></p>\n<h2 id=\"1-containerd\"><a href=\"#1-containerd\" class=\"headerlink\" title=\"1. containerd\"></a>1. containerd</h2><p><strong>1.1 使用 tar 包安装</strong><br><a href=\"https://github.com/containerd/containerd/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz<br>tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz<br><span class=\"hljs-built_in\">mkdir</span> -p /usr/local/lib/systemd/system<br>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service<br><span class=\"hljs-built_in\">mv</span> containerd.service /usr/local/lib/systemd/system/containerd.service<br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br></code></pre></td></tr></table></figure>\n\n<p><strong>1.2 rpm、deb 包安装</strong></p>\n<ul>\n<li>Centos <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\">下载地址</a></li>\n<li>Ubuntu <a href=\"https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64\">下载地址</a></li>\n</ul>\n<h2 id=\"2-runc\"><a href=\"#2-runc\" class=\"headerlink\" title=\"2. runc\"></a>2. runc</h2><p><a href=\"https://github.com/opencontainers/runc/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64<br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-ctrctl\"><a href=\"#3-ctrctl\" class=\"headerlink\" title=\"3. ctrctl\"></a>3. ctrctl</h2><p><a href=\"https://github.com/kubernetes-sigs/cri-tools/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags</span><br>VERSION=<span class=\"hljs-string\">&quot;v1.26.0&quot;</span> <span class=\"hljs-comment\"># check latest version in /releases page</span><br>curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$VERSION</span>/crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz --output crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz<br>sudo tar zxvf crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin<br><span class=\"hljs-built_in\">rm</span> -f crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.1 ctrctl 报错文件找不到</strong></p>\n<ul>\n<li>不同的部署方式，文件路径可能不同。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以 k3s 为例，指定 .sock 文件</span><br>crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.2 查看 ctrctl 配置</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/crictl.yaml<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-kubeadm、kubelet、kubectl\"><a href=\"#4-kubeadm、kubelet、kubectl\" class=\"headerlink\" title=\"4. kubeadm、kubelet、kubectl\"></a>4. kubeadm、kubelet、kubectl</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br>sudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装最新版</span><br>RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装指定版本</span><br><span class=\"hljs-comment\"># RELEASE=&quot;v1.26.7&quot;</span><br><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br>sudo curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet,kubectl&#125;<br>sudo <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet,kubectl&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.15.1&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br>sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br><br><span class=\"hljs-comment\"># 激活并启动 kubelet</span><br>systemctl <span class=\"hljs-built_in\">enable</span> --now kubelet<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-conntrack\"><a href=\"#5-conntrack\" class=\"headerlink\" title=\"5. conntrack\"></a>5. conntrack</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum install conntrack-tools -y<br></code></pre></td></tr></table></figure>\n\n<p><strong>测试</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">conntrack -L<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置内核参数\"><a href=\"#6-设置内核参数\" class=\"headerlink\" title=\"6. 设置内核参数\"></a>6. 设置内核参数</h2><div class=\"note note-primary\">\n            <p>如果不设置参数，使用 kubeadm join 时可能会导致报错。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">W0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH<br>\t[WARNING FileExisting-socat]: socat not found in system path<br>error execution phase preflight: [preflight] Some fatal errors occurred:<br>\t[ERROR FileExisting-crictl]: crictl not found in system path<br>\t[ERROR FileExisting-conntrack]: conntrack not found in system path<br>\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist<br>\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1<br>[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-加载-bridge-内核模块\"><a href=\"#6-1-加载-bridge-内核模块\" class=\"headerlink\" title=\"6.1 加载 bridge 内核模块\"></a>6.1 加载 bridge 内核模块</h3><p>查看是否加载 br_netfilter 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsmod | grep br_netfilter<br></code></pre></td></tr></table></figure>\n\n<p>如果没加载执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo modprobe br_netfilter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-更改内核参数\"><a href=\"#6-2-更改内核参数\" class=\"headerlink\" title=\"6.2 更改内核参数\"></a>6.2 更改内核参数</h3><p>打开 &#x2F;etc&#x2F;sysctl.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-3-重新加载-sysctl-配置\"><a href=\"#6-3-重新加载-sysctl-配置\" class=\"headerlink\" title=\"6.3 重新加载 sysctl 配置\"></a>6.3 重新加载 sysctl 配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl -p<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-部署集群\"><a href=\"#7-部署集群\" class=\"headerlink\" title=\"7. 部署集群\"></a>7. 部署集群</h2><h3 id=\"7-1-master\"><a href=\"#7-1-master\" class=\"headerlink\" title=\"7.1 master\"></a>7.1 master</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm init --v=5<br></code></pre></td></tr></table></figure>\n\n\n<p>此时，正常情况下你应该看到master安装成功提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">kubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-2-node\"><a href=\"#7-2-node\" class=\"headerlink\" title=\"7.2 node\"></a>7.2 node</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm <span class=\"hljs-built_in\">join</span> 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-3-参数说明\"><a href=\"#7-3-参数说明\" class=\"headerlink\" title=\"7.3 参数说明\"></a>7.3 参数说明</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 指定版本</span><br>--kubernetes-version=v1.26.7<br><br><span class=\"hljs-comment\"># 指定镜像源为阿里</span><br>--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class=\"hljs-comment\"># 指定pod网段</span><br>--pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-重新生成-token\"><a href=\"#7-4-重新生成-token\" class=\"headerlink\" title=\"7.4 重新生成 token\"></a>7.4 重新生成 token</h3><p>当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token create --print-join-command<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-5-查看-token\"><a href=\"#7-5-查看-token\" class=\"headerlink\" title=\"7.5 查看 token\"></a>7.5 查看 token</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token list<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-kubeconfig-配置文件\"><a href=\"#8-kubeconfig-配置文件\" class=\"headerlink\" title=\"8. kubeconfig 配置文件\"></a>8. kubeconfig 配置文件</h2><p>默认生成的 kubeconfig 文件在 &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-variable\">$HOME</span>/.kube<br><span class=\"hljs-built_in\">cp</span> /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config<br>kubectl get no<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"9-安装网络插件\"><a href=\"#9-安装网络插件\" class=\"headerlink\" title=\"9. 安装网络插件\"></a>9. 安装网络插件</h2><div class=\"note note-danger\">\n            <p>不安装官方插件会报错，忘记了什么原因导致的。</p>\n          </div>\n\n<h3 id=\"9-1-先安装官方插件\"><a href=\"#9-1-先安装官方插件\" class=\"headerlink\" title=\"9.1 先安装官方插件\"></a>9.1 先安装官方插件</h3><p><a href=\"https://github.com/containernetworking/plugins/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz<br>tar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin<br><span class=\"hljs-built_in\">rm</span> -f cni-plugins-linux-amd64-v1.3.0.tgz<br></code></pre></td></tr></table></figure>\n<h3 id=\"9-2-安装-flannel-或-calico\"><a href=\"#9-2-安装-flannel-或-calico\" class=\"headerlink\" title=\"9.2 安装 flannel 或 calico\"></a>9.2 安装 flannel 或 calico</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># flannel</span><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># calico</span><br>kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br></code></pre></td></tr></table></figure>\n\n<p>安装完<span class=\"label label-default\">cni</span>后，此时<span class=\"label label-default\">coredns</span>应该为 <span class=\"label label-success\">running</span></p>\n<h4 id=\"9-2-1-查看flannel模式\"><a href=\"#9-2-1-查看flannel模式\" class=\"headerlink\" title=\"9.2.1 查看flannel模式\"></a>9.2.1 查看flannel模式</h4><span class=\"label label-success\">flannel</span> 默认的模式为 <span class=\"label label-primary\">vxlan</span>，如果需要修改，可以修改 <span class=\"label label-default\">configmap</span>  <span class=\"label label-default\">kube-flannel-cfg</span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"9-2-2-创建测试pod\"><a href=\"#9-2-2-创建测试pod\" class=\"headerlink\" title=\"9.2.2 创建测试pod\"></a>9.2.2 创建测试pod</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前最主流的安装方式，使用kubeadm安装集群。</p>\n          </div>","more":"<h2 id=\"图解k8s\"><a href=\"#图解k8s\" class=\"headerlink\" title=\"图解k8s\"></a>图解k8s</h2><p><img src=\"master-worker.png\" alt=\"master-worker\"></p>\n<h2 id=\"1-containerd\"><a href=\"#1-containerd\" class=\"headerlink\" title=\"1. containerd\"></a>1. containerd</h2><p><strong>1.1 使用 tar 包安装</strong><br><a href=\"https://github.com/containerd/containerd/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containerd/containerd/releases/download/v1.7.2/containerd-1.7.2-linux-amd64.tar.gz<br>tar Cxzvf /usr/local containerd-1.7.2-linux-amd64.tar.gz<br><span class=\"hljs-built_in\">mkdir</span> -p /usr/local/lib/systemd/system<br>wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service<br><span class=\"hljs-built_in\">mv</span> containerd.service /usr/local/lib/systemd/system/containerd.service<br>systemctl daemon-reload<br>systemctl <span class=\"hljs-built_in\">enable</span> --now containerd<br></code></pre></td></tr></table></figure>\n\n<p><strong>1.2 rpm、deb 包安装</strong></p>\n<ul>\n<li>Centos <a href=\"https://download.docker.com/linux/centos/7/x86_64/stable/Packages/\">下载地址</a></li>\n<li>Ubuntu <a href=\"https://download.docker.com/linux/ubuntu/dists/bionic/pool/stable/amd64\">下载地址</a></li>\n</ul>\n<h2 id=\"2-runc\"><a href=\"#2-runc\" class=\"headerlink\" title=\"2. runc\"></a>2. runc</h2><p><a href=\"https://github.com/opencontainers/runc/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/opencontainers/runc/releases/download/v1.1.8/runc.amd64<br>install -m 755 runc.amd64 /usr/local/sbin/runc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-ctrctl\"><a href=\"#3-ctrctl\" class=\"headerlink\" title=\"3. ctrctl\"></a>3. ctrctl</h2><p><a href=\"https://github.com/kubernetes-sigs/cri-tools/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 注意: 下载对应的集群版本，crictl版本列表：https://github.com/kubernetes-sigs/cri-tools/tags</span><br>VERSION=<span class=\"hljs-string\">&quot;v1.26.0&quot;</span> <span class=\"hljs-comment\"># check latest version in /releases page</span><br>curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/<span class=\"hljs-variable\">$VERSION</span>/crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz --output crictl-<span class=\"hljs-variable\">$&#123;VERSION&#125;</span>-linux-amd64.tar.gz<br>sudo tar zxvf crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz -C /usr/local/bin<br><span class=\"hljs-built_in\">rm</span> -f crictl-<span class=\"hljs-variable\">$VERSION</span>-linux-amd64.tar.gz<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.1 ctrctl 报错文件找不到</strong></p>\n<ul>\n<li>不同的部署方式，文件路径可能不同。</li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以 k3s 为例，指定 .sock 文件</span><br>crictl --runtime-endpoint /var/run/k3s/containerd/containerd.sock ps -a<br></code></pre></td></tr></table></figure>\n\n<p><strong>3.2 查看 ctrctl 配置</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/crictl.yaml<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-kubeadm、kubelet、kubectl\"><a href=\"#4-kubeadm、kubelet、kubectl\" class=\"headerlink\" title=\"4. kubeadm、kubelet、kubectl\"></a>4. kubeadm、kubelet、kubectl</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">DOWNLOAD_DIR=<span class=\"hljs-string\">&quot;/usr/local/bin&quot;</span><br>sudo <span class=\"hljs-built_in\">mkdir</span> -p <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$DOWNLOAD_DIR</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装最新版</span><br>RELEASE=<span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -sSL https://dl.k8s.io/release/stable.txt)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 安装指定版本</span><br><span class=\"hljs-comment\"># RELEASE=&quot;v1.26.7&quot;</span><br><br>ARCH=<span class=\"hljs-string\">&quot;amd64&quot;</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-variable\">$DOWNLOAD_DIR</span><br>sudo curl -L --remote-name-all https://dl.k8s.io/release/<span class=\"hljs-variable\">$&#123;RELEASE&#125;</span>/bin/linux/<span class=\"hljs-variable\">$&#123;ARCH&#125;</span>/&#123;kubeadm,kubelet,kubectl&#125;<br>sudo <span class=\"hljs-built_in\">chmod</span> +x &#123;kubeadm,kubelet,kubectl&#125;<br><br>RELEASE_VERSION=<span class=\"hljs-string\">&quot;v0.15.1&quot;</span><br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubelet/lib/systemd/system/kubelet.service&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service<br>sudo <span class=\"hljs-built_in\">mkdir</span> -p /etc/systemd/system/kubelet.service.d<br>curl -sSL <span class=\"hljs-string\">&quot;https://raw.githubusercontent.com/kubernetes/release/<span class=\"hljs-variable\">$&#123;RELEASE_VERSION&#125;</span>/cmd/kubepkg/templates/latest/deb/kubeadm/10-kubeadm.conf&quot;</span> | sed <span class=\"hljs-string\">&quot;s:/usr/bin:<span class=\"hljs-variable\">$&#123;DOWNLOAD_DIR&#125;</span>:g&quot;</span> | sudo <span class=\"hljs-built_in\">tee</span> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf<br><br><span class=\"hljs-comment\"># 激活并启动 kubelet</span><br>systemctl <span class=\"hljs-built_in\">enable</span> --now kubelet<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-conntrack\"><a href=\"#5-conntrack\" class=\"headerlink\" title=\"5. conntrack\"></a>5. conntrack</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">yum install conntrack-tools -y<br></code></pre></td></tr></table></figure>\n\n<p><strong>测试</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">conntrack -L<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-设置内核参数\"><a href=\"#6-设置内核参数\" class=\"headerlink\" title=\"6. 设置内核参数\"></a>6. 设置内核参数</h2><div class=\"note note-primary\">\n            <p>如果不设置参数，使用 kubeadm join 时可能会导致报错。</p>\n          </div>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">W0726 10:29:26.474684    8216 checks.go:1064] [preflight] WARNING: Couldn&#x27;t create the interface used for talking to the container runtime: crictl is required by the container runtime: executable file not found in $PATH<br>\t[WARNING FileExisting-socat]: socat not found in system path<br>error execution phase preflight: [preflight] Some fatal errors occurred:<br>\t[ERROR FileExisting-crictl]: crictl not found in system path<br>\t[ERROR FileExisting-conntrack]: conntrack not found in system path<br>\t[ERROR FileContent--proc-sys-net-bridge-bridge-nf-call-iptables]: /proc/sys/net/bridge/bridge-nf-call-iptables does not exist<br>\t[ERROR FileContent--proc-sys-net-ipv4-ip_forward]: /proc/sys/net/ipv4/ip_forward contents are not set to 1<br>[preflight] If you know what you are doing, you can make a check non-fatal with `--ignore-preflight-errors=...`<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-1-加载-bridge-内核模块\"><a href=\"#6-1-加载-bridge-内核模块\" class=\"headerlink\" title=\"6.1 加载 bridge 内核模块\"></a>6.1 加载 bridge 内核模块</h3><p>查看是否加载 br_netfilter 模块</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsmod | grep br_netfilter<br></code></pre></td></tr></table></figure>\n\n<p>如果没加载执行</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo modprobe br_netfilter<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"6-2-更改内核参数\"><a href=\"#6-2-更改内核参数\" class=\"headerlink\" title=\"6.2 更改内核参数\"></a>6.2 更改内核参数</h3><p>打开 &#x2F;etc&#x2F;sysctl.conf 文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">net.ipv4.ip_forward = 1<br>net.bridge.bridge-nf-call-iptables = 1<br>net.bridge.bridge-nf-call-ip6tables = 1<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-3-重新加载-sysctl-配置\"><a href=\"#6-3-重新加载-sysctl-配置\" class=\"headerlink\" title=\"6.3 重新加载 sysctl 配置\"></a>6.3 重新加载 sysctl 配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sysctl -p<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"7-部署集群\"><a href=\"#7-部署集群\" class=\"headerlink\" title=\"7. 部署集群\"></a>7. 部署集群</h2><h3 id=\"7-1-master\"><a href=\"#7-1-master\" class=\"headerlink\" title=\"7.1 master\"></a>7.1 master</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm init --v=5<br></code></pre></td></tr></table></figure>\n\n\n<p>此时，正常情况下你应该看到master安装成功提示</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs log\">kubeadm join 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-2-node\"><a href=\"#7-2-node\" class=\"headerlink\" title=\"7.2 node\"></a>7.2 node</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubeadm <span class=\"hljs-built_in\">join</span> 10.7.130.29:6443 --token kqi9ve.dvcyddrn9527rvnu \\<br>\t--discovery-token-ca-cert-hash sha256:67c19abd79fhjkl1cc5a04e2192bf3bc335d41f2f4a76084adcc4cda3d48804<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-3-参数说明\"><a href=\"#7-3-参数说明\" class=\"headerlink\" title=\"7.3 参数说明\"></a>7.3 参数说明</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 指定版本</span><br>--kubernetes-version=v1.26.7<br><br><span class=\"hljs-comment\"># 指定镜像源为阿里</span><br>--image-repository registry.cn-hangzhou.aliyuncs.com/google_containers<br><br><span class=\"hljs-comment\"># 指定pod网段</span><br>--pod-network-cidr=10.244.0.0/16<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"7-4-重新生成-token\"><a href=\"#7-4-重新生成-token\" class=\"headerlink\" title=\"7.4 重新生成 token\"></a>7.4 重新生成 token</h3><p>当忘记kubeadm join命令时，可以重新生成token。以此来获得 kubeadm join 命令。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token create --print-join-command<br></code></pre></td></tr></table></figure>\n<h3 id=\"7-5-查看-token\"><a href=\"#7-5-查看-token\" class=\"headerlink\" title=\"7.5 查看 token\"></a>7.5 查看 token</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo kubeadm token list<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"8-kubeconfig-配置文件\"><a href=\"#8-kubeconfig-配置文件\" class=\"headerlink\" title=\"8. kubeconfig 配置文件\"></a>8. kubeconfig 配置文件</h2><p>默认生成的 kubeconfig 文件在 &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">mkdir</span> <span class=\"hljs-variable\">$HOME</span>/.kube<br><span class=\"hljs-built_in\">cp</span> /etc/kubernetes/admin.conf <span class=\"hljs-variable\">$HOME</span>/.kube/config<br>kubectl get no<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"9-安装网络插件\"><a href=\"#9-安装网络插件\" class=\"headerlink\" title=\"9. 安装网络插件\"></a>9. 安装网络插件</h2><div class=\"note note-danger\">\n            <p>不安装官方插件会报错，忘记了什么原因导致的。</p>\n          </div>\n\n<h3 id=\"9-1-先安装官方插件\"><a href=\"#9-1-先安装官方插件\" class=\"headerlink\" title=\"9.1 先安装官方插件\"></a>9.1 先安装官方插件</h3><p><a href=\"https://github.com/containernetworking/plugins/releases\">下载地址</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz<br>tar -zxvf cni-plugins-linux-amd64-v1.3.0.tgz -C /opt/cni/bin<br><span class=\"hljs-built_in\">rm</span> -f cni-plugins-linux-amd64-v1.3.0.tgz<br></code></pre></td></tr></table></figure>\n<h3 id=\"9-2-安装-flannel-或-calico\"><a href=\"#9-2-安装-flannel-或-calico\" class=\"headerlink\" title=\"9.2 安装 flannel 或 calico\"></a>9.2 安装 flannel 或 calico</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># flannel</span><br>kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># calico</span><br>kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml<br></code></pre></td></tr></table></figure>\n\n<p>安装完<span class=\"label label-default\">cni</span>后，此时<span class=\"label label-default\">coredns</span>应该为 <span class=\"label label-success\">running</span></p>\n<h4 id=\"9-2-1-查看flannel模式\"><a href=\"#9-2-1-查看flannel模式\" class=\"headerlink\" title=\"9.2.1 查看flannel模式\"></a>9.2.1 查看flannel模式</h4><span class=\"label label-success\">flannel</span> 默认的模式为 <span class=\"label label-primary\">vxlan</span>，如果需要修改，可以修改 <span class=\"label label-default\">configmap</span>  <span class=\"label label-default\">kube-flannel-cfg</span>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel get configmap kube-flannel-cfg -oyaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"9-2-2-创建测试pod\"><a href=\"#9-2-2-创建测试pod\" class=\"headerlink\" title=\"9.2.2 创建测试pod\"></a>9.2.2 创建测试pod</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl run my-pod --image=nginx:latest<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"golang time包用法","date":"2023-07-27T07:33:31.000Z","_content":"\n{% note primary %}\n\n时间格式、超时处理、定时器。\n\n{% endnote %}\n\n<!--more-->\n\n#### 时间格式\n\n```go\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tfmt.Println(time.Now().Local().Format(\"2006-01-02 15:04:05\"))\n```\n\n#### 超时处理\n\n* 1. 使用select\n  \n```go\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(time.Second * 2)\n        c1 <- \"result 1\"\n    }()\n\n    select {\n    case res := <-c1:\n        fmt.Println(res)\n    case <-time.After(time.Second * 1):\n        fmt.Println(\"timeout 1\")\n    }\n```\n\n* 2. 使用 time.Since\n  \n```go\n\tstartTime := time.Now()\n\ttimeout := 5 * time.Second\n\n    time.Sleep(10 * time.Second)\n\n    if time.Since(startTime) > timeout {\n        return fmt.Errorf(\"timeout\")\n    }\n```\n#### 定时器\n\n* 1. timer\n  \n```go\nfunc main() {\n\t// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间\n\ttimer1 := time.NewTimer(5 * time.Second)\n\n\tfmt.Println(\"开始时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\tgo func(t *time.Timer) {\n\t\ttimes := 0\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\n\t\t\ttimes++\n\t\t\tfmt.Println(\"调用 reset 重新设置一次timer定时器，并将时间修改为2秒\")\n\t\t\tt.Reset(2 * time.Second)\n\t\t\tif times > 3 {\n\t\t\t\tfmt.Println(\"调用 stop 停止定时器\")\n\t\t\t\tt.Stop()\n\t\t\t}\n\t\t}\n\t}(timer1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"结束时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n}\n```\n* 2. ticker\n  \n```go\nfunc main() {\n\tticker1 := time.NewTicker(5 * time.Second)\n\tdefer ticker1.Stop() // 一定要调用Stop()，回收资源\n\tgo func(t *time.Ticker) {\n\t\tfor {\n\t\t\t// 每5秒中从chan t.C 中读取一次\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"Ticker:\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"ok\")\n}\n```","source":"_posts/golang/golang-time包用法.md","raw":"---\nlayout: golang\ntitle: golang time包用法\ndate: 2023-07-27 15:33:31\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\n时间格式、超时处理、定时器。\n\n{% endnote %}\n\n<!--more-->\n\n#### 时间格式\n\n```go\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tfmt.Println(time.Now().Local().Format(\"2006-01-02 15:04:05\"))\n```\n\n#### 超时处理\n\n* 1. 使用select\n  \n```go\n    c1 := make(chan string, 1)\n    go func() {\n        time.Sleep(time.Second * 2)\n        c1 <- \"result 1\"\n    }()\n\n    select {\n    case res := <-c1:\n        fmt.Println(res)\n    case <-time.After(time.Second * 1):\n        fmt.Println(\"timeout 1\")\n    }\n```\n\n* 2. 使用 time.Since\n  \n```go\n\tstartTime := time.Now()\n\ttimeout := 5 * time.Second\n\n    time.Sleep(10 * time.Second)\n\n    if time.Since(startTime) > timeout {\n        return fmt.Errorf(\"timeout\")\n    }\n```\n#### 定时器\n\n* 1. timer\n  \n```go\nfunc main() {\n\t// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间\n\ttimer1 := time.NewTimer(5 * time.Second)\n\n\tfmt.Println(\"开始时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\tgo func(t *time.Timer) {\n\t\ttimes := 0\n\t\tfor {\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"timer\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\n\t\t\ttimes++\n\t\t\tfmt.Println(\"调用 reset 重新设置一次timer定时器，并将时间修改为2秒\")\n\t\t\tt.Reset(2 * time.Second)\n\t\t\tif times > 3 {\n\t\t\t\tfmt.Println(\"调用 stop 停止定时器\")\n\t\t\t\tt.Stop()\n\t\t\t}\n\t\t}\n\t}(timer1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"结束时间：\", time.Now().Format(\"2006-01-02 15:04:05\"))\n}\n```\n* 2. ticker\n  \n```go\nfunc main() {\n\tticker1 := time.NewTicker(5 * time.Second)\n\tdefer ticker1.Stop() // 一定要调用Stop()，回收资源\n\tgo func(t *time.Ticker) {\n\t\tfor {\n\t\t\t// 每5秒中从chan t.C 中读取一次\n\t\t\t<-t.C\n\t\t\tfmt.Println(\"Ticker:\", time.Now().Format(\"2006-01-02 15:04:05\"))\n\t\t}\n\t}(ticker1)\n\n\ttime.Sleep(30 * time.Second)\n\tfmt.Println(\"ok\")\n}\n```","slug":"golang/golang-time包用法","published":1,"updated":"2023-08-20T03:54:29.390Z","_id":"clkku9oxq0000ou4w9a5bfsd1","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>时间格式、超时处理、定时器。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">timelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>time.Local = timelocal<br>fmt.Println(time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"超时处理\"><a href=\"#超时处理\" class=\"headerlink\" title=\"超时处理\"></a>超时处理</h4><ul>\n<li><ol>\n<li>使用select</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">c1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>    time.Sleep(time.Second * <span class=\"hljs-number\">2</span>)<br>    c1 &lt;- <span class=\"hljs-string\">&quot;result 1&quot;</span><br>&#125;()<br><br><span class=\"hljs-keyword\">select</span> &#123;<br><span class=\"hljs-keyword\">case</span> res := &lt;-c1:<br>    fmt.Println(res)<br><span class=\"hljs-keyword\">case</span> &lt;-time.After(time.Second * <span class=\"hljs-number\">1</span>):<br>    fmt.Println(<span class=\"hljs-string\">&quot;timeout 1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"2\">\n<li>使用 time.Since</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">startTime := time.Now()<br>timeout := <span class=\"hljs-number\">5</span> * time.Second<br><br>   time.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>   <span class=\"hljs-keyword\">if</span> time.Since(startTime) &gt; timeout &#123;<br>       <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;timeout&quot;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><ul>\n<li><ol>\n<li>timer</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间</span><br>\ttimer1 := time.NewTimer(<span class=\"hljs-number\">5</span> * time.Second)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;开始时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Timer)</span></span> &#123;<br>\t\ttimes := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;timer&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br><br>\t\t\ttimes++<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;</span>)<br>\t\t\tt.Reset(<span class=\"hljs-number\">2</span> * time.Second)<br>\t\t\t<span class=\"hljs-keyword\">if</span> times &gt; <span class=\"hljs-number\">3</span> &#123;<br>\t\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 stop 停止定时器&quot;</span>)<br>\t\t\t\tt.Stop()<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;(timer1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;结束时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>ticker</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tticker1 := time.NewTicker(<span class=\"hljs-number\">5</span> * time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> ticker1.Stop() <span class=\"hljs-comment\">// 一定要调用Stop()，回收资源</span><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Ticker)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 每5秒中从chan t.C 中读取一次</span><br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Ticker:&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t\t&#125;<br>\t&#125;(ticker1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;ok&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>时间格式、超时处理、定时器。</p>\n          </div>","more":"<h4 id=\"时间格式\"><a href=\"#时间格式\" class=\"headerlink\" title=\"时间格式\"></a>时间格式</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">timelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br><span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t<span class=\"hljs-built_in\">panic</span>(err)<br>&#125;<br>time.Local = timelocal<br>fmt.Println(time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"超时处理\"><a href=\"#超时处理\" class=\"headerlink\" title=\"超时处理\"></a>超时处理</h4><ul>\n<li><ol>\n<li>使用select</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">c1 := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-type\">string</span>, <span class=\"hljs-number\">1</span>)<br><span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>    time.Sleep(time.Second * <span class=\"hljs-number\">2</span>)<br>    c1 &lt;- <span class=\"hljs-string\">&quot;result 1&quot;</span><br>&#125;()<br><br><span class=\"hljs-keyword\">select</span> &#123;<br><span class=\"hljs-keyword\">case</span> res := &lt;-c1:<br>    fmt.Println(res)<br><span class=\"hljs-keyword\">case</span> &lt;-time.After(time.Second * <span class=\"hljs-number\">1</span>):<br>    fmt.Println(<span class=\"hljs-string\">&quot;timeout 1&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><ol start=\"2\">\n<li>使用 time.Since</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">startTime := time.Now()<br>timeout := <span class=\"hljs-number\">5</span> * time.Second<br><br>   time.Sleep(<span class=\"hljs-number\">10</span> * time.Second)<br><br>   <span class=\"hljs-keyword\">if</span> time.Since(startTime) &gt; timeout &#123;<br>       <span class=\"hljs-keyword\">return</span> fmt.Errorf(<span class=\"hljs-string\">&quot;timeout&quot;</span>)<br>   &#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h4><ul>\n<li><ol>\n<li>timer</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// NewTimer 创建一个 Timer，它会在最少过去时间段 d 后到期，向其自身的 C 字段发送当时的时间</span><br>\ttimer1 := time.NewTimer(<span class=\"hljs-number\">5</span> * time.Second)<br><br>\tfmt.Println(<span class=\"hljs-string\">&quot;开始时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Timer)</span></span> &#123;<br>\t\ttimes := <span class=\"hljs-number\">0</span><br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;timer&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br><br>\t\t\ttimes++<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 reset 重新设置一次timer定时器，并将时间修改为2秒&quot;</span>)<br>\t\t\tt.Reset(<span class=\"hljs-number\">2</span> * time.Second)<br>\t\t\t<span class=\"hljs-keyword\">if</span> times &gt; <span class=\"hljs-number\">3</span> &#123;<br>\t\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;调用 stop 停止定时器&quot;</span>)<br>\t\t\t\tt.Stop()<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;(timer1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;结束时间：&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>\n<ul>\n<li><ol start=\"2\">\n<li>ticker</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tticker1 := time.NewTicker(<span class=\"hljs-number\">5</span> * time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> ticker1.Stop() <span class=\"hljs-comment\">// 一定要调用Stop()，回收资源</span><br>\t<span class=\"hljs-keyword\">go</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(t *time.Ticker)</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// 每5秒中从chan t.C 中读取一次</span><br>\t\t\t&lt;-t.C<br>\t\t\tfmt.Println(<span class=\"hljs-string\">&quot;Ticker:&quot;</span>, time.Now().Format(<span class=\"hljs-string\">&quot;2006-01-02 15:04:05&quot;</span>))<br>\t\t&#125;<br>\t&#125;(ticker1)<br><br>\ttime.Sleep(<span class=\"hljs-number\">30</span> * time.Second)<br>\tfmt.Println(<span class=\"hljs-string\">&quot;ok&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"viper配置文件","date":"2023-07-29T05:08:23.000Z","_content":"\n{% note primary %}\n\nviper配置文件，为项目的启动提速。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 配置文件\n```yaml\nmysql:\n  url: 127.0.0.1\n  port: 3306\nisvalid: true\n```\n\n#### 代码示例\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc main() {\n\t// 设置配置文件的名字\n\tviper.SetConfigName(\"config\")\n\t// 设置配置文件的类型\n\tviper.SetConfigType(\"yaml\")\n\t// 添加配置文件的路径，指定 config 目录下寻找\n\tviper.AddConfigPath(\"./config\")\n\t// 寻找配置文件并读取\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n\t}\n\tfmt.Println(viper.Get(\"mysql\"))\n\tfmt.Println(viper.GetString(\"mysql.url\"))\n\tfmt.Println(viper.GetInt(\"mysql.port\"))\n\tfmt.Println(viper.GetBool(\"isvalid\"))\n}\n```","source":"_posts/golang/viper配置文件.md","raw":"---\nlayout: golang\ntitle: viper配置文件\ndate: 2023-07-29 13:08:23\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\nviper配置文件，为项目的启动提速。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 配置文件\n```yaml\nmysql:\n  url: 127.0.0.1\n  port: 3306\nisvalid: true\n```\n\n#### 代码示例\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/spf13/viper\"\n)\n\nfunc main() {\n\t// 设置配置文件的名字\n\tviper.SetConfigName(\"config\")\n\t// 设置配置文件的类型\n\tviper.SetConfigType(\"yaml\")\n\t// 添加配置文件的路径，指定 config 目录下寻找\n\tviper.AddConfigPath(\"./config\")\n\t// 寻找配置文件并读取\n\terr := viper.ReadInConfig()\n\tif err != nil {\n\t\tpanic(fmt.Errorf(\"fatal error config file: %w\", err))\n\t}\n\tfmt.Println(viper.Get(\"mysql\"))\n\tfmt.Println(viper.GetString(\"mysql.url\"))\n\tfmt.Println(viper.GetInt(\"mysql.port\"))\n\tfmt.Println(viper.GetBool(\"isvalid\"))\n}\n```","slug":"golang/viper配置文件","published":1,"updated":"2023-08-17T09:40:59.956Z","_id":"clknkuzvd0002yu4wdxz3hh7x","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>viper配置文件，为项目的启动提速。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">mysql:</span><br>  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span><br><span class=\"hljs-attr\">isvalid:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 设置配置文件的名字</span><br>\tviper.SetConfigName(<span class=\"hljs-string\">&quot;config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 设置配置文件的类型</span><br>\tviper.SetConfigType(<span class=\"hljs-string\">&quot;yaml&quot;</span>)<br>\t<span class=\"hljs-comment\">// 添加配置文件的路径，指定 config 目录下寻找</span><br>\tviper.AddConfigPath(<span class=\"hljs-string\">&quot;./config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 寻找配置文件并读取</span><br>\terr := viper.ReadInConfig()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Errorf(<span class=\"hljs-string\">&quot;fatal error config file: %w&quot;</span>, err))<br>\t&#125;<br>\tfmt.Println(viper.Get(<span class=\"hljs-string\">&quot;mysql&quot;</span>))<br>\tfmt.Println(viper.GetString(<span class=\"hljs-string\">&quot;mysql.url&quot;</span>))<br>\tfmt.Println(viper.GetInt(<span class=\"hljs-string\">&quot;mysql.port&quot;</span>))<br>\tfmt.Println(viper.GetBool(<span class=\"hljs-string\">&quot;isvalid&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>viper配置文件，为项目的启动提速。</p>\n          </div>","more":"<h4 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">mysql:</span><br>  <span class=\"hljs-attr\">url:</span> <span class=\"hljs-number\">127.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.1</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">3306</span><br><span class=\"hljs-attr\">isvalid:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;github.com/spf13/viper&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 设置配置文件的名字</span><br>\tviper.SetConfigName(<span class=\"hljs-string\">&quot;config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 设置配置文件的类型</span><br>\tviper.SetConfigType(<span class=\"hljs-string\">&quot;yaml&quot;</span>)<br>\t<span class=\"hljs-comment\">// 添加配置文件的路径，指定 config 目录下寻找</span><br>\tviper.AddConfigPath(<span class=\"hljs-string\">&quot;./config&quot;</span>)<br>\t<span class=\"hljs-comment\">// 寻找配置文件并读取</span><br>\terr := viper.ReadInConfig()<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Errorf(<span class=\"hljs-string\">&quot;fatal error config file: %w&quot;</span>, err))<br>\t&#125;<br>\tfmt.Println(viper.Get(<span class=\"hljs-string\">&quot;mysql&quot;</span>))<br>\tfmt.Println(viper.GetString(<span class=\"hljs-string\">&quot;mysql.url&quot;</span>))<br>\tfmt.Println(viper.GetInt(<span class=\"hljs-string\">&quot;mysql.port&quot;</span>))<br>\tfmt.Println(viper.GetBool(<span class=\"hljs-string\">&quot;isvalid&quot;</span>))<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"安装kubectl快捷命令","date":"2023-07-23T07:12:24.000Z","_content":"\n## 1. 简介\n\n{% note primary %}\nk8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。\n\n{% endnote %}\n\n<!-- more -->\n\n默认快捷命令保存在 ~/.bashrc 文件。\n\n## 2. 安装\n\n你可以通过该命令一键安装\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -\n```\n\n如果你的环境默认并不是 {% label primary @~/.bashrc %}，可以通过下面的命令\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```\nsource ~/.bashrc\n```\n\n## 3. 测试\n\n```sh\n# 获取pod\n$ p\nNAME                              READY   STATUS    RESTARTS   AGE\ntest-deployment-d5b769945-q29d4   1/1     Running   0          6d7h\n\n# 进入pod\n$ ke test-deployment-d5b769945-q29d4\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n\n# 查看日志\n$ kl\n\n# 查看帮助\n$ kh\nalias k=\"kubectl\"\nalias kk=\"kubectl -n kube-system\"\nalias kl=\"kubectl logs -f\"\nalias kd=\"kubectl describe\"\nalias p=\"kubectl get po\"\nalias svc=\"kubectl get svc\"\nalias no=\"kubectl get no\"\nalias pvc=\"kubectl get pvc\"\nalias sa=\"kubectl get sa\"\nalias ds=\"kubectl get ds\"\nalias rs=\"kubectl get rs\"\nalias ep=\"kubectl get ep\"\nke=kubectl exec -it POD_NAME sh\n```\n\n{% note primary %}\n至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。\n{% endnote %}\n\n## 4. 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}\n\n## 5. kubens、kubectx\n\n### 5.1 安装\n安装脚本\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -\n```\n\n你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色\n\n```sh\n# vim ~/.bashrc\n# 颜色对照表参考: https://github.com/medikoo/cli-color\nexport KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text\nexport KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background\n```\n### 5.2 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}","source":"_posts/k8s/安装kubectl快捷命令.md","raw":"---\nlayout: k8s\ntitle: 安装kubectl快捷命令\ndate: 2023-07-23 15:12:24\ntags: [kubectl,alias,k8s]\ncategories: k8s\n---\n\n## 1. 简介\n\n{% note primary %}\nk8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。\n\n{% endnote %}\n\n<!-- more -->\n\n默认快捷命令保存在 ~/.bashrc 文件。\n\n## 2. 安装\n\n你可以通过该命令一键安装\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -\n```\n\n如果你的环境默认并不是 {% label primary @~/.bashrc %}，可以通过下面的命令\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```\nsource ~/.bashrc\n```\n\n## 3. 测试\n\n```sh\n# 获取pod\n$ p\nNAME                              READY   STATUS    RESTARTS   AGE\ntest-deployment-d5b769945-q29d4   1/1     Running   0          6d7h\n\n# 进入pod\n$ ke test-deployment-d5b769945-q29d4\nkubectl exec [POD] [COMMAND] is DEPRECATED and will be removed in a future version. Use kubectl exec [POD] -- [COMMAND] instead.\n\n# 查看日志\n$ kl\n\n# 查看帮助\n$ kh\nalias k=\"kubectl\"\nalias kk=\"kubectl -n kube-system\"\nalias kl=\"kubectl logs -f\"\nalias kd=\"kubectl describe\"\nalias p=\"kubectl get po\"\nalias svc=\"kubectl get svc\"\nalias no=\"kubectl get no\"\nalias pvc=\"kubectl get pvc\"\nalias sa=\"kubectl get sa\"\nalias ds=\"kubectl get ds\"\nalias rs=\"kubectl get rs\"\nalias ep=\"kubectl get ep\"\nke=kubectl exec -it POD_NAME sh\n```\n\n{% note primary %}\n至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。\n{% endnote %}\n\n## 4. 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}\n\n## 5. kubens、kubectx\n\n### 5.1 安装\n安装脚本\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -\n```\n\n你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色\n\n```sh\n# vim ~/.bashrc\n# 颜色对照表参考: https://github.com/medikoo/cli-color\nexport KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) # blue text\nexport KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) # white background\n```\n### 5.2 卸载\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -\n```\n\n如果你的文件不是 ~/.bashrc，需要替换为对应文件，以 ~/.zshrc 为例\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc\n```\n\n执行完记得 {% label primary @source <～/FILE_NAME> %}，例如：\n\n```sh\nsource ~/.bashrc\n```\n\n{% note warning %}\n如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。\n{% endnote %}","slug":"k8s/安装kubectl快捷命令","published":1,"updated":"2023-08-17T09:41:03.034Z","_id":"clknkuzvd0003yu4wdiyu6ntn","comments":1,"photos":[],"link":"","content":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><div class=\"note note-primary\">\n            <p>k8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p>默认快捷命令保存在 ~&#x2F;.bashrc 文件。</p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>你可以通过该命令一键安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的环境默认并不是 <span class=\"label label-primary\">~/.bashrc</span>，可以通过下面的命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 获取pod</span><br>$ p<br>NAME                              READY   STATUS    RESTARTS   AGE<br>test-deployment-d5b769945-q29d4   1/1     Running   0          6d7h<br><br><span class=\"hljs-comment\"># 进入pod</span><br>$ ke test-deployment-d5b769945-q29d4<br>kubectl <span class=\"hljs-built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"hljs-keyword\">in</span> a future version. Use kubectl <span class=\"hljs-built_in\">exec</span> [POD] -- [COMMAND] instead.<br><br><span class=\"hljs-comment\"># 查看日志</span><br>$ kl<br><br><span class=\"hljs-comment\"># 查看帮助</span><br>$ kh<br><span class=\"hljs-built_in\">alias</span> k=<span class=\"hljs-string\">&quot;kubectl&quot;</span><br><span class=\"hljs-built_in\">alias</span> kk=<span class=\"hljs-string\">&quot;kubectl -n kube-system&quot;</span><br><span class=\"hljs-built_in\">alias</span> kl=<span class=\"hljs-string\">&quot;kubectl logs -f&quot;</span><br><span class=\"hljs-built_in\">alias</span> kd=<span class=\"hljs-string\">&quot;kubectl describe&quot;</span><br><span class=\"hljs-built_in\">alias</span> p=<span class=\"hljs-string\">&quot;kubectl get po&quot;</span><br><span class=\"hljs-built_in\">alias</span> svc=<span class=\"hljs-string\">&quot;kubectl get svc&quot;</span><br><span class=\"hljs-built_in\">alias</span> no=<span class=\"hljs-string\">&quot;kubectl get no&quot;</span><br><span class=\"hljs-built_in\">alias</span> pvc=<span class=\"hljs-string\">&quot;kubectl get pvc&quot;</span><br><span class=\"hljs-built_in\">alias</span> sa=<span class=\"hljs-string\">&quot;kubectl get sa&quot;</span><br><span class=\"hljs-built_in\">alias</span> ds=<span class=\"hljs-string\">&quot;kubectl get ds&quot;</span><br><span class=\"hljs-built_in\">alias</span> rs=<span class=\"hljs-string\">&quot;kubectl get rs&quot;</span><br><span class=\"hljs-built_in\">alias</span> ep=<span class=\"hljs-string\">&quot;kubectl get ep&quot;</span><br>ke=kubectl <span class=\"hljs-built_in\">exec</span> -it POD_NAME sh<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-primary\">\n            <p>至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。</p>\n          </div>\n\n<h2 id=\"4-卸载\"><a href=\"#4-卸载\" class=\"headerlink\" title=\"4. 卸载\"></a>4. 卸载</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>\n\n<h2 id=\"5-kubens、kubectx\"><a href=\"#5-kubens、kubectx\" class=\"headerlink\" title=\"5. kubens、kubectx\"></a>5. kubens、kubectx</h2><h3 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h3><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># vim ~/.bashrc</span><br><span class=\"hljs-comment\"># 颜色对照表参考: https://github.com/medikoo/cli-color</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) <span class=\"hljs-comment\"># blue text</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) <span class=\"hljs-comment\"># white background</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"5-2-卸载\"><a href=\"#5-2-卸载\" class=\"headerlink\" title=\"5.2 卸载\"></a>5.2 卸载</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>","site":{"data":{}},"excerpt":"<h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><div class=\"note note-primary\">\n            <p>k8s 的命令不长，也很好记，但身为一个懒人，我想我可以更简洁、高效。</p>\n          </div>","more":"<p>默认快捷命令保存在 ~&#x2F;.bashrc 文件。</p>\n<h2 id=\"2-安装\"><a href=\"#2-安装\" class=\"headerlink\" title=\"2. 安装\"></a>2. 安装</h2><p>你可以通过该命令一键安装</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的环境默认并不是 <span class=\"label label-primary\">~/.bashrc</span>，可以通过下面的命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_install.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-测试\"><a href=\"#3-测试\" class=\"headerlink\" title=\"3. 测试\"></a>3. 测试</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 获取pod</span><br>$ p<br>NAME                              READY   STATUS    RESTARTS   AGE<br>test-deployment-d5b769945-q29d4   1/1     Running   0          6d7h<br><br><span class=\"hljs-comment\"># 进入pod</span><br>$ ke test-deployment-d5b769945-q29d4<br>kubectl <span class=\"hljs-built_in\">exec</span> [POD] [COMMAND] is DEPRECATED and will be removed <span class=\"hljs-keyword\">in</span> a future version. Use kubectl <span class=\"hljs-built_in\">exec</span> [POD] -- [COMMAND] instead.<br><br><span class=\"hljs-comment\"># 查看日志</span><br>$ kl<br><br><span class=\"hljs-comment\"># 查看帮助</span><br>$ kh<br><span class=\"hljs-built_in\">alias</span> k=<span class=\"hljs-string\">&quot;kubectl&quot;</span><br><span class=\"hljs-built_in\">alias</span> kk=<span class=\"hljs-string\">&quot;kubectl -n kube-system&quot;</span><br><span class=\"hljs-built_in\">alias</span> kl=<span class=\"hljs-string\">&quot;kubectl logs -f&quot;</span><br><span class=\"hljs-built_in\">alias</span> kd=<span class=\"hljs-string\">&quot;kubectl describe&quot;</span><br><span class=\"hljs-built_in\">alias</span> p=<span class=\"hljs-string\">&quot;kubectl get po&quot;</span><br><span class=\"hljs-built_in\">alias</span> svc=<span class=\"hljs-string\">&quot;kubectl get svc&quot;</span><br><span class=\"hljs-built_in\">alias</span> no=<span class=\"hljs-string\">&quot;kubectl get no&quot;</span><br><span class=\"hljs-built_in\">alias</span> pvc=<span class=\"hljs-string\">&quot;kubectl get pvc&quot;</span><br><span class=\"hljs-built_in\">alias</span> sa=<span class=\"hljs-string\">&quot;kubectl get sa&quot;</span><br><span class=\"hljs-built_in\">alias</span> ds=<span class=\"hljs-string\">&quot;kubectl get ds&quot;</span><br><span class=\"hljs-built_in\">alias</span> rs=<span class=\"hljs-string\">&quot;kubectl get rs&quot;</span><br><span class=\"hljs-built_in\">alias</span> ep=<span class=\"hljs-string\">&quot;kubectl get ep&quot;</span><br>ke=kubectl <span class=\"hljs-built_in\">exec</span> -it POD_NAME sh<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-primary\">\n            <p>至此，已经完成了设置kubectl快捷命令。如果你没有多集群切换需求或者关于namespace高效切换，那么到这里就结束了。</p>\n          </div>\n\n<h2 id=\"4-卸载\"><a href=\"#4-卸载\" class=\"headerlink\" title=\"4. 卸载\"></a>4. 卸载</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/k8s_alias_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>\n\n<h2 id=\"5-kubens、kubectx\"><a href=\"#5-kubens、kubectx\" class=\"headerlink\" title=\"5. kubens、kubectx\"></a>5. kubens、kubectx</h2><h3 id=\"5-1-安装\"><a href=\"#5-1-安装\" class=\"headerlink\" title=\"5.1 安装\"></a>5.1 安装</h3><p>安装脚本</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_install.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>你可以通过修改对应文件更改 fzf 的背景颜色和字体颜色</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># vim ~/.bashrc</span><br><span class=\"hljs-comment\"># 颜色对照表参考: https://github.com/medikoo/cli-color</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_FGCOLOR=$(tput setaf 6) <span class=\"hljs-comment\"># blue text</span><br><span class=\"hljs-built_in\">export</span> KUBECTX_CURRENT_BGCOLOR=$(tput setab 7) <span class=\"hljs-comment\"># white background</span><br></code></pre></td></tr></table></figure>\n<h3 id=\"5-2-卸载\"><a href=\"#5-2-卸载\" class=\"headerlink\" title=\"5.2 卸载\"></a>5.2 卸载</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | sh -<br></code></pre></td></tr></table></figure>\n\n<p>如果你的文件不是 ~&#x2F;.bashrc，需要替换为对应文件，以 ~&#x2F;.zshrc 为例</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/kubectx_kubens_uninstall.sh | bash -s ~/.zshrc<br></code></pre></td></tr></table></figure>\n\n<p>执行完记得 <span class=\"label label-primary\">source <～ file_name></～></span>，例如：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>如果你卸载成功了，重新source后，发现kubectl快捷命令继续可以使用。此时终端重新连接即可。</p>\n          </div>"},{"layout":"工具","title":"oh my zsh 让终端飞","date":"2023-07-27T10:31:40.000Z","_content":"\n{% note primary%}\n\noh my zsh 让终端飞。\n\n{% endnote %}\n\n<!-- more -->\n\n\n```sh\n# yum先安装，如果是ubuntu使用 apt-get install zsh \nyum -y install zsh\n\n# 安装脚本\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# 插件安装\n\n## 高亮插件\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n## 自动补全\ngit clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n\n#### 手动更改插件配置\n```sh\n$ vim ~/.zshrc\n\n# plugins 更改如下\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\n# 更换主题\nZSH_THEME=\"ys\"\n\n# 重新加载\nsource ~/.zshrc\n```\n","source":"_posts/工具/oh-my-zsh-让终端飞.md","raw":"---\nlayout: 工具\ntitle: oh my zsh 让终端飞\ndate: 2023-07-27 18:31:40\ntags: [工具,oh my zsh]\ncategories: 工具\n---\n\n{% note primary%}\n\noh my zsh 让终端飞。\n\n{% endnote %}\n\n<!-- more -->\n\n\n```sh\n# yum先安装，如果是ubuntu使用 apt-get install zsh \nyum -y install zsh\n\n# 安装脚本\nsh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n\n# 插件安装\n\n## 高亮插件\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n\n## 自动补全\ngit clone https://github.com/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions\n```\n\n\n#### 手动更改插件配置\n```sh\n$ vim ~/.zshrc\n\n# plugins 更改如下\nplugins=(\n  git\n  zsh-autosuggestions\n  zsh-syntax-highlighting\n)\n\n# 更换主题\nZSH_THEME=\"ys\"\n\n# 重新加载\nsource ~/.zshrc\n```\n","slug":"工具/oh-my-zsh-让终端飞","published":1,"updated":"2023-08-29T09:54:14.592Z","_id":"clknkuzve0009yu4whaiuak41","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>oh my zsh 让终端飞。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># yum先安装，如果是ubuntu使用 apt-get install zsh </span><br>yum -y install zsh<br><br><span class=\"hljs-comment\"># 安装脚本</span><br>sh -c <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 插件安装</span><br><br><span class=\"hljs-comment\">## 高亮插件</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"hljs-variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><span class=\"hljs-comment\">## 自动补全</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"hljs-variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"手动更改插件配置\"><a href=\"#手动更改插件配置\" class=\"headerlink\" title=\"手动更改插件配置\"></a>手动更改插件配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ vim ~/.zshrc<br><br><span class=\"hljs-comment\"># plugins 更改如下</span><br>plugins=(<br>  git<br>  zsh-autosuggestions<br>  zsh-syntax-highlighting<br>)<br><br><span class=\"hljs-comment\"># 更换主题</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;ys&quot;</span><br><br><span class=\"hljs-comment\"># 重新加载</span><br><span class=\"hljs-built_in\">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>oh my zsh 让终端飞。</p>\n          </div>","more":"<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># yum先安装，如果是ubuntu使用 apt-get install zsh </span><br>yum -y install zsh<br><br><span class=\"hljs-comment\"># 安装脚本</span><br>sh -c <span class=\"hljs-string\">&quot;<span class=\"hljs-subst\">$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)</span>&quot;</span><br><br><span class=\"hljs-comment\"># 插件安装</span><br><br><span class=\"hljs-comment\">## 高亮插件</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class=\"hljs-variable\">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting<br><br><span class=\"hljs-comment\">## 自动补全</span><br>git <span class=\"hljs-built_in\">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class=\"hljs-variable\">$ZSH_CUSTOM</span>/plugins/zsh-autosuggestions<br></code></pre></td></tr></table></figure>\n\n\n<h4 id=\"手动更改插件配置\"><a href=\"#手动更改插件配置\" class=\"headerlink\" title=\"手动更改插件配置\"></a>手动更改插件配置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ vim ~/.zshrc<br><br><span class=\"hljs-comment\"># plugins 更改如下</span><br>plugins=(<br>  git<br>  zsh-autosuggestions<br>  zsh-syntax-highlighting<br>)<br><br><span class=\"hljs-comment\"># 更换主题</span><br>ZSH_THEME=<span class=\"hljs-string\">&quot;ys&quot;</span><br><br><span class=\"hljs-comment\"># 重新加载</span><br><span class=\"hljs-built_in\">source</span> ~/.zshrc<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"grpc如何使用","date":"2023-07-31T09:04:16.000Z","_content":"\n{% note primary %}\n\ngrpc 最基本的使用。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 安装grpc\n```sh\ngo get google.golang.org/grpc@latest\n```\n\n#### 安装Protocol Buffers v3\n\nprotoc [下载](https://github.com/google/protobuf/releases)\n\n#### 安装插件\n```sh\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2\n```\n\n# 入门示例\n\n[代码实现](https://github.com/oldwang12/grpc-demo)\n\n## 服务端\n\n#### 编写proto代码\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"server/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令：\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### 编写Server端Go代码\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"hello_server/pb\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// hello server\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, error) {\n\treturn &pb.HelloResponse{Reply: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\t// 监听本地的8972端口\n\tlis, err := net.Listen(\"tcp\", \":8972\")\n\tif err != nil {\n\t\tfmt.Printf(\"failed to listen: %v\", err)\n\t\treturn\n\t}\n\ts := grpc.NewServer()                  // 创建gRPC服务器\n\tpb.RegisterGreeterServer(s, &server{}) // 在gRPC服务端注册服务\n\t// 启动服务\n\terr = s.Serve(lis)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to serve: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n#### 代码结构\n\n```\nserver\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n#### 运行\n```sh\ngo run main.go\n```\n\n## 客户端\n\n#### 编写proto代码\n\n新建 client 项目\n\n将 go_package 改为 \"client/db\"\n\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"client/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### client 端代码\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"hello_client/pb\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\n// hello_client\n\nconst (\n\tdefaultName = \"world\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\t// 连接到server端，此处禁用安全传输\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\t// 执行RPC调用并打印收到的响应数据\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: *name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}\n```\n\n#### 代码结构\n```\nhttp_client\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n## 结果\n```sh\n$ go run main.go -name=李四\nGreeting: Hello 李四\n```","source":"_posts/golang/grpc如何使用.md","raw":"---\nlayout: golang\ntitle: grpc如何使用\ndate: 2023-07-31 17:04:16\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\ngrpc 最基本的使用。\n\n{% endnote %}\n\n<!-- more -->\n\n#### 安装grpc\n```sh\ngo get google.golang.org/grpc@latest\n```\n\n#### 安装Protocol Buffers v3\n\nprotoc [下载](https://github.com/google/protobuf/releases)\n\n#### 安装插件\n```sh\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28\ngo install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2\n```\n\n# 入门示例\n\n[代码实现](https://github.com/oldwang12/grpc-demo)\n\n## 服务端\n\n#### 编写proto代码\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"server/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令：\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### 编写Server端Go代码\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"hello_server/pb\"\n\t\"net\"\n\n\t\"google.golang.org/grpc\"\n)\n\n// hello server\n\ntype server struct {\n\tpb.UnimplementedGreeterServer\n}\n\nfunc (s *server) SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, error) {\n\treturn &pb.HelloResponse{Reply: \"Hello \" + in.Name}, nil\n}\n\nfunc main() {\n\t// 监听本地的8972端口\n\tlis, err := net.Listen(\"tcp\", \":8972\")\n\tif err != nil {\n\t\tfmt.Printf(\"failed to listen: %v\", err)\n\t\treturn\n\t}\n\ts := grpc.NewServer()                  // 创建gRPC服务器\n\tpb.RegisterGreeterServer(s, &server{}) // 在gRPC服务端注册服务\n\t// 启动服务\n\terr = s.Serve(lis)\n\tif err != nil {\n\t\tfmt.Printf(\"failed to serve: %v\", err)\n\t\treturn\n\t}\n}\n```\n\n#### 代码结构\n\n```\nserver\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n#### 运行\n```sh\ngo run main.go\n```\n\n## 客户端\n\n#### 编写proto代码\n\n新建 client 项目\n\n将 go_package 改为 \"client/db\"\n\n```sh\ncat <<EOF > pb/hello.proto\nsyntax = \"proto3\"; // 版本声明，使用Protocol Buffers v3版本\n\noption go_package = \"client/pb\";  // 指定生成的Go代码在你项目中的导入路径\n\npackage pb; // 包名\n\n\n// 定义服务\nservice Greeter {\n    // SayHello 方法\n    rpc SayHello (HelloRequest) returns (HelloResponse) {}\n}\n\n// 请求消息\nmessage HelloRequest {\n    string name = 1;\n}\n\n// 响应消息\nmessage HelloResponse {\n    string reply = 1;\n}\nEOF\n```\n\n* 执行命令\n```sh\nprotoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto\n```\n\n#### client 端代码\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"log\"\n\t\"time\"\n\n\t\"hello_client/pb\"\n\n\t\"google.golang.org/grpc\"\n\t\"google.golang.org/grpc/credentials/insecure\"\n)\n\n// hello_client\n\nconst (\n\tdefaultName = \"world\"\n)\n\nvar (\n\taddr = flag.String(\"addr\", \"127.0.0.1:8972\", \"the address to connect to\")\n\tname = flag.String(\"name\", defaultName, \"Name to greet\")\n)\n\nfunc main() {\n\tflag.Parse()\n\t// 连接到server端，此处禁用安全传输\n\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))\n\tif err != nil {\n\t\tlog.Fatalf(\"did not connect: %v\", err)\n\t}\n\tdefer conn.Close()\n\tc := pb.NewGreeterClient(conn)\n\n\t// 执行RPC调用并打印收到的响应数据\n\tctx, cancel := context.WithTimeout(context.Background(), time.Second)\n\tdefer cancel()\n\tr, err := c.SayHello(ctx, &pb.HelloRequest{Name: *name})\n\tif err != nil {\n\t\tlog.Fatalf(\"could not greet: %v\", err)\n\t}\n\tlog.Printf(\"Greeting: %s\", r.GetReply())\n}\n```\n\n#### 代码结构\n```\nhttp_client\n├── go.mod\n├── go.sum\n├── main.go\n└── pb\n    ├── hello.pb.go\n    ├── hello.proto\n    └── hello_grpc.pb.go\n```\n\n## 结果\n```sh\n$ go run main.go -name=李四\nGreeting: Hello 李四\n```","slug":"golang/grpc如何使用","published":1,"updated":"2023-08-17T09:40:57.488Z","_id":"clkqp0e2000006o4wblmweesx","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>grpc 最基本的使用。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h4 id=\"安装grpc\"><a href=\"#安装grpc\" class=\"headerlink\" title=\"安装grpc\"></a>安装grpc</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go get google.golang.org/grpc@latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装Protocol-Buffers-v3\"><a href=\"#安装Protocol-Buffers-v3\" class=\"headerlink\" title=\"安装Protocol Buffers v3\"></a>安装Protocol Buffers v3</h4><p>protoc <a href=\"https://github.com/google/protobuf/releases\">下载</a></p>\n<h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28<br>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"入门示例\"><a href=\"#入门示例\" class=\"headerlink\" title=\"入门示例\"></a>入门示例</h1><p><a href=\"https://github.com/oldwang12/grpc-demo\">代码实现</a></p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h4 id=\"编写proto代码\"><a href=\"#编写proto代码\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;server/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"编写Server端Go代码\"><a href=\"#编写Server端Go代码\" class=\"headerlink\" title=\"编写Server端Go代码\"></a>编写Server端Go代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;hello_server/pb&quot;</span><br>\t<span class=\"hljs-string\">&quot;net&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello server</span><br><br><span class=\"hljs-keyword\">type</span> server <span class=\"hljs-keyword\">struct</span> &#123;<br>\tpb.UnimplementedGreeterServer<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;pb.HelloResponse&#123;Reply: <span class=\"hljs-string\">&quot;Hello &quot;</span> + in.Name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 监听本地的8972端口</span><br>\tlis, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, <span class=\"hljs-string\">&quot;:8972&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to listen: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\ts := grpc.NewServer()                  <span class=\"hljs-comment\">// 创建gRPC服务器</span><br>\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class=\"hljs-comment\">// 在gRPC服务端注册服务</span><br>\t<span class=\"hljs-comment\">// 启动服务</span><br>\terr = s.Serve(lis)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to serve: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">server<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go run main.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h4 id=\"编写proto代码-1\"><a href=\"#编写proto代码-1\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><p>新建 client 项目</p>\n<p>将 go_package 改为 “client&#x2F;db”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;client/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"client-端代码\"><a href=\"#client-端代码\" class=\"headerlink\" title=\"client 端代码\"></a>client 端代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;hello_client/pb&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello_client</span><br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultName = <span class=\"hljs-string\">&quot;world&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\taddr = flag.String(<span class=\"hljs-string\">&quot;addr&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1:8972&quot;</span>, <span class=\"hljs-string\">&quot;the address to connect to&quot;</span>)<br>\tname = flag.String(<span class=\"hljs-string\">&quot;name&quot;</span>, defaultName, <span class=\"hljs-string\">&quot;Name to greet&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tflag.Parse()<br>\t<span class=\"hljs-comment\">// 连接到server端，此处禁用安全传输</span><br>\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;did not connect: %v&quot;</span>, err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br>\tc := pb.NewGreeterClient(conn)<br><br>\t<span class=\"hljs-comment\">// 执行RPC调用并打印收到的响应数据</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;could not greet: %v&quot;</span>, err)<br>\t&#125;<br>\tlog.Printf(<span class=\"hljs-string\">&quot;Greeting: %s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构-1\"><a href=\"#代码结构-1\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">http_client<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ go run main.go -name=李四<br>Greeting: Hello 李四<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>grpc 最基本的使用。</p>\n          </div>","more":"<h4 id=\"安装grpc\"><a href=\"#安装grpc\" class=\"headerlink\" title=\"安装grpc\"></a>安装grpc</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go get google.golang.org/grpc@latest<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装Protocol-Buffers-v3\"><a href=\"#安装Protocol-Buffers-v3\" class=\"headerlink\" title=\"安装Protocol Buffers v3\"></a>安装Protocol Buffers v3</h4><p>protoc <a href=\"https://github.com/google/protobuf/releases\">下载</a></p>\n<h4 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go install google.golang.org/protobuf/cmd/protoc-gen-go@v1.28<br>go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@v1.2<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"入门示例\"><a href=\"#入门示例\" class=\"headerlink\" title=\"入门示例\"></a>入门示例</h1><p><a href=\"https://github.com/oldwang12/grpc-demo\">代码实现</a></p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><h4 id=\"编写proto代码\"><a href=\"#编写proto代码\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;server/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令：<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"编写Server端Go代码\"><a href=\"#编写Server端Go代码\" class=\"headerlink\" title=\"编写Server端Go代码\"></a>编写Server端Go代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;hello_server/pb&quot;</span><br>\t<span class=\"hljs-string\">&quot;net&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello server</span><br><br><span class=\"hljs-keyword\">type</span> server <span class=\"hljs-keyword\">struct</span> &#123;<br>\tpb.UnimplementedGreeterServer<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(s *server)</span></span> SayHello(ctx context.Context, in *pb.HelloRequest) (*pb.HelloResponse, <span class=\"hljs-type\">error</span>) &#123;<br>\t<span class=\"hljs-keyword\">return</span> &amp;pb.HelloResponse&#123;Reply: <span class=\"hljs-string\">&quot;Hello &quot;</span> + in.Name&#125;, <span class=\"hljs-literal\">nil</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t<span class=\"hljs-comment\">// 监听本地的8972端口</span><br>\tlis, err := net.Listen(<span class=\"hljs-string\">&quot;tcp&quot;</span>, <span class=\"hljs-string\">&quot;:8972&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to listen: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>\ts := grpc.NewServer()                  <span class=\"hljs-comment\">// 创建gRPC服务器</span><br>\tpb.RegisterGreeterServer(s, &amp;server&#123;&#125;) <span class=\"hljs-comment\">// 在gRPC服务端注册服务</span><br>\t<span class=\"hljs-comment\">// 启动服务</span><br>\terr = s.Serve(lis)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;failed to serve: %v&quot;</span>, err)<br>\t\t<span class=\"hljs-keyword\">return</span><br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构\"><a href=\"#代码结构\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">server<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">go run main.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><h4 id=\"编写proto代码-1\"><a href=\"#编写proto代码-1\" class=\"headerlink\" title=\"编写proto代码\"></a>编写proto代码</h4><p>新建 client 项目</p>\n<p>将 go_package 改为 “client&#x2F;db”</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> &lt;&lt;<span class=\"hljs-string\">EOF &gt; pb/hello.proto</span><br><span class=\"hljs-string\">syntax = &quot;proto3&quot;; // 版本声明，使用Protocol Buffers v3版本</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">option go_package = &quot;client/pb&quot;;  // 指定生成的Go代码在你项目中的导入路径</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">package pb; // 包名</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 定义服务</span><br><span class=\"hljs-string\">service Greeter &#123;</span><br><span class=\"hljs-string\">    // SayHello 方法</span><br><span class=\"hljs-string\">    rpc SayHello (HelloRequest) returns (HelloResponse) &#123;&#125;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 请求消息</span><br><span class=\"hljs-string\">message HelloRequest &#123;</span><br><span class=\"hljs-string\">    string name = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\"></span><br><span class=\"hljs-string\">// 响应消息</span><br><span class=\"hljs-string\">message HelloResponse &#123;</span><br><span class=\"hljs-string\">    string reply = 1;</span><br><span class=\"hljs-string\">&#125;</span><br><span class=\"hljs-string\">EOF</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>执行命令<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative pb/hello.proto<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"client-端代码\"><a href=\"#client-端代码\" class=\"headerlink\" title=\"client 端代码\"></a>client 端代码</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;context&quot;</span><br>\t<span class=\"hljs-string\">&quot;flag&quot;</span><br>\t<span class=\"hljs-string\">&quot;log&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;hello_client/pb&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc&quot;</span><br>\t<span class=\"hljs-string\">&quot;google.golang.org/grpc/credentials/insecure&quot;</span><br>)<br><br><span class=\"hljs-comment\">// hello_client</span><br><br><span class=\"hljs-keyword\">const</span> (<br>\tdefaultName = <span class=\"hljs-string\">&quot;world&quot;</span><br>)<br><br><span class=\"hljs-keyword\">var</span> (<br>\taddr = flag.String(<span class=\"hljs-string\">&quot;addr&quot;</span>, <span class=\"hljs-string\">&quot;127.0.0.1:8972&quot;</span>, <span class=\"hljs-string\">&quot;the address to connect to&quot;</span>)<br>\tname = flag.String(<span class=\"hljs-string\">&quot;name&quot;</span>, defaultName, <span class=\"hljs-string\">&quot;Name to greet&quot;</span>)<br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tflag.Parse()<br>\t<span class=\"hljs-comment\">// 连接到server端，此处禁用安全传输</span><br>\tconn, err := grpc.Dial(*addr, grpc.WithTransportCredentials(insecure.NewCredentials()))<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;did not connect: %v&quot;</span>, err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> conn.Close()<br>\tc := pb.NewGreeterClient(conn)<br><br>\t<span class=\"hljs-comment\">// 执行RPC调用并打印收到的响应数据</span><br>\tctx, cancel := context.WithTimeout(context.Background(), time.Second)<br>\t<span class=\"hljs-keyword\">defer</span> cancel()<br>\tr, err := c.SayHello(ctx, &amp;pb.HelloRequest&#123;Name: *name&#125;)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tlog.Fatalf(<span class=\"hljs-string\">&quot;could not greet: %v&quot;</span>, err)<br>\t&#125;<br>\tlog.Printf(<span class=\"hljs-string\">&quot;Greeting: %s&quot;</span>, r.GetReply())<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"代码结构-1\"><a href=\"#代码结构-1\" class=\"headerlink\" title=\"代码结构\"></a>代码结构</h4><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">http_client<br>├── go<span class=\"hljs-selector-class\">.mod</span><br>├── go<span class=\"hljs-selector-class\">.sum</span><br>├── <span class=\"hljs-selector-tag\">main</span><span class=\"hljs-selector-class\">.go</span><br>└── pb<br>    ├── hello<span class=\"hljs-selector-class\">.pb</span><span class=\"hljs-selector-class\">.go</span><br>    ├── hello<span class=\"hljs-selector-class\">.proto</span><br>    └── hello_grpc<span class=\"hljs-selector-class\">.pb</span>.go<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"结果\"><a href=\"#结果\" class=\"headerlink\" title=\"结果\"></a>结果</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ go run main.go -name=李四<br>Greeting: Hello 李四<br></code></pre></td></tr></table></figure>"},{"layout":"docker","title":"buildx构建多版本镜像","date":"2023-08-03T07:23:18.000Z","_content":"\n{% note primary%}\n\n目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行\n\n{% endnote %}\n\n<!--more-->\n\n[参考资料](http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/)\n\n新版本的docker默认自带 buildx\n\n## 1. 创建buildx\n\n### 1.1 查看当前buildx实例\n\n```sh\n$ docker buildx ls\nNAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\ndefault * docker\n  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n> 默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型\n\n### 1.2 创建buildx\n\n```shell\ndocker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use\n```\n\n- 使用这个实例\n\n```shell\ndocker buildx use all\n```\n\n- 当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像\n\n## 2. 编译\n\n**--platform执行要编译的平台，其他的参数和普通的build差不多**\n\n```sh\n# 直接上传到仓库\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .\n\n# 输出本地\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .\n\n# tar包\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .\n\n# 直接导入到本地 docker 中，只支持单平台架构\ndocker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . \n```","source":"_posts/docker/buildx构建多版本镜像.md","raw":"---\nlayout: docker\ntitle: buildx构建多版本镜像\ndate: 2023-08-03 15:23:18\ntags: \"docker\"\ncategories: docker\n---\n\n{% note primary%}\n\n目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行\n\n{% endnote %}\n\n<!--more-->\n\n[参考资料](http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/)\n\n新版本的docker默认自带 buildx\n\n## 1. 创建buildx\n\n### 1.1 查看当前buildx实例\n\n```sh\n$ docker buildx ls\nNAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS\ndefault * docker\n  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386\n```\n\n> 默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型\n\n### 1.2 创建buildx\n\n```shell\ndocker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use\n```\n\n- 使用这个实例\n\n```shell\ndocker buildx use all\n```\n\n- 当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像\n\n## 2. 编译\n\n**--platform执行要编译的平台，其他的参数和普通的build差不多**\n\n```sh\n# 直接上传到仓库\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=registry .\n\n# 输出本地\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o type=local,dest=./output .\n\n# tar包\ndocker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output type=tar,dest=./output.tar .\n\n# 直接导入到本地 docker 中，只支持单平台架构\ndocker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . \n```","slug":"docker/buildx构建多版本镜像","published":1,"updated":"2023-08-17T09:57:00.521Z","_id":"clkutyww60000vb4w1je99qus","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p><a href=\"http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/\">参考资料</a></p>\n<p>新版本的docker默认自带 buildx</p>\n<h2 id=\"1-创建buildx\"><a href=\"#1-创建buildx\" class=\"headerlink\" title=\"1. 创建buildx\"></a>1. 创建buildx</h2><h3 id=\"1-1-查看当前buildx实例\"><a href=\"#1-1-查看当前buildx实例\" class=\"headerlink\" title=\"1.1 查看当前buildx实例\"></a>1.1 查看当前buildx实例</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker buildx <span class=\"hljs-built_in\">ls</span><br>NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS<br>default * docker<br>  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p>\n</blockquote>\n<h3 id=\"1-2-创建buildx\"><a href=\"#1-2-创建buildx\" class=\"headerlink\" title=\"1.2 创建buildx\"></a>1.2 创建buildx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用这个实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx use all<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li>\n</ul>\n<h2 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h2><p><strong>–platform执行要编译的平台，其他的参数和普通的build差不多</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 直接上传到仓库</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=registry .<br><br><span class=\"hljs-comment\"># 输出本地</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">local</span>,dest=./output .<br><br><span class=\"hljs-comment\"># tar包</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output <span class=\"hljs-built_in\">type</span>=tar,dest=./output.tar .<br><br><span class=\"hljs-comment\"># 直接导入到本地 docker 中，只支持单平台架构</span><br>docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . <br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前大部分使用docker的场景中不单单只是 amd64 平台了有时我们需要再 arm 和 adm64 上都能运行</p>\n          </div>","more":"<p><a href=\"http://blog.naturelr.cc/2023/06/16/%E4%BD%BF%E7%94%A8buildx%E7%BC%96%E8%AF%91%E5%A4%9A%E5%B9%B3%E5%8F%B0%E9%95%9C%E5%83%8F/\">参考资料</a></p>\n<p>新版本的docker默认自带 buildx</p>\n<h2 id=\"1-创建buildx\"><a href=\"#1-创建buildx\" class=\"headerlink\" title=\"1. 创建buildx\"></a>1. 创建buildx</h2><h3 id=\"1-1-查看当前buildx实例\"><a href=\"#1-1-查看当前buildx实例\" class=\"headerlink\" title=\"1.1 查看当前buildx实例\"></a>1.1 查看当前buildx实例</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ docker buildx <span class=\"hljs-built_in\">ls</span><br>NAME/NODE DRIVER/ENDPOINT STATUS  BUILDKIT PLATFORMS<br>default * docker<br>  default default         running 23.0.5   linux/amd64, linux/amd64/v2, linux/amd64/v3, linux/386<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>默认会有个实例叫default，default实例下有一个default的node，一个实例下可以有多个node,星号是默认使用的实例,node有很多种类型</p>\n</blockquote>\n<h3 id=\"1-2-创建buildx\"><a href=\"#1-2-创建buildx\" class=\"headerlink\" title=\"1.2 创建buildx\"></a>1.2 创建buildx</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx create --name all --node local --driver docker-container --platform linux/amd64,linux/arm64,linux/arm/v8 --use<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>使用这个实例</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">docker buildx use all<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>当我们执行编译的时候会先下载buildx镜像并运行起来，然后使用这个容器运行的buildx来编译镜像</li>\n</ul>\n<h2 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h2><p><strong>–platform执行要编译的平台，其他的参数和普通的build差不多</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 直接上传到仓库</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=registry .<br><br><span class=\"hljs-comment\"># 输出本地</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader -o <span class=\"hljs-built_in\">type</span>=<span class=\"hljs-built_in\">local</span>,dest=./output .<br><br><span class=\"hljs-comment\"># tar包</span><br>docker buildx build --platform linux/amd64,linux/arm64,linux/arm -t bearking0425/m3u8-downloader --output <span class=\"hljs-built_in\">type</span>=tar,dest=./output.tar .<br><br><span class=\"hljs-comment\"># 直接导入到本地 docker 中，只支持单平台架构</span><br>docker buildx build --platform linux/arm64 -t bearking0425/m3u8-downloader --load . <br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"gin跨域问题","date":"2023-07-22T16:14:35.000Z","_content":"{% note primary%}\n\n解决跨域问题\n\n{% endnote %}\n\n<!--more-->\n\n代码加入这一段就可以了\n\n```go\nr := gin.Default()\nr.Use(Cors())\n\nfunc Cors() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tmethod := c.Request.Method\n\t\torigin := c.Request.Header.Get(\"Origin\")\n\t\tif origin != \"\" {\n\t\t\tc.Header(\"Access-Control-Allow-Origin\", \"*\") // 可将将 * 替换为指定的域名\n\t\t\tc.Header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE, UPDATE\")\n\t\t\tc.Header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")\n\t\t\tc.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type\")\n\t\t\tc.Header(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t}\n\t\tif method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(http.StatusNoContent)\n\t\t}\n\t\tc.Next()\n\t}\n}\n```","source":"_posts/golang/gin跨域问题.md","raw":"---\nlayout: golang\ntitle: gin跨域问题\ndate: 2023-07-23 00:14:35\ntags: \"golang\"\ncategories: golang\n---\n{% note primary%}\n\n解决跨域问题\n\n{% endnote %}\n\n<!--more-->\n\n代码加入这一段就可以了\n\n```go\nr := gin.Default()\nr.Use(Cors())\n\nfunc Cors() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tmethod := c.Request.Method\n\t\torigin := c.Request.Header.Get(\"Origin\")\n\t\tif origin != \"\" {\n\t\t\tc.Header(\"Access-Control-Allow-Origin\", \"*\") // 可将将 * 替换为指定的域名\n\t\t\tc.Header(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS, PUT, DELETE, UPDATE\")\n\t\t\tc.Header(\"Access-Control-Allow-Headers\", \"Origin, X-Requested-With, Content-Type, Accept, Authorization\")\n\t\t\tc.Header(\"Access-Control-Expose-Headers\", \"Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type\")\n\t\t\tc.Header(\"Access-Control-Allow-Credentials\", \"true\")\n\t\t}\n\t\tif method == \"OPTIONS\" {\n\t\t\tc.AbortWithStatus(http.StatusNoContent)\n\t\t}\n\t\tc.Next()\n\t}\n}\n```","slug":"golang/gin跨域问题","published":1,"updated":"2023-08-20T03:55:26.102Z","_id":"clkuugyqu0001pz4wffm89frr","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>解决跨域问题</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<p>代码加入这一段就可以了</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r := gin.Default()<br>r.Use(Cors())<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Cors</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tmethod := c.Request.Method<br>\t\torigin := c.Request.Header.Get(<span class=\"hljs-string\">&quot;Origin&quot;</span>)<br>\t\t<span class=\"hljs-keyword\">if</span> origin != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>) <span class=\"hljs-comment\">// 可将将 * 替换为指定的域名</span><br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\t\tc.AbortWithStatus(http.StatusNoContent)<br>\t\t&#125;<br>\t\tc.Next()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>解决跨域问题</p>\n          </div>","more":"<p>代码加入这一段就可以了</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\">r := gin.Default()<br>r.Use(Cors())<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">Cors</span><span class=\"hljs-params\">()</span></span> gin.HandlerFunc &#123;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(c *gin.Context)</span></span> &#123;<br>\t\tmethod := c.Request.Method<br>\t\torigin := c.Request.Header.Get(<span class=\"hljs-string\">&quot;Origin&quot;</span>)<br>\t\t<span class=\"hljs-keyword\">if</span> origin != <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"hljs-string\">&quot;*&quot;</span>) <span class=\"hljs-comment\">// 可将将 * 替换为指定的域名</span><br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Methods&quot;</span>, <span class=\"hljs-string\">&quot;POST, GET, OPTIONS, PUT, DELETE, UPDATE&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Origin, X-Requested-With, Content-Type, Accept, Authorization&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Expose-Headers&quot;</span>, <span class=\"hljs-string\">&quot;Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type&quot;</span>)<br>\t\t\tc.Header(<span class=\"hljs-string\">&quot;Access-Control-Allow-Credentials&quot;</span>, <span class=\"hljs-string\">&quot;true&quot;</span>)<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> method == <span class=\"hljs-string\">&quot;OPTIONS&quot;</span> &#123;<br>\t\t\tc.AbortWithStatus(http.StatusNoContent)<br>\t\t&#125;<br>\t\tc.Next()<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"k8s","title":"容器网络接口（CNI）","date":"2023-07-27T06:31:00.000Z","_content":"\n{% note primary %}\n\n详解 cni 中 flannel、calico 的原理实现。\n\n{% endnote %}\n\n<!-- more -->\n\n# 1. CNI交互逻辑\n## 1.1 Pod IP地址分配机制\n![image](pod-allow-ip.png)\n## 1.2 CRI插件与CNI插件的交互\n![cri-cni](cri-cni.png)\n\n## 1.3 CNI插件间的交互\n![cni](cni-plugins.png)\n\n# 2. flannel 3种模式\n\n![flannel](flannel-modes.jpg)\n\nUDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。\n\n## 2.1 vxlan模式\n\nVXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。\n\n### 2.1.1 节点内通信\n\n![flannel-vxlan-1](flannel-vxlan-1.png)\n\n### 2.1.2 跨节点通信\n\n![flannel-vxlan-2](flannel-vxlan-2.png)\n\n**大致过程:**\n- 发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。\n- 接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。\n\n**哪些IP要交由 flannel.1 处理?**\n\nflanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。\n\n**flannel 封包过程**\n   \nVXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。\n\n**原始L2帧**\n要生成原始的L2帧， flannel.1 需要得知：\n\n- 内层源/目的IP地址\n- 内层源/目的MAC地址\n\n内层的源/目的IP地址是已知的，即为PodA/PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。\n内层源/目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：\n\n下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；\n报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。\n\n要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。\n```sh\n# 查看ARP表\n[root@Node1 ~]# ip n | grep flannel.1\n10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT # PERMANENT 表示永不过期\n```\n有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：\n\n![flannel_packet_1.png](flannel-vxlan-3.png)\n\n**外层VXLAN UDP报文**\n要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源/目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。\n\nFDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。\n\n可以使用 bridge fdb show 查看FDB表：\n```sh\n[root@Node1 ~]# bridge fdb show | grep flannel.1\nba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent\n```\n源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。\n```sh\n[root@Node1 ~]# ip -d a show flannel.1\n6: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default\n    link/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0\n    vxlan id 1 local 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535\n    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::3002:78ff:fe2f:2cb/64 scope link\n       valid_lft forever preferred_lft forever\n```\n至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：\n\nFlannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。\n\n\n## 2.2 host-gw模式\n\n![host-gw模式](flannel-host-gw-1.png)\n\n在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要`flannel.1`虚机网卡。 `flanneld` 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中`路由表①`所示。\n\n要使用`host-gw`模式，需要修改 ConfigMap `kube-flannel-cfg` ，将 `Backend.Type` 从 `vxlan`改为`host-gw`，然后重启所有`kube-flannel Pod`即可：\n\n```sh\nkubectl -n kube-flannel edit configmap kube-flannel-cfg\n\n...\n  net-conf.json: |\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"host-gw\" // <- 改成host-gw\n      }\n    }\n...\n```\n\n# 3. calico 两种网络模式\n\n## 3.1 IPIP 模式\n\n#### 3.1.1 概要\nIPIP模式是calico的默认网络架构，calico中用环境变量`CALICO_IPV4POOL_IPIP`来标识是否开启`IPIP Mode`， 如果该变量的值为`Always`那么就是开启`IPIP`，如果关闭需要设置为`Never`(大小写不敏感，代码里有strings.ToLower操作)。\n\n- 从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。\n- 它的作用其实基本上就相当于一个基于IP层的网桥！\n- 一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- ipip 的源代码在内核 net/ipv4/ipip.c 中可以找到。\n\n#### 3.1.2 工作原理\n\n![ipip](calico-ipip-1.png)\n\nCalico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备\n\n在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：\n\n![ipip](calico-ipip-2.png)\n\n## 3.2 BGP 模式\n\n#### 3.2.1 概要\n- 边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。\n- 它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。\n- BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。\n- BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。\n- BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过`IPIP`网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了`tunl0`这个环节。\n\n#### 3.2.2 工作原理\n![bgp](calico-bgp-1.png)\n\n# 参考文章\nhttps://ost.51cto.com/posts/15845\nhttps://juejin.cn/post/6994825163757846565","source":"_posts/k8s/容器网络接口（CNI）.md","raw":"---\nlayout: k8s\ntitle: 容器网络接口（CNI）\ndate: 2023-07-27 14:31:00\ntags: [k8s,cni]\ncategories: k8s\n---\n\n{% note primary %}\n\n详解 cni 中 flannel、calico 的原理实现。\n\n{% endnote %}\n\n<!-- more -->\n\n# 1. CNI交互逻辑\n## 1.1 Pod IP地址分配机制\n![image](pod-allow-ip.png)\n## 1.2 CRI插件与CNI插件的交互\n![cri-cni](cri-cni.png)\n\n## 1.3 CNI插件间的交互\n![cni](cni-plugins.png)\n\n# 2. flannel 3种模式\n\n![flannel](flannel-modes.jpg)\n\nUDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。\n\n## 2.1 vxlan模式\n\nVXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。\n\n### 2.1.1 节点内通信\n\n![flannel-vxlan-1](flannel-vxlan-1.png)\n\n### 2.1.2 跨节点通信\n\n![flannel-vxlan-2](flannel-vxlan-2.png)\n\n**大致过程:**\n- 发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。\n- 接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。\n\n**哪些IP要交由 flannel.1 处理?**\n\nflanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。\n\n**flannel 封包过程**\n   \nVXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。\n\n**原始L2帧**\n要生成原始的L2帧， flannel.1 需要得知：\n\n- 内层源/目的IP地址\n- 内层源/目的MAC地址\n\n内层的源/目的IP地址是已知的，即为PodA/PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。\n内层源/目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：\n\n下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；\n报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。\n\n要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。\n```sh\n# 查看ARP表\n[root@Node1 ~]# ip n | grep flannel.1\n10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT # PERMANENT 表示永不过期\n```\n有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：\n\n![flannel_packet_1.png](flannel-vxlan-3.png)\n\n**外层VXLAN UDP报文**\n要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源/目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。\n\nFDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。\n\n可以使用 bridge fdb show 查看FDB表：\n```sh\n[root@Node1 ~]# bridge fdb show | grep flannel.1\nba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent\n```\n源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。\n```sh\n[root@Node1 ~]# ip -d a show flannel.1\n6: flannel.1: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1450 qdisc noqueue state UNKNOWN group default\n    link/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0\n    vxlan id 1 local 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535\n    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1\n       valid_lft forever preferred_lft forever\n    inet6 fe80::3002:78ff:fe2f:2cb/64 scope link\n       valid_lft forever preferred_lft forever\n```\n至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：\n\nFlannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。\n\n\n## 2.2 host-gw模式\n\n![host-gw模式](flannel-host-gw-1.png)\n\n在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要`flannel.1`虚机网卡。 `flanneld` 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中`路由表①`所示。\n\n要使用`host-gw`模式，需要修改 ConfigMap `kube-flannel-cfg` ，将 `Backend.Type` 从 `vxlan`改为`host-gw`，然后重启所有`kube-flannel Pod`即可：\n\n```sh\nkubectl -n kube-flannel edit configmap kube-flannel-cfg\n\n...\n  net-conf.json: |\n    {\n      \"Network\": \"10.244.0.0/16\",\n      \"Backend\": {\n        \"Type\": \"host-gw\" // <- 改成host-gw\n      }\n    }\n...\n```\n\n# 3. calico 两种网络模式\n\n## 3.1 IPIP 模式\n\n#### 3.1.1 概要\nIPIP模式是calico的默认网络架构，calico中用环境变量`CALICO_IPV4POOL_IPIP`来标识是否开启`IPIP Mode`， 如果该变量的值为`Always`那么就是开启`IPIP`，如果关闭需要设置为`Never`(大小写不敏感，代码里有strings.ToLower操作)。\n\n- 从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。\n- 它的作用其实基本上就相当于一个基于IP层的网桥！\n- 一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。\n- ipip 的源代码在内核 net/ipv4/ipip.c 中可以找到。\n\n#### 3.1.2 工作原理\n\n![ipip](calico-ipip-1.png)\n\nCalico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备\n\n在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：\n\n![ipip](calico-ipip-2.png)\n\n## 3.2 BGP 模式\n\n#### 3.2.1 概要\n- 边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。\n- 它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。\n- BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。\n- BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。\n- BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过`IPIP`网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了`tunl0`这个环节。\n\n#### 3.2.2 工作原理\n![bgp](calico-bgp-1.png)\n\n# 参考文章\nhttps://ost.51cto.com/posts/15845\nhttps://juejin.cn/post/6994825163757846565","slug":"k8s/容器网络接口（CNI）","published":1,"updated":"2023-08-17T09:41:05.715Z","_id":"cll4tbb4o00007o4w3uae1uwd","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>详解 cni 中 flannel、calico 的原理实现。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h1 id=\"1-CNI交互逻辑\"><a href=\"#1-CNI交互逻辑\" class=\"headerlink\" title=\"1. CNI交互逻辑\"></a>1. CNI交互逻辑</h1><h2 id=\"1-1-Pod-IP地址分配机制\"><a href=\"#1-1-Pod-IP地址分配机制\" class=\"headerlink\" title=\"1.1 Pod IP地址分配机制\"></a>1.1 Pod IP地址分配机制</h2><p><img src=\"pod-allow-ip.png\" alt=\"image\"></p>\n<h2 id=\"1-2-CRI插件与CNI插件的交互\"><a href=\"#1-2-CRI插件与CNI插件的交互\" class=\"headerlink\" title=\"1.2 CRI插件与CNI插件的交互\"></a>1.2 CRI插件与CNI插件的交互</h2><p><img src=\"cri-cni.png\" alt=\"cri-cni\"></p>\n<h2 id=\"1-3-CNI插件间的交互\"><a href=\"#1-3-CNI插件间的交互\" class=\"headerlink\" title=\"1.3 CNI插件间的交互\"></a>1.3 CNI插件间的交互</h2><p><img src=\"cni-plugins.png\" alt=\"cni\"></p>\n<h1 id=\"2-flannel-3种模式\"><a href=\"#2-flannel-3种模式\" class=\"headerlink\" title=\"2. flannel 3种模式\"></a>2. flannel 3种模式</h1><p><img src=\"flannel-modes.jpg\" alt=\"flannel\"></p>\n<p>UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。</p>\n<h2 id=\"2-1-vxlan模式\"><a href=\"#2-1-vxlan模式\" class=\"headerlink\" title=\"2.1 vxlan模式\"></a>2.1 vxlan模式</h2><p>VXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。</p>\n<h3 id=\"2-1-1-节点内通信\"><a href=\"#2-1-1-节点内通信\" class=\"headerlink\" title=\"2.1.1 节点内通信\"></a>2.1.1 节点内通信</h3><p><img src=\"flannel-vxlan-1.png\" alt=\"flannel-vxlan-1\"></p>\n<h3 id=\"2-1-2-跨节点通信\"><a href=\"#2-1-2-跨节点通信\" class=\"headerlink\" title=\"2.1.2 跨节点通信\"></a>2.1.2 跨节点通信</h3><p><img src=\"flannel-vxlan-2.png\" alt=\"flannel-vxlan-2\"></p>\n<p><strong>大致过程:</strong></p>\n<ul>\n<li>发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。</li>\n<li>接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。</li>\n</ul>\n<p><strong>哪些IP要交由 flannel.1 处理?</strong></p>\n<p>flanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。</p>\n<p><strong>flannel 封包过程</strong></p>\n<p>VXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。</p>\n<p><strong>原始L2帧</strong><br>要生成原始的L2帧， flannel.1 需要得知：</p>\n<ul>\n<li>内层源&#x2F;目的IP地址</li>\n<li>内层源&#x2F;目的MAC地址</li>\n</ul>\n<p>内层的源&#x2F;目的IP地址是已知的，即为PodA&#x2F;PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。<br>内层源&#x2F;目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：</p>\n<p>下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；<br>报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。</p>\n<p>要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看ARP表</span><br>[root@Node1 ~]<span class=\"hljs-comment\"># ip n | grep flannel.1</span><br>10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT <span class=\"hljs-comment\"># PERMANENT 表示永不过期</span><br></code></pre></td></tr></table></figure>\n<p>有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：</p>\n<p><img src=\"flannel-vxlan-3.png\" alt=\"flannel_packet_1.png\"></p>\n<p><strong>外层VXLAN UDP报文</strong><br>要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源&#x2F;目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。</p>\n<p>FDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。</p>\n<p>可以使用 bridge fdb show 查看FDB表：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># bridge fdb show | grep flannel.1</span><br>ba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent<br></code></pre></td></tr></table></figure>\n<p>源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># ip -d a show flannel.1</span><br>6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default<br>    <span class=\"hljs-built_in\">link</span>/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0<br>    vxlan <span class=\"hljs-built_in\">id</span> 1 <span class=\"hljs-built_in\">local</span> 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535<br>    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::3002:78ff:fe2f:2cb/64 scope <span class=\"hljs-built_in\">link</span><br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure>\n<p>至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：</p>\n<p>Flannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。</p>\n<h2 id=\"2-2-host-gw模式\"><a href=\"#2-2-host-gw模式\" class=\"headerlink\" title=\"2.2 host-gw模式\"></a>2.2 host-gw模式</h2><p><img src=\"flannel-host-gw-1.png\" alt=\"host-gw模式\"></p>\n<p>在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要<code>flannel.1</code>虚机网卡。 <code>flanneld</code> 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中<code>路由表①</code>所示。</p>\n<p>要使用<code>host-gw</code>模式，需要修改 ConfigMap <code>kube-flannel-cfg</code> ，将 <code>Backend.Type</code> 从 <code>vxlan</code>改为<code>host-gw</code>，然后重启所有<code>kube-flannel Pod</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel edit configmap kube-flannel-cfg<br><br>...<br>  net-conf.json: |<br>    &#123;<br>      <span class=\"hljs-string\">&quot;Network&quot;</span>: <span class=\"hljs-string\">&quot;10.244.0.0/16&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Backend&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;Type&quot;</span>: <span class=\"hljs-string\">&quot;host-gw&quot;</span> // &lt;- 改成host-gw<br>      &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-calico-两种网络模式\"><a href=\"#3-calico-两种网络模式\" class=\"headerlink\" title=\"3. calico 两种网络模式\"></a>3. calico 两种网络模式</h1><h2 id=\"3-1-IPIP-模式\"><a href=\"#3-1-IPIP-模式\" class=\"headerlink\" title=\"3.1 IPIP 模式\"></a>3.1 IPIP 模式</h2><h4 id=\"3-1-1-概要\"><a href=\"#3-1-1-概要\" class=\"headerlink\" title=\"3.1.1 概要\"></a>3.1.1 概要</h4><p>IPIP模式是calico的默认网络架构，calico中用环境变量<code>CALICO_IPV4POOL_IPIP</code>来标识是否开启<code>IPIP Mode</code>， 如果该变量的值为<code>Always</code>那么就是开启<code>IPIP</code>，如果关闭需要设置为<code>Never</code>(大小写不敏感，代码里有strings.ToLower操作)。</p>\n<ul>\n<li>从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。</li>\n<li>它的作用其实基本上就相当于一个基于IP层的网桥！</li>\n<li>一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>ipip 的源代码在内核 net&#x2F;ipv4&#x2F;ipip.c 中可以找到。</li>\n</ul>\n<h4 id=\"3-1-2-工作原理\"><a href=\"#3-1-2-工作原理\" class=\"headerlink\" title=\"3.1.2 工作原理\"></a>3.1.2 工作原理</h4><p><img src=\"calico-ipip-1.png\" alt=\"ipip\"></p>\n<p>Calico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备</p>\n<p>在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：</p>\n<p><img src=\"calico-ipip-2.png\" alt=\"ipip\"></p>\n<h2 id=\"3-2-BGP-模式\"><a href=\"#3-2-BGP-模式\" class=\"headerlink\" title=\"3.2 BGP 模式\"></a>3.2 BGP 模式</h2><h4 id=\"3-2-1-概要\"><a href=\"#3-2-1-概要\" class=\"headerlink\" title=\"3.2.1 概要\"></a>3.2.1 概要</h4><ul>\n<li>边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。</li>\n<li>它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。</li>\n<li>BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。</li>\n<li>BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。</li>\n<li>BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过<code>IPIP</code>网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了<code>tunl0</code>这个环节。</li>\n</ul>\n<h4 id=\"3-2-2-工作原理\"><a href=\"#3-2-2-工作原理\" class=\"headerlink\" title=\"3.2.2 工作原理\"></a>3.2.2 工作原理</h4><p><img src=\"calico-bgp-1.png\" alt=\"bgp\"></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://ost.51cto.com/posts/15845\">https://ost.51cto.com/posts/15845</a><br><a href=\"https://juejin.cn/post/6994825163757846565\">https://juejin.cn/post/6994825163757846565</a></p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>详解 cni 中 flannel、calico 的原理实现。</p>\n          </div>","more":"<h1 id=\"1-CNI交互逻辑\"><a href=\"#1-CNI交互逻辑\" class=\"headerlink\" title=\"1. CNI交互逻辑\"></a>1. CNI交互逻辑</h1><h2 id=\"1-1-Pod-IP地址分配机制\"><a href=\"#1-1-Pod-IP地址分配机制\" class=\"headerlink\" title=\"1.1 Pod IP地址分配机制\"></a>1.1 Pod IP地址分配机制</h2><p><img src=\"pod-allow-ip.png\" alt=\"image\"></p>\n<h2 id=\"1-2-CRI插件与CNI插件的交互\"><a href=\"#1-2-CRI插件与CNI插件的交互\" class=\"headerlink\" title=\"1.2 CRI插件与CNI插件的交互\"></a>1.2 CRI插件与CNI插件的交互</h2><p><img src=\"cri-cni.png\" alt=\"cri-cni\"></p>\n<h2 id=\"1-3-CNI插件间的交互\"><a href=\"#1-3-CNI插件间的交互\" class=\"headerlink\" title=\"1.3 CNI插件间的交互\"></a>1.3 CNI插件间的交互</h2><p><img src=\"cni-plugins.png\" alt=\"cni\"></p>\n<h1 id=\"2-flannel-3种模式\"><a href=\"#2-flannel-3种模式\" class=\"headerlink\" title=\"2. flannel 3种模式\"></a>2. flannel 3种模式</h1><p><img src=\"flannel-modes.jpg\" alt=\"flannel\"></p>\n<p>UDP、VXLAN模式基于三层网络，host-gateway需要在二层网络同一个交换机下才能实现。</p>\n<h2 id=\"2-1-vxlan模式\"><a href=\"#2-1-vxlan模式\" class=\"headerlink\" title=\"2.1 vxlan模式\"></a>2.1 vxlan模式</h2><p>VXLAN是Flannel默认和推荐的模式。当我们使用默认配置安装Flannel时，它会为每个节点分配一个24位子网，并在每个节点上创建两张虚机网卡： cni0 和 flannel.1 。 cni0 是一个网桥设备，类似于 docker0 ，节点上所有的Pod都通过veth pair的形式与 cni0 相连。 flannel.1 则是一个VXLAN类型的设备，充当VTEP的角色，实现对VXLAN报文的封包解包。</p>\n<h3 id=\"2-1-1-节点内通信\"><a href=\"#2-1-1-节点内通信\" class=\"headerlink\" title=\"2.1.1 节点内通信\"></a>2.1.1 节点内通信</h3><p><img src=\"flannel-vxlan-1.png\" alt=\"flannel-vxlan-1\"></p>\n<h3 id=\"2-1-2-跨节点通信\"><a href=\"#2-1-2-跨节点通信\" class=\"headerlink\" title=\"2.1.2 跨节点通信\"></a>2.1.2 跨节点通信</h3><p><img src=\"flannel-vxlan-2.png\" alt=\"flannel-vxlan-2\"></p>\n<p><strong>大致过程:</strong></p>\n<ul>\n<li>发送端：在PodA中发起 ping 10.244.1.21 ，ICMP 报文经过 cni0 网桥后交由 flannel.1 设备处理。 flannel.1 设备是一个VXLAN类型的设备，负责VXLAN封包解包。 因此，在发送端，flannel.1 将原始L2报文封装成VXLAN UDP报文，然后从 eth0 发送。</li>\n<li>接收端：Node2收到UDP报文，发现是一个VXLAN类型报文，交由 flannel.1 进行解包。根据解包后得到的原始报文中的目的IP，将原始报文经由 cni0 网桥发送给PodB。</li>\n</ul>\n<p><strong>哪些IP要交由 flannel.1 处理?</strong></p>\n<p>flanneld 从 etcd 中可以获取所有节点的子网情况，以此为依据为各节点配置路由，将属于非本节点的子网IP都路由到 flannel.1 处理，本节点的子网路由到 cni0 网桥处理。</p>\n<p><strong>flannel 封包过程</strong></p>\n<p>VXLAN的封包是将二层以太网帧封装到四层UDP报文中的过程。</p>\n<p><strong>原始L2帧</strong><br>要生成原始的L2帧， flannel.1 需要得知：</p>\n<ul>\n<li>内层源&#x2F;目的IP地址</li>\n<li>内层源&#x2F;目的MAC地址</li>\n</ul>\n<p>内层的源&#x2F;目的IP地址是已知的，即为PodA&#x2F;PodB的PodIP，在图例中，分别为10.224.0.20和10.224.1.20。<br>内层源&#x2F;目的MAC地址要结合路由表和ARP表来获取。根据路由表①得知：</p>\n<p>下一跳地址是10.224.1.0，关联ARP表②，得到下一跳的MAC地址，也就是目的MAC地址：Node2_flannel.1_MAC；<br>报文要从 flannel.1 虚拟网卡发出，因此源MAC地址为 flannel.1 的MAC地址。</p>\n<p>要注意的是，这里ARP表的表项②并不是通过ARP学习得到的，而是 flanneld 预先为每个节点设置好的，由 flanneld负责维护，没有过期时间。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看ARP表</span><br>[root@Node1 ~]<span class=\"hljs-comment\"># ip n | grep flannel.1</span><br>10.244.1.0 dev flannel.1 lladdr ba:74:f9:db:69:c1 PERMANENT <span class=\"hljs-comment\"># PERMANENT 表示永不过期</span><br></code></pre></td></tr></table></figure>\n<p>有了上面的信息， flannel.1 就可以构造出内层的2层以太网帧：</p>\n<p><img src=\"flannel-vxlan-3.png\" alt=\"flannel_packet_1.png\"></p>\n<p><strong>外层VXLAN UDP报文</strong><br>要将原始L2帧封装成VXLAN UDP报文， flannel.1 还需要填充源&#x2F;目的IP地址。前面提到，VTEP是VXLAN隧道的起点或终点。因此，目的IP地址即为对端VTEP的IP地址，通过FDB表获取。在FDB表③中，dst字段表示的即为VXLAN隧道目的端点（对端VTEP）的IP地址，也就是VXLAN DUP报文的目的IP地址。FDB表也是由 flanneld 在每个节点上预设并负责维护的。</p>\n<p>FDB表（Forwarding database）用于保存二层设备中MAC地址和端口的关联关系，就像交换机中的MAC地址表一样。在二层设备转发二层以太网帧时，根据FDB表项来找到对应的端口。例如cni0网桥上连接了很多veth pair网卡，当网桥要将以太网帧转发给Pod时，FDB表根据Pod网卡的MAC地址查询FDB表，就能找到其对应的veth网卡，从而实现联通。</p>\n<p>可以使用 bridge fdb show 查看FDB表：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># bridge fdb show | grep flannel.1</span><br>ba:74:f9:db:69:c1 dev flannel.1 dst 192.168.50.3 self permanent<br></code></pre></td></tr></table></figure>\n<p>源IP地址信息来自于 flannel.1 网卡设置本身，根据 local 192.168.50.2 可以得知源IP地址为192.168.50.2。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[root@Node1 ~]<span class=\"hljs-comment\"># ip -d a show flannel.1</span><br>6: flannel.1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1450 qdisc noqueue state UNKNOWN group default<br>    <span class=\"hljs-built_in\">link</span>/ether 32:02:78:2f:02:cb brd ff:ff:ff:ff:ff:ff promiscuity 0<br>    vxlan <span class=\"hljs-built_in\">id</span> 1 <span class=\"hljs-built_in\">local</span> 192.168.50.2 dev eth0 srcport 0 0 dstport 8472 nolearning ageing 300 noudpcsum noudp6zerocsumtx noudp6zerocsumrx numtxqueues 1 numrxqueues 1 gso_max_size 65536 gso_max_segs 65535<br>    inet 10.244.0.0/32 brd 10.244.0.0 scope global flannel.1<br>       valid_lft forever preferred_lft forever<br>    inet6 fe80::3002:78ff:fe2f:2cb/64 scope <span class=\"hljs-built_in\">link</span><br>       valid_lft forever preferred_lft forever<br></code></pre></td></tr></table></figure>\n<p>至此， flannel.1 已经得到了所有完成VXLAN封包所需的信息，最终通过 eth0 发送一个VXLAN UDP报文：</p>\n<p>Flannel的VXLAN模式通过静态配置路由表，ARP表和FDB表的信息，结合VXLAN虚拟网卡 flannel.1 ，实现了一个所有Pod同属一个大二层网络的VXLAN网络模型。</p>\n<h2 id=\"2-2-host-gw模式\"><a href=\"#2-2-host-gw模式\" class=\"headerlink\" title=\"2.2 host-gw模式\"></a>2.2 host-gw模式</h2><p><img src=\"flannel-host-gw-1.png\" alt=\"host-gw模式\"></p>\n<p>在host-gw模式下，由于不涉及VXLAN的封包解包，不再需要<code>flannel.1</code>虚机网卡。 <code>flanneld</code> 负责为各节点设置路由 ，将对应节点Pod子网的下一跳地址指向对应的节点的IP，如图中<code>路由表①</code>所示。</p>\n<p>要使用<code>host-gw</code>模式，需要修改 ConfigMap <code>kube-flannel-cfg</code> ，将 <code>Backend.Type</code> 从 <code>vxlan</code>改为<code>host-gw</code>，然后重启所有<code>kube-flannel Pod</code>即可：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">kubectl -n kube-flannel edit configmap kube-flannel-cfg<br><br>...<br>  net-conf.json: |<br>    &#123;<br>      <span class=\"hljs-string\">&quot;Network&quot;</span>: <span class=\"hljs-string\">&quot;10.244.0.0/16&quot;</span>,<br>      <span class=\"hljs-string\">&quot;Backend&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;Type&quot;</span>: <span class=\"hljs-string\">&quot;host-gw&quot;</span> // &lt;- 改成host-gw<br>      &#125;<br>    &#125;<br>...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-calico-两种网络模式\"><a href=\"#3-calico-两种网络模式\" class=\"headerlink\" title=\"3. calico 两种网络模式\"></a>3. calico 两种网络模式</h1><h2 id=\"3-1-IPIP-模式\"><a href=\"#3-1-IPIP-模式\" class=\"headerlink\" title=\"3.1 IPIP 模式\"></a>3.1 IPIP 模式</h2><h4 id=\"3-1-1-概要\"><a href=\"#3-1-1-概要\" class=\"headerlink\" title=\"3.1.1 概要\"></a>3.1.1 概要</h4><p>IPIP模式是calico的默认网络架构，calico中用环境变量<code>CALICO_IPV4POOL_IPIP</code>来标识是否开启<code>IPIP Mode</code>， 如果该变量的值为<code>Always</code>那么就是开启<code>IPIP</code>，如果关闭需要设置为<code>Never</code>(大小写不敏感，代码里有strings.ToLower操作)。</p>\n<ul>\n<li>从字面来理解，就是把一个IP数据包又套在一个IP包里，即把 IP 层封装到 IP 层的一个 tunnel，看起来似乎是浪费，实则不然。</li>\n<li>它的作用其实基本上就相当于一个基于IP层的网桥！</li>\n<li>一般来说，普通的网桥是基于mac层的，根本不需 IP，而这个 ipip 则是通过两端的路由做一个 tunnel，把两个本来不通的网络通过点对点连接起来。</li>\n<li>ipip 的源代码在内核 net&#x2F;ipv4&#x2F;ipip.c 中可以找到。</li>\n</ul>\n<h4 id=\"3-1-2-工作原理\"><a href=\"#3-1-2-工作原理\" class=\"headerlink\" title=\"3.1.2 工作原理\"></a>3.1.2 工作原理</h4><p><img src=\"calico-ipip-1.png\" alt=\"ipip\"></p>\n<p>Calico使用的这个tunl0设备，是一个IP隧道（IP tunnel）设备</p>\n<p>在上面的例子中，IP包进入IP隧道设备之后，就会被Linux内核的IPIP驱动接管。IPIP驱动会将这个IP包直接封装在一个宿主机网络的IP包中，如下所示：</p>\n<p><img src=\"calico-ipip-2.png\" alt=\"ipip\"></p>\n<h2 id=\"3-2-BGP-模式\"><a href=\"#3-2-BGP-模式\" class=\"headerlink\" title=\"3.2 BGP 模式\"></a>3.2 BGP 模式</h2><h4 id=\"3-2-1-概要\"><a href=\"#3-2-1-概要\" class=\"headerlink\" title=\"3.2.1 概要\"></a>3.2.1 概要</h4><ul>\n<li>边界网关协议（Border Gateway Protocol, BGP）是互联网上一个核心的去中心化自治路由协议。</li>\n<li>它通过维护IP路由表或‘前缀’表来实现自治系统（AS）之间的可达性，属于矢量路由协议。</li>\n<li>BGP不使用传统的内部网关协议（IGP）的指标，而使用基于路径、网络策略或规则集来决定路由。因此，它更适合被称为矢量性协议，而不是路由协议。</li>\n<li>BGP，通俗的讲就是讲接入到机房的多条线路（如电信、联通、移动等）融合为一体，实现多线单IP，BGP 机房的优点：服务器只需要设置一个IP地址，最佳访问路由是由网络上的骨干路由器根据路由跳数与其它技术指标来确定的，不会占用服务器的任何系统。</li>\n<li>BGP网络相比较IPIP网络，最大的不同之处就是没有了隧道设备 tunl0。前面介绍过<code>IPIP</code>网络pod之间的流量发送tunl0，然后tunl0发送对端设备。BGP网络中，pod之间的流量直接从网卡发送目的地，减少了<code>tunl0</code>这个环节。</li>\n</ul>\n<h4 id=\"3-2-2-工作原理\"><a href=\"#3-2-2-工作原理\" class=\"headerlink\" title=\"3.2.2 工作原理\"></a>3.2.2 工作原理</h4><p><img src=\"calico-bgp-1.png\" alt=\"bgp\"></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p><a href=\"https://ost.51cto.com/posts/15845\">https://ost.51cto.com/posts/15845</a><br><a href=\"https://juejin.cn/post/6994825163757846565\">https://juejin.cn/post/6994825163757846565</a></p>"},{"layout":"工具","title":"git使用指南","date":"2023-08-16T02:36:30.000Z","_content":"\n{% note primary%}\n\ngit 不仅仅是 pull 和 push。\n\n{% endnote %}\n\n\n<!-- more -->\n\n## 1. 一键提交当前分支\n```sh\ngit add .;git commit -m \"test\";git push origin $(git symbolic-ref --short HEAD)\n```\n\n## 2. 删除分支\n\n```sh\n# 删除本地分支\ngit branch -D xxx\n\n# 删除远程分支\ngit push origin --delete xxx\n```\n\n## 3. 开发分支落后时，如何同步 master 分支。\n```sh\n# 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支\ngit checkout master\ngit pull origin master\n\n# 2. 切换回开发分支，并将master分支的变更合并到开发分支上：\ngit checkout feature/test\ngit merge master\n\n# 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。\n\n# 4. 推送开发分支到远程仓库\ngit push origin feature/test\n```\n\n## 4. git reset\n\n放弃所有更改并回到上一次提交的状态：\n```sh\ngit reset --hard HEAD^\n```\n{% note warning%}\n这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。\n{% endnote %}\n\n保留更改但将其从暂存区中移除：\n```sh\ngit reset HEAD\n```\n\n这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。\n\n\n{% note warning%}\n请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。\n{% endnote %}\n\n## 5. git stash\n\n`git stash` 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。\n\n{% note warning%}\n当你在进行代码开发时，可能会遇到以下情况之一：\n\n你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。\n你正在进行一些尝试性的修改，但暂时不想提交它们。\n在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。\n{% endnote %}\n\n使用 `git stash` 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 `git stash` 都会将当前的修改添加到堆栈的栈顶。可以使用 `git stash list` 命令查看当前所有的存储状态。\n\n```sh\n# 将当前的未提交修改保存为一个新的存储状态。\ngit stash\n\n# 恢复保存的修改\ngit stash apply\n\n# 查看所有状态\ngit stash list\n\n# 恢复特定的存储状态\ngit stash apply stash@{number}\n\n# 删除存储状态\ngit stash drop\n\n# 可以给存储状态添加一个描述\ngit stash save\n\n# 可以直接将保存的修改应用到一个新的分支上\ngit stash branch\n\n# 命令查看所有可用的选项和详细的说明\ngit stash --help\n```","source":"_posts/工具/git使用指南.md","raw":"---\nlayout: 工具\ntitle: git使用指南\ndate: 2023-08-16 10:36:30\ntags: [工具,git]\ncategories: 工具\n---\n\n{% note primary%}\n\ngit 不仅仅是 pull 和 push。\n\n{% endnote %}\n\n\n<!-- more -->\n\n## 1. 一键提交当前分支\n```sh\ngit add .;git commit -m \"test\";git push origin $(git symbolic-ref --short HEAD)\n```\n\n## 2. 删除分支\n\n```sh\n# 删除本地分支\ngit branch -D xxx\n\n# 删除远程分支\ngit push origin --delete xxx\n```\n\n## 3. 开发分支落后时，如何同步 master 分支。\n```sh\n# 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支\ngit checkout master\ngit pull origin master\n\n# 2. 切换回开发分支，并将master分支的变更合并到开发分支上：\ngit checkout feature/test\ngit merge master\n\n# 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。\n\n# 4. 推送开发分支到远程仓库\ngit push origin feature/test\n```\n\n## 4. git reset\n\n放弃所有更改并回到上一次提交的状态：\n```sh\ngit reset --hard HEAD^\n```\n{% note warning%}\n这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。\n{% endnote %}\n\n保留更改但将其从暂存区中移除：\n```sh\ngit reset HEAD\n```\n\n这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。\n\n\n{% note warning%}\n请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。\n{% endnote %}\n\n## 5. git stash\n\n`git stash` 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。\n\n{% note warning%}\n当你在进行代码开发时，可能会遇到以下情况之一：\n\n你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。\n你正在进行一些尝试性的修改，但暂时不想提交它们。\n在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。\n{% endnote %}\n\n使用 `git stash` 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 `git stash` 都会将当前的修改添加到堆栈的栈顶。可以使用 `git stash list` 命令查看当前所有的存储状态。\n\n```sh\n# 将当前的未提交修改保存为一个新的存储状态。\ngit stash\n\n# 恢复保存的修改\ngit stash apply\n\n# 查看所有状态\ngit stash list\n\n# 恢复特定的存储状态\ngit stash apply stash@{number}\n\n# 删除存储状态\ngit stash drop\n\n# 可以给存储状态添加一个描述\ngit stash save\n\n# 可以直接将保存的修改应用到一个新的分支上\ngit stash branch\n\n# 命令查看所有可用的选项和详细的说明\ngit stash --help\n```","slug":"工具/git使用指南","published":1,"updated":"2023-08-24T08:51:28.090Z","_id":"clld4i0h900005w4wd45v70da","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>git 不仅仅是 pull 和 push。</p>\n          </div>\n\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-一键提交当前分支\"><a href=\"#1-一键提交当前分支\" class=\"headerlink\" title=\"1. 一键提交当前分支\"></a>1. 一键提交当前分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git add .;git commit -m <span class=\"hljs-string\">&quot;test&quot;</span>;git push origin $(git symbolic-ref --short HEAD)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-删除分支\"><a href=\"#2-删除分支\" class=\"headerlink\" title=\"2. 删除分支\"></a>2. 删除分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除本地分支</span><br>git branch -D xxx<br><br><span class=\"hljs-comment\"># 删除远程分支</span><br>git push origin --delete xxx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-开发分支落后时，如何同步-master-分支。\"><a href=\"#3-开发分支落后时，如何同步-master-分支。\" class=\"headerlink\" title=\"3. 开发分支落后时，如何同步 master 分支。\"></a>3. 开发分支落后时，如何同步 master 分支。</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支</span><br>git checkout master<br>git pull origin master<br><br><span class=\"hljs-comment\"># 2. 切换回开发分支，并将master分支的变更合并到开发分支上：</span><br>git checkout feature/test<br>git merge master<br><br><span class=\"hljs-comment\"># 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。</span><br><br><span class=\"hljs-comment\"># 4. 推送开发分支到远程仓库</span><br>git push origin feature/test<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-git-reset\"><a href=\"#4-git-reset\" class=\"headerlink\" title=\"4. git reset\"></a>4. git reset</h2><p>放弃所有更改并回到上一次提交的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset --hard HEAD^<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <p>这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。</p>\n          </div>\n\n<p>保留更改但将其从暂存区中移除：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset HEAD<br></code></pre></td></tr></table></figure>\n\n<p>这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。</p>\n<div class=\"note note-warning\">\n            <p>请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。</p>\n          </div>\n\n<h2 id=\"5-git-stash\"><a href=\"#5-git-stash\" class=\"headerlink\" title=\"5. git stash\"></a>5. git stash</h2><p><code>git stash</code> 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。</p>\n<div class=\"note note-warning\">\n            <p>当你在进行代码开发时，可能会遇到以下情况之一：</p><p>你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。<br>你正在进行一些尝试性的修改，但暂时不想提交它们。<br>在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。</p>\n          </div>\n\n<p>使用 <code>git stash</code> 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 <code>git stash</code> 都会将当前的修改添加到堆栈的栈顶。可以使用 <code>git stash list</code> 命令查看当前所有的存储状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前的未提交修改保存为一个新的存储状态。</span><br>git stash<br><br><span class=\"hljs-comment\"># 恢复保存的修改</span><br>git stash apply<br><br><span class=\"hljs-comment\"># 查看所有状态</span><br>git stash list<br><br><span class=\"hljs-comment\"># 恢复特定的存储状态</span><br>git stash apply stash@&#123;number&#125;<br><br><span class=\"hljs-comment\"># 删除存储状态</span><br>git stash drop<br><br><span class=\"hljs-comment\"># 可以给存储状态添加一个描述</span><br>git stash save<br><br><span class=\"hljs-comment\"># 可以直接将保存的修改应用到一个新的分支上</span><br>git stash branch<br><br><span class=\"hljs-comment\"># 命令查看所有可用的选项和详细的说明</span><br>git stash --<span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>git 不仅仅是 pull 和 push。</p>\n          </div>","more":"<h2 id=\"1-一键提交当前分支\"><a href=\"#1-一键提交当前分支\" class=\"headerlink\" title=\"1. 一键提交当前分支\"></a>1. 一键提交当前分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git add .;git commit -m <span class=\"hljs-string\">&quot;test&quot;</span>;git push origin $(git symbolic-ref --short HEAD)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-删除分支\"><a href=\"#2-删除分支\" class=\"headerlink\" title=\"2. 删除分支\"></a>2. 删除分支</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 删除本地分支</span><br>git branch -D xxx<br><br><span class=\"hljs-comment\"># 删除远程分支</span><br>git push origin --delete xxx<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-开发分支落后时，如何同步-master-分支。\"><a href=\"#3-开发分支落后时，如何同步-master-分支。\" class=\"headerlink\" title=\"3. 开发分支落后时，如何同步 master 分支。\"></a>3. 开发分支落后时，如何同步 master 分支。</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 1. 获取master分支的最新变更。可以使用以下命令来更新您本地的master分支</span><br>git checkout master<br>git pull origin master<br><br><span class=\"hljs-comment\"># 2. 切换回开发分支，并将master分支的变更合并到开发分支上：</span><br>git checkout feature/test<br>git merge master<br><br><span class=\"hljs-comment\"># 3. 如果有冲突出现，您需要解决这些冲突后再提交变更。</span><br><br><span class=\"hljs-comment\"># 4. 推送开发分支到远程仓库</span><br>git push origin feature/test<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-git-reset\"><a href=\"#4-git-reset\" class=\"headerlink\" title=\"4. git reset\"></a>4. git reset</h2><p>放弃所有更改并回到上一次提交的状态：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset --hard HEAD^<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <p>这将删除所有的未提交更改，将HEAD指向父提交，并将工作区和暂存区恢复到上一次提交的状态。</p>\n          </div>\n\n<p>保留更改但将其从暂存区中移除：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git reset HEAD<br></code></pre></td></tr></table></figure>\n\n<p>这将将所有已暂存的更改重置，但保留在工作区中，这样你就可以重新提交或进行进一步的更改。</p>\n<div class=\"note note-warning\">\n            <p>请注意，git reset 是一个潜在的危险操作，因为它会从版本历史中移除提交。在执行这些命令之前，请确保你理解这些操作的副作用，并且在对你的代码产生重大影响之前，最好进行备份或咨询团队中的其他成员。</p>\n          </div>\n\n<h2 id=\"5-git-stash\"><a href=\"#5-git-stash\" class=\"headerlink\" title=\"5. git stash\"></a>5. git stash</h2><p><code>git stash</code> 是一个Git命令，用于将当前未提交的修改保存为一个临时的存储状态，以便你可以切换到其他分支或执行其他操作。</p>\n<div class=\"note note-warning\">\n            <p>当你在进行代码开发时，可能会遇到以下情况之一：</p><p>你正在一个分支上进行开发，但突然需要切换到另一个分支上处理紧急修复或其他任务。<br>你正在进行一些尝试性的修改，但暂时不想提交它们。<br>在这些情况下，你可以使用 git stash 命令将当前的修改保存起来，以便稍后恢复。</p>\n          </div>\n\n<p>使用 <code>git stash</code> 命令时，Git会将未提交的修改保存为一个堆栈（stack），每次调用 <code>git stash</code> 都会将当前的修改添加到堆栈的栈顶。可以使用 <code>git stash list</code> 命令查看当前所有的存储状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前的未提交修改保存为一个新的存储状态。</span><br>git stash<br><br><span class=\"hljs-comment\"># 恢复保存的修改</span><br>git stash apply<br><br><span class=\"hljs-comment\"># 查看所有状态</span><br>git stash list<br><br><span class=\"hljs-comment\"># 恢复特定的存储状态</span><br>git stash apply stash@&#123;number&#125;<br><br><span class=\"hljs-comment\"># 删除存储状态</span><br>git stash drop<br><br><span class=\"hljs-comment\"># 可以给存储状态添加一个描述</span><br>git stash save<br><br><span class=\"hljs-comment\"># 可以直接将保存的修改应用到一个新的分支上</span><br>git stash branch<br><br><span class=\"hljs-comment\"># 命令查看所有可用的选项和详细的说明</span><br>git stash --<span class=\"hljs-built_in\">help</span><br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"golang面试","date":"2023-07-29T05:20:35.000Z","_content":"\n{% note primary %}\n\n日积月累便封神\n\n{% endnote %}\n\n<!-- more -->\n\n### 目录\n \n[1. 结构体打印时，%v 和 %+v 的区别](#1)\n[2. new和make的区别](#2)\n[3. slice扩容机制？](#3)\n[4. 什么是协程？](#4)\n[5. defer执行顺序](#5)\n[6. 如何判断 map 中是否包含某个 key ?](#6)\n[7. 如何获取一个结构体的所有tag？](#7)\n[8. 如何判断 2 个字符串切片（slice) 是相等的？](#8)\n[9. go里面的int和int32是同一个概念吗？](#9)\n[10. init() 函数](#10)\n[11. 2 个 nil 可能不相等吗？](#11)\n\n \n<p id=\"1\"></p>\n \n#### 结构体打印时，%v 和 %+v 的区别\n```go\nfunc printStruct(){\n\tpeople := People{\n\t\tName: \"lisi\",\n\t\tAge:  18,\n\t}\n\tfmt.Printf(\"%v\\n\", people)\n\tfmt.Printf(\"%+v\\n\", people)\n\tfmt.Printf(\"%#v\\n\", people)\n}\n// 输出:\n// {lisi 18}\n// {Name:lisi Age:18}\n// People{Name:\"lisi\", Age:18}\n```\n\n<p id=\"2\"></p>\n \n#### new 和 make的区别\n\n* new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&T{}\n* make只可用于slice,map,channel的初始化,返回的是引用。\n\n<p id=\"3\"></p>\n\n#### slice扩容机制？\nGo <= 1.17\n\n如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。\n\n如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap/4。\n\nGo1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制\n\n<p id=\"4\"></p>\n\n#### 什么是协程？\n\n协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。\n\n<p id=\"5\"></p>\n\n#### defer执行顺序\n\n后进先出\n\n```go\nfunc test() int {\n\ti := 0\n\tdefer func() {\n\t\tfmt.Println(\"defer1\")\n\t}()\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// 输出:\n// defer2\n// defer1\n// return 0\n```\n\n上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）\n\n```go\nfunc test() (i int) {\n\ti = 0\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// defer2\n// return 1\n```\n\n这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。\n\n\n<p id=\"6\"></p>\n\n#### 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n} else {\n}\n```\n\n<p id=\"7\"></p>\n\n#### 如何获取一个结构体的所有tag？\n```go\npackage main\n\nimport (\n\t\"reflect\"\n\t\"fmt\"\n)\n\ntype Author struct {\n\tName         int      `json:Name`\n\tPublications []string `json:Publication,omitempty`\n}\n\nfunc main() {\n\tt := reflect.TypeOf(Author{})\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tname := t.Field(i).Name\n\t\ts, _ := t.FieldByName(name)\n\t\tfmt.Println(name, s.Tag)\n\t}\n}\n// Name json:Name\n// Publications json:Publication,omitempty\n```\n\n<p id=\"8\"></p>\n\n#### 如何判断 2 个字符串切片（slice) 是相等的？\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\tx := \"abcd\"\n\ty := \"abcde\"\n\tfmt.Println(reflect.DeepEqual(x, y))\n\t// Output: false\n}\n```\n\n<p id=\"9\"></p>\n\n#### go里面的int和int32是同一个概念吗？\n不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。\n\nint8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。\n\n\n<p id=\"10\"></p>\n\n#### init() 函数\n\n- init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。\n- 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。\n- init()函数没有入参和返回值，不能被其他函数调用，\n- <span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span>\n- 一个文件可以有多个init()函数！\n- 执行顺序：import –> const –> var –>init()–>main()\n\n<p id=\"11\"></p>\n\n#### 2 个 nil 可能不相等吗？\n可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：\n\n```go\nvar p *int = nil\nvar i interface{} = nil\nif(p == i){\n\tfmt.Println(\"Equal\")\n}\n```\n两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span>\n\n","source":"_posts/golang/golang面试.md","raw":"---\nlayout: golang\ntitle: golang面试\ndate: 2023-07-29 13:20:35\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\n\n日积月累便封神\n\n{% endnote %}\n\n<!-- more -->\n\n### 目录\n \n[1. 结构体打印时，%v 和 %+v 的区别](#1)\n[2. new和make的区别](#2)\n[3. slice扩容机制？](#3)\n[4. 什么是协程？](#4)\n[5. defer执行顺序](#5)\n[6. 如何判断 map 中是否包含某个 key ?](#6)\n[7. 如何获取一个结构体的所有tag？](#7)\n[8. 如何判断 2 个字符串切片（slice) 是相等的？](#8)\n[9. go里面的int和int32是同一个概念吗？](#9)\n[10. init() 函数](#10)\n[11. 2 个 nil 可能不相等吗？](#11)\n\n \n<p id=\"1\"></p>\n \n#### 结构体打印时，%v 和 %+v 的区别\n```go\nfunc printStruct(){\n\tpeople := People{\n\t\tName: \"lisi\",\n\t\tAge:  18,\n\t}\n\tfmt.Printf(\"%v\\n\", people)\n\tfmt.Printf(\"%+v\\n\", people)\n\tfmt.Printf(\"%#v\\n\", people)\n}\n// 输出:\n// {lisi 18}\n// {Name:lisi Age:18}\n// People{Name:\"lisi\", Age:18}\n```\n\n<p id=\"2\"></p>\n \n#### new 和 make的区别\n\n* new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&T{}\n* make只可用于slice,map,channel的初始化,返回的是引用。\n\n<p id=\"3\"></p>\n\n#### slice扩容机制？\nGo <= 1.17\n\n如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。\n\n如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap/4。\n\nGo1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制\n\n<p id=\"4\"></p>\n\n#### 什么是协程？\n\n协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。\n\n<p id=\"5\"></p>\n\n#### defer执行顺序\n\n后进先出\n\n```go\nfunc test() int {\n\ti := 0\n\tdefer func() {\n\t\tfmt.Println(\"defer1\")\n\t}()\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// 输出:\n// defer2\n// defer1\n// return 0\n```\n\n上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）\n\n```go\nfunc test() (i int) {\n\ti = 0\n\tdefer func() {\n\t\ti += 1\n\t\tfmt.Println(\"defer2\")\n\t}()\n\treturn i\n}\n\nfunc main() {\n\tfmt.Println(\"return\", test())\n}\n// defer2\n// return 1\n```\n\n这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。\n\n\n<p id=\"6\"></p>\n\n#### 如何判断 map 中是否包含某个 key ？\n```go\nvar sample map[int]int\nif _, ok := sample[10]; ok {\n} else {\n}\n```\n\n<p id=\"7\"></p>\n\n#### 如何获取一个结构体的所有tag？\n```go\npackage main\n\nimport (\n\t\"reflect\"\n\t\"fmt\"\n)\n\ntype Author struct {\n\tName         int      `json:Name`\n\tPublications []string `json:Publication,omitempty`\n}\n\nfunc main() {\n\tt := reflect.TypeOf(Author{})\n\tfor i := 0; i < t.NumField(); i++ {\n\t\tname := t.Field(i).Name\n\t\ts, _ := t.FieldByName(name)\n\t\tfmt.Println(name, s.Tag)\n\t}\n}\n// Name json:Name\n// Publications json:Publication,omitempty\n```\n\n<p id=\"8\"></p>\n\n#### 如何判断 2 个字符串切片（slice) 是相等的？\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"reflect\"\n)\n\nfunc main() {\n\tx := \"abcd\"\n\ty := \"abcde\"\n\tfmt.Println(reflect.DeepEqual(x, y))\n\t// Output: false\n}\n```\n\n<p id=\"9\"></p>\n\n#### go里面的int和int32是同一个概念吗？\n不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。\n\nint8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。\n\n\n<p id=\"10\"></p>\n\n#### init() 函数\n\n- init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。\n- 每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。\n- init()函数没有入参和返回值，不能被其他函数调用，\n- <span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span>\n- 一个文件可以有多个init()函数！\n- 执行顺序：import –> const –> var –>init()–>main()\n\n<p id=\"11\"></p>\n\n#### 2 个 nil 可能不相等吗？\n可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：\n\n```go\nvar p *int = nil\nvar i interface{} = nil\nif(p == i){\n\tfmt.Println(\"Equal\")\n}\n```\n两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span>\n\n","slug":"golang/golang面试","published":1,"updated":"2023-08-17T09:40:54.976Z","_id":"clldg4fa40000st4w2ad5374y","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>日积月累便封神</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p><a href=\"#1\">1. 结构体打印时，%v 和 %+v 的区别</a><br><a href=\"#2\">2. new和make的区别</a><br><a href=\"#3\">3. slice扩容机制？</a><br><a href=\"#4\">4. 什么是协程？</a><br><a href=\"#5\">5. defer执行顺序</a><br><a href=\"#6\">6. 如何判断 map 中是否包含某个 key ?</a><br><a href=\"#7\">7. 如何获取一个结构体的所有tag？</a><br><a href=\"#8\">8. 如何判断 2 个字符串切片（slice) 是相等的？</a><br><a href=\"#9\">9. go里面的int和int32是同一个概念吗？</a><br><a href=\"#10\">10. init() 函数</a><br><a href=\"#11\">11. 2 个 nil 可能不相等吗？</a></p>\n<p id=\"1\"></p>\n \n<h4 id=\"结构体打印时，-v-和-v-的区别\"><a href=\"#结构体打印时，-v-和-v-的区别\" class=\"headerlink\" title=\"结构体打印时，%v 和 %+v 的区别\"></a>结构体打印时，%v 和 %+v 的区别</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printStruct</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tpeople := People&#123;<br>\t\tName: <span class=\"hljs-string\">&quot;lisi&quot;</span>,<br>\t\tAge:  <span class=\"hljs-number\">18</span>,<br>\t&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%+v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n&quot;</span>, people)<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// &#123;lisi 18&#125;</span><br><span class=\"hljs-comment\">// &#123;Name:lisi Age:18&#125;</span><br><span class=\"hljs-comment\">// People&#123;Name:&quot;lisi&quot;, Age:18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"2\"></p>\n \n<h4 id=\"new-和-make的区别\"><a href=\"#new-和-make的区别\" class=\"headerlink\" title=\"new 和 make的区别\"></a>new 和 make的区别</h4><ul>\n<li>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li>\n<li>make只可用于slice,map,channel的初始化,返回的是引用。</li>\n</ul>\n<p id=\"3\"></p>\n\n<h4 id=\"slice扩容机制？\"><a href=\"#slice扩容机制？\" class=\"headerlink\" title=\"slice扩容机制？\"></a>slice扩容机制？</h4><p>Go &lt;&#x3D; 1.17</p>\n<p>如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。</p>\n<p>如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap&#x2F;4。</p>\n<p>Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制</p>\n<p id=\"4\"></p>\n\n<h4 id=\"什么是协程？\"><a href=\"#什么是协程？\" class=\"headerlink\" title=\"什么是协程？\"></a>什么是协程？</h4><p>协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。</p>\n<p id=\"5\"></p>\n\n<h4 id=\"defer执行顺序\"><a href=\"#defer执行顺序\" class=\"headerlink\" title=\"defer执行顺序\"></a>defer执行顺序</h4><p>后进先出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ti := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer1&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// defer1</span><br><span class=\"hljs-comment\">// return 0</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> (i <span class=\"hljs-type\">int</span>) &#123;<br>\ti = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// return 1</span><br></code></pre></td></tr></table></figure>\n\n<p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p>\n<p id=\"6\"></p>\n\n<h4 id=\"如何判断-map-中是否包含某个-key-？\"><a href=\"#如何判断-map-中是否包含某个-key-？\" class=\"headerlink\" title=\"如何判断 map 中是否包含某个 key ？\"></a>如何判断 map 中是否包含某个 key ？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> sample <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span><br><span class=\"hljs-keyword\">if</span> _, ok := sample[<span class=\"hljs-number\">10</span>]; ok &#123;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p id=\"7\"></p>\n\n<h4 id=\"如何获取一个结构体的所有tag？\"><a href=\"#如何获取一个结构体的所有tag？\" class=\"headerlink\" title=\"如何获取一个结构体的所有tag？\"></a>如何获取一个结构体的所有tag？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Author <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName         <span class=\"hljs-type\">int</span>      <span class=\"hljs-string\">`json:Name`</span><br>\tPublications []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:Publication,omitempty`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tt := reflect.TypeOf(Author&#123;&#125;)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; t.NumField(); i++ &#123;<br>\t\tname := t.Field(i).Name<br>\t\ts, _ := t.FieldByName(name)<br>\t\tfmt.Println(name, s.Tag)<br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">// Name json:Name</span><br><span class=\"hljs-comment\">// Publications json:Publication,omitempty</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"8\"></p>\n\n<h4 id=\"如何判断-2-个字符串切片（slice-是相等的？\"><a href=\"#如何判断-2-个字符串切片（slice-是相等的？\" class=\"headerlink\" title=\"如何判断 2 个字符串切片（slice) 是相等的？\"></a>如何判断 2 个字符串切片（slice) 是相等的？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tx := <span class=\"hljs-string\">&quot;abcd&quot;</span><br>\ty := <span class=\"hljs-string\">&quot;abcde&quot;</span><br>\tfmt.Println(reflect.DeepEqual(x, y))<br>\t<span class=\"hljs-comment\">// Output: false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p id=\"9\"></p>\n\n<h4 id=\"go里面的int和int32是同一个概念吗？\"><a href=\"#go里面的int和int32是同一个概念吗？\" class=\"headerlink\" title=\"go里面的int和int32是同一个概念吗？\"></a>go里面的int和int32是同一个概念吗？</h4><p>不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。</p>\n<p>int8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。</p>\n<p id=\"10\"></p>\n\n<h4 id=\"init-函数\"><a href=\"#init-函数\" class=\"headerlink\" title=\"init() 函数\"></a>init() 函数</h4><ul>\n<li>init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</li>\n<li>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。</li>\n<li>init()函数没有入参和返回值，不能被其他函数调用，</li>\n<li><span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span></li>\n<li>一个文件可以有多个init()函数！</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt;init()–&gt;main()</li>\n</ul>\n<p id=\"11\"></p>\n\n<h4 id=\"2-个-nil-可能不相等吗？\"><a href=\"#2-个-nil-可能不相等吗？\" class=\"headerlink\" title=\"2 个 nil 可能不相等吗？\"></a>2 个 nil 可能不相等吗？</h4><p>可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span> = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">interface</span>&#123;&#125; = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">if</span>(p == i)&#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Equal&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span></p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>日积月累便封神</p>\n          </div>","more":"<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><p><a href=\"#1\">1. 结构体打印时，%v 和 %+v 的区别</a><br><a href=\"#2\">2. new和make的区别</a><br><a href=\"#3\">3. slice扩容机制？</a><br><a href=\"#4\">4. 什么是协程？</a><br><a href=\"#5\">5. defer执行顺序</a><br><a href=\"#6\">6. 如何判断 map 中是否包含某个 key ?</a><br><a href=\"#7\">7. 如何获取一个结构体的所有tag？</a><br><a href=\"#8\">8. 如何判断 2 个字符串切片（slice) 是相等的？</a><br><a href=\"#9\">9. go里面的int和int32是同一个概念吗？</a><br><a href=\"#10\">10. init() 函数</a><br><a href=\"#11\">11. 2 个 nil 可能不相等吗？</a></p>\n<p id=\"1\"></p>\n \n<h4 id=\"结构体打印时，-v-和-v-的区别\"><a href=\"#结构体打印时，-v-和-v-的区别\" class=\"headerlink\" title=\"结构体打印时，%v 和 %+v 的区别\"></a>结构体打印时，%v 和 %+v 的区别</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">printStruct</span><span class=\"hljs-params\">()</span></span>&#123;<br>\tpeople := People&#123;<br>\t\tName: <span class=\"hljs-string\">&quot;lisi&quot;</span>,<br>\t\tAge:  <span class=\"hljs-number\">18</span>,<br>\t&#125;<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%+v\\n&quot;</span>, people)<br>\tfmt.Printf(<span class=\"hljs-string\">&quot;%#v\\n&quot;</span>, people)<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// &#123;lisi 18&#125;</span><br><span class=\"hljs-comment\">// &#123;Name:lisi Age:18&#125;</span><br><span class=\"hljs-comment\">// People&#123;Name:&quot;lisi&quot;, Age:18&#125;</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"2\"></p>\n \n<h4 id=\"new-和-make的区别\"><a href=\"#new-和-make的区别\" class=\"headerlink\" title=\"new 和 make的区别\"></a>new 和 make的区别</h4><ul>\n<li>new只用于分配内存，返回一个指向地址的指针。它为每个新类型分配一片内存，初始化为0且返回类型*T的内存地址，它相当于&amp;T{}</li>\n<li>make只可用于slice,map,channel的初始化,返回的是引用。</li>\n</ul>\n<p id=\"3\"></p>\n\n<h4 id=\"slice扩容机制？\"><a href=\"#slice扩容机制？\" class=\"headerlink\" title=\"slice扩容机制？\"></a>slice扩容机制？</h4><p>Go &lt;&#x3D; 1.17</p>\n<p>如果当前容量小于1024，则判断所需容量是否大于原来容量2倍，如果大于，当前容量加上所需容量；否则当前容量乘2。</p>\n<p>如果当前容量大于1024，则每次按照1.25倍速度递增容量，也就是每次加上cap&#x2F;4。</p>\n<p>Go1.18之后，引入了新的扩容规则：浅谈 Go 1.18.1的切片扩容机制</p>\n<p id=\"4\"></p>\n\n<h4 id=\"什么是协程？\"><a href=\"#什么是协程？\" class=\"headerlink\" title=\"什么是协程？\"></a>什么是协程？</h4><p>协程是用户态轻量级线程，它是线程调度的基本单位。通常在函数前加上go关键字就能实现并发。一个Goroutine会以一个很小的栈启动2KB或4KB，当遇到栈空间不足时，栈会自动伸缩， 因此可以轻易实现成千上万个goroutine同时启动。</p>\n<p id=\"5\"></p>\n\n<h4 id=\"defer执行顺序\"><a href=\"#defer执行顺序\" class=\"headerlink\" title=\"defer执行顺序\"></a>defer执行顺序</h4><p>后进先出</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> <span class=\"hljs-type\">int</span> &#123;<br>\ti := <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer1&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// 输出:</span><br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// defer1</span><br><span class=\"hljs-comment\">// return 0</span><br></code></pre></td></tr></table></figure>\n\n<p>上面这个例子中，test返回值并没有修改，这是由于Go的返回机制决定的，执行Return语句后，Go会创建一个临时变量保存返回值。如果是有名返回（也就是指明返回值func test() (i int)）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">test</span><span class=\"hljs-params\">()</span></span> (i <span class=\"hljs-type\">int</span>) &#123;<br>\ti = <span class=\"hljs-number\">0</span><br>\t<span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\ti += <span class=\"hljs-number\">1</span><br>\t\tfmt.Println(<span class=\"hljs-string\">&quot;defer2&quot;</span>)<br>\t&#125;()<br>\t<span class=\"hljs-keyword\">return</span> i<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;return&quot;</span>, test())<br>&#125;<br><span class=\"hljs-comment\">// defer2</span><br><span class=\"hljs-comment\">// return 1</span><br></code></pre></td></tr></table></figure>\n\n<p>这个例子中，返回值被修改了。对于有名返回值的函数，执行 return 语句时，并不会再创建临时变量保存，因此，defer 语句修改了 i，即对返回值产生了影响。</p>\n<p id=\"6\"></p>\n\n<h4 id=\"如何判断-map-中是否包含某个-key-？\"><a href=\"#如何判断-map-中是否包含某个-key-？\" class=\"headerlink\" title=\"如何判断 map 中是否包含某个 key ？\"></a>如何判断 map 中是否包含某个 key ？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> sample <span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">int</span>]<span class=\"hljs-type\">int</span><br><span class=\"hljs-keyword\">if</span> _, ok := sample[<span class=\"hljs-number\">10</span>]; ok &#123;<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p id=\"7\"></p>\n\n<h4 id=\"如何获取一个结构体的所有tag？\"><a href=\"#如何获取一个结构体的所有tag？\" class=\"headerlink\" title=\"如何获取一个结构体的所有tag？\"></a>如何获取一个结构体的所有tag？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Author <span class=\"hljs-keyword\">struct</span> &#123;<br>\tName         <span class=\"hljs-type\">int</span>      <span class=\"hljs-string\">`json:Name`</span><br>\tPublications []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:Publication,omitempty`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tt := reflect.TypeOf(Author&#123;&#125;)<br>\t<span class=\"hljs-keyword\">for</span> i := <span class=\"hljs-number\">0</span>; i &lt; t.NumField(); i++ &#123;<br>\t\tname := t.Field(i).Name<br>\t\ts, _ := t.FieldByName(name)<br>\t\tfmt.Println(name, s.Tag)<br>\t&#125;<br>&#125;<br><span class=\"hljs-comment\">// Name json:Name</span><br><span class=\"hljs-comment\">// Publications json:Publication,omitempty</span><br></code></pre></td></tr></table></figure>\n\n<p id=\"8\"></p>\n\n<h4 id=\"如何判断-2-个字符串切片（slice-是相等的？\"><a href=\"#如何判断-2-个字符串切片（slice-是相等的？\" class=\"headerlink\" title=\"如何判断 2 个字符串切片（slice) 是相等的？\"></a>如何判断 2 个字符串切片（slice) 是相等的？</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;reflect&quot;</span><br>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tx := <span class=\"hljs-string\">&quot;abcd&quot;</span><br>\ty := <span class=\"hljs-string\">&quot;abcde&quot;</span><br>\tfmt.Println(reflect.DeepEqual(x, y))<br>\t<span class=\"hljs-comment\">// Output: false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p id=\"9\"></p>\n\n<h4 id=\"go里面的int和int32是同一个概念吗？\"><a href=\"#go里面的int和int32是同一个概念吗？\" class=\"headerlink\" title=\"go里面的int和int32是同一个概念吗？\"></a>go里面的int和int32是同一个概念吗？</h4><p>不是一个概念！千万不能混淆。go语言中的int的大小是和操作系统位数相关的，如果是32位操作系统，int类型的大小就是4字节。如果是64位操作系统，int类型的大小就是8个字节。除此之外uint也与操作系统有关。</p>\n<p>int8占1个字节，int16占2个字节，int32占4个字节，int64占8个字节。</p>\n<p id=\"10\"></p>\n\n<h4 id=\"init-函数\"><a href=\"#init-函数\" class=\"headerlink\" title=\"init() 函数\"></a>init() 函数</h4><ul>\n<li>init()函数是go初始化的一部分，由runtime初始化每个导入的包，初始化不是按照从上到下的导入顺序，而是按照解析的依赖关系，没有依赖的包最先初始化。</li>\n<li>每个包首先初始化包作用域的常量和变量（常量优先于变量），然后执行包的init()函数。同一个包，甚至是同一个源文件可以有多个init()函数。</li>\n<li>init()函数没有入参和返回值，不能被其他函数调用，</li>\n<li><span style=\"color: green;\">同一个包内多个init()函数的执行顺序不作保证。</span></li>\n<li>一个文件可以有多个init()函数！</li>\n<li>执行顺序：import –&gt; const –&gt; var –&gt;init()–&gt;main()</li>\n</ul>\n<p id=\"11\"></p>\n\n<h4 id=\"2-个-nil-可能不相等吗？\"><a href=\"#2-个-nil-可能不相等吗？\" class=\"headerlink\" title=\"2 个 nil 可能不相等吗？\"></a>2 个 nil 可能不相等吗？</h4><p>可能不等。interface在运行时绑定值，只有值为nil接口值才为nil，但是与指针的nil不相等。举个例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">var</span> p *<span class=\"hljs-type\">int</span> = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">var</span> i <span class=\"hljs-keyword\">interface</span>&#123;&#125; = <span class=\"hljs-literal\">nil</span><br><span class=\"hljs-keyword\">if</span>(p == i)&#123;<br>\tfmt.Println(<span class=\"hljs-string\">&quot;Equal&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>两者并不相同。总结：<span style=\"color: green;\">两个nil只有在类型相同时才相等。</span></p>"},{"layout":"工具","title":"Markdown使用","date":"2023-08-16T08:39:49.000Z","sticky":999,"_content":"\n{% note primary%}\n\n有一些语法可能只能在 hexo fluid 主题中使用。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 文本颜色\n```md\n<span style=\"color: green;\">green</span>\n<span style=\"color: red;\">red</span>\n```\n\n## 2. 页面内实现目录\n```md\n### 目录\n[1. 章节1](#1)\n\n<!-- 这里 p 标签必须和下面一行隔开 -->\n<p id=\"1\"></p>\n```\n\n## 3. 标签\n\n### 3.1 便签\n参考：https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\n\n在 markdown 中加入如下的代码来使用便签：\n\n```md\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n或者使用 HTML 形式：\n```html\n<p class=\"note note-primary\">标签</p>\n```\n可选便签：\n\n{% note primary %}\nprimary\n{% endnote %}\n\n{% note secondary %}\nsecondary\n{% endnote %}\n\n{% note success %}\nsuccess\n{% endnote %}\n\n{% note danger %}\ndanger\n{% endnote %}\n\n{% note warning %}\nwarning\n{% endnote %}\n\n{% note info %}\ninfo\n{% endnote %}\n\n{% note light %}\nlight\n{% endnote %}\n\n### 3.2 行内标签\n\n在 markdown 中加入如下的代码来使用 Label：\n\n{% label primary @text %}\n\n```md\n{% label primary @text %}\n```\n或者使用 HTML 形式：\n\n```html\n<span class=\"label label-primary\">Label</span>\n```\n\n可选 Label：\n\n{% label primary @primary %}\n{% label default @default %}\n{% label info @info %}\n{% label success @success %}\n{% label warning @warning %}\n{% label danger @danger %}\n\n\n\n{% note warning %}\n警告：\n\n若使用 {% label primary @text %}，text 不能以 @ 开头\n{% endnote %}\n\n### 3.3 勾选框\n\n在 markdown 中加入如下的代码来使用 Checkbox：\n\n```md\n{% cb text, checked?, incline? %}\n```\n\n- text：显示的文字\n- checked：默认是否已勾选，默认 false\n- incline: 是否内联（可以理解为后面的文字是否换行），默认 false\n\n示例：\n\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n示例代码：\n```md\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n```\n\n## 4. 文章概要\n```md\n<!-- more -->\n```","source":"_posts/工具/markdown使用.md","raw":"---\nlayout: 工具\ntitle: Markdown使用\ndate: 2023-08-16 16:39:49\ntags: [markdown,fluid,hexo]\ncategories: 工具\nsticky: 999\n# index_img: /img/titles/markdown.png\n---\n\n{% note primary%}\n\n有一些语法可能只能在 hexo fluid 主题中使用。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 文本颜色\n```md\n<span style=\"color: green;\">green</span>\n<span style=\"color: red;\">red</span>\n```\n\n## 2. 页面内实现目录\n```md\n### 目录\n[1. 章节1](#1)\n\n<!-- 这里 p 标签必须和下面一行隔开 -->\n<p id=\"1\"></p>\n```\n\n## 3. 标签\n\n### 3.1 便签\n参考：https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\n\n在 markdown 中加入如下的代码来使用便签：\n\n```md\n{% note success %}\n文字 或者 `markdown` 均可\n{% endnote %}\n```\n或者使用 HTML 形式：\n```html\n<p class=\"note note-primary\">标签</p>\n```\n可选便签：\n\n{% note primary %}\nprimary\n{% endnote %}\n\n{% note secondary %}\nsecondary\n{% endnote %}\n\n{% note success %}\nsuccess\n{% endnote %}\n\n{% note danger %}\ndanger\n{% endnote %}\n\n{% note warning %}\nwarning\n{% endnote %}\n\n{% note info %}\ninfo\n{% endnote %}\n\n{% note light %}\nlight\n{% endnote %}\n\n### 3.2 行内标签\n\n在 markdown 中加入如下的代码来使用 Label：\n\n{% label primary @text %}\n\n```md\n{% label primary @text %}\n```\n或者使用 HTML 形式：\n\n```html\n<span class=\"label label-primary\">Label</span>\n```\n\n可选 Label：\n\n{% label primary @primary %}\n{% label default @default %}\n{% label info @info %}\n{% label success @success %}\n{% label warning @warning %}\n{% label danger @danger %}\n\n\n\n{% note warning %}\n警告：\n\n若使用 {% label primary @text %}，text 不能以 @ 开头\n{% endnote %}\n\n### 3.3 勾选框\n\n在 markdown 中加入如下的代码来使用 Checkbox：\n\n```md\n{% cb text, checked?, incline? %}\n```\n\n- text：显示的文字\n- checked：默认是否已勾选，默认 false\n- incline: 是否内联（可以理解为后面的文字是否换行），默认 false\n\n示例：\n\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n示例代码：\n```md\n{% cb 普通示例 %}\n{% cb 默认选中, true %}\n{% cb 内联示例, false, true %} 后面文字不换行\n{% cb false %} 也可以只传入一个参数，文字写在后边（这样不支持外联）\n```\n\n## 4. 文章概要\n```md\n<!-- more -->\n```","slug":"工具/markdown使用","published":1,"updated":"2023-08-17T09:39:47.998Z","_id":"clldiv8lw00001r4w39gu5jjo","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>有一些语法可能只能在 hexo fluid 主题中使用。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-文本颜色\"><a href=\"#1-文本颜色\" class=\"headerlink\" title=\"1. 文本颜色\"></a>1. 文本颜色</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: green;&quot;</span>&gt;</span></span>green<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;</span></span>red<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-页面内实现目录\"><a href=\"#2-页面内实现目录\" class=\"headerlink\" title=\"2. 页面内实现目录\"></a>2. 页面内实现目录</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"hljs-section\">### 目录</span><br>[<span class=\"hljs-string\">1. 章节1</span>](<span class=\"hljs-link\">#1</span>)<br><br>&lt;!-- 这里 p 标签必须和下面一行隔开 --&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-标签\"><a href=\"#3-标签\" class=\"headerlink\" title=\"3. 标签\"></a>3. 标签</h2><h3 id=\"3-1-便签\"><a href=\"#3-1-便签\" class=\"headerlink\" title=\"3.1 便签\"></a>3.1 便签</h3><p>参考：<a href=\"https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\">https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p>\n<p>在 markdown 中加入如下的代码来使用便签：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% note success %&#125;<br>文字 或者 <span class=\"hljs-code\">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;note note-primary&quot;</span>&gt;</span>标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>可选便签：</p>\n<div class=\"note note-primary\">\n            <p>primary</p>\n          </div>\n\n<div class=\"note note-secondary\">\n            <p>secondary</p>\n          </div>\n\n<div class=\"note note-success\">\n            <p>success</p>\n          </div>\n\n<div class=\"note note-danger\">\n            <p>danger</p>\n          </div>\n\n<div class=\"note note-warning\">\n            <p>warning</p>\n          </div>\n\n<div class=\"note note-info\">\n            <p>info</p>\n          </div>\n\n<div class=\"note note-light\">\n            <p>light</p>\n          </div>\n\n<h3 id=\"3-2-行内标签\"><a href=\"#3-2-行内标签\" class=\"headerlink\" title=\"3.2 行内标签\"></a>3.2 行内标签</h3><p>在 markdown 中加入如下的代码来使用 Label：</p>\n<span class=\"label label-primary\">text</span>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;label label-primary&quot;</span>&gt;</span>Label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可选 Label：</p>\n<span class=\"label label-primary\">primary</span>\n<span class=\"label label-default\">default</span>\n<span class=\"label label-info\">info</span>\n<span class=\"label label-success\">success</span>\n<span class=\"label label-warning\">warning</span>\n<span class=\"label label-danger\">danger</span>\n\n\n\n<div class=\"note note-warning\">\n            <p>警告：</p><p>若使用 <span class=\"label label-primary\">text</span>，text 不能以 @ 开头</p>\n          </div>\n\n<h3 id=\"3-3-勾选框\"><a href=\"#3-3-勾选框\" class=\"headerlink\" title=\"3.3 勾选框\"></a>3.3 勾选框</h3><p>在 markdown 中加入如下的代码来使用 Checkbox：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>text：显示的文字</li>\n<li>checked：默认是否已勾选，默认 false</li>\n<li>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</li>\n</ul>\n<p>示例：</p>\n<div>\n            <input type=\"checkbox\" disabled>普通示例\n          </div>\n<div>\n            <input type=\"checkbox\" disabled checked=\"checked\">默认选中\n          </div>\n\n            <input type=\"checkbox\" disabled>内联示例\n           后面文字不换行\n<input type=\"checkbox\" disabled> 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n<p>示例代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb 普通示例 %&#125;<br>&#123;% cb 默认选中, true %&#125;<br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联）<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-文章概要\"><a href=\"#4-文章概要\" class=\"headerlink\" title=\"4. 文章概要\"></a>4. 文章概要</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>有一些语法可能只能在 hexo fluid 主题中使用。</p>\n          </div>","more":"<h2 id=\"1-文本颜色\"><a href=\"#1-文本颜色\" class=\"headerlink\" title=\"1. 文本颜色\"></a>1. 文本颜色</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: green;&quot;</span>&gt;</span></span>green<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">style</span>=<span class=\"hljs-string\">&quot;color: red;&quot;</span>&gt;</span></span>red<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-页面内实现目录\"><a href=\"#2-页面内实现目录\" class=\"headerlink\" title=\"2. 页面内实现目录\"></a>2. 页面内实现目录</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\"><span class=\"hljs-section\">### 目录</span><br>[<span class=\"hljs-string\">1. 章节1</span>](<span class=\"hljs-link\">#1</span>)<br><br>&lt;!-- 这里 p 标签必须和下面一行隔开 --&gt;<br><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;1&quot;</span>&gt;</span></span><span class=\"language-xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span></span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-标签\"><a href=\"#3-标签\" class=\"headerlink\" title=\"3. 标签\"></a>3. 标签</h2><h3 id=\"3-1-便签\"><a href=\"#3-1-便签\" class=\"headerlink\" title=\"3.1 便签\"></a>3.1 便签</h3><p>参考：<a href=\"https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6\">https://fluid-dev.github.io/hexo-fluid-docs/guide/#tag-%E6%8F%92%E4%BB%B6</a></p>\n<p>在 markdown 中加入如下的代码来使用便签：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% note success %&#125;<br>文字 或者 <span class=\"hljs-code\">`markdown`</span> 均可<br>&#123;% endnote %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;note note-primary&quot;</span>&gt;</span>标签<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span><br></code></pre></td></tr></table></figure>\n<p>可选便签：</p>\n<div class=\"note note-primary\">\n            <p>primary</p>\n          </div>\n\n<div class=\"note note-secondary\">\n            <p>secondary</p>\n          </div>\n\n<div class=\"note note-success\">\n            <p>success</p>\n          </div>\n\n<div class=\"note note-danger\">\n            <p>danger</p>\n          </div>\n\n<div class=\"note note-warning\">\n            <p>warning</p>\n          </div>\n\n<div class=\"note note-info\">\n            <p>info</p>\n          </div>\n\n<div class=\"note note-light\">\n            <p>light</p>\n          </div>\n\n<h3 id=\"3-2-行内标签\"><a href=\"#3-2-行内标签\" class=\"headerlink\" title=\"3.2 行内标签\"></a>3.2 行内标签</h3><p>在 markdown 中加入如下的代码来使用 Label：</p>\n<span class=\"label label-primary\">text</span>\n\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% label primary @text %&#125;<br></code></pre></td></tr></table></figure>\n<p>或者使用 HTML 形式：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;label label-primary&quot;</span>&gt;</span>Label<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>可选 Label：</p>\n<span class=\"label label-primary\">primary</span>\n<span class=\"label label-default\">default</span>\n<span class=\"label label-info\">info</span>\n<span class=\"label label-success\">success</span>\n<span class=\"label label-warning\">warning</span>\n<span class=\"label label-danger\">danger</span>\n\n\n\n<div class=\"note note-warning\">\n            <p>警告：</p><p>若使用 <span class=\"label label-primary\">text</span>，text 不能以 @ 开头</p>\n          </div>\n\n<h3 id=\"3-3-勾选框\"><a href=\"#3-3-勾选框\" class=\"headerlink\" title=\"3.3 勾选框\"></a>3.3 勾选框</h3><p>在 markdown 中加入如下的代码来使用 Checkbox：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb text, checked?, incline? %&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>text：显示的文字</li>\n<li>checked：默认是否已勾选，默认 false</li>\n<li>incline: 是否内联（可以理解为后面的文字是否换行），默认 false</li>\n</ul>\n<p>示例：</p>\n<div>\n            <input type=\"checkbox\" disabled>普通示例\n          </div>\n<div>\n            <input type=\"checkbox\" disabled checked=\"checked\">默认选中\n          </div>\n\n            <input type=\"checkbox\" disabled>内联示例\n           后面文字不换行\n<input type=\"checkbox\" disabled> 也可以只传入一个参数，文字写在后边（这样不支持外联）\n\n<p></p>\n\n<p>示例代码：</p>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&#123;% cb 普通示例 %&#125;<br>&#123;% cb 默认选中, true %&#125;<br>&#123;% cb 内联示例, false, true %&#125; 后面文字不换行<br>&#123;% cb false %&#125; 也可以只传入一个参数，文字写在后边（这样不支持外联）<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-文章概要\"><a href=\"#4-文章概要\" class=\"headerlink\" title=\"4. 文章概要\"></a>4. 文章概要</h2><figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs md\">&lt;!-- more --&gt;<br></code></pre></td></tr></table></figure>"},{"layout":"golang","title":"golang垃圾回收","date":"2023-08-16T09:17:32.000Z","_content":"\n{% note primary %}\ngolang是通过 {% label primary @三色标记法 %} 来进行垃圾回收。\n{% endnote %}\n\n<!-- more -->\n\n## 1. 标记过程\n\n![image](1.png)\n\n- 初始状态下所有对象都是白色的。\n- 从根节点开始遍历所有对象，把遍历到的对象变成灰色对象\n- 遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。\n- 循环步骤3，直到灰色对象全部变黑色。\n- 通过写屏障(write-barrier)检测对象有变化，重复以上操作\n- 回收所有白色对象（垃圾）。\n\n## 2. 根对象是什么？\n\n根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：\n\n- 全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。\n- 执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。\n- 寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。\n\n## 3. STW（Stop The World）\n\n- 为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。\n- STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。\n\n## 4. 写屏障(Write Barrier)\n\n为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要{% label danger @通过写屏障技术尽可能地缩短STW的时间。 %}\n\n### 4.1 写屏障的原理\n\n造成引用对象丢失的条件:\n\n- 一个黑色A新增了指向白色C的引用，\n- 白色C没有其他灰色的引用(除A之外)。\n\n以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。\n\n{% label danger @写屏障破坏两个条件其一即可 %}\n#### 4.2 如何破坏？\n\n- **Dijistra写屏障**\n\n满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色\n\n- **Yuasa写屏障**\n   \n满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色\n\n## 5. GC 触发时机\n\n**内存分配量达到阈值触发GC**\n\n每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，\n\n{% label primary @阈值 = 上次GC内存分配量 × 内存增长率 %}\n\n**定期触发GC**\n\n默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明\n\n**主动触发**\n\n程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。\n\n","source":"_posts/golang/golang垃圾回收.md","raw":"---\nlayout: golang\ntitle: golang垃圾回收\ndate: 2023-08-16 17:17:32\ntags: golang\ncategories: golang\n---\n\n{% note primary %}\ngolang是通过 {% label primary @三色标记法 %} 来进行垃圾回收。\n{% endnote %}\n\n<!-- more -->\n\n## 1. 标记过程\n\n![image](1.png)\n\n- 初始状态下所有对象都是白色的。\n- 从根节点开始遍历所有对象，把遍历到的对象变成灰色对象\n- 遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。\n- 循环步骤3，直到灰色对象全部变黑色。\n- 通过写屏障(write-barrier)检测对象有变化，重复以上操作\n- 回收所有白色对象（垃圾）。\n\n## 2. 根对象是什么？\n\n根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：\n\n- 全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。\n- 执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。\n- 寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。\n\n## 3. STW（Stop The World）\n\n- 为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。\n- STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。\n\n## 4. 写屏障(Write Barrier)\n\n为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要{% label danger @通过写屏障技术尽可能地缩短STW的时间。 %}\n\n### 4.1 写屏障的原理\n\n造成引用对象丢失的条件:\n\n- 一个黑色A新增了指向白色C的引用，\n- 白色C没有其他灰色的引用(除A之外)。\n\n以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。\n\n{% label danger @写屏障破坏两个条件其一即可 %}\n#### 4.2 如何破坏？\n\n- **Dijistra写屏障**\n\n满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色\n\n- **Yuasa写屏障**\n   \n满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色\n\n## 5. GC 触发时机\n\n**内存分配量达到阈值触发GC**\n\n每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，\n\n{% label primary @阈值 = 上次GC内存分配量 × 内存增长率 %}\n\n**定期触发GC**\n\n默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明\n\n**主动触发**\n\n程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。\n\n","slug":"golang/golang垃圾回收","published":1,"updated":"2023-08-17T09:40:51.239Z","_id":"clldiv8m300021r4w8kbcdwc1","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>golang是通过 <span class=\"label label-primary\">三色标记法</span> 来进行垃圾回收。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-标记过程\"><a href=\"#1-标记过程\" class=\"headerlink\" title=\"1. 标记过程\"></a>1. 标记过程</h2><p><img src=\"1.png\" alt=\"image\"></p>\n<ul>\n<li>初始状态下所有对象都是白色的。</li>\n<li>从根节点开始遍历所有对象，把遍历到的对象变成灰色对象</li>\n<li>遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。</li>\n<li>循环步骤3，直到灰色对象全部变黑色。</li>\n<li>通过写屏障(write-barrier)检测对象有变化，重复以上操作</li>\n<li>回收所有白色对象（垃圾）。</li>\n</ul>\n<h2 id=\"2-根对象是什么？\"><a href=\"#2-根对象是什么？\" class=\"headerlink\" title=\"2. 根对象是什么？\"></a>2. 根对象是什么？</h2><p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p>\n<ul>\n<li>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。</li>\n<li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。</li>\n<li>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。</li>\n</ul>\n<h2 id=\"3-STW（Stop-The-World）\"><a href=\"#3-STW（Stop-The-World）\" class=\"headerlink\" title=\"3. STW（Stop The World）\"></a>3. STW（Stop The World）</h2><ul>\n<li>为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。</li>\n<li>STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。</li>\n</ul>\n<h2 id=\"4-写屏障-Write-Barrier\"><a href=\"#4-写屏障-Write-Barrier\" class=\"headerlink\" title=\"4. 写屏障(Write Barrier)\"></a>4. 写屏障(Write Barrier)</h2><p>为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要<span class=\"label label-danger\">通过写屏障技术尽可能地缩短STW的时间。</span></p>\n<h3 id=\"4-1-写屏障的原理\"><a href=\"#4-1-写屏障的原理\" class=\"headerlink\" title=\"4.1 写屏障的原理\"></a>4.1 写屏障的原理</h3><p>造成引用对象丢失的条件:</p>\n<ul>\n<li>一个黑色A新增了指向白色C的引用，</li>\n<li>白色C没有其他灰色的引用(除A之外)。</li>\n</ul>\n<p>以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。</p>\n<span class=\"label label-danger\">写屏障破坏两个条件其一即可</span>\n<h4 id=\"4-2-如何破坏？\"><a href=\"#4-2-如何破坏？\" class=\"headerlink\" title=\"4.2 如何破坏？\"></a>4.2 如何破坏？</h4><ul>\n<li><strong>Dijistra写屏障</strong></li>\n</ul>\n<p>满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色</p>\n<ul>\n<li><strong>Yuasa写屏障</strong></li>\n</ul>\n<p>满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色</p>\n<h2 id=\"5-GC-触发时机\"><a href=\"#5-GC-触发时机\" class=\"headerlink\" title=\"5. GC 触发时机\"></a>5. GC 触发时机</h2><p><strong>内存分配量达到阈值触发GC</strong></p>\n<p>每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，</p>\n<span class=\"label label-primary\">阈值 = 上次GC内存分配量 × 内存增长率</span>\n\n<p><strong>定期触发GC</strong></p>\n<p>默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明</p>\n<p><strong>主动触发</strong></p>\n<p>程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>golang是通过 <span class=\"label label-primary\">三色标记法</span> 来进行垃圾回收。</p>\n          </div>","more":"<h2 id=\"1-标记过程\"><a href=\"#1-标记过程\" class=\"headerlink\" title=\"1. 标记过程\"></a>1. 标记过程</h2><p><img src=\"1.png\" alt=\"image\"></p>\n<ul>\n<li>初始状态下所有对象都是白色的。</li>\n<li>从根节点开始遍历所有对象，把遍历到的对象变成灰色对象</li>\n<li>遍历灰色对象，将灰色对象引用的对象也变成灰色对象，然后将遍历过的灰色对象变成黑色对象。</li>\n<li>循环步骤3，直到灰色对象全部变黑色。</li>\n<li>通过写屏障(write-barrier)检测对象有变化，重复以上操作</li>\n<li>回收所有白色对象（垃圾）。</li>\n</ul>\n<h2 id=\"2-根对象是什么？\"><a href=\"#2-根对象是什么？\" class=\"headerlink\" title=\"2. 根对象是什么？\"></a>2. 根对象是什么？</h2><p>根对象在垃圾回收的术语中又叫做根集合，它是垃圾回收器在标记过程时最先检查的对象，包括：</p>\n<ul>\n<li>全局变量：程序在编译期就能确定的那些存在于程序整个生命周期的变量。</li>\n<li>执行栈：每个 goroutine 都包含自己的执行栈，这些执行栈上包含栈上的变量及指向分配的堆内存区块的指针。</li>\n<li>寄存器：寄存器的值可能表示一个指针，参与计算的这些指针可能指向某些赋值器分配的堆内存区块。</li>\n</ul>\n<h2 id=\"3-STW（Stop-The-World）\"><a href=\"#3-STW（Stop-The-World）\" class=\"headerlink\" title=\"3. STW（Stop The World）\"></a>3. STW（Stop The World）</h2><ul>\n<li>为了避免在 GC 的过程中，对象之间的引用关系发生新的变更，使得GC的结果发生错误（如GC过程中新增了一个引用，但是由于未扫描到该引用导致将被引用的对象清除了），停止所有正在运行的协程。</li>\n<li>STW对性能有一些影响，Golang目前已经可以做到1ms以下的STW。</li>\n</ul>\n<h2 id=\"4-写屏障-Write-Barrier\"><a href=\"#4-写屏障-Write-Barrier\" class=\"headerlink\" title=\"4. 写屏障(Write Barrier)\"></a>4. 写屏障(Write Barrier)</h2><p>为了避免GC的过程中新修改的引用关系到GC的结果发生错误，我们需要进行STW。但是STW会影响程序的性能，所以我们要<span class=\"label label-danger\">通过写屏障技术尽可能地缩短STW的时间。</span></p>\n<h3 id=\"4-1-写屏障的原理\"><a href=\"#4-1-写屏障的原理\" class=\"headerlink\" title=\"4.1 写屏障的原理\"></a>4.1 写屏障的原理</h3><p>造成引用对象丢失的条件:</p>\n<ul>\n<li>一个黑色A新增了指向白色C的引用，</li>\n<li>白色C没有其他灰色的引用(除A之外)。</li>\n</ul>\n<p>以上两个条件需要同时满足：满足条件1时说明A已扫描完毕，A指向C的引用无法再被扫描到；满足条件2时说明C无其他灰色的引用了，即扫描结束后会被忽略 。</p>\n<span class=\"label label-danger\">写屏障破坏两个条件其一即可</span>\n<h4 id=\"4-2-如何破坏？\"><a href=\"#4-2-如何破坏？\" class=\"headerlink\" title=\"4.2 如何破坏？\"></a>4.2 如何破坏？</h4><ul>\n<li><strong>Dijistra写屏障</strong></li>\n</ul>\n<p>满足强三色不变性：黑色节点不允许引用白色节点，当黑色节点新增了白色节点的引用时，将对应的白色节点改为灰色</p>\n<ul>\n<li><strong>Yuasa写屏障</strong></li>\n</ul>\n<p>满足弱三色不变性：黑色节点允许引用白色节点，但是该白色节点有其他灰色节点间接的引用（确保不会被遗漏），当白色节点被删除了一个引用时，悲观地认为它一定会被一个黑色节点新增引用，所以将它置为灰色</p>\n<h2 id=\"5-GC-触发时机\"><a href=\"#5-GC-触发时机\" class=\"headerlink\" title=\"5. GC 触发时机\"></a>5. GC 触发时机</h2><p><strong>内存分配量达到阈值触发GC</strong></p>\n<p>每次内存分配时都会检查当前内存分配量是否已达到阈值，如果达到阈值立即启动GC，</p>\n<span class=\"label label-primary\">阈值 = 上次GC内存分配量 × 内存增长率</span>\n\n<p><strong>定期触发GC</strong></p>\n<p>默认情况下，最长2分钟触发一次GC，这个时间间隔由 runtime.forcegcperiod变量声明</p>\n<p><strong>主动触发</strong></p>\n<p>程序代码中可以调用 runtime.GC() 来触发GC，主要用于GC的性能测试和统计。</p>"},{"title":"fzf-搜索神器","date":"2023-08-17T07:12:07.000Z","updated":"2023-08-17T09:47:27.329Z","_content":"{% note primary%}\n\n模糊搜索神器\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 配合history\n```sh\nhistory | fzf | awk '{print $2}' | xargs -r -I {} sh -c \"{}\"\n```\n\n## 2. 搜索到文件后查看内容\n```sh\nls -l | fzf | awk '{print $9}' | xargs -r -I {} sh -c \"cat {}\"\n```\n\n## 3. 查看git提交状态\n```sh\ngit log --oneline | fzf | awk '{print $1}' | xargs -r -I {} git show {}\n```\n","source":"_posts/linux/fzf-搜索神器.md","raw":"---\ntitle: fzf-搜索神器\ncategory: linux\ndate: 2023-08-17 15:12:07\nupdated:\ntags: [linux,fzf]\n---\n{% note primary%}\n\n模糊搜索神器\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 配合history\n```sh\nhistory | fzf | awk '{print $2}' | xargs -r -I {} sh -c \"{}\"\n```\n\n## 2. 搜索到文件后查看内容\n```sh\nls -l | fzf | awk '{print $9}' | xargs -r -I {} sh -c \"cat {}\"\n```\n\n## 3. 查看git提交状态\n```sh\ngit log --oneline | fzf | awk '{print $1}' | xargs -r -I {} git show {}\n```\n","slug":"linux/fzf-搜索神器","published":1,"_id":"clletq882000gs14w2bive0fm","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>模糊搜索神器</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-配合history\"><a href=\"#1-配合history\" class=\"headerlink\" title=\"1. 配合history\"></a>1. 配合history</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">history</span> | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-搜索到文件后查看内容\"><a href=\"#2-搜索到文件后查看内容\" class=\"headerlink\" title=\"2. 搜索到文件后查看内容\"></a>2. 搜索到文件后查看内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $9&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;cat &#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-查看git提交状态\"><a href=\"#3-查看git提交状态\" class=\"headerlink\" title=\"3. 查看git提交状态\"></a>3. 查看git提交状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">log</span> --oneline | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -r -I &#123;&#125; git show &#123;&#125;<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>模糊搜索神器</p>\n          </div>","more":"<h2 id=\"1-配合history\"><a href=\"#1-配合history\" class=\"headerlink\" title=\"1. 配合history\"></a>1. 配合history</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">history</span> | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $2&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;&#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-搜索到文件后查看内容\"><a href=\"#2-搜索到文件后查看内容\" class=\"headerlink\" title=\"2. 搜索到文件后查看内容\"></a>2. 搜索到文件后查看内容</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $9&#125;&#x27;</span> | xargs -r -I &#123;&#125; sh -c <span class=\"hljs-string\">&quot;cat &#123;&#125;&quot;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-查看git提交状态\"><a href=\"#3-查看git提交状态\" class=\"headerlink\" title=\"3. 查看git提交状态\"></a>3. 查看git提交状态</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">git <span class=\"hljs-built_in\">log</span> --oneline | fzf | awk <span class=\"hljs-string\">&#x27;&#123;print $1&#125;&#x27;</span> | xargs -r -I &#123;&#125; git show &#123;&#125;<br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"linux 命令大全","date":"2023-08-16T06:40:47.000Z","sticky":1000,"_content":"\n{% note primary%}\n\n分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用\n\n{% endnote %}\n\n<!-- more -->\n\n\n# 1. 文件操作\n## 文件权限\n```sh\n# 以数字形式输出文件权限，0644\nstat -c '%a' example.txt\n```\n\n```sh\nls -l example.txt\n\n# 输出将类似于以下内容：\n-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt\n\n# 在这个示例中，-rw-r--r--表示文件的权限。\n# 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。\n# 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。\n# 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。\n```\n\n## 解压、压缩\n\n### 解压\n```sh\ntar -xzvf test.tar.gz\n```\n### 压缩\n```sh\ntar -czvf test.tar.gz README.md\n```\n\n### 解压到指定文件夹\n```sh\ntar -xzvf test.tar.gz -C /home/test\n```\n### 列出压缩文件内容\n```sh\ntar -tzvf test.tar.gz \n```\n\n{% note warning %}\n**参数说明**\n* -v 显示指令执行过程。\n* -c 建立新的备份文件。\n* -f 指定备份文件。\n* -z 通过gzip指令处理备份文件。\n* -x 从备份文件中还原文件。\n{% endnote %}\n\n### 使用密码\n\n```sh\n# 将当前目录下的files文件夹打包压缩，密码为password\n# -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。\ntar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz\n\n# 将当前目录下的files.tar.gz进行解密解压\nopenssl des3 -d -salt -k password -iter 10000 -in files.tar.gz | tar -xzf -\n```\n\n### 分割文件\n\n```sh\n# 分割\nsplit -b 1M file.tar.gz file_bakcup.\n\n# 合并\ncat file_backup* > file.tar.gz\n```\n\n## 软、硬链接\n\n删除源文件，硬链接没有影响，软链接不可用。\n\n### 软链接\n```sh\nln -s README.md README.soft.md\n```\n\n### 硬链接\n```sh\nln README.md README.hard.md\n```\n\n## dd\n\n生成100M文件\n```sh\ndd if=/dev/zero of=file_100M bs=1M count=100\n```\n\n随机生成1百万个1K的文件\n\n```sh\ndd if=/dev/zero of=100M bs=1M count=100\n```\n\n## 内存、cpu、io\n\n### 内存\n\n1. 输入 `top` 命令，按下 `M` 键可以按照内存使用量进行排序。\n2. 查看内存使用最多的5个进程\n\n```sh\nps aux --sort=-%mem | head -n 6\n```\n\n#### 查看指定进程内存占用\n\nps -o rss= -p <pid>\n\n### CPU\n\n1. 输入 `top` 命令，按下 `P` 键可以按照内存使用量进行排序。\n2. 查看CPU使用最多的5个进程\n\n```sh\nps aux --sort=-%cpu | head -n 6\n```\n\n### IO\n\n{% note warning %}\n请注意，`iotop` 和 `pidstat` 可能需要先安装，在终端输入以下命令可以安装它们：\n{% endnote %}\n\n```sh\n# centos\nyum -y install iotop\n\n# ubuntu\napt-get install iotop sysstat\n```\n#### iotop\n{% label primary @iotop %} 命令可以 {% label danger @实时 %} 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n   \n#### pidstat\n{% label success @pidstat %} 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n```sh\npidstat -d | sort -nrk 2 | head -n 6\n```\n\n#### iostat\n{% label primary @iostat %} 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n```sh\n# 瞬时数据\niostat -d\n\n# 每隔5s采样一次\niostat -d -t 5\n\n# 输出\nLinux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nvda               2.70        19.13        36.54  102409528  195610326\n```\n\n{% note warning %}\n\n设备名称：显示连接到系统的硬盘和存储设备的设备名称。\n\ntps（Transactions Per Second）：每秒处理的 I/O 事务数。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nkB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nsvctm（Service Time）：每个 I/O 操作花费的平均时间。\n\n%util：设备使用率的百分比，即设备每秒钟的 I/O 请求占总容量的百分比。\n{% endnote %}\n\n\n## top\n### 前五行\n\n![Alt text](top-01.png)\n\n#### 1. 输出系统任务队列信息\n\n{% note warning %}\n\n**10:38:45**：系统当前时间 \n**up 2days 18:57**：系统开机后到现在的总运行时间\n**1 user**：当前登录用户数\n**load average**: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值=1时表示满负荷状态，多核CPU中满负载的load average值为1*CPU核数\n{% endnote %}\n\n#### 2. 任务进程信息\n\n{% note warning %}\n**total**：系统全部进程的数量\n**running**：运行状态的进程数量\n**sleeping**：睡眠状态的进程数量\n**stoped**：停止状态的进程数量\n**zombie**：僵尸进程数量\n{% endnote %}\n\n#### 3. CPU信息\n\n{% note warning %}\n**us**：用户空间占用CPU百分比\n**sy**：内核空间占用CPU百分比\n**ni**：已调整优先级的用户进程的CPU百分比\n**id**：空闲CPU百分比，越低说明CPU使用率越高\n**wa**：等待IO完成的CPU百分比\n**hi**：处理硬件中断的占用CPU百分比\n**si**：处理软中断占用CPU百分比\n**st**：虚拟机占用CPU百分比\n{% endnote %}\n\n#### 4. 物理内存信息\n\n{% note warning %}\n以下内存单位均为MB\n\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n\n**total**：物理内存总量\n**free**：空闲内存总量\n**used**：使用中内存总量\n**buff/cache**：用于内核缓存的内存量\n{% endnote %}\n\n#### 5. 交互区内存信息\n\nswap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。\n\n{% note warning %}\n**total**：交换区总量\n**free**：空闲交换区总量\n**used**：使用的交换区总量\n**avail Mem**：可用交换区总量\n{% endnote %}\n\n\n### 进程列表\n\n![进程列表](top-02.png)\n{% note warning %}\n**PID**：进程号\n**USER**：运行进程的用户\n**PR**：优先级\n**NI**：nice值。负值表示高优先级，正值表示低优先级\n**VIRT**：占用虚拟内存，单位kb。VIRT=SWAP+RES \n**RES**：占用真实内存，单位kb\n**SHR**：共享内存大小，单位kb\n**S**：进程状态（I=空闲状态，R=运行状态，S=睡眠状态，D=不可中断的睡眠状态，T=跟踪/停止，Z=僵尸进程）\n**%CPU**：占用CPU百分比\n**%MEM**：占用内存百分比\n**TIME+**：上次启动后至今的总运行时间\n**COMMAND**：命令名or命令行\n{% endnote %}\n\n### 使用方法\n#### 更换内存单位\n{% note warning %}\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n{% endnote %}\n\n## 磁盘\n\n### du\n{% note warning %}\n直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。\n{% endnote %}\n\n选项与参数：\n\n-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。\n-h ：以人们较易读的容量格式 (G/M) 显示；\n-s ：列出总占用量；\n-S ：不包括子目录下的总计，与 -s 有点差别。\n-k ：以 KBytes 列出容量显示；\n-m ：以 MBytes 列出容量显示；\n\n```sh\n# 查看指定目录\ndu -sh .\n3.8G\t.\n# ====================================\n\n# 查看指定目录下的所有文件大小，深度为1\ndu -h $DIR --max-depth=1 | sort -h\n\n# 部分输出\n...\n388M\t./k3s\n570M\t./.npm\n1.4G\t./CAI.bak\n3.8G\t.\n\n# ====================================\n# 参数解析\n# --max-depth 深度\n# sort -h 从小到大排序\n# sort -rh 从大到小排序\n```\n\n#### \n\n### df\n\n显示系统中每个文件系统的磁盘使用情况\n\n```sh\ndf -h\n```\n\n### lsblk\n\n显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 /，而数据盘则可能挂载在其他目录上，如/home、/mnt等。\n\n```sh\nlsblk\n```\n\n显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。\n   \n```sh\ncat /etc/fstab\n```\n\n### fdisk\n\n列出所有分区信息\n\n```sh\nfdisk\n```\n\n### mount\n\n{% note warning %}\n目的：向linux系统新增一块硬盘，并挂载到指定目录。\n{% endnote %}\n\n1. 进入设备分区\n\nlsblk 查看对应的磁盘名称，比如为 vdb。\n   \n```sh\nfdisk /dev/vdb\n```\n\n2. 进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。\n\n3. 提供分区号。\n\n4. 提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。\n\n5. 使用 p 命令确认分区表是否正确。\n\n6. 使用 w 命令保存新的分区表。\n\n7. 格式化分区\n\n```sh\nmkfs.ext4 /dev/vdb1\nmkfs.ext4 /dev/vdb2\n```\n\n8. 创建两个挂载点。运行以下命令：\n\n```sh\nsudo mkdir /mnt/partition1\nsudo mkdir /mnt/partition2\n```\n\n9. 挂载分区\n    \n```sh\nsudo mount /dev/vdb1 /mnt/partition1\nsudo mount /dev/vdb2 /mnt/partition2\n```\n\n10.  开机自动挂载\n\n```sh\nvim /etc/fstab\n\n/dev/vdb1   /mnt/partition1   ext4   defaults   0   0\n/dev/vdb2   /mnt/partition2   ext4   defaults   0   0\n```\n\n## 命令行快捷键\n{% note warning %}\n请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。\n{% endnote %}\n\n| 快捷键        | 操作                                           |\n| ------------- | ---------------------------------------------- |\n| Ctrl + 左右键 | 在单词之间跳转                                 |\n| Ctrl + a      | 跳到本行的行首                                 |\n| Ctrl + e      | 跳到页尾                                       |\n| Ctrl + u      | 删除当前光标前面的文字 （还有剪切功能）        |\n| Ctrl + k      | 删除当前光标后面的文字 （还有剪切功能）        |\n| Ctrl + L      | 进行清屏操作                                   |\n| Ctrl + y      | 粘贴 Ctrl+u 或 Ctrl+k 剪切的内容               |\n| Ctrl + w      | 删除光标前面的单词的字符（以空格隔开的字符串） |\n| Alt + d       | 由光标位置开始，往右删除单词，往行尾删         |\n| Ctrl + r      | 搜索执行过的命令                               |\n| ! + 字符      | 快速执行最近执行过的命令，其中包含该字符       |\n| history       | 显示部分历史命令                               |\n\n\n# 2. 网络管理\n\n## 端口查看\n\n### netstat\n\n{% note success %}\n\nnetstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。\n\n{% endnote %}\n\n```sh\nnetstat -nplt\n```\n参数说明:\n\n{% note warning %}\n-n 将字母转化为数字\n\n-p 显示进程相关信息\n\n-l 列出状态为监听\n\n-t 只查看tcp协议\n\n-a 查看全部协议(netstat -an)\n{% endnote %}\n\n### lsof\n\n```sh\nlsof -i :30001\n```\n\n### telnet\n```sh\ntelnet 127.0.0.1 30001\n```\n## 路由\n\n**查看默认路由表信息**\n```sh\nip r\nip -6 r\nroute\n```\n\n**查看路由表信息**\n```sh\nip rule\nip -6 rule \nip rule list\n```\n\n**查看走哪条路由**\n```sh\nip route get 8.8.8.8\n```\n\n**路由追踪**\n```sh\ntraceroute 8.8.8.8\n```\n## 网速测试\n\n**安装**\n```sh\nsudo yum - y install speedtest-cli\n\nsudo apt install speedtest-cli\n\nsudo pip3 install speedtest-cli\n```\n\n**执行 speedtest-cli**\n```sh\n$ speedtest-cli\nRetrieving speedtest.net configuration...\nTesting from Unknown (165.154.145.190)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms\nTesting download speed................................................................................\nDownload: 56.57 Mbit/s\nTesting upload speed......................................................................................................\nUpload: 34.54 Mbit/s\n```\n{% note warning %}\n* MB：字节\n* Mbit：比特\n\n1 字节 = 8 bit，所以 1MB/s = 8Mbit/s。\n\n下载网速为 1MB/s ，这里指的是网速每秒可以下载1M。\n{% endnote %}\n\n## 快速开启http服务\n\n这将监听本地 80 端口，响应 OK\n```sh\necho -e 'HTTP/1.1 200 OK\\r\\n\\r\\nOK' | sudo socat - TCP-LISTEN:80\n```\n\n# 3. 进程管理\n# 4. 系统管理\n\n## cronjob 定时任务\n```sh\n# crontab -e 命令以编辑当前用户的cron表。\ncrontab -e\n\n# 每分钟执行一次 ls\n*/1 * * * * ls\n```\n\n**查看日志**\n```sh\ntail -f /var/spool/mail/root\n```\n# 5. 安全性\n\n## 更换密码\n```sh\npasswd\n```","source":"_posts/linux/linux-命令大全.md","raw":"---\nlayout: linux\ntitle: linux 命令大全\ndate: 2023-08-16 14:40:47\ntags: linux\ncategories: linux\nsticky: 1000\n---\n\n{% note primary%}\n\n分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用\n\n{% endnote %}\n\n<!-- more -->\n\n\n# 1. 文件操作\n## 文件权限\n```sh\n# 以数字形式输出文件权限，0644\nstat -c '%a' example.txt\n```\n\n```sh\nls -l example.txt\n\n# 输出将类似于以下内容：\n-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt\n\n# 在这个示例中，-rw-r--r--表示文件的权限。\n# 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。\n# 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。\n# 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。\n```\n\n## 解压、压缩\n\n### 解压\n```sh\ntar -xzvf test.tar.gz\n```\n### 压缩\n```sh\ntar -czvf test.tar.gz README.md\n```\n\n### 解压到指定文件夹\n```sh\ntar -xzvf test.tar.gz -C /home/test\n```\n### 列出压缩文件内容\n```sh\ntar -tzvf test.tar.gz \n```\n\n{% note warning %}\n**参数说明**\n* -v 显示指令执行过程。\n* -c 建立新的备份文件。\n* -f 指定备份文件。\n* -z 通过gzip指令处理备份文件。\n* -x 从备份文件中还原文件。\n{% endnote %}\n\n### 使用密码\n\n```sh\n# 将当前目录下的files文件夹打包压缩，密码为password\n# -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。\ntar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz\n\n# 将当前目录下的files.tar.gz进行解密解压\nopenssl des3 -d -salt -k password -iter 10000 -in files.tar.gz | tar -xzf -\n```\n\n### 分割文件\n\n```sh\n# 分割\nsplit -b 1M file.tar.gz file_bakcup.\n\n# 合并\ncat file_backup* > file.tar.gz\n```\n\n## 软、硬链接\n\n删除源文件，硬链接没有影响，软链接不可用。\n\n### 软链接\n```sh\nln -s README.md README.soft.md\n```\n\n### 硬链接\n```sh\nln README.md README.hard.md\n```\n\n## dd\n\n生成100M文件\n```sh\ndd if=/dev/zero of=file_100M bs=1M count=100\n```\n\n随机生成1百万个1K的文件\n\n```sh\ndd if=/dev/zero of=100M bs=1M count=100\n```\n\n## 内存、cpu、io\n\n### 内存\n\n1. 输入 `top` 命令，按下 `M` 键可以按照内存使用量进行排序。\n2. 查看内存使用最多的5个进程\n\n```sh\nps aux --sort=-%mem | head -n 6\n```\n\n#### 查看指定进程内存占用\n\nps -o rss= -p <pid>\n\n### CPU\n\n1. 输入 `top` 命令，按下 `P` 键可以按照内存使用量进行排序。\n2. 查看CPU使用最多的5个进程\n\n```sh\nps aux --sort=-%cpu | head -n 6\n```\n\n### IO\n\n{% note warning %}\n请注意，`iotop` 和 `pidstat` 可能需要先安装，在终端输入以下命令可以安装它们：\n{% endnote %}\n\n```sh\n# centos\nyum -y install iotop\n\n# ubuntu\napt-get install iotop sysstat\n```\n#### iotop\n{% label primary @iotop %} 命令可以 {% label danger @实时 %} 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n   \n#### pidstat\n{% label success @pidstat %} 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n```sh\npidstat -d | sort -nrk 2 | head -n 6\n```\n\n#### iostat\n{% label primary @iostat %} 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n```sh\n# 瞬时数据\niostat -d\n\n# 每隔5s采样一次\niostat -d -t 5\n\n# 输出\nLinux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)\n\nDevice:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn\nvda               2.70        19.13        36.54  102409528  195610326\n```\n\n{% note warning %}\n\n设备名称：显示连接到系统的硬盘和存储设备的设备名称。\n\ntps（Transactions Per Second）：每秒处理的 I/O 事务数。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nkB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。\n\nkB_read/s 和 kB_wrtn/s：每秒从设备读取和写入的数据量（以 KB 为单位）。\n\nsvctm（Service Time）：每个 I/O 操作花费的平均时间。\n\n%util：设备使用率的百分比，即设备每秒钟的 I/O 请求占总容量的百分比。\n{% endnote %}\n\n\n## top\n### 前五行\n\n![Alt text](top-01.png)\n\n#### 1. 输出系统任务队列信息\n\n{% note warning %}\n\n**10:38:45**：系统当前时间 \n**up 2days 18:57**：系统开机后到现在的总运行时间\n**1 user**：当前登录用户数\n**load average**: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值=1时表示满负荷状态，多核CPU中满负载的load average值为1*CPU核数\n{% endnote %}\n\n#### 2. 任务进程信息\n\n{% note warning %}\n**total**：系统全部进程的数量\n**running**：运行状态的进程数量\n**sleeping**：睡眠状态的进程数量\n**stoped**：停止状态的进程数量\n**zombie**：僵尸进程数量\n{% endnote %}\n\n#### 3. CPU信息\n\n{% note warning %}\n**us**：用户空间占用CPU百分比\n**sy**：内核空间占用CPU百分比\n**ni**：已调整优先级的用户进程的CPU百分比\n**id**：空闲CPU百分比，越低说明CPU使用率越高\n**wa**：等待IO完成的CPU百分比\n**hi**：处理硬件中断的占用CPU百分比\n**si**：处理软中断占用CPU百分比\n**st**：虚拟机占用CPU百分比\n{% endnote %}\n\n#### 4. 物理内存信息\n\n{% note warning %}\n以下内存单位均为MB\n\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n\n**total**：物理内存总量\n**free**：空闲内存总量\n**used**：使用中内存总量\n**buff/cache**：用于内核缓存的内存量\n{% endnote %}\n\n#### 5. 交互区内存信息\n\nswap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。\n\n{% note warning %}\n**total**：交换区总量\n**free**：空闲交换区总量\n**used**：使用的交换区总量\n**avail Mem**：可用交换区总量\n{% endnote %}\n\n\n### 进程列表\n\n![进程列表](top-02.png)\n{% note warning %}\n**PID**：进程号\n**USER**：运行进程的用户\n**PR**：优先级\n**NI**：nice值。负值表示高优先级，正值表示低优先级\n**VIRT**：占用虚拟内存，单位kb。VIRT=SWAP+RES \n**RES**：占用真实内存，单位kb\n**SHR**：共享内存大小，单位kb\n**S**：进程状态（I=空闲状态，R=运行状态，S=睡眠状态，D=不可中断的睡眠状态，T=跟踪/停止，Z=僵尸进程）\n**%CPU**：占用CPU百分比\n**%MEM**：占用内存百分比\n**TIME+**：上次启动后至今的总运行时间\n**COMMAND**：命令名or命令行\n{% endnote %}\n\n### 使用方法\n#### 更换内存单位\n{% note warning %}\n在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。\n\n在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。\n{% endnote %}\n\n## 磁盘\n\n### du\n{% note warning %}\n直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。\n{% endnote %}\n\n选项与参数：\n\n-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。\n-h ：以人们较易读的容量格式 (G/M) 显示；\n-s ：列出总占用量；\n-S ：不包括子目录下的总计，与 -s 有点差别。\n-k ：以 KBytes 列出容量显示；\n-m ：以 MBytes 列出容量显示；\n\n```sh\n# 查看指定目录\ndu -sh .\n3.8G\t.\n# ====================================\n\n# 查看指定目录下的所有文件大小，深度为1\ndu -h $DIR --max-depth=1 | sort -h\n\n# 部分输出\n...\n388M\t./k3s\n570M\t./.npm\n1.4G\t./CAI.bak\n3.8G\t.\n\n# ====================================\n# 参数解析\n# --max-depth 深度\n# sort -h 从小到大排序\n# sort -rh 从大到小排序\n```\n\n#### \n\n### df\n\n显示系统中每个文件系统的磁盘使用情况\n\n```sh\ndf -h\n```\n\n### lsblk\n\n显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 /，而数据盘则可能挂载在其他目录上，如/home、/mnt等。\n\n```sh\nlsblk\n```\n\n显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。\n   \n```sh\ncat /etc/fstab\n```\n\n### fdisk\n\n列出所有分区信息\n\n```sh\nfdisk\n```\n\n### mount\n\n{% note warning %}\n目的：向linux系统新增一块硬盘，并挂载到指定目录。\n{% endnote %}\n\n1. 进入设备分区\n\nlsblk 查看对应的磁盘名称，比如为 vdb。\n   \n```sh\nfdisk /dev/vdb\n```\n\n2. 进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。\n\n3. 提供分区号。\n\n4. 提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。\n\n5. 使用 p 命令确认分区表是否正确。\n\n6. 使用 w 命令保存新的分区表。\n\n7. 格式化分区\n\n```sh\nmkfs.ext4 /dev/vdb1\nmkfs.ext4 /dev/vdb2\n```\n\n8. 创建两个挂载点。运行以下命令：\n\n```sh\nsudo mkdir /mnt/partition1\nsudo mkdir /mnt/partition2\n```\n\n9. 挂载分区\n    \n```sh\nsudo mount /dev/vdb1 /mnt/partition1\nsudo mount /dev/vdb2 /mnt/partition2\n```\n\n10.  开机自动挂载\n\n```sh\nvim /etc/fstab\n\n/dev/vdb1   /mnt/partition1   ext4   defaults   0   0\n/dev/vdb2   /mnt/partition2   ext4   defaults   0   0\n```\n\n## 命令行快捷键\n{% note warning %}\n请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。\n{% endnote %}\n\n| 快捷键        | 操作                                           |\n| ------------- | ---------------------------------------------- |\n| Ctrl + 左右键 | 在单词之间跳转                                 |\n| Ctrl + a      | 跳到本行的行首                                 |\n| Ctrl + e      | 跳到页尾                                       |\n| Ctrl + u      | 删除当前光标前面的文字 （还有剪切功能）        |\n| Ctrl + k      | 删除当前光标后面的文字 （还有剪切功能）        |\n| Ctrl + L      | 进行清屏操作                                   |\n| Ctrl + y      | 粘贴 Ctrl+u 或 Ctrl+k 剪切的内容               |\n| Ctrl + w      | 删除光标前面的单词的字符（以空格隔开的字符串） |\n| Alt + d       | 由光标位置开始，往右删除单词，往行尾删         |\n| Ctrl + r      | 搜索执行过的命令                               |\n| ! + 字符      | 快速执行最近执行过的命令，其中包含该字符       |\n| history       | 显示部分历史命令                               |\n\n\n# 2. 网络管理\n\n## 端口查看\n\n### netstat\n\n{% note success %}\n\nnetstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。\n\n{% endnote %}\n\n```sh\nnetstat -nplt\n```\n参数说明:\n\n{% note warning %}\n-n 将字母转化为数字\n\n-p 显示进程相关信息\n\n-l 列出状态为监听\n\n-t 只查看tcp协议\n\n-a 查看全部协议(netstat -an)\n{% endnote %}\n\n### lsof\n\n```sh\nlsof -i :30001\n```\n\n### telnet\n```sh\ntelnet 127.0.0.1 30001\n```\n## 路由\n\n**查看默认路由表信息**\n```sh\nip r\nip -6 r\nroute\n```\n\n**查看路由表信息**\n```sh\nip rule\nip -6 rule \nip rule list\n```\n\n**查看走哪条路由**\n```sh\nip route get 8.8.8.8\n```\n\n**路由追踪**\n```sh\ntraceroute 8.8.8.8\n```\n## 网速测试\n\n**安装**\n```sh\nsudo yum - y install speedtest-cli\n\nsudo apt install speedtest-cli\n\nsudo pip3 install speedtest-cli\n```\n\n**执行 speedtest-cli**\n```sh\n$ speedtest-cli\nRetrieving speedtest.net configuration...\nTesting from Unknown (165.154.145.190)...\nRetrieving speedtest.net server list...\nSelecting best server based on ping...\nHosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms\nTesting download speed................................................................................\nDownload: 56.57 Mbit/s\nTesting upload speed......................................................................................................\nUpload: 34.54 Mbit/s\n```\n{% note warning %}\n* MB：字节\n* Mbit：比特\n\n1 字节 = 8 bit，所以 1MB/s = 8Mbit/s。\n\n下载网速为 1MB/s ，这里指的是网速每秒可以下载1M。\n{% endnote %}\n\n## 快速开启http服务\n\n这将监听本地 80 端口，响应 OK\n```sh\necho -e 'HTTP/1.1 200 OK\\r\\n\\r\\nOK' | sudo socat - TCP-LISTEN:80\n```\n\n# 3. 进程管理\n# 4. 系统管理\n\n## cronjob 定时任务\n```sh\n# crontab -e 命令以编辑当前用户的cron表。\ncrontab -e\n\n# 每分钟执行一次 ls\n*/1 * * * * ls\n```\n\n**查看日志**\n```sh\ntail -f /var/spool/mail/root\n```\n# 5. 安全性\n\n## 更换密码\n```sh\npasswd\n```","slug":"linux/linux-命令大全","published":1,"updated":"2023-08-31T02:27:10.462Z","_id":"cllfzsnkz0000074w7tuz16xg","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用</p>\n          </div>\n\n<span id=\"more\"></span>\n\n\n<h1 id=\"1-文件操作\"><a href=\"#1-文件操作\" class=\"headerlink\" title=\"1. 文件操作\"></a>1. 文件操作</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以数字形式输出文件权限，0644</span><br><span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">&#x27;%a&#x27;</span> example.txt<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l example.txt<br><br><span class=\"hljs-comment\"># 输出将类似于以下内容：</span><br>-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt<br><br><span class=\"hljs-comment\"># 在这个示例中，-rw-r--r--表示文件的权限。</span><br><span class=\"hljs-comment\"># 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。</span><br><span class=\"hljs-comment\"># 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。</span><br><span class=\"hljs-comment\"># 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解压、压缩\"><a href=\"#解压、压缩\" class=\"headerlink\" title=\"解压、压缩\"></a>解压、压缩</h2><h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz<br></code></pre></td></tr></table></figure>\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -czvf test.tar.gz README.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解压到指定文件夹\"><a href=\"#解压到指定文件夹\" class=\"headerlink\" title=\"解压到指定文件夹\"></a>解压到指定文件夹</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz -C /home/test<br></code></pre></td></tr></table></figure>\n<h3 id=\"列出压缩文件内容\"><a href=\"#列出压缩文件内容\" class=\"headerlink\" title=\"列出压缩文件内容\"></a>列出压缩文件内容</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -tzvf test.tar.gz <br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><strong>参数说明</strong></p><ul><li>-v 显示指令执行过程。</li><li>-c 建立新的备份文件。</li><li>-f 指定备份文件。</li><li>-z 通过gzip指令处理备份文件。</li><li>-x 从备份文件中还原文件。</li></ul>\n          </div>\n\n<h3 id=\"使用密码\"><a href=\"#使用密码\" class=\"headerlink\" title=\"使用密码\"></a>使用密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前目录下的files文件夹打包压缩，密码为password</span><br><span class=\"hljs-comment\"># -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。</span><br>tar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz<br><br><span class=\"hljs-comment\"># 将当前目录下的files.tar.gz进行解密解压</span><br>openssl des3 -d -salt -k password -iter 10000 -<span class=\"hljs-keyword\">in</span> files.tar.gz | tar -xzf -<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分割文件\"><a href=\"#分割文件\" class=\"headerlink\" title=\"分割文件\"></a>分割文件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 分割</span><br><span class=\"hljs-built_in\">split</span> -b 1M file.tar.gz file_bakcup.<br><br><span class=\"hljs-comment\"># 合并</span><br><span class=\"hljs-built_in\">cat</span> file_backup* &gt; file.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"软、硬链接\"><a href=\"#软、硬链接\" class=\"headerlink\" title=\"软、硬链接\"></a>软、硬链接</h2><p>删除源文件，硬链接没有影响，软链接不可用。</p>\n<h3 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> -s README.md README.soft.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> README.md README.hard.md<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h2><p>生成100M文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=file_100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<p>随机生成1百万个1K的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内存、cpu、io\"><a href=\"#内存、cpu、io\" class=\"headerlink\" title=\"内存、cpu、io\"></a>内存、cpu、io</h2><h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>M</code> 键可以按照内存使用量进行排序。</li>\n<li>查看内存使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%mem | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定进程内存占用\"><a href=\"#查看指定进程内存占用\" class=\"headerlink\" title=\"查看指定进程内存占用\"></a>查看指定进程内存占用</h4><p>ps -o rss&#x3D; -p <pid></pid></p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>P</code> 键可以按照内存使用量进行排序。</li>\n<li>查看CPU使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%cpu | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h3><div class=\"note note-warning\">\n            <p>请注意，<code>iotop</code> 和 <code>pidstat</code> 可能需要先安装，在终端输入以下命令可以安装它们：</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># centos</span><br>yum -y install iotop<br><br><span class=\"hljs-comment\"># ubuntu</span><br>apt-get install iotop sysstat<br></code></pre></td></tr></table></figure>\n<h4 id=\"iotop\"><a href=\"#iotop\" class=\"headerlink\" title=\"iotop\"></a>iotop</h4><span class=\"label label-primary\">iotop</span> 命令可以 <span class=\"label label-danger\">实时</span> 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n<h4 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h4><span class=\"label label-success\">pidstat</span> 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pidstat -d | <span class=\"hljs-built_in\">sort</span> -nrk 2 | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><span class=\"label label-primary\">iostat</span> 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 瞬时数据</span><br>iostat -d<br><br><span class=\"hljs-comment\"># 每隔5s采样一次</span><br>iostat -d -t 5<br><br><span class=\"hljs-comment\"># 输出</span><br>Linux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)<br><br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               2.70        19.13        36.54  102409528  195610326<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>设备名称：显示连接到系统的硬盘和存储设备的设备名称。</p><p>tps（Transactions Per Second）：每秒处理的 I&#x2F;O 事务数。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>kB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>svctm（Service Time）：每个 I&#x2F;O 操作花费的平均时间。</p><p>%util：设备使用率的百分比，即设备每秒钟的 I&#x2F;O 请求占总容量的百分比。</p>\n          </div>\n\n\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h3 id=\"前五行\"><a href=\"#前五行\" class=\"headerlink\" title=\"前五行\"></a>前五行</h3><p><img src=\"top-01.png\" alt=\"Alt text\"></p>\n<h4 id=\"1-输出系统任务队列信息\"><a href=\"#1-输出系统任务队列信息\" class=\"headerlink\" title=\"1. 输出系统任务队列信息\"></a>1. 输出系统任务队列信息</h4><div class=\"note note-warning\">\n            <p><strong>10:38:45</strong>：系统当前时间<br><strong>up 2days 18:57</strong>：系统开机后到现在的总运行时间<br><strong>1 user</strong>：当前登录用户数<br><strong>load average</strong>: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值&#x3D;1时表示满负荷状态，多核CPU中满负载的load average值为1*CPU核数</p>\n          </div>\n\n<h4 id=\"2-任务进程信息\"><a href=\"#2-任务进程信息\" class=\"headerlink\" title=\"2. 任务进程信息\"></a>2. 任务进程信息</h4><div class=\"note note-warning\">\n            <p><strong>total</strong>：系统全部进程的数量<br><strong>running</strong>：运行状态的进程数量<br><strong>sleeping</strong>：睡眠状态的进程数量<br><strong>stoped</strong>：停止状态的进程数量<br><strong>zombie</strong>：僵尸进程数量</p>\n          </div>\n\n<h4 id=\"3-CPU信息\"><a href=\"#3-CPU信息\" class=\"headerlink\" title=\"3. CPU信息\"></a>3. CPU信息</h4><div class=\"note note-warning\">\n            <p><strong>us</strong>：用户空间占用CPU百分比<br><strong>sy</strong>：内核空间占用CPU百分比<br><strong>ni</strong>：已调整优先级的用户进程的CPU百分比<br><strong>id</strong>：空闲CPU百分比，越低说明CPU使用率越高<br><strong>wa</strong>：等待IO完成的CPU百分比<br><strong>hi</strong>：处理硬件中断的占用CPU百分比<br><strong>si</strong>：处理软中断占用CPU百分比<br><strong>st</strong>：虚拟机占用CPU百分比</p>\n          </div>\n\n<h4 id=\"4-物理内存信息\"><a href=\"#4-物理内存信息\" class=\"headerlink\" title=\"4. 物理内存信息\"></a>4. 物理内存信息</h4><div class=\"note note-warning\">\n            <p>以下内存单位均为MB</p><p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p><p><strong>total</strong>：物理内存总量<br><strong>free</strong>：空闲内存总量<br><strong>used</strong>：使用中内存总量<br><strong>buff&#x2F;cache</strong>：用于内核缓存的内存量</p>\n          </div>\n\n<h4 id=\"5-交互区内存信息\"><a href=\"#5-交互区内存信息\" class=\"headerlink\" title=\"5. 交互区内存信息\"></a>5. 交互区内存信息</h4><p>swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。</p>\n<div class=\"note note-warning\">\n            <p><strong>total</strong>：交换区总量<br><strong>free</strong>：空闲交换区总量<br><strong>used</strong>：使用的交换区总量<br><strong>avail Mem</strong>：可用交换区总量</p>\n          </div>\n\n\n<h3 id=\"进程列表\"><a href=\"#进程列表\" class=\"headerlink\" title=\"进程列表\"></a>进程列表</h3><p><img src=\"top-02.png\" alt=\"进程列表\"></p>\n<div class=\"note note-warning\">\n            <p><strong>PID</strong>：进程号<br><strong>USER</strong>：运行进程的用户<br><strong>PR</strong>：优先级<br><strong>NI</strong>：nice值。负值表示高优先级，正值表示低优先级<br><strong>VIRT</strong>：占用虚拟内存，单位kb。VIRT&#x3D;SWAP+RES<br><strong>RES</strong>：占用真实内存，单位kb<br><strong>SHR</strong>：共享内存大小，单位kb<br><strong>S</strong>：进程状态（I&#x3D;空闲状态，R&#x3D;运行状态，S&#x3D;睡眠状态，D&#x3D;不可中断的睡眠状态，T&#x3D;跟踪&#x2F;停止，Z&#x3D;僵尸进程）<br><strong>%CPU</strong>：占用CPU百分比<br><strong>%MEM</strong>：占用内存百分比<br>**TIME+**：上次启动后至今的总运行时间<br><strong>COMMAND</strong>：命令名or命令行</p>\n          </div>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h4 id=\"更换内存单位\"><a href=\"#更换内存单位\" class=\"headerlink\" title=\"更换内存单位\"></a>更换内存单位</h4><div class=\"note note-warning\">\n            <p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p>\n          </div>\n\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><div class=\"note note-warning\">\n            <p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p>\n          </div>\n\n<p>选项与参数：</p>\n<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。<br>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；<br>-s ：列出总占用量；<br>-S ：不包括子目录下的总计，与 -s 有点差别。<br>-k ：以 KBytes 列出容量显示；<br>-m ：以 MBytes 列出容量显示；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看指定目录</span><br><span class=\"hljs-built_in\">du</span> -sh .<br>3.8G\t.<br><span class=\"hljs-comment\"># ====================================</span><br><br><span class=\"hljs-comment\"># 查看指定目录下的所有文件大小，深度为1</span><br><span class=\"hljs-built_in\">du</span> -h <span class=\"hljs-variable\">$DIR</span> --max-depth=1 | <span class=\"hljs-built_in\">sort</span> -h<br><br><span class=\"hljs-comment\"># 部分输出</span><br>...<br>388M\t./k3s<br>570M\t./.npm<br>1.4G\t./CAI.bak<br>3.8G\t.<br><br><span class=\"hljs-comment\"># ====================================</span><br><span class=\"hljs-comment\"># 参数解析</span><br><span class=\"hljs-comment\"># --max-depth 深度</span><br><span class=\"hljs-comment\"># sort -h 从小到大排序</span><br><span class=\"hljs-comment\"># sort -rh 从大到小排序</span><br></code></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p>显示系统中每个文件系统的磁盘使用情况</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lsblk\"><a href=\"#lsblk\" class=\"headerlink\" title=\"lsblk\"></a>lsblk</h3><p>显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsblk<br></code></pre></td></tr></table></figure>\n\n<p>显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/fstab<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p>列出所有分区信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h3><div class=\"note note-warning\">\n            <p>目的：向linux系统新增一块硬盘，并挂载到指定目录。</p>\n          </div>\n\n<ol>\n<li>进入设备分区</li>\n</ol>\n<p>lsblk 查看对应的磁盘名称，比如为 vdb。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk /dev/vdb<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。</p>\n</li>\n<li><p>提供分区号。</p>\n</li>\n<li><p>提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。</p>\n</li>\n<li><p>使用 p 命令确认分区表是否正确。</p>\n</li>\n<li><p>使用 w 命令保存新的分区表。</p>\n</li>\n<li><p>格式化分区</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mkfs.ext4 /dev/vdb1<br>mkfs.ext4 /dev/vdb2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建两个挂载点。运行以下命令：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition1<br>sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>挂载分区</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo mount /dev/vdb1 /mnt/partition1<br>sudo mount /dev/vdb2 /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>开机自动挂载</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/fstab<br><br>/dev/vdb1   /mnt/partition1   ext4   defaults   0   0<br>/dev/vdb2   /mnt/partition2   ext4   defaults   0   0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h2><div class=\"note note-warning\">\n            <p>请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。</p>\n          </div>\n\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + 左右键</td>\n<td>在单词之间跳转</td>\n</tr>\n<tr>\n<td>Ctrl + a</td>\n<td>跳到本行的行首</td>\n</tr>\n<tr>\n<td>Ctrl + e</td>\n<td>跳到页尾</td>\n</tr>\n<tr>\n<td>Ctrl + u</td>\n<td>删除当前光标前面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + k</td>\n<td>删除当前光标后面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>进行清屏操作</td>\n</tr>\n<tr>\n<td>Ctrl + y</td>\n<td>粘贴 Ctrl+u 或 Ctrl+k 剪切的内容</td>\n</tr>\n<tr>\n<td>Ctrl + w</td>\n<td>删除光标前面的单词的字符（以空格隔开的字符串）</td>\n</tr>\n<tr>\n<td>Alt + d</td>\n<td>由光标位置开始，往右删除单词，往行尾删</td>\n</tr>\n<tr>\n<td>Ctrl + r</td>\n<td>搜索执行过的命令</td>\n</tr>\n<tr>\n<td>! + 字符</td>\n<td>快速执行最近执行过的命令，其中包含该字符</td>\n</tr>\n<tr>\n<td>history</td>\n<td>显示部分历史命令</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-网络管理\"><a href=\"#2-网络管理\" class=\"headerlink\" title=\"2. 网络管理\"></a>2. 网络管理</h1><h2 id=\"端口查看\"><a href=\"#端口查看\" class=\"headerlink\" title=\"端口查看\"></a>端口查看</h2><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><div class=\"note note-success\">\n            <p>netstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">netstat -nplt<br></code></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<div class=\"note note-warning\">\n            <p>-n 将字母转化为数字</p><p>-p 显示进程相关信息</p><p>-l 列出状态为监听</p><p>-t 只查看tcp协议</p><p>-a 查看全部协议(netstat -an)</p>\n          </div>\n\n<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsof -i :30001<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">telnet 127.0.0.1 30001<br></code></pre></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p><strong>查看默认路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip r<br>ip -6 r<br>route<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip rule<br>ip -6 rule <br>ip rule list<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看走哪条路由</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip route get 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由追踪</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">traceroute 8.8.8.8<br></code></pre></td></tr></table></figure>\n<h2 id=\"网速测试\"><a href=\"#网速测试\" class=\"headerlink\" title=\"网速测试\"></a>网速测试</h2><p><strong>安装</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo yum - y install speedtest-cli<br><br>sudo apt install speedtest-cli<br><br>sudo pip3 install speedtest-cli<br></code></pre></td></tr></table></figure>\n\n<p><strong>执行 speedtest-cli</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ speedtest-cli<br>Retrieving speedtest.net configuration...<br>Testing from Unknown (165.154.145.190)...<br>Retrieving speedtest.net server list...<br>Selecting best server based on ping...<br>Hosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms<br>Testing download speed................................................................................<br>Download: 56.57 Mbit/s<br>Testing upload speed......................................................................................................<br>Upload: 34.54 Mbit/s<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <ul><li>MB：字节</li><li>Mbit：比特</li></ul><p>1 字节 &#x3D; 8 bit，所以 1MB&#x2F;s &#x3D; 8Mbit&#x2F;s。</p><p>下载网速为 1MB&#x2F;s ，这里指的是网速每秒可以下载1M。</p>\n          </div>\n\n<h2 id=\"快速开启http服务\"><a href=\"#快速开启http服务\" class=\"headerlink\" title=\"快速开启http服务\"></a>快速开启http服务</h2><p>这将监听本地 80 端口，响应 OK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&#x27;HTTP/1.1 200 OK\\r\\n\\r\\nOK&#x27;</span> | sudo socat - TCP-LISTEN:80<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-进程管理\"><a href=\"#3-进程管理\" class=\"headerlink\" title=\"3. 进程管理\"></a>3. 进程管理</h1><h1 id=\"4-系统管理\"><a href=\"#4-系统管理\" class=\"headerlink\" title=\"4. 系统管理\"></a>4. 系统管理</h1><h2 id=\"cronjob-定时任务\"><a href=\"#cronjob-定时任务\" class=\"headerlink\" title=\"cronjob 定时任务\"></a>cronjob 定时任务</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># crontab -e 命令以编辑当前用户的cron表。</span><br>crontab -e<br><br><span class=\"hljs-comment\"># 每分钟执行一次 ls</span><br>*/1 * * * * <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">tail</span> -f /var/spool/mail/root<br></code></pre></td></tr></table></figure>\n<h1 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h1><h2 id=\"更换密码\"><a href=\"#更换密码\" class=\"headerlink\" title=\"更换密码\"></a>更换密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">passwd<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>分为文件操作、网络管理、系统管理、进程管理、安全性来归纳linux基本使用</p>\n          </div>","more":"<h1 id=\"1-文件操作\"><a href=\"#1-文件操作\" class=\"headerlink\" title=\"1. 文件操作\"></a>1. 文件操作</h1><h2 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 以数字形式输出文件权限，0644</span><br><span class=\"hljs-built_in\">stat</span> -c <span class=\"hljs-string\">&#x27;%a&#x27;</span> example.txt<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ls</span> -l example.txt<br><br><span class=\"hljs-comment\"># 输出将类似于以下内容：</span><br>-rw-r--r-- 1 user group 12345 Jan 1 10:00 example.txt<br><br><span class=\"hljs-comment\"># 在这个示例中，-rw-r--r--表示文件的权限。</span><br><span class=\"hljs-comment\"># 第一个字符表示文件类型，- 表示普通文件。剩余的九个字符分为三组，每组三个字符表示所有者、所属组和其他人的权限。</span><br><span class=\"hljs-comment\"># 每组中的三个字符表示读（r）、写（w）和执行（x）权限。如果对应位置有权限，字符表示对应的权限，否则用 - 来表示缺少权限。</span><br><span class=\"hljs-comment\"># 在这个例子中，-rw-r--r-- 表示文件所有者有读、写权限，所属组和其他人只有读权限。</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解压、压缩\"><a href=\"#解压、压缩\" class=\"headerlink\" title=\"解压、压缩\"></a>解压、压缩</h2><h3 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz<br></code></pre></td></tr></table></figure>\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -czvf test.tar.gz README.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"解压到指定文件夹\"><a href=\"#解压到指定文件夹\" class=\"headerlink\" title=\"解压到指定文件夹\"></a>解压到指定文件夹</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -xzvf test.tar.gz -C /home/test<br></code></pre></td></tr></table></figure>\n<h3 id=\"列出压缩文件内容\"><a href=\"#列出压缩文件内容\" class=\"headerlink\" title=\"列出压缩文件内容\"></a>列出压缩文件内容</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">tar -tzvf test.tar.gz <br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p><strong>参数说明</strong></p><ul><li>-v 显示指令执行过程。</li><li>-c 建立新的备份文件。</li><li>-f 指定备份文件。</li><li>-z 通过gzip指令处理备份文件。</li><li>-x 从备份文件中还原文件。</li></ul>\n          </div>\n\n<h3 id=\"使用密码\"><a href=\"#使用密码\" class=\"headerlink\" title=\"使用密码\"></a>使用密码</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 将当前目录下的files文件夹打包压缩，密码为password</span><br><span class=\"hljs-comment\"># -iter 10000参数来指定迭代次数为10000次。这将提高密钥派生的强度，增加加密的安全性。</span><br>tar -czvf - files | openssl des3 -salt -k password  -iter 10000 -out files.tar.gz<br><br><span class=\"hljs-comment\"># 将当前目录下的files.tar.gz进行解密解压</span><br>openssl des3 -d -salt -k password -iter 10000 -<span class=\"hljs-keyword\">in</span> files.tar.gz | tar -xzf -<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"分割文件\"><a href=\"#分割文件\" class=\"headerlink\" title=\"分割文件\"></a>分割文件</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 分割</span><br><span class=\"hljs-built_in\">split</span> -b 1M file.tar.gz file_bakcup.<br><br><span class=\"hljs-comment\"># 合并</span><br><span class=\"hljs-built_in\">cat</span> file_backup* &gt; file.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"软、硬链接\"><a href=\"#软、硬链接\" class=\"headerlink\" title=\"软、硬链接\"></a>软、硬链接</h2><p>删除源文件，硬链接没有影响，软链接不可用。</p>\n<h3 id=\"软链接\"><a href=\"#软链接\" class=\"headerlink\" title=\"软链接\"></a>软链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> -s README.md README.soft.md<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"硬链接\"><a href=\"#硬链接\" class=\"headerlink\" title=\"硬链接\"></a>硬链接</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">ln</span> README.md README.hard.md<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"dd\"><a href=\"#dd\" class=\"headerlink\" title=\"dd\"></a>dd</h2><p>生成100M文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=file_100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<p>随机生成1百万个1K的文件</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">dd</span> <span class=\"hljs-keyword\">if</span>=/dev/zero of=100M bs=1M count=100<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"内存、cpu、io\"><a href=\"#内存、cpu、io\" class=\"headerlink\" title=\"内存、cpu、io\"></a>内存、cpu、io</h2><h3 id=\"内存\"><a href=\"#内存\" class=\"headerlink\" title=\"内存\"></a>内存</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>M</code> 键可以按照内存使用量进行排序。</li>\n<li>查看内存使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%mem | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"查看指定进程内存占用\"><a href=\"#查看指定进程内存占用\" class=\"headerlink\" title=\"查看指定进程内存占用\"></a>查看指定进程内存占用</h4><p>ps -o rss&#x3D; -p <pid></pid></p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ol>\n<li>输入 <code>top</code> 命令，按下 <code>P</code> 键可以按照内存使用量进行排序。</li>\n<li>查看CPU使用最多的5个进程</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ps aux --<span class=\"hljs-built_in\">sort</span>=-%cpu | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"IO\"><a href=\"#IO\" class=\"headerlink\" title=\"IO\"></a>IO</h3><div class=\"note note-warning\">\n            <p>请注意，<code>iotop</code> 和 <code>pidstat</code> 可能需要先安装，在终端输入以下命令可以安装它们：</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># centos</span><br>yum -y install iotop<br><br><span class=\"hljs-comment\"># ubuntu</span><br>apt-get install iotop sysstat<br></code></pre></td></tr></table></figure>\n<h4 id=\"iotop\"><a href=\"#iotop\" class=\"headerlink\" title=\"iotop\"></a>iotop</h4><span class=\"label label-primary\">iotop</span> 命令可以 <span class=\"label label-danger\">实时</span> 显示系统中进程的磁盘IO使用情况。打开终端并输入 iotop 命令，然后按下O键可以按照IO使用量进行排序。按q可以退出iotop 命令\n<h4 id=\"pidstat\"><a href=\"#pidstat\" class=\"headerlink\" title=\"pidstat\"></a>pidstat</h4><span class=\"label label-success\">pidstat</span> 命令可以显示特定进程的IO使用情况。输入以下命令来查看IO使用最多的5个进程：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pidstat -d | <span class=\"hljs-built_in\">sort</span> -nrk 2 | <span class=\"hljs-built_in\">head</span> -n 6<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"iostat\"><a href=\"#iostat\" class=\"headerlink\" title=\"iostat\"></a>iostat</h4><span class=\"label label-primary\">iostat</span> 命令可以提供关于系统设备和分区的IO统计信息。输入以下命令来查看整个系统的IO情况：\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 瞬时数据</span><br>iostat -d<br><br><span class=\"hljs-comment\"># 每隔5s采样一次</span><br>iostat -d -t 5<br><br><span class=\"hljs-comment\"># 输出</span><br>Linux 4.19.xxx.x86_64 (10-11-xx-xx) \t202x年0x月1x日 \t_x86_64_\t(2 CPU)<br><br>Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn<br>vda               2.70        19.13        36.54  102409528  195610326<br></code></pre></td></tr></table></figure>\n\n<div class=\"note note-warning\">\n            <p>设备名称：显示连接到系统的硬盘和存储设备的设备名称。</p><p>tps（Transactions Per Second）：每秒处理的 I&#x2F;O 事务数。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>kB_read 和 kB_wrtn：自系统启动以来已经读取和写入的总数据量（以 KB 为单位）。</p><p>kB_read&#x2F;s 和 kB_wrtn&#x2F;s：每秒从设备读取和写入的数据量（以 KB 为单位）。</p><p>svctm（Service Time）：每个 I&#x2F;O 操作花费的平均时间。</p><p>%util：设备使用率的百分比，即设备每秒钟的 I&#x2F;O 请求占总容量的百分比。</p>\n          </div>\n\n\n<h2 id=\"top\"><a href=\"#top\" class=\"headerlink\" title=\"top\"></a>top</h2><h3 id=\"前五行\"><a href=\"#前五行\" class=\"headerlink\" title=\"前五行\"></a>前五行</h3><p><img src=\"top-01.png\" alt=\"Alt text\"></p>\n<h4 id=\"1-输出系统任务队列信息\"><a href=\"#1-输出系统任务队列信息\" class=\"headerlink\" title=\"1. 输出系统任务队列信息\"></a>1. 输出系统任务队列信息</h4><div class=\"note note-warning\">\n            <p><strong>10:38:45</strong>：系统当前时间<br><strong>up 2days 18:57</strong>：系统开机后到现在的总运行时间<br><strong>1 user</strong>：当前登录用户数<br><strong>load average</strong>: 0.10, 0.12, 0.09：系统负载，系统运行队列的平均利用率，可认为是可运行进程的平均数；三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值；单核CPU中load average的值&#x3D;1时表示满负荷状态，多核CPU中满负载的load average值为1*CPU核数</p>\n          </div>\n\n<h4 id=\"2-任务进程信息\"><a href=\"#2-任务进程信息\" class=\"headerlink\" title=\"2. 任务进程信息\"></a>2. 任务进程信息</h4><div class=\"note note-warning\">\n            <p><strong>total</strong>：系统全部进程的数量<br><strong>running</strong>：运行状态的进程数量<br><strong>sleeping</strong>：睡眠状态的进程数量<br><strong>stoped</strong>：停止状态的进程数量<br><strong>zombie</strong>：僵尸进程数量</p>\n          </div>\n\n<h4 id=\"3-CPU信息\"><a href=\"#3-CPU信息\" class=\"headerlink\" title=\"3. CPU信息\"></a>3. CPU信息</h4><div class=\"note note-warning\">\n            <p><strong>us</strong>：用户空间占用CPU百分比<br><strong>sy</strong>：内核空间占用CPU百分比<br><strong>ni</strong>：已调整优先级的用户进程的CPU百分比<br><strong>id</strong>：空闲CPU百分比，越低说明CPU使用率越高<br><strong>wa</strong>：等待IO完成的CPU百分比<br><strong>hi</strong>：处理硬件中断的占用CPU百分比<br><strong>si</strong>：处理软中断占用CPU百分比<br><strong>st</strong>：虚拟机占用CPU百分比</p>\n          </div>\n\n<h4 id=\"4-物理内存信息\"><a href=\"#4-物理内存信息\" class=\"headerlink\" title=\"4. 物理内存信息\"></a>4. 物理内存信息</h4><div class=\"note note-warning\">\n            <p>以下内存单位均为MB</p><p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p><p><strong>total</strong>：物理内存总量<br><strong>free</strong>：空闲内存总量<br><strong>used</strong>：使用中内存总量<br><strong>buff&#x2F;cache</strong>：用于内核缓存的内存量</p>\n          </div>\n\n<h4 id=\"5-交互区内存信息\"><a href=\"#5-交互区内存信息\" class=\"headerlink\" title=\"5. 交互区内存信息\"></a>5. 交互区内存信息</h4><p>swap 分区通常被称为交换分区，这是一块特殊的硬盘空间，即当实际内存不够用的时候，操作系统会从内存中取出一部分暂时不用的数据，放在交换分区中，从而为当前运行的程序腾出足够的内存空间。</p>\n<div class=\"note note-warning\">\n            <p><strong>total</strong>：交换区总量<br><strong>free</strong>：空闲交换区总量<br><strong>used</strong>：使用的交换区总量<br><strong>avail Mem</strong>：可用交换区总量</p>\n          </div>\n\n\n<h3 id=\"进程列表\"><a href=\"#进程列表\" class=\"headerlink\" title=\"进程列表\"></a>进程列表</h3><p><img src=\"top-02.png\" alt=\"进程列表\"></p>\n<div class=\"note note-warning\">\n            <p><strong>PID</strong>：进程号<br><strong>USER</strong>：运行进程的用户<br><strong>PR</strong>：优先级<br><strong>NI</strong>：nice值。负值表示高优先级，正值表示低优先级<br><strong>VIRT</strong>：占用虚拟内存，单位kb。VIRT&#x3D;SWAP+RES<br><strong>RES</strong>：占用真实内存，单位kb<br><strong>SHR</strong>：共享内存大小，单位kb<br><strong>S</strong>：进程状态（I&#x3D;空闲状态，R&#x3D;运行状态，S&#x3D;睡眠状态，D&#x3D;不可中断的睡眠状态，T&#x3D;跟踪&#x2F;停止，Z&#x3D;僵尸进程）<br><strong>%CPU</strong>：占用CPU百分比<br><strong>%MEM</strong>：占用内存百分比<br>**TIME+**：上次启动后至今的总运行时间<br><strong>COMMAND</strong>：命令名or命令行</p>\n          </div>\n\n<h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h4 id=\"更换内存单位\"><a href=\"#更换内存单位\" class=\"headerlink\" title=\"更换内存单位\"></a>更换内存单位</h4><div class=\"note note-warning\">\n            <p>在 top 命令界面上，可以按下 e 键来进入设置界面，然后按下 E 键来切换内存单位为 GB。你可以在 top 的设置界面中选择其他显示选项，按需进行更改。</p><p>在设置界面中，你也可以使用 W 命令将当前的设置保存为个人配置文件，以便下次启动 top 时自动应用这些设置。</p>\n          </div>\n\n<h2 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h2><h3 id=\"du\"><a href=\"#du\" class=\"headerlink\" title=\"du\"></a>du</h3><div class=\"note note-warning\">\n            <p>直接输入 du 没有加任何选项时，则 du 会分析当前所在目录里的子目录所占用的硬盘空间。</p>\n          </div>\n\n<p>选项与参数：</p>\n<p>-a ：列出所有的文件与目录容量，因为默认仅统计目录底下的文件量而已。<br>-h ：以人们较易读的容量格式 (G&#x2F;M) 显示；<br>-s ：列出总占用量；<br>-S ：不包括子目录下的总计，与 -s 有点差别。<br>-k ：以 KBytes 列出容量显示；<br>-m ：以 MBytes 列出容量显示；</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 查看指定目录</span><br><span class=\"hljs-built_in\">du</span> -sh .<br>3.8G\t.<br><span class=\"hljs-comment\"># ====================================</span><br><br><span class=\"hljs-comment\"># 查看指定目录下的所有文件大小，深度为1</span><br><span class=\"hljs-built_in\">du</span> -h <span class=\"hljs-variable\">$DIR</span> --max-depth=1 | <span class=\"hljs-built_in\">sort</span> -h<br><br><span class=\"hljs-comment\"># 部分输出</span><br>...<br>388M\t./k3s<br>570M\t./.npm<br>1.4G\t./CAI.bak<br>3.8G\t.<br><br><span class=\"hljs-comment\"># ====================================</span><br><span class=\"hljs-comment\"># 参数解析</span><br><span class=\"hljs-comment\"># --max-depth 深度</span><br><span class=\"hljs-comment\"># sort -h 从小到大排序</span><br><span class=\"hljs-comment\"># sort -rh 从大到小排序</span><br></code></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4><h3 id=\"df\"><a href=\"#df\" class=\"headerlink\" title=\"df\"></a>df</h3><p>显示系统中每个文件系统的磁盘使用情况</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">df</span> -h<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"lsblk\"><a href=\"#lsblk\" class=\"headerlink\" title=\"lsblk\"></a>lsblk</h3><p>显示系统中所有的块设备，包括硬盘和分区。通常，系统盘的挂载点是根目录 &#x2F;，而数据盘则可能挂载在其他目录上，如&#x2F;home、&#x2F;mnt等。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsblk<br></code></pre></td></tr></table></figure>\n\n<p>显示所有在启动时挂载的文件系统，包括系统盘和数据盘的信息。一般情况下，系统盘的挂载信息会在此文件中。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">cat</span> /etc/fstab<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"fdisk\"><a href=\"#fdisk\" class=\"headerlink\" title=\"fdisk\"></a>fdisk</h3><p>列出所有分区信息</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"mount\"><a href=\"#mount\" class=\"headerlink\" title=\"mount\"></a>mount</h3><div class=\"note note-warning\">\n            <p>目的：向linux系统新增一块硬盘，并挂载到指定目录。</p>\n          </div>\n\n<ol>\n<li>进入设备分区</li>\n</ol>\n<p>lsblk 查看对应的磁盘名称，比如为 vdb。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">fdisk /dev/vdb<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>进入交互终端后，使用 n 命令创建新分区。根据提示，选择主分区类型（p）。</p>\n</li>\n<li><p>提供分区号。</p>\n</li>\n<li><p>提供新分区的结束位置。输入 +250G 以指定分区大小为250GB。默认为全部。</p>\n</li>\n<li><p>使用 p 命令确认分区表是否正确。</p>\n</li>\n<li><p>使用 w 命令保存新的分区表。</p>\n</li>\n<li><p>格式化分区</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mkfs.ext4 /dev/vdb1<br>mkfs.ext4 /dev/vdb2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"8\">\n<li>创建两个挂载点。运行以下命令：</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition1<br>sudo <span class=\"hljs-built_in\">mkdir</span> /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"9\">\n<li>挂载分区</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo mount /dev/vdb1 /mnt/partition1<br>sudo mount /dev/vdb2 /mnt/partition2<br></code></pre></td></tr></table></figure>\n\n<ol start=\"10\">\n<li>开机自动挂载</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/fstab<br><br>/dev/vdb1   /mnt/partition1   ext4   defaults   0   0<br>/dev/vdb2   /mnt/partition2   ext4   defaults   0   0<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"命令行快捷键\"><a href=\"#命令行快捷键\" class=\"headerlink\" title=\"命令行快捷键\"></a>命令行快捷键</h2><div class=\"note note-warning\">\n            <p>请注意，某些快捷键可能会因终端和操作系统的不同而有所差异。</p>\n          </div>\n\n<table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + 左右键</td>\n<td>在单词之间跳转</td>\n</tr>\n<tr>\n<td>Ctrl + a</td>\n<td>跳到本行的行首</td>\n</tr>\n<tr>\n<td>Ctrl + e</td>\n<td>跳到页尾</td>\n</tr>\n<tr>\n<td>Ctrl + u</td>\n<td>删除当前光标前面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + k</td>\n<td>删除当前光标后面的文字 （还有剪切功能）</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>进行清屏操作</td>\n</tr>\n<tr>\n<td>Ctrl + y</td>\n<td>粘贴 Ctrl+u 或 Ctrl+k 剪切的内容</td>\n</tr>\n<tr>\n<td>Ctrl + w</td>\n<td>删除光标前面的单词的字符（以空格隔开的字符串）</td>\n</tr>\n<tr>\n<td>Alt + d</td>\n<td>由光标位置开始，往右删除单词，往行尾删</td>\n</tr>\n<tr>\n<td>Ctrl + r</td>\n<td>搜索执行过的命令</td>\n</tr>\n<tr>\n<td>! + 字符</td>\n<td>快速执行最近执行过的命令，其中包含该字符</td>\n</tr>\n<tr>\n<td>history</td>\n<td>显示部分历史命令</td>\n</tr>\n</tbody></table>\n<h1 id=\"2-网络管理\"><a href=\"#2-网络管理\" class=\"headerlink\" title=\"2. 网络管理\"></a>2. 网络管理</h1><h2 id=\"端口查看\"><a href=\"#端口查看\" class=\"headerlink\" title=\"端口查看\"></a>端口查看</h2><h3 id=\"netstat\"><a href=\"#netstat\" class=\"headerlink\" title=\"netstat\"></a>netstat</h3><div class=\"note note-success\">\n            <p>netstat、lsof、nmap可能漏掉某些端口，最直接的就是使用 curl 或者 telnet。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">netstat -nplt<br></code></pre></td></tr></table></figure>\n<p>参数说明:</p>\n<div class=\"note note-warning\">\n            <p>-n 将字母转化为数字</p><p>-p 显示进程相关信息</p><p>-l 列出状态为监听</p><p>-t 只查看tcp协议</p><p>-a 查看全部协议(netstat -an)</p>\n          </div>\n\n<h3 id=\"lsof\"><a href=\"#lsof\" class=\"headerlink\" title=\"lsof\"></a>lsof</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">lsof -i :30001<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">telnet 127.0.0.1 30001<br></code></pre></td></tr></table></figure>\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p><strong>查看默认路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip r<br>ip -6 r<br>route<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看路由表信息</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip rule<br>ip -6 rule <br>ip rule list<br></code></pre></td></tr></table></figure>\n\n<p><strong>查看走哪条路由</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ip route get 8.8.8.8<br></code></pre></td></tr></table></figure>\n\n<p><strong>路由追踪</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">traceroute 8.8.8.8<br></code></pre></td></tr></table></figure>\n<h2 id=\"网速测试\"><a href=\"#网速测试\" class=\"headerlink\" title=\"网速测试\"></a>网速测试</h2><p><strong>安装</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo yum - y install speedtest-cli<br><br>sudo apt install speedtest-cli<br><br>sudo pip3 install speedtest-cli<br></code></pre></td></tr></table></figure>\n\n<p><strong>执行 speedtest-cli</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ speedtest-cli<br>Retrieving speedtest.net configuration...<br>Testing from Unknown (165.154.145.190)...<br>Retrieving speedtest.net server list...<br>Selecting best server based on ping...<br>Hosted by Enzu.com (Los Angeles, CA) [11654.37 km]: 3.173 ms<br>Testing download speed................................................................................<br>Download: 56.57 Mbit/s<br>Testing upload speed......................................................................................................<br>Upload: 34.54 Mbit/s<br></code></pre></td></tr></table></figure>\n<div class=\"note note-warning\">\n            <ul><li>MB：字节</li><li>Mbit：比特</li></ul><p>1 字节 &#x3D; 8 bit，所以 1MB&#x2F;s &#x3D; 8Mbit&#x2F;s。</p><p>下载网速为 1MB&#x2F;s ，这里指的是网速每秒可以下载1M。</p>\n          </div>\n\n<h2 id=\"快速开启http服务\"><a href=\"#快速开启http服务\" class=\"headerlink\" title=\"快速开启http服务\"></a>快速开启http服务</h2><p>这将监听本地 80 端口，响应 OK</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">echo</span> -e <span class=\"hljs-string\">&#x27;HTTP/1.1 200 OK\\r\\n\\r\\nOK&#x27;</span> | sudo socat - TCP-LISTEN:80<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-进程管理\"><a href=\"#3-进程管理\" class=\"headerlink\" title=\"3. 进程管理\"></a>3. 进程管理</h1><h1 id=\"4-系统管理\"><a href=\"#4-系统管理\" class=\"headerlink\" title=\"4. 系统管理\"></a>4. 系统管理</h1><h2 id=\"cronjob-定时任务\"><a href=\"#cronjob-定时任务\" class=\"headerlink\" title=\"cronjob 定时任务\"></a>cronjob 定时任务</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># crontab -e 命令以编辑当前用户的cron表。</span><br>crontab -e<br><br><span class=\"hljs-comment\"># 每分钟执行一次 ls</span><br>*/1 * * * * <span class=\"hljs-built_in\">ls</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>查看日志</strong></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">tail</span> -f /var/spool/mail/root<br></code></pre></td></tr></table></figure>\n<h1 id=\"5-安全性\"><a href=\"#5-安全性\" class=\"headerlink\" title=\"5. 安全性\"></a>5. 安全性</h1><h2 id=\"更换密码\"><a href=\"#更换密码\" class=\"headerlink\" title=\"更换密码\"></a>更换密码</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">passwd<br></code></pre></td></tr></table></figure>"},{"layout":"玩客云入门","title":"玩客云入门","date":"2023-08-19T03:56:45.000Z","updated":"2023-08-20T03:52:18.774Z","_content":"\n{% note primary%}\n\n无需短接，直刷。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 刷机\n\n网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。\n\n[玩客云刷机包]()\n\n\n## 2 更改apt源为国内\n\n{% note warning%}\nArmbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。\n国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。\n{% endnote %}\n\n首先：\n\n```sh\nsudo apt install apt-transport-https ca-certificates\n```\n\nArmbian 更改源的时候需要改两个地方：\n\n```sh\nvim /etc/apt/sources.list\n```\n\n将里面内容全部注释掉，添加：\n\n```sh\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n```\n\n然后还有一个地方需要更改，是Armbian自身的内容更新源\n\n```sh\nvim /etc/apt/sources.list.d/armbian.list\n```\n\n注释掉原来内容，添加：\n\n```sh\n# “buster”根据版本更改\ndeb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop\n```\n\n之后就可以愉快的\n\n```sh\n$ sudo apt update\n$ sudo apt upgrade\nor\n$ sudo apt dist-upgrade\n```\n\n## 3. 安装最新版docker\n\n```sh\nwget -qO- https://get.docker.com/ | sh\n```\n\n## 4. 固定IP\n\n1. 修改 /etc/network/interfaces\n\n```sh\nsource /etc/network/interfaces.d/*\n\nallow-hotplug eth0\nno-auto-down eth0\niface eth0 inet static\nhwaddress ether 1e:d8:3d:b7:45:54\npre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54\naddress 192.168.31.131\nnetmask 255.255.255.0\ngateway 192.168.31.1\ndns-nameservers 192.168.31.1\npre-up /sbin/ifconfig eth0 mtu 3838\n```\n\n2. 修改 /etc/network/interfaces.default 内容和 /etc/network/interfaces 一致\n\n3. 重启网络\n\n```sh\nreboot\n```\n\n## 5. 挂载磁盘\n\n```sh\nmount /dev/sda1 /data\n```","source":"_posts/linux/玩客云入门.md","raw":"---\nlayout: 玩客云入门\ntitle: 玩客云入门\ncategory: linux\ndate: 2023-08-19 11:56:45\nupdated:\ntags: [玩客云,armbian]\n---\n\n{% note primary%}\n\n无需短接，直刷。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 刷机\n\n网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。\n\n[玩客云刷机包]()\n\n\n## 2 更改apt源为国内\n\n{% note warning%}\nArmbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。\n国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。\n{% endnote %}\n\n首先：\n\n```sh\nsudo apt install apt-transport-https ca-certificates\n```\n\nArmbian 更改源的时候需要改两个地方：\n\n```sh\nvim /etc/apt/sources.list\n```\n\n将里面内容全部注释掉，添加：\n\n```sh\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free\ndeb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n# deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free\n```\n\n然后还有一个地方需要更改，是Armbian自身的内容更新源\n\n```sh\nvim /etc/apt/sources.list.d/armbian.list\n```\n\n注释掉原来内容，添加：\n\n```sh\n# “buster”根据版本更改\ndeb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop\n```\n\n之后就可以愉快的\n\n```sh\n$ sudo apt update\n$ sudo apt upgrade\nor\n$ sudo apt dist-upgrade\n```\n\n## 3. 安装最新版docker\n\n```sh\nwget -qO- https://get.docker.com/ | sh\n```\n\n## 4. 固定IP\n\n1. 修改 /etc/network/interfaces\n\n```sh\nsource /etc/network/interfaces.d/*\n\nallow-hotplug eth0\nno-auto-down eth0\niface eth0 inet static\nhwaddress ether 1e:d8:3d:b7:45:54\npre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54\naddress 192.168.31.131\nnetmask 255.255.255.0\ngateway 192.168.31.1\ndns-nameservers 192.168.31.1\npre-up /sbin/ifconfig eth0 mtu 3838\n```\n\n2. 修改 /etc/network/interfaces.default 内容和 /etc/network/interfaces 一致\n\n3. 重启网络\n\n```sh\nreboot\n```\n\n## 5. 挂载磁盘\n\n```sh\nmount /dev/sda1 /data\n```","slug":"linux/玩客云入门","published":1,"_id":"cllhonhy80000a94w8xahahk6","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>无需短接，直刷。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-刷机\"><a href=\"#1-刷机\" class=\"headerlink\" title=\"1. 刷机\"></a>1. 刷机</h2><p>网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。</p>\n<p><a href>玩客云刷机包</a></p>\n<h2 id=\"2-更改apt源为国内\"><a href=\"#2-更改apt源为国内\" class=\"headerlink\" title=\"2 更改apt源为国内\"></a>2 更改apt源为国内</h2><div class=\"note note-warning\">\n            <p>Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。<br>国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。</p>\n          </div>\n\n<p>首先：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt install apt-transport-https ca-certificates<br></code></pre></td></tr></table></figure>\n\n<p>Armbian 更改源的时候需要改两个地方：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure>\n\n<p>将里面内容全部注释掉，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></code></pre></td></tr></table></figure>\n\n<p>然后还有一个地方需要更改，是Armbian自身的内容更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list.d/armbian.list<br></code></pre></td></tr></table></figure>\n\n<p>注释掉原来内容，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># “buster”根据版本更改</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop<br></code></pre></td></tr></table></figure>\n\n<p>之后就可以愉快的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ sudo apt update<br>$ sudo apt upgrade<br>or<br>$ sudo apt dist-upgrade<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装最新版docker\"><a href=\"#3-安装最新版docker\" class=\"headerlink\" title=\"3. 安装最新版docker\"></a>3. 安装最新版docker</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget -qO- https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-固定IP\"><a href=\"#4-固定IP\" class=\"headerlink\" title=\"4. 固定IP\"></a>4. 固定IP</h2><ol>\n<li>修改 &#x2F;etc&#x2F;network&#x2F;interfaces</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> /etc/network/interfaces.d/*<br><br>allow-hotplug eth0<br>no-auto-down eth0<br>iface eth0 inet static<br>hwaddress ether 1e:d8:3d:b7:45:54<br>pre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54<br>address 192.168.31.131<br>netmask 255.255.255.0<br>gateway 192.168.31.1<br>dns-nameservers 192.168.31.1<br>pre-up /sbin/ifconfig eth0 mtu 3838<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>修改 &#x2F;etc&#x2F;network&#x2F;interfaces.default 内容和 &#x2F;etc&#x2F;network&#x2F;interfaces 一致</p>\n</li>\n<li><p>重启网络</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">reboot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-挂载磁盘\"><a href=\"#5-挂载磁盘\" class=\"headerlink\" title=\"5. 挂载磁盘\"></a>5. 挂载磁盘</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mount /dev/sda1 /data<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>无需短接，直刷。</p>\n          </div>","more":"<h2 id=\"1-刷机\"><a href=\"#1-刷机\" class=\"headerlink\" title=\"1. 刷机\"></a>1. 刷机</h2><p>网上看了很多刷机教程全都是需要短接电路板。阴差阳错找到了一个直刷包。</p>\n<p><a href>玩客云刷机包</a></p>\n<h2 id=\"2-更改apt源为国内\"><a href=\"#2-更改apt源为国内\" class=\"headerlink\" title=\"2 更改apt源为国内\"></a>2 更改apt源为国内</h2><div class=\"note note-warning\">\n            <p>Armbian 默认软件源为 Debian 官方的，使用起来速度比较慢，可以更改为国内源加快更新及安装速度。<br>国内Linux源有很多，通常使用 清华大学 的，有详细的使用文档，还有各种系统的国内下载镜像，很方便。</p>\n          </div>\n\n<p>首先：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo apt install apt-transport-https ca-certificates<br></code></pre></td></tr></table></figure>\n\n<p>Armbian 更改源的时候需要改两个地方：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list<br></code></pre></td></tr></table></figure>\n\n<p>将里面内容全部注释掉，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释，“buster”根据版本更改。</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-updates main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ buster-backports main contrib non-free</span><br>deb https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free<br><span class=\"hljs-comment\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security buster/updates main contrib non-free</span><br></code></pre></td></tr></table></figure>\n\n<p>然后还有一个地方需要更改，是Armbian自身的内容更新源</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim /etc/apt/sources.list.d/armbian.list<br></code></pre></td></tr></table></figure>\n\n<p>注释掉原来内容，添加：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># “buster”根据版本更改</span><br>deb http://mirrors.tuna.tsinghua.edu.cn/armbian/ buster main buster-utils buster-desktop<br></code></pre></td></tr></table></figure>\n\n<p>之后就可以愉快的</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">$ sudo apt update<br>$ sudo apt upgrade<br>or<br>$ sudo apt dist-upgrade<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-安装最新版docker\"><a href=\"#3-安装最新版docker\" class=\"headerlink\" title=\"3. 安装最新版docker\"></a>3. 安装最新版docker</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">wget -qO- https://get.docker.com/ | sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-固定IP\"><a href=\"#4-固定IP\" class=\"headerlink\" title=\"4. 固定IP\"></a>4. 固定IP</h2><ol>\n<li>修改 &#x2F;etc&#x2F;network&#x2F;interfaces</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">source</span> /etc/network/interfaces.d/*<br><br>allow-hotplug eth0<br>no-auto-down eth0<br>iface eth0 inet static<br>hwaddress ether 1e:d8:3d:b7:45:54<br>pre-up ifconfig eth0 hw ether 1e:d8:3d:b7:45:54<br>address 192.168.31.131<br>netmask 255.255.255.0<br>gateway 192.168.31.1<br>dns-nameservers 192.168.31.1<br>pre-up /sbin/ifconfig eth0 mtu 3838<br></code></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>修改 &#x2F;etc&#x2F;network&#x2F;interfaces.default 内容和 &#x2F;etc&#x2F;network&#x2F;interfaces 一致</p>\n</li>\n<li><p>重启网络</p>\n</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">reboot<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-挂载磁盘\"><a href=\"#5-挂载磁盘\" class=\"headerlink\" title=\"5. 挂载磁盘\"></a>5. 挂载磁盘</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">mount /dev/sda1 /data<br></code></pre></td></tr></table></figure>"},{"layout":"frp 内网穿透","title":"frp 内网穿透","date":"2023-08-19T07:20:37.000Z","updated":"2023-08-20T03:53:07.749Z","_content":"\n{% note primary%}\n\n公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 服务端\n\n/etc/systemd/system/frps.service\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/frp/.frp/frps.ini\n```sh\n[common]\nbind_port = 7000\ndashboard_port = 7500\ntoken = abcdefg\ndashboard_user = xx\ndashboard_pwd = xx\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n\n## 2. 客户端\n\n\n/etc/systemd/system/frpc.service\n\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frpc的安装路径\nExecStart = /root/frp/frpc -c /root/frp/frpc.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/root/frp/frpc.ini\n\n```sh\n[common]\nserver_addr = 100.100.100.100\nserver_port = 7000\ntoken = abcdefg\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n\n[alist]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5244\nremote_port = 55244\n```","source":"_posts/linux/frp-内网穿透.md","raw":"---\nlayout: frp 内网穿透\ntitle: frp 内网穿透\ncategory: linux\ndate: 2023-08-19 15:20:37\nupdated:\ntags: [frp,nas]\n---\n\n{% note primary%}\n\n公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. 服务端\n\n/etc/systemd/system/frps.service\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp server\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frps的安装路径\nExecStart = /root/frp/frps -c /root/frp/frps.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/frp/.frp/frps.ini\n```sh\n[common]\nbind_port = 7000\ndashboard_port = 7500\ntoken = abcdefg\ndashboard_user = xx\ndashboard_pwd = xx\nvhost_http_port = 10080\nvhost_https_port = 10443\n```\n\n## 2. 客户端\n\n\n/etc/systemd/system/frpc.service\n\n```sh\n[Unit]\n# 服务名称，可自定义\nDescription = frp client\nAfter = network.target syslog.target\nWants = network.target\n\n[Service]\nType = simple\n# 启动frps的命令，需修改为您的frpc的安装路径\nExecStart = /root/frp/frpc -c /root/frp/frpc.ini\n\n[Install]\nWantedBy = multi-user.target\n```\n\n/root/frp/frpc.ini\n\n```sh\n[common]\nserver_addr = 100.100.100.100\nserver_port = 7000\ntoken = abcdefg\n\n[ssh]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 22\nremote_port = 6000\n\n[alist]\ntype = tcp\nlocal_ip = 127.0.0.1\nlocal_port = 5244\nremote_port = 55244\n```","slug":"linux/frp-内网穿透","published":1,"_id":"cllhp4oa10000sh4wei0c4jwf","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-服务端\"><a href=\"#1-服务端\" class=\"headerlink\" title=\"1. 服务端\"></a>1. 服务端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frps.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp server<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frps的安装路径</span><br>ExecStart = /root/frp/frps -c /root/frp/frps.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;frp&#x2F;.frp&#x2F;frps.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = abcdefg<br>dashboard_user = xx<br>dashboard_pwd = xx<br>vhost_http_port = 10080<br>vhost_https_port = 10443<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-客户端\"><a href=\"#2-客户端\" class=\"headerlink\" title=\"2. 客户端\"></a>2. 客户端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frpc.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp client<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frpc的安装路径</span><br>ExecStart = /root/frp/frpc -c /root/frp/frpc.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;root&#x2F;frp&#x2F;frpc.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>server_addr = 100.100.100.100<br>server_port = 7000<br>token = abcdefg<br><br>[ssh]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000<br><br>[alist]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 5244<br>remote_port = 55244<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>公网服务器上安装 frp 服务端，内网服务器安装 frp 客户端。</p>\n          </div>","more":"<h2 id=\"1-服务端\"><a href=\"#1-服务端\" class=\"headerlink\" title=\"1. 服务端\"></a>1. 服务端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frps.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp server<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frps的安装路径</span><br>ExecStart = /root/frp/frps -c /root/frp/frps.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;frp&#x2F;.frp&#x2F;frps.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>bind_port = 7000<br>dashboard_port = 7500<br>token = abcdefg<br>dashboard_user = xx<br>dashboard_pwd = xx<br>vhost_http_port = 10080<br>vhost_https_port = 10443<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-客户端\"><a href=\"#2-客户端\" class=\"headerlink\" title=\"2. 客户端\"></a>2. 客户端</h2><p>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;frpc.service</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[Unit]<br><span class=\"hljs-comment\"># 服务名称，可自定义</span><br>Description = frp client<br>After = network.target syslog.target<br>Wants = network.target<br><br>[Service]<br>Type = simple<br><span class=\"hljs-comment\"># 启动frps的命令，需修改为您的frpc的安装路径</span><br>ExecStart = /root/frp/frpc -c /root/frp/frpc.ini<br><br>[Install]<br>WantedBy = multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>&#x2F;root&#x2F;frp&#x2F;frpc.ini</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">[common]<br>server_addr = 100.100.100.100<br>server_port = 7000<br>token = abcdefg<br><br>[ssh]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 22<br>remote_port = 6000<br><br>[alist]<br><span class=\"hljs-built_in\">type</span> = tcp<br>local_ip = 127.0.0.1<br>local_port = 5244<br>remote_port = 55244<br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"nas整理","date":"2023-08-08T08:29:04.000Z","_content":"\n{% note primary%}\n\n目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx\n\n{% endnote %}\n\n<!-- more -->\n\n## 重命名\n```sh\n#!/bin/bash\n\ndir=$1  # 指定目录路径\n\n# 进入目录\ncd \"$dir\" || exit\n\n# 替换文件名中的abcd1至abcd9为abcd01至abcd09\nfor file in *S01E[1-9].*; do\n  new_file=$(echo \"$file\" | sed 's/S01E\\([1-9]\\)/S01E0\\1/')\n  echo $new_file\n  mv \"$file\" \"$new_file\"\ndone\n```\n\n## 备份\n\n### alist脚本\n\n```sh\n#!/bin/bash\n\n# demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 <alist-token>\n\n# 判断参数个数是否为7个\nif [ $# -ne 7 ]; then\n  echo \"Error: Expected 7 arguments.\"\n  echo \"Usage: $0 <filename> <src> <dst> <alist_host> <alist_token>\"\n  exit 1\nfi\n\nFILE_PATH=$1\nFILE_NAME_TAR_GZ=$2\n# 使用awk命令分割字符串并输出最后一个部分\nFILE_NAME=$(echo $FILE_PATH | awk -F'/' '{print $NF}')\nALIST_SRC=$3\nALIST_DST=$4\nALIST_HOST=$5\nALIST_DATA_DIR=$6\nALIST_TOKEN=$7\n\nif [ ! -e $FILE_PATH ]; then\n    echo \"文件不存在\"\n    exit 1\nfi\n\n# 以下是你希望执行的操作，当参数个数为三个时执行\necho \"文件名: $FILE_NAME\"\necho \"打包文件名: $FILE_NAME_TAR_GZ\"\necho \"Alist src: $ALIST_SRC\"\necho \"Alist dst: $ALIST_DST\"\necho \"Alist Host: $ALIST_HOST\"\necho \"Alist Data dir: $ALIST_DATA_DIR\"\necho \"Alist Token: $ALIST_TOKEN\"\n\n# TIME=$(date +\"%Y-%m-%d-%H%M\")\n# echo 当前时间: $TIME\n# FILE_NAME_TAR_GZ=\"${TIME}-${FILE_NAME}.tar.gz\"\n\necho 备份文件名: $FILE_NAME_TAR_GZ\n\necho \"undone\" > /root/tar_status.txt\n\n# tar -czf $/{ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\ntar -cjf ${ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\n\ncurl \"$ALIST_HOST/api/fs/copy\" \\\n  -H 'Accept: application/json, text/plain, */*' \\\n  -H \"Authorization: $ALIST_TOKEN\" \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/json;charset=UTF-8' \\\n  -H \"Origin: $ALIST_HOST\" \\\n  -H \"Referer: $ALIST_HOST/local/data\" \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-origin' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' \\\n  -H 'sec-ch-ua: \"Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"115\", \"Chromium\";v=\"115\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  --data-raw '{\"src_dir\":\"'\"$ALIST_SRC\"'\",\"dst_dir\":\"'\"$ALIST_DST\"'\",\"names\":[\"'\"$FILE_NAME_TAR_GZ\"'\"]}' \\\n  --compressed\n\nsleep 10\necho \"done\" > /root/tar_status.txt\n```\n\n### 压缩\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/robfig/cron\"\n\t\"gopkg.in/yaml.v2\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype Config struct {\n\tAlist struct {\n\t\tHost    string `yaml:\"host\"`\n\t\tDataDir string `yaml:\"data_dir\"`\n\t\tToken   string `yaml:\"token\"`\n\t} `yaml:\"alist\"`\n\n\tCronTime         string `yaml:\"cron_time\"`\n\tTarShellFilePath string `yaml:\"tar_shell_filepath\"`\n\n\tClouds []struct {\n\t\tName      string   `yaml:\"name\"`\n\t\tBackup    bool     `yaml:\"backup\"`\n\t\tAlistSrc  string   `yaml:\"alist_src\"`\n\t\tAlistDst  string   `yaml:\"alist_dst\"`\n\t\tFilePaths []string `yaml:\"filepaths\"`\n\t} `yaml:\"clouds\"`\n}\n\ntype RequestAlistUndone struct {\n\tCode    int    `json:\"code\"`\n\tMessage string `json:\"message\"`\n\tData    []struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"data\"`\n}\n\nfunc main() {\n\tc := initConfig()\n\n\tklog.Info(\"checking... \")\n\tc.Check()\n\n\tvar tarfilepath []string\n\ttarfilename := make(map[string]string)\n\n\tbackup := func() {\n\t\tklog.Info(\"start backuping... \")\n\t\tfor _, cloud := range c.Clouds {\n\t\t\tif !cloud.Backup {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, filepath := range cloud.FilePaths {\n\t\t\t\tstartTime := time.Now()\n\t\t\t\tvar tarfile string\n\t\t\t\tif tarfilename[filepath] == \"\" {\n\t\t\t\t\ttarfile = getTarfile(filepath)\n\t\t\t\t} else {\n\t\t\t\t\ttarfile = tarfilename[filepath]\n\t\t\t\t}\n\n\t\t\t\tklog.Infof(\"tarfile is %v\", tarfile)\n\t\t\t\tif err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != nil {\n\t\t\t\t\tklog.Errorf(\"[%v]: backup %v failed, %v\", cloud.Name, tarfile, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// wait alist task done\n\t\t\t\tfor {\n\t\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\t\tif c.TaskDone() && c.TarDone() {\n\t\t\t\t\t\tklog.Infof(\"[%v]: backup %v success %v\\n\", cloud.Name, tarfile, time.Since(startTime))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttarfilepath = append(tarfilepath, path.Join(c.Alist.DataDir, tarfile))\n\t\t\t\ttarfilename[filepath] = tarfile\n\t\t\t}\n\t\t}\n\t\tfmt.Printf(\"\\n\")\n\t}\n\n\tremove := func() {\n\t\tfor _, tarfile := range tarfilepath {\n\t\t\tif err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != nil {\n\t\t\t\tklog.Warningf(\"delete %v failed\", tarfile)\n\t\t\t}\n\t\t}\n\t\t// reset\n\t\ttarfilepath = []string{}\n\t\ttarfilename = make(map[string]string)\n\t}\n\n\tcronjob := cron.New()\n\n\tcronjob.AddFunc(c.CronTime, func() {\n\t\tif c.TaskDone() {\n\t\t\tbackup()\n\t\t\tremove()\n\t\t}\n\t})\n\n\tcronjob.Start()\n\n\tstopCh := make(chan struct{})\n\t<-stopCh\n}\n\nfunc run(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken string) error {\n\tklog.Info([]string{\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken})\n\n\tcmd := exec.Command(\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)\n\t_, err := cmd.Output()\n\treturn err\n}\n\nfunc (c *Config) Check() {\n\tif c.Alist.Host == \"\" {\n\t\tpanic(\"empty alist host\")\n\t}\n\n\tif c.Alist.DataDir == \"\" {\n\t\tpanic(\"empty alist data dir\")\n\t}\n\n\tif c.Alist.Token == \"\" {\n\t\tpanic(\"empty alist token\")\n\t}\n\tif c.CronTime == \"\" {\n\t\tpanic(\"empty cron time\")\n\t}\n\n\tfor _, cloud := range c.Clouds {\n\t\tif !cloud.Backup {\n\t\t\tcontinue\n\t\t}\n\t\tif cloud.AlistSrc == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v src\", cloud.Name))\n\t\t}\n\t\tif cloud.AlistDst == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v dst\", cloud.Name))\n\t\t}\n\n\t\tfor _, v := range cloud.FilePaths {\n\t\t\t_, err := os.Stat(v)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tpanic(fmt.Sprintf(\"%v %v file not exist\", cloud.Name, v))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc initConfig() *Config {\n\tyamlFile, err := os.ReadFile(\"./config.yaml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconfig := Config{}\n\tif err := yaml.Unmarshal(yamlFile, &config); err != nil {\n\t\tpanic(err)\n\t}\n\treturn &config\n}\n\nfunc (c *Config) TarDone() bool {\n\tb, err := os.ReadFile(\"/root/tar_status.txt\")\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn string(b) == \"done\"\n}\n\nfunc (c *Config) TaskDone() bool {\n\treq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%v/api/admin/task/copy/undone\", c.Alist.Host), nil)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treq.Header.Set(\"Authorization\", c.Alist.Token)\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\n\tresponse := RequestAlistUndone{}\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn response.Code == 200 && len(response.Data) == 0\n}\n\nfunc getTarfile(filepath string) string {\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tt := time.Now().Local().Format(\"2006-01-02_1504\")\n\tfilename := strings.Split(filepath, \"/\")[len(strings.Split(filepath, \"/\"))-1]\n\t// return fmt.Sprintf(\"%v-%v.tar.gz\", t, filename)\n\treturn fmt.Sprintf(\"%v-%v.tar.bz2\", t, filename)\n}\n```\n\n### 配置\n\n```yaml\nalist:\n  data_dir: \"/alist-data\"\n  host: \"http://192.xxx.187.61:5244\"\n  token: \"alist-e5630ef4-5fa2-4264-a256-323900236728\"\n\ncron_time: \"0 40 18 * *\"\ntar_shell_filepath: \"/root/tar.sh\"\n\nclouds:\n  - name: 阿里云盘\n    backup: false\n    alist_src: \"/本地/opt/alist/data\" # 本地local盘\n    alist_dst: \"/阿里云盘/数据冷备\"     # 本地阿里盘\n    filepaths:                       # 备份哪些文件\n    - \"/Users/Desktop/github/blog\"\n    - \"/Desktop/github/k3s\"\n  - name: 百度网盘\n    backup: true\n    alist_src: \"/本地/opt/alist/data\"\n    alist_dst: \"/百度网盘/数据冷备\"\n    filepaths:\n    - \"/data/歌曲\"\n```","source":"_posts/linux/nas整理.md","raw":"---\nlayout: linux\ntitle: nas整理\ndate: 2023-08-08 16:29:04\ntags: [shell,nas,alist]\ncategories: linux\n---\n\n{% note primary%}\n\n目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx\n\n{% endnote %}\n\n<!-- more -->\n\n## 重命名\n```sh\n#!/bin/bash\n\ndir=$1  # 指定目录路径\n\n# 进入目录\ncd \"$dir\" || exit\n\n# 替换文件名中的abcd1至abcd9为abcd01至abcd09\nfor file in *S01E[1-9].*; do\n  new_file=$(echo \"$file\" | sed 's/S01E\\([1-9]\\)/S01E0\\1/')\n  echo $new_file\n  mv \"$file\" \"$new_file\"\ndone\n```\n\n## 备份\n\n### alist脚本\n\n```sh\n#!/bin/bash\n\n# demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 <alist-token>\n\n# 判断参数个数是否为7个\nif [ $# -ne 7 ]; then\n  echo \"Error: Expected 7 arguments.\"\n  echo \"Usage: $0 <filename> <src> <dst> <alist_host> <alist_token>\"\n  exit 1\nfi\n\nFILE_PATH=$1\nFILE_NAME_TAR_GZ=$2\n# 使用awk命令分割字符串并输出最后一个部分\nFILE_NAME=$(echo $FILE_PATH | awk -F'/' '{print $NF}')\nALIST_SRC=$3\nALIST_DST=$4\nALIST_HOST=$5\nALIST_DATA_DIR=$6\nALIST_TOKEN=$7\n\nif [ ! -e $FILE_PATH ]; then\n    echo \"文件不存在\"\n    exit 1\nfi\n\n# 以下是你希望执行的操作，当参数个数为三个时执行\necho \"文件名: $FILE_NAME\"\necho \"打包文件名: $FILE_NAME_TAR_GZ\"\necho \"Alist src: $ALIST_SRC\"\necho \"Alist dst: $ALIST_DST\"\necho \"Alist Host: $ALIST_HOST\"\necho \"Alist Data dir: $ALIST_DATA_DIR\"\necho \"Alist Token: $ALIST_TOKEN\"\n\n# TIME=$(date +\"%Y-%m-%d-%H%M\")\n# echo 当前时间: $TIME\n# FILE_NAME_TAR_GZ=\"${TIME}-${FILE_NAME}.tar.gz\"\n\necho 备份文件名: $FILE_NAME_TAR_GZ\n\necho \"undone\" > /root/tar_status.txt\n\n# tar -czf $/{ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\ntar -cjf ${ALIST_DATA_DIR}/${FILE_NAME_TAR_GZ} $FILE_PATH\n\ncurl \"$ALIST_HOST/api/fs/copy\" \\\n  -H 'Accept: application/json, text/plain, */*' \\\n  -H \"Authorization: $ALIST_TOKEN\" \\\n  -H 'Connection: keep-alive' \\\n  -H 'Content-Type: application/json;charset=UTF-8' \\\n  -H \"Origin: $ALIST_HOST\" \\\n  -H \"Referer: $ALIST_HOST/local/data\" \\\n  -H 'Sec-Fetch-Dest: empty' \\\n  -H 'Sec-Fetch-Mode: cors' \\\n  -H 'Sec-Fetch-Site: same-origin' \\\n  -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36' \\\n  -H 'sec-ch-ua: \"Not/A)Brand\";v=\"99\", \"Google Chrome\";v=\"115\", \"Chromium\";v=\"115\"' \\\n  -H 'sec-ch-ua-mobile: ?0' \\\n  -H 'sec-ch-ua-platform: \"macOS\"' \\\n  --data-raw '{\"src_dir\":\"'\"$ALIST_SRC\"'\",\"dst_dir\":\"'\"$ALIST_DST\"'\",\"names\":[\"'\"$FILE_NAME_TAR_GZ\"'\"]}' \\\n  --compressed\n\nsleep 10\necho \"done\" > /root/tar_status.txt\n```\n\n### 压缩\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/exec\"\n\t\"path\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/robfig/cron\"\n\t\"gopkg.in/yaml.v2\"\n\t\"k8s.io/klog/v2\"\n)\n\ntype Config struct {\n\tAlist struct {\n\t\tHost    string `yaml:\"host\"`\n\t\tDataDir string `yaml:\"data_dir\"`\n\t\tToken   string `yaml:\"token\"`\n\t} `yaml:\"alist\"`\n\n\tCronTime         string `yaml:\"cron_time\"`\n\tTarShellFilePath string `yaml:\"tar_shell_filepath\"`\n\n\tClouds []struct {\n\t\tName      string   `yaml:\"name\"`\n\t\tBackup    bool     `yaml:\"backup\"`\n\t\tAlistSrc  string   `yaml:\"alist_src\"`\n\t\tAlistDst  string   `yaml:\"alist_dst\"`\n\t\tFilePaths []string `yaml:\"filepaths\"`\n\t} `yaml:\"clouds\"`\n}\n\ntype RequestAlistUndone struct {\n\tCode    int    `json:\"code\"`\n\tMessage string `json:\"message\"`\n\tData    []struct {\n\t\tName string `json:\"name\"`\n\t} `json:\"data\"`\n}\n\nfunc main() {\n\tc := initConfig()\n\n\tklog.Info(\"checking... \")\n\tc.Check()\n\n\tvar tarfilepath []string\n\ttarfilename := make(map[string]string)\n\n\tbackup := func() {\n\t\tklog.Info(\"start backuping... \")\n\t\tfor _, cloud := range c.Clouds {\n\t\t\tif !cloud.Backup {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tfor _, filepath := range cloud.FilePaths {\n\t\t\t\tstartTime := time.Now()\n\t\t\t\tvar tarfile string\n\t\t\t\tif tarfilename[filepath] == \"\" {\n\t\t\t\t\ttarfile = getTarfile(filepath)\n\t\t\t\t} else {\n\t\t\t\t\ttarfile = tarfilename[filepath]\n\t\t\t\t}\n\n\t\t\t\tklog.Infof(\"tarfile is %v\", tarfile)\n\t\t\t\tif err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != nil {\n\t\t\t\t\tklog.Errorf(\"[%v]: backup %v failed, %v\", cloud.Name, tarfile, err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\n\t\t\t\t// wait alist task done\n\t\t\t\tfor {\n\t\t\t\t\ttime.Sleep(5 * time.Second)\n\t\t\t\t\tif c.TaskDone() && c.TarDone() {\n\t\t\t\t\t\tklog.Infof(\"[%v]: backup %v success %v\\n\", cloud.Name, tarfile, time.Since(startTime))\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttarfilepath = append(tarfilepath, path.Join(c.Alist.DataDir, tarfile))\n\t\t\t\ttarfilename[filepath] = tarfile\n\t\t\t}\n\t\t}\n\t\tfmt.Printf(\"\\n\")\n\t}\n\n\tremove := func() {\n\t\tfor _, tarfile := range tarfilepath {\n\t\t\tif err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != nil {\n\t\t\t\tklog.Warningf(\"delete %v failed\", tarfile)\n\t\t\t}\n\t\t}\n\t\t// reset\n\t\ttarfilepath = []string{}\n\t\ttarfilename = make(map[string]string)\n\t}\n\n\tcronjob := cron.New()\n\n\tcronjob.AddFunc(c.CronTime, func() {\n\t\tif c.TaskDone() {\n\t\t\tbackup()\n\t\t\tremove()\n\t\t}\n\t})\n\n\tcronjob.Start()\n\n\tstopCh := make(chan struct{})\n\t<-stopCh\n}\n\nfunc run(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken string) error {\n\tklog.Info([]string{\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken})\n\n\tcmd := exec.Command(\"sh\", shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)\n\t_, err := cmd.Output()\n\treturn err\n}\n\nfunc (c *Config) Check() {\n\tif c.Alist.Host == \"\" {\n\t\tpanic(\"empty alist host\")\n\t}\n\n\tif c.Alist.DataDir == \"\" {\n\t\tpanic(\"empty alist data dir\")\n\t}\n\n\tif c.Alist.Token == \"\" {\n\t\tpanic(\"empty alist token\")\n\t}\n\tif c.CronTime == \"\" {\n\t\tpanic(\"empty cron time\")\n\t}\n\n\tfor _, cloud := range c.Clouds {\n\t\tif !cloud.Backup {\n\t\t\tcontinue\n\t\t}\n\t\tif cloud.AlistSrc == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v src\", cloud.Name))\n\t\t}\n\t\tif cloud.AlistDst == \"\" {\n\t\t\tpanic(fmt.Sprintf(\"empty alist %v dst\", cloud.Name))\n\t\t}\n\n\t\tfor _, v := range cloud.FilePaths {\n\t\t\t_, err := os.Stat(v)\n\t\t\tif os.IsNotExist(err) {\n\t\t\t\tpanic(fmt.Sprintf(\"%v %v file not exist\", cloud.Name, v))\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc initConfig() *Config {\n\tyamlFile, err := os.ReadFile(\"./config.yaml\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tconfig := Config{}\n\tif err := yaml.Unmarshal(yamlFile, &config); err != nil {\n\t\tpanic(err)\n\t}\n\treturn &config\n}\n\nfunc (c *Config) TarDone() bool {\n\tb, err := os.ReadFile(\"/root/tar_status.txt\")\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn string(b) == \"done\"\n}\n\nfunc (c *Config) TaskDone() bool {\n\treq, err := http.NewRequest(\"GET\", fmt.Sprintf(\"%v/api/admin/task/copy/undone\", c.Alist.Host), nil)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treq.Header.Set(\"Authorization\", c.Alist.Token)\n\n\tresp, err := http.DefaultClient.Do(req)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\n\tresponse := RequestAlistUndone{}\n\tif err := json.Unmarshal(body, &response); err != nil {\n\t\tklog.Error(err)\n\t\treturn false\n\t}\n\treturn response.Code == 200 && len(response.Data) == 0\n}\n\nfunc getTarfile(filepath string) string {\n\ttimelocal, err := time.LoadLocation(\"Asia/Shanghai\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\ttime.Local = timelocal\n\tt := time.Now().Local().Format(\"2006-01-02_1504\")\n\tfilename := strings.Split(filepath, \"/\")[len(strings.Split(filepath, \"/\"))-1]\n\t// return fmt.Sprintf(\"%v-%v.tar.gz\", t, filename)\n\treturn fmt.Sprintf(\"%v-%v.tar.bz2\", t, filename)\n}\n```\n\n### 配置\n\n```yaml\nalist:\n  data_dir: \"/alist-data\"\n  host: \"http://192.xxx.187.61:5244\"\n  token: \"alist-e5630ef4-5fa2-4264-a256-323900236728\"\n\ncron_time: \"0 40 18 * *\"\ntar_shell_filepath: \"/root/tar.sh\"\n\nclouds:\n  - name: 阿里云盘\n    backup: false\n    alist_src: \"/本地/opt/alist/data\" # 本地local盘\n    alist_dst: \"/阿里云盘/数据冷备\"     # 本地阿里盘\n    filepaths:                       # 备份哪些文件\n    - \"/Users/Desktop/github/blog\"\n    - \"/Desktop/github/k3s\"\n  - name: 百度网盘\n    backup: true\n    alist_src: \"/本地/opt/alist/data\"\n    alist_dst: \"/百度网盘/数据冷备\"\n    filepaths:\n    - \"/data/歌曲\"\n```","slug":"linux/nas整理","published":1,"updated":"2023-08-24T08:58:04.713Z","comments":1,"photos":[],"link":"","_id":"cllp0j61u00001f4w02ok3v24","content":"<div class=\"note note-primary\">\n            <p>目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-built_in\">dir</span>=<span class=\"hljs-variable\">$1</span>  <span class=\"hljs-comment\"># 指定目录路径</span><br><br><span class=\"hljs-comment\"># 进入目录</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dir</span>&quot;</span> || <span class=\"hljs-built_in\">exit</span><br><br><span class=\"hljs-comment\"># 替换文件名中的abcd1至abcd9为abcd01至abcd09</span><br><span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> *S01E[1-9].*; <span class=\"hljs-keyword\">do</span><br>  new_file=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/S01E\\([1-9]\\)/S01E0\\1/&#x27;</span>)<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$new_file</span><br>  <span class=\"hljs-built_in\">mv</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$new_file</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h3 id=\"alist脚本\"><a href=\"#alist脚本\" class=\"headerlink\" title=\"alist脚本\"></a>alist脚本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 &lt;alist-token&gt;</span><br><br><span class=\"hljs-comment\"># 判断参数个数是否为7个</span><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$#</span> -ne 7 ]; <span class=\"hljs-keyword\">then</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Error: Expected 7 arguments.&quot;</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Usage: <span class=\"hljs-variable\">$0</span> &lt;filename&gt; &lt;src&gt; &lt;dst&gt; &lt;alist_host&gt; &lt;alist_token&gt;&quot;</span><br>  <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br>FILE_PATH=<span class=\"hljs-variable\">$1</span><br>FILE_NAME_TAR_GZ=<span class=\"hljs-variable\">$2</span><br><span class=\"hljs-comment\"># 使用awk命令分割字符串并输出最后一个部分</span><br>FILE_NAME=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FILE_PATH</span> | awk -F<span class=\"hljs-string\">&#x27;/&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $NF&#125;&#x27;</span>)<br>ALIST_SRC=<span class=\"hljs-variable\">$3</span><br>ALIST_DST=<span class=\"hljs-variable\">$4</span><br>ALIST_HOST=<span class=\"hljs-variable\">$5</span><br>ALIST_DATA_DIR=<span class=\"hljs-variable\">$6</span><br>ALIST_TOKEN=<span class=\"hljs-variable\">$7</span><br><br><span class=\"hljs-keyword\">if</span> [ ! -e <span class=\"hljs-variable\">$FILE_PATH</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件不存在&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br><span class=\"hljs-comment\"># 以下是你希望执行的操作，当参数个数为三个时执行</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件名: <span class=\"hljs-variable\">$FILE_NAME</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;打包文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist src: <span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist dst: <span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Host: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Data dir: <span class=\"hljs-variable\">$ALIST_DATA_DIR</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Token: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span><br><br><span class=\"hljs-comment\"># TIME=$(date +&quot;%Y-%m-%d-%H%M&quot;)</span><br><span class=\"hljs-comment\"># echo 当前时间: $TIME</span><br><span class=\"hljs-comment\"># FILE_NAME_TAR_GZ=&quot;$&#123;TIME&#125;-$&#123;FILE_NAME&#125;.tar.gz&quot;</span><br><br><span class=\"hljs-built_in\">echo</span> 备份文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span><br><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;undone&quot;</span> &gt; /root/tar_status.txt<br><br><span class=\"hljs-comment\"># tar -czf $/&#123;ALIST_DATA_DIR&#125;/$&#123;FILE_NAME_TAR_GZ&#125; $FILE_PATH</span><br>tar -cjf <span class=\"hljs-variable\">$&#123;ALIST_DATA_DIR&#125;</span>/<span class=\"hljs-variable\">$&#123;FILE_NAME_TAR_GZ&#125;</span> <span class=\"hljs-variable\">$FILE_PATH</span><br><br>curl <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_HOST</span>/api/fs/copy&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Accept: application/json, text/plain, */*&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Authorization: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Connection: keep-alive&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Content-Type: application/json;charset=UTF-8&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Origin: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Referer: <span class=\"hljs-variable\">$ALIST_HOST</span>/local/data&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Dest: empty&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Mode: cors&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Site: same-origin&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua: &quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \\<br>  --data-raw <span class=\"hljs-string\">&#x27;&#123;&quot;src_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dst_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;names&quot;:[&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;]&#125;&#x27;</span> \\<br>  --compressed<br><br><span class=\"hljs-built_in\">sleep</span> 10<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;done&quot;</span> &gt; /root/tar_status.txt<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;encoding/json&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;os/exec&quot;</span><br>\t<span class=\"hljs-string\">&quot;path&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/robfig/cron&quot;</span><br>\t<span class=\"hljs-string\">&quot;gopkg.in/yaml.v2&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/klog/v2&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Config <span class=\"hljs-keyword\">struct</span> &#123;<br>\tAlist <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tHost    <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;host&quot;`</span><br>\t\tDataDir <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;data_dir&quot;`</span><br>\t\tToken   <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;token&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;alist&quot;`</span><br><br>\tCronTime         <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;cron_time&quot;`</span><br>\tTarShellFilePath <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;tar_shell_filepath&quot;`</span><br><br>\tClouds []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName      <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;name&quot;`</span><br>\t\tBackup    <span class=\"hljs-type\">bool</span>     <span class=\"hljs-string\">`yaml:&quot;backup&quot;`</span><br>\t\tAlistSrc  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_src&quot;`</span><br>\t\tAlistDst  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_dst&quot;`</span><br>\t\tFilePaths []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;filepaths&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;clouds&quot;`</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> RequestAlistUndone <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode    <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\tMessage <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;message&quot;`</span><br>\tData    []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`json:&quot;data&quot;`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tc := initConfig()<br><br>\tklog.Info(<span class=\"hljs-string\">&quot;checking... &quot;</span>)<br>\tc.Check()<br><br>\t<span class=\"hljs-keyword\">var</span> tarfilepath []<span class=\"hljs-type\">string</span><br>\ttarfilename := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\tbackup := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tklog.Info(<span class=\"hljs-string\">&quot;start backuping... &quot;</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, filepath := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t\tstartTime := time.Now()<br>\t\t\t\t<span class=\"hljs-keyword\">var</span> tarfile <span class=\"hljs-type\">string</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> tarfilename[filepath] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\t\ttarfile = getTarfile(filepath)<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\ttarfile = tarfilename[filepath]<br>\t\t\t\t&#125;<br><br>\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;tarfile is %v&quot;</span>, tarfile)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tklog.Errorf(<span class=\"hljs-string\">&quot;[%v]: backup %v failed, %v&quot;</span>, cloud.Name, tarfile, err)<br>\t\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t\t&#125;<br><br>\t\t\t\t<span class=\"hljs-comment\">// wait alist task done</span><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t\t\ttime.Sleep(<span class=\"hljs-number\">5</span> * time.Second)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &amp;&amp; c.TarDone() &#123;<br>\t\t\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;[%v]: backup %v success %v\\n&quot;</span>, cloud.Name, tarfile, time.Since(startTime))<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\ttarfilepath = <span class=\"hljs-built_in\">append</span>(tarfilepath, path.Join(c.Alist.DataDir, tarfile))<br>\t\t\t\ttarfilename[filepath] = tarfile<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>)<br>\t&#125;<br><br>\tremove := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tarfile := <span class=\"hljs-keyword\">range</span> tarfilepath &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tklog.Warningf(<span class=\"hljs-string\">&quot;delete %v failed&quot;</span>, tarfile)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// reset</span><br>\t\ttarfilepath = []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\t\ttarfilename = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>\t&#125;<br><br>\tcronjob := cron.New()<br><br>\tcronjob.AddFunc(c.CronTime, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &#123;<br>\t\t\tbackup()<br>\t\t\tremove()<br>\t\t&#125;<br>\t&#125;)<br><br>\tcronjob.Start()<br><br>\tstopCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&lt;-stopCh<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tklog.Info([]<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken&#125;)<br><br>\tcmd := exec.Command(<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)<br>\t_, err := cmd.Output()<br>\t<span class=\"hljs-keyword\">return</span> err<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> Check() &#123;<br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Host == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist host&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.DataDir == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist data dir&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Token == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist token&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> c.CronTime == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty cron time&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistSrc == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v src&quot;</span>, cloud.Name))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistDst == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v dst&quot;</span>, cloud.Name))<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t_, err := os.Stat(v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> os.IsNotExist(err) &#123;<br>\t\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v %v file not exist&quot;</span>, cloud.Name, v))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initConfig</span><span class=\"hljs-params\">()</span></span> *Config &#123;<br>\tyamlFile, err := os.ReadFile(<span class=\"hljs-string\">&quot;./config.yaml&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tconfig := Config&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := yaml.Unmarshal(yamlFile, &amp;config); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;config<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TarDone() <span class=\"hljs-type\">bool</span> &#123;<br>\tb, err := os.ReadFile(<span class=\"hljs-string\">&quot;/root/tar_status.txt&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(b) == <span class=\"hljs-string\">&quot;done&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TaskDone() <span class=\"hljs-type\">bool</span> &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, fmt.Sprintf(<span class=\"hljs-string\">&quot;%v/api/admin/task/copy/undone&quot;</span>, c.Alist.Host), <span class=\"hljs-literal\">nil</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\treq.Header.Set(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, c.Alist.Token)<br><br>\tresp, err := http.DefaultClient.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br><br>\tbody, err := io.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tresponse := RequestAlistUndone&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := json.Unmarshal(body, &amp;response); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> response.Code == <span class=\"hljs-number\">200</span> &amp;&amp; <span class=\"hljs-built_in\">len</span>(response.Data) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getTarfile</span><span class=\"hljs-params\">(filepath <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\ttimelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\ttime.Local = timelocal<br>\tt := time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02_1504&quot;</span>)<br>\tfilename := strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>)[<span class=\"hljs-built_in\">len</span>(strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>))<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-comment\">// return fmt.Sprintf(&quot;%v-%v.tar.gz&quot;, t, filename)</span><br>\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;%v-%v.tar.bz2&quot;</span>, t, filename)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">alist:</span><br>  <span class=\"hljs-attr\">data_dir:</span> <span class=\"hljs-string\">&quot;/alist-data&quot;</span><br>  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">&quot;http://192.xxx.187.61:5244&quot;</span><br>  <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">&quot;alist-e5630ef4-5fa2-4264-a256-323900236728&quot;</span><br><br><span class=\"hljs-attr\">cron_time:</span> <span class=\"hljs-string\">&quot;0 40 18 * *&quot;</span><br><span class=\"hljs-attr\">tar_shell_filepath:</span> <span class=\"hljs-string\">&quot;/root/tar.sh&quot;</span><br><br><span class=\"hljs-attr\">clouds:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">阿里云盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span> <span class=\"hljs-comment\"># 本地local盘</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/阿里云盘/数据冷备&quot;</span>     <span class=\"hljs-comment\"># 本地阿里盘</span><br>    <span class=\"hljs-attr\">filepaths:</span>                       <span class=\"hljs-comment\"># 备份哪些文件</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Users/Desktop/github/blog&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Desktop/github/k3s&quot;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">百度网盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/百度网盘/数据冷备&quot;</span><br>    <span class=\"hljs-attr\">filepaths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/data/歌曲&quot;</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>目前使用该脚本来将 alist 中某个项目下的文件由 xx.1.xx 改为 xx.01.xx</p>\n          </div>","more":"<h2 id=\"重命名\"><a href=\"#重命名\" class=\"headerlink\" title=\"重命名\"></a>重命名</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-built_in\">dir</span>=<span class=\"hljs-variable\">$1</span>  <span class=\"hljs-comment\"># 指定目录路径</span><br><br><span class=\"hljs-comment\"># 进入目录</span><br><span class=\"hljs-built_in\">cd</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$dir</span>&quot;</span> || <span class=\"hljs-built_in\">exit</span><br><br><span class=\"hljs-comment\"># 替换文件名中的abcd1至abcd9为abcd01至abcd09</span><br><span class=\"hljs-keyword\">for</span> file <span class=\"hljs-keyword\">in</span> *S01E[1-9].*; <span class=\"hljs-keyword\">do</span><br>  new_file=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> | sed <span class=\"hljs-string\">&#x27;s/S01E\\([1-9]\\)/S01E0\\1/&#x27;</span>)<br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$new_file</span><br>  <span class=\"hljs-built_in\">mv</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$file</span>&quot;</span> <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$new_file</span>&quot;</span><br><span class=\"hljs-keyword\">done</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h2><h3 id=\"alist脚本\"><a href=\"#alist脚本\" class=\"headerlink\" title=\"alist脚本\"></a>alist脚本</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-meta\">#!/bin/bash</span><br><br><span class=\"hljs-comment\"># demo: bash tar.sh test test.tar.gz /local/data /百度网盘/数据冷备 http://localhost:5244 &lt;alist-token&gt;</span><br><br><span class=\"hljs-comment\"># 判断参数个数是否为7个</span><br><span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$#</span> -ne 7 ]; <span class=\"hljs-keyword\">then</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Error: Expected 7 arguments.&quot;</span><br>  <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Usage: <span class=\"hljs-variable\">$0</span> &lt;filename&gt; &lt;src&gt; &lt;dst&gt; &lt;alist_host&gt; &lt;alist_token&gt;&quot;</span><br>  <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br>FILE_PATH=<span class=\"hljs-variable\">$1</span><br>FILE_NAME_TAR_GZ=<span class=\"hljs-variable\">$2</span><br><span class=\"hljs-comment\"># 使用awk命令分割字符串并输出最后一个部分</span><br>FILE_NAME=$(<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$FILE_PATH</span> | awk -F<span class=\"hljs-string\">&#x27;/&#x27;</span> <span class=\"hljs-string\">&#x27;&#123;print $NF&#125;&#x27;</span>)<br>ALIST_SRC=<span class=\"hljs-variable\">$3</span><br>ALIST_DST=<span class=\"hljs-variable\">$4</span><br>ALIST_HOST=<span class=\"hljs-variable\">$5</span><br>ALIST_DATA_DIR=<span class=\"hljs-variable\">$6</span><br>ALIST_TOKEN=<span class=\"hljs-variable\">$7</span><br><br><span class=\"hljs-keyword\">if</span> [ ! -e <span class=\"hljs-variable\">$FILE_PATH</span> ]; <span class=\"hljs-keyword\">then</span><br>    <span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件不存在&quot;</span><br>    <span class=\"hljs-built_in\">exit</span> 1<br><span class=\"hljs-keyword\">fi</span><br><br><span class=\"hljs-comment\"># 以下是你希望执行的操作，当参数个数为三个时执行</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;文件名: <span class=\"hljs-variable\">$FILE_NAME</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;打包文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist src: <span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist dst: <span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Host: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Data dir: <span class=\"hljs-variable\">$ALIST_DATA_DIR</span>&quot;</span><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;Alist Token: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span><br><br><span class=\"hljs-comment\"># TIME=$(date +&quot;%Y-%m-%d-%H%M&quot;)</span><br><span class=\"hljs-comment\"># echo 当前时间: $TIME</span><br><span class=\"hljs-comment\"># FILE_NAME_TAR_GZ=&quot;$&#123;TIME&#125;-$&#123;FILE_NAME&#125;.tar.gz&quot;</span><br><br><span class=\"hljs-built_in\">echo</span> 备份文件名: <span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span><br><br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;undone&quot;</span> &gt; /root/tar_status.txt<br><br><span class=\"hljs-comment\"># tar -czf $/&#123;ALIST_DATA_DIR&#125;/$&#123;FILE_NAME_TAR_GZ&#125; $FILE_PATH</span><br>tar -cjf <span class=\"hljs-variable\">$&#123;ALIST_DATA_DIR&#125;</span>/<span class=\"hljs-variable\">$&#123;FILE_NAME_TAR_GZ&#125;</span> <span class=\"hljs-variable\">$FILE_PATH</span><br><br>curl <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_HOST</span>/api/fs/copy&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Accept: application/json, text/plain, */*&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Authorization: <span class=\"hljs-variable\">$ALIST_TOKEN</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Connection: keep-alive&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Content-Type: application/json;charset=UTF-8&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Origin: <span class=\"hljs-variable\">$ALIST_HOST</span>&quot;</span> \\<br>  -H <span class=\"hljs-string\">&quot;Referer: <span class=\"hljs-variable\">$ALIST_HOST</span>/local/data&quot;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Dest: empty&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Mode: cors&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;Sec-Fetch-Site: same-origin&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/115.0.0.0 Safari/537.36&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua: &quot;Not/A)Brand&quot;;v=&quot;99&quot;, &quot;Google Chrome&quot;;v=&quot;115&quot;, &quot;Chromium&quot;;v=&quot;115&quot;&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-mobile: ?0&#x27;</span> \\<br>  -H <span class=\"hljs-string\">&#x27;sec-ch-ua-platform: &quot;macOS&quot;&#x27;</span> \\<br>  --data-raw <span class=\"hljs-string\">&#x27;&#123;&quot;src_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_SRC</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;dst_dir&quot;:&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$ALIST_DST</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;,&quot;names&quot;:[&quot;&#x27;</span><span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$FILE_NAME_TAR_GZ</span>&quot;</span><span class=\"hljs-string\">&#x27;&quot;]&#125;&#x27;</span> \\<br>  --compressed<br><br><span class=\"hljs-built_in\">sleep</span> 10<br><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">&quot;done&quot;</span> &gt; /root/tar_status.txt<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs go\"><span class=\"hljs-keyword\">package</span> main<br><br><span class=\"hljs-keyword\">import</span> (<br>\t<span class=\"hljs-string\">&quot;encoding/json&quot;</span><br>\t<span class=\"hljs-string\">&quot;fmt&quot;</span><br>\t<span class=\"hljs-string\">&quot;io&quot;</span><br>\t<span class=\"hljs-string\">&quot;net/http&quot;</span><br>\t<span class=\"hljs-string\">&quot;os&quot;</span><br>\t<span class=\"hljs-string\">&quot;os/exec&quot;</span><br>\t<span class=\"hljs-string\">&quot;path&quot;</span><br>\t<span class=\"hljs-string\">&quot;strings&quot;</span><br>\t<span class=\"hljs-string\">&quot;time&quot;</span><br><br>\t<span class=\"hljs-string\">&quot;github.com/robfig/cron&quot;</span><br>\t<span class=\"hljs-string\">&quot;gopkg.in/yaml.v2&quot;</span><br>\t<span class=\"hljs-string\">&quot;k8s.io/klog/v2&quot;</span><br>)<br><br><span class=\"hljs-keyword\">type</span> Config <span class=\"hljs-keyword\">struct</span> &#123;<br>\tAlist <span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tHost    <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;host&quot;`</span><br>\t\tDataDir <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;data_dir&quot;`</span><br>\t\tToken   <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;token&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;alist&quot;`</span><br><br>\tCronTime         <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;cron_time&quot;`</span><br>\tTarShellFilePath <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;tar_shell_filepath&quot;`</span><br><br>\tClouds []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName      <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;name&quot;`</span><br>\t\tBackup    <span class=\"hljs-type\">bool</span>     <span class=\"hljs-string\">`yaml:&quot;backup&quot;`</span><br>\t\tAlistSrc  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_src&quot;`</span><br>\t\tAlistDst  <span class=\"hljs-type\">string</span>   <span class=\"hljs-string\">`yaml:&quot;alist_dst&quot;`</span><br>\t\tFilePaths []<span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`yaml:&quot;filepaths&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`yaml:&quot;clouds&quot;`</span><br>&#125;<br><br><span class=\"hljs-keyword\">type</span> RequestAlistUndone <span class=\"hljs-keyword\">struct</span> &#123;<br>\tCode    <span class=\"hljs-type\">int</span>    <span class=\"hljs-string\">`json:&quot;code&quot;`</span><br>\tMessage <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;message&quot;`</span><br>\tData    []<span class=\"hljs-keyword\">struct</span> &#123;<br>\t\tName <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;name&quot;`</span><br>\t&#125; <span class=\"hljs-string\">`json:&quot;data&quot;`</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> &#123;<br>\tc := initConfig()<br><br>\tklog.Info(<span class=\"hljs-string\">&quot;checking... &quot;</span>)<br>\tc.Check()<br><br>\t<span class=\"hljs-keyword\">var</span> tarfilepath []<span class=\"hljs-type\">string</span><br>\ttarfilename := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br><br>\tbackup := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\tklog.Info(<span class=\"hljs-string\">&quot;start backuping... &quot;</span>)<br>\t\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t&#125;<br>\t\t\t<span class=\"hljs-keyword\">for</span> _, filepath := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t\tstartTime := time.Now()<br>\t\t\t\t<span class=\"hljs-keyword\">var</span> tarfile <span class=\"hljs-type\">string</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> tarfilename[filepath] == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t\t\ttarfile = getTarfile(filepath)<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\ttarfile = tarfilename[filepath]<br>\t\t\t\t&#125;<br><br>\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;tarfile is %v&quot;</span>, tarfile)<br>\t\t\t\t<span class=\"hljs-keyword\">if</span> err := run(c.TarShellFilePath, filepath, tarfile, cloud.AlistSrc, cloud.AlistDst, c.Alist.Host, c.Alist.DataDir, c.Alist.Token); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\t\tklog.Errorf(<span class=\"hljs-string\">&quot;[%v]: backup %v failed, %v&quot;</span>, cloud.Name, tarfile, err)<br>\t\t\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t\t\t&#125;<br><br>\t\t\t\t<span class=\"hljs-comment\">// wait alist task done</span><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> &#123;<br>\t\t\t\t\ttime.Sleep(<span class=\"hljs-number\">5</span> * time.Second)<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &amp;&amp; c.TarDone() &#123;<br>\t\t\t\t\t\tklog.Infof(<span class=\"hljs-string\">&quot;[%v]: backup %v success %v\\n&quot;</span>, cloud.Name, tarfile, time.Since(startTime))<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">break</span><br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t\ttarfilepath = <span class=\"hljs-built_in\">append</span>(tarfilepath, path.Join(c.Alist.DataDir, tarfile))<br>\t\t\t\ttarfilename[filepath] = tarfile<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\tfmt.Printf(<span class=\"hljs-string\">&quot;\\n&quot;</span>)<br>\t&#125;<br><br>\tremove := <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">for</span> _, tarfile := <span class=\"hljs-keyword\">range</span> tarfilepath &#123;<br>\t\t\t<span class=\"hljs-keyword\">if</span> err := os.Remove(path.Join(c.Alist.DataDir, tarfile)); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t\t\tklog.Warningf(<span class=\"hljs-string\">&quot;delete %v failed&quot;</span>, tarfile)<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// reset</span><br>\t\ttarfilepath = []<span class=\"hljs-type\">string</span>&#123;&#125;<br>\t\ttarfilename = <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">map</span>[<span class=\"hljs-type\">string</span>]<span class=\"hljs-type\">string</span>)<br>\t&#125;<br><br>\tcronjob := cron.New()<br><br>\tcronjob.AddFunc(c.CronTime, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> c.TaskDone() &#123;<br>\t\t\tbackup()<br>\t\t\tremove()<br>\t\t&#125;<br>\t&#125;)<br><br>\tcronjob.Start()<br><br>\tstopCh := <span class=\"hljs-built_in\">make</span>(<span class=\"hljs-keyword\">chan</span> <span class=\"hljs-keyword\">struct</span>&#123;&#125;)<br>\t&lt;-stopCh<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">run</span><span class=\"hljs-params\">(shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">error</span> &#123;<br>\tklog.Info([]<span class=\"hljs-type\">string</span>&#123;<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken&#125;)<br><br>\tcmd := exec.Command(<span class=\"hljs-string\">&quot;sh&quot;</span>, shellPath, filePath, tarfile, alistSrc, alistDst, alistHost, alistDataDir, alistToken)<br>\t_, err := cmd.Output()<br>\t<span class=\"hljs-keyword\">return</span> err<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> Check() &#123;<br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Host == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist host&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.DataDir == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist data dir&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">if</span> c.Alist.Token == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty alist token&quot;</span>)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">if</span> c.CronTime == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(<span class=\"hljs-string\">&quot;empty cron time&quot;</span>)<br>\t&#125;<br><br>\t<span class=\"hljs-keyword\">for</span> _, cloud := <span class=\"hljs-keyword\">range</span> c.Clouds &#123;<br>\t\t<span class=\"hljs-keyword\">if</span> !cloud.Backup &#123;<br>\t\t\t<span class=\"hljs-keyword\">continue</span><br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistSrc == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v src&quot;</span>, cloud.Name))<br>\t\t&#125;<br>\t\t<span class=\"hljs-keyword\">if</span> cloud.AlistDst == <span class=\"hljs-string\">&quot;&quot;</span> &#123;<br>\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;empty alist %v dst&quot;</span>, cloud.Name))<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-keyword\">for</span> _, v := <span class=\"hljs-keyword\">range</span> cloud.FilePaths &#123;<br>\t\t\t_, err := os.Stat(v)<br>\t\t\t<span class=\"hljs-keyword\">if</span> os.IsNotExist(err) &#123;<br>\t\t\t\t<span class=\"hljs-built_in\">panic</span>(fmt.Sprintf(<span class=\"hljs-string\">&quot;%v %v file not exist&quot;</span>, cloud.Name, v))<br>\t\t\t&#125;<br>\t\t&#125;<br>\t&#125;<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">initConfig</span><span class=\"hljs-params\">()</span></span> *Config &#123;<br>\tyamlFile, err := os.ReadFile(<span class=\"hljs-string\">&quot;./config.yaml&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br><br>\tconfig := Config&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := yaml.Unmarshal(yamlFile, &amp;config); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> &amp;config<br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TarDone() <span class=\"hljs-type\">bool</span> &#123;<br>\tb, err := os.ReadFile(<span class=\"hljs-string\">&quot;/root/tar_status.txt&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-type\">string</span>(b) == <span class=\"hljs-string\">&quot;done&quot;</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-params\">(c *Config)</span></span> TaskDone() <span class=\"hljs-type\">bool</span> &#123;<br>\treq, err := http.NewRequest(<span class=\"hljs-string\">&quot;GET&quot;</span>, fmt.Sprintf(<span class=\"hljs-string\">&quot;%v/api/admin/task/copy/undone&quot;</span>, c.Alist.Host), <span class=\"hljs-literal\">nil</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\treq.Header.Set(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, c.Alist.Token)<br><br>\tresp, err := http.DefaultClient.Do(req)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">defer</span> resp.Body.Close()<br><br>\tbody, err := io.ReadAll(resp.Body)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br><br>\tresponse := RequestAlistUndone&#123;&#125;<br>\t<span class=\"hljs-keyword\">if</span> err := json.Unmarshal(body, &amp;response); err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\tklog.Error(err)<br>\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span><br>\t&#125;<br>\t<span class=\"hljs-keyword\">return</span> response.Code == <span class=\"hljs-number\">200</span> &amp;&amp; <span class=\"hljs-built_in\">len</span>(response.Data) == <span class=\"hljs-number\">0</span><br>&#125;<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">getTarfile</span><span class=\"hljs-params\">(filepath <span class=\"hljs-type\">string</span>)</span></span> <span class=\"hljs-type\">string</span> &#123;<br>\ttimelocal, err := time.LoadLocation(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>)<br>\t<span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> &#123;<br>\t\t<span class=\"hljs-built_in\">panic</span>(err)<br>\t&#125;<br>\ttime.Local = timelocal<br>\tt := time.Now().Local().Format(<span class=\"hljs-string\">&quot;2006-01-02_1504&quot;</span>)<br>\tfilename := strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>)[<span class=\"hljs-built_in\">len</span>(strings.Split(filepath, <span class=\"hljs-string\">&quot;/&quot;</span>))<span class=\"hljs-number\">-1</span>]<br>\t<span class=\"hljs-comment\">// return fmt.Sprintf(&quot;%v-%v.tar.gz&quot;, t, filename)</span><br>\t<span class=\"hljs-keyword\">return</span> fmt.Sprintf(<span class=\"hljs-string\">&quot;%v-%v.tar.bz2&quot;</span>, t, filename)<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">alist:</span><br>  <span class=\"hljs-attr\">data_dir:</span> <span class=\"hljs-string\">&quot;/alist-data&quot;</span><br>  <span class=\"hljs-attr\">host:</span> <span class=\"hljs-string\">&quot;http://192.xxx.187.61:5244&quot;</span><br>  <span class=\"hljs-attr\">token:</span> <span class=\"hljs-string\">&quot;alist-e5630ef4-5fa2-4264-a256-323900236728&quot;</span><br><br><span class=\"hljs-attr\">cron_time:</span> <span class=\"hljs-string\">&quot;0 40 18 * *&quot;</span><br><span class=\"hljs-attr\">tar_shell_filepath:</span> <span class=\"hljs-string\">&quot;/root/tar.sh&quot;</span><br><br><span class=\"hljs-attr\">clouds:</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">阿里云盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">false</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span> <span class=\"hljs-comment\"># 本地local盘</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/阿里云盘/数据冷备&quot;</span>     <span class=\"hljs-comment\"># 本地阿里盘</span><br>    <span class=\"hljs-attr\">filepaths:</span>                       <span class=\"hljs-comment\"># 备份哪些文件</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Users/Desktop/github/blog&quot;</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/Desktop/github/k3s&quot;</span><br>  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">百度网盘</span><br>    <span class=\"hljs-attr\">backup:</span> <span class=\"hljs-literal\">true</span><br>    <span class=\"hljs-attr\">alist_src:</span> <span class=\"hljs-string\">&quot;/本地/opt/alist/data&quot;</span><br>    <span class=\"hljs-attr\">alist_dst:</span> <span class=\"hljs-string\">&quot;/百度网盘/数据冷备&quot;</span><br>    <span class=\"hljs-attr\">filepaths:</span><br>    <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">&quot;/data/歌曲&quot;</span><br></code></pre></td></tr></table></figure>"},{"layout":"linux","title":"常用服务模板","date":"2023-07-22T16:15:50.000Z","_content":"\n{% note primary%}\n\n存放一些常用的模板。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. Makefile\n\n```makefile\n.PHONY: git_push docker_build all help\n\n# 获取 git 项目 COMMIT_HASH\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ngit_push: ## 上传代码到 Github\n\tgit add .\n\tgit commit -m \"`date '+%Y/%m/%d %H:%M:%S'`\"\n\tgit push origin dev\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n**指定参数**\n\n```makefile\ncommit: \n\tgit commit -m \"$(msg)\"\n```\n\n使用如下\n\n```sh\nmake commit msg=\"makefile 测试\"              \n```\n\n## 2. Dockerfile\n\n\n```dockerfile\nFROM golang:1.20 as builder\nWORKDIR /root/\nCOPY . .\nRUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go\n\n# =================================== 分层编译 ==============================================\nFROM alpine AS final\n\n# 国内使用的goproxy\nENV GOPROXY=https://goproxy.cn\n\n# 设置时区\nENV TZ=Asia/Shanghai\n\nWORKDIR /root/\n\n# 复制 builder 的产物\nCOPY --from=builder /root/app .\n\n# 复制本地文件夹\nCOPY ./mydir/  ./mydir/\n\nRUN chmod +x app \\\n    && apk update \\\n    && apk add --no-cache tzdata\n\nEXPOSE 8080\nENTRYPOINT [\"/root/app\"]\n```\n\n## 3. Github Build Action\n\n{% note warning %}\n\nbuildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 `manifest` 来进行合并镜像。\n\n下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 `docker manifest` 进行合并镜像。\n\n可以配合 `Makefile` 来看。\n{% endnote %}\n\n### 3.1 Makefile 模板\n\n```makefile\n.PHONY: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help\n\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ndocker-build-amd64: ## 编译 amd64 镜像\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:amd64\n\ndocker-build-arm64: ## 编译 arm64 镜像\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:arm64\n\ndocker-build-armv7: ## 编译 armv7 镜像\n\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv7\n\ndocker-build-armv8: ## 编译 armv8 镜像\n\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv8\n\n# ================================= 本地测试 =================================\ndocker-build-amd64-local: ## 编译 amd64 镜像\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .\n\tdocker push oldwang6/cloud-backup:amd64-local\n\trm -f cloud-backup-amd64-local\n\ndocker-build-arm64-local: ## 编译 arm64 镜像\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .\n\tdocker push oldwang6/cloud-backup:arm64-local\n\trm -f cloud-backup-arm64-local\n\nmanifest: ## 合并镜像\n\tdocker manifest create oldwang6/cloud-backup:${IMAGE_TAG} \\\n           oldwang6/cloud-backup:amd64 \\\n\t\t   oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n\t\t   oldwang6/cloud-backup:armv8\n\n\tdocker manifest create oldwang6/cloud-backup:latest \\\n           oldwang6/cloud-backup:amd64 \\\n           oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n           oldwang6/cloud-backup:armv8\n\n\tdocker manifest push oldwang6/cloud-backup:${IMAGE_TAG}\n\tdocker manifest push oldwang6/cloud-backup:latest\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n### 3.2 yaml 模板\n\n{% note warning %}\n\n下面为 .github/workflows/build.yml 文件内容。\n\n{% endnote %}\n\n```yaml\nname: Build and Cache Binary\n\non: [push]\n\njobs:\n  go-build-amd64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 amd64 二进制\n        run: |\n          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-amd64\n          mv cloud-backup-amd64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ${{ runner.workspace }}/bin\n  go-build-arm64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm64 二进制\n        run: |\n          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-arm64\n          mv cloud-backup-arm64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv7:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v7 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv7\n          mv cloud-backup-armv7 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv8:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v8 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv8\n          mv cloud-backup-armv8 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ${{ runner.workspace }}/bin\n\n  docker-build-amd64:\n    needs: go-build-amd64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 amd64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-amd64\n          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup\n          make docker-build-amd64\n\n  docker-build-arm64:\n    needs: go-build-arm64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-arm64\n          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup\n          make docker-build-arm64\n\n  docker-build-armv7:\n    needs: go-build-armv7\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v7 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv7\n          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup\n          make docker-build-armv7\n\n  docker-build-armv8:\n    needs: go-build-armv8\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v8 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv8\n          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup\n          make docker-build-armv8\n\n  manifest:\n    needs:\n      [\n        docker-build-amd64,\n        docker-build-arm64,\n        docker-build-armv7,\n        docker-build-armv8,\n      ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 使用 manifest 合并镜像并推送\n        run: make manifest\n```\n\n### 3.3 慎用缓存\n{% note warning %}\n\n慎用缓存！！！真坑。\n\n如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。\n\n\n始作俑者：chatgpt推荐的配置文件。\n\n排查许久。。。\n\n{% endnote %}\n\n```yaml\n      - name: 缓存二进制\n        uses: actions/cache@v2\n        with:\n          path: ${{ runner.workspace }}/bin\n          key: binaries-${{ runner.os }}\n```\n\n## 4. xui 客户端\n\n{% note warning %}\n\n只适用于linux环境，下载 [v2ray-core](https://github.com/v2ray/v2ray-core/releases)，解压后替换 config.yaml 如下。执行 ./v2ray\n\n{% endnote %}\n\n### 4.1. 客户端配置\n```yaml\n{\n    \"log\": {\n        \"loglevel\": \"warning\"\n    },\n    \"routing\": {\n        \"domainStrategy\": \"AsIs\",\n        \"rules\": [\n            {\n                \"ip\": [\n                    \"geoip:private\"\n                ],\n                \"outboundTag\": \"direct\",\n                \"type\": \"field\"\n            }\n        ]\n    },\n    \"inbounds\": [\n        {\n            \"port\": 1080,\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"auth\": \"noauth\",\n                \"udp\": true\n            },\n            \"tag\": \"socks\"\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"users\": [\n                            {\n                                \"id\": \"<uuid>\"\n                            }\n                        ],\n                        \"port\": <服务端端口>,\n                        \"address\": \"<服务端IP>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"protocol\": \"freedom\",\n            \"tag\": \"direct\"\n        }\n    ]\n}\n```\n\n### 4.2 命令行设置代理\n```sh\nexport https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080\n```\n\n### 4.3 取消设置代理\n```sh\nunset https_proxy\nunset http_proxy\nunset all_proxy\n```\n\n## 5. chatgpt 测试 apikey\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s $API_KEY\n```\n\n## 6. frp\n\n### 6.1 frpc\n\n#### 6.1.1 docker-compose\n```yaml\nversion: '3'\nservices:\n  frps:\n    image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest\n    volumes:\n      - /root/k3s/frps.ini:/root/frps.ini\n    restart: always\n```\n\n#### 6.1.2 k8s\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frps\n  template:\n    metadata:\n      labels:\n        app: frps\n    spec:\n      imagePullSecrets:\n      - name: hub-ali\n      containers:\n      - name: frps\n        image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest\n        volumeMounts:\n        - name: config\n          mountPath: /root/frps.ini\n      volumes:\n      - name: config\n        hostPath:\n          path: /root/k3s/frps.ini  # 将 /etc/x-ui 替换为实际的主机路径\n```\n\n\n\n### 6.2 frps","source":"_posts/linux/常用服务模板.md","raw":"---\nlayout: linux\ntitle: 常用服务模板\ndate: 2023-07-23 00:15:50\ntags: [Makefile,Dockerfile]\ncategories: linux\n---\n\n{% note primary%}\n\n存放一些常用的模板。\n\n{% endnote %}\n\n<!-- more -->\n\n## 1. Makefile\n\n```makefile\n.PHONY: git_push docker_build all help\n\n# 获取 git 项目 COMMIT_HASH\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ngit_push: ## 上传代码到 Github\n\tgit add .\n\tgit commit -m \"`date '+%Y/%m/%d %H:%M:%S'`\"\n\tgit push origin dev\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n**指定参数**\n\n```makefile\ncommit: \n\tgit commit -m \"$(msg)\"\n```\n\n使用如下\n\n```sh\nmake commit msg=\"makefile 测试\"              \n```\n\n## 2. Dockerfile\n\n\n```dockerfile\nFROM golang:1.20 as builder\nWORKDIR /root/\nCOPY . .\nRUN GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go\n\n# =================================== 分层编译 ==============================================\nFROM alpine AS final\n\n# 国内使用的goproxy\nENV GOPROXY=https://goproxy.cn\n\n# 设置时区\nENV TZ=Asia/Shanghai\n\nWORKDIR /root/\n\n# 复制 builder 的产物\nCOPY --from=builder /root/app .\n\n# 复制本地文件夹\nCOPY ./mydir/  ./mydir/\n\nRUN chmod +x app \\\n    && apk update \\\n    && apk add --no-cache tzdata\n\nEXPOSE 8080\nENTRYPOINT [\"/root/app\"]\n```\n\n## 3. Github Build Action\n\n{% note warning %}\n\nbuildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 `manifest` 来进行合并镜像。\n\n下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 `docker manifest` 进行合并镜像。\n\n可以配合 `Makefile` 来看。\n{% endnote %}\n\n### 3.1 Makefile 模板\n\n```makefile\n.PHONY: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help\n\nCOMMIT_HASH = $(shell git rev-parse --short=7 HEAD)\nTAG := $(shell git describe --exact-match --abbrev=0 --tags 2>/dev/null)\n\nifdef TAG\n    IMAGE_TAG := $(TAG)\nelse\n    IMAGE_TAG := $(COMMIT_HASH)\nendif\n\ndocker-build-amd64: ## 编译 amd64 镜像\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:amd64\n\ndocker-build-arm64: ## 编译 arm64 镜像\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:arm64\n\ndocker-build-armv7: ## 编译 armv7 镜像\n\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv7\n\ndocker-build-armv8: ## 编译 armv8 镜像\n\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .\n\tdocker push oldwang6/cloud-backup:armv8\n\n# ================================= 本地测试 =================================\ndocker-build-amd64-local: ## 编译 amd64 镜像\n\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go\n\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .\n\tdocker push oldwang6/cloud-backup:amd64-local\n\trm -f cloud-backup-amd64-local\n\ndocker-build-arm64-local: ## 编译 arm64 镜像\n\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go\n\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .\n\tdocker push oldwang6/cloud-backup:arm64-local\n\trm -f cloud-backup-arm64-local\n\nmanifest: ## 合并镜像\n\tdocker manifest create oldwang6/cloud-backup:${IMAGE_TAG} \\\n           oldwang6/cloud-backup:amd64 \\\n\t\t   oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n\t\t   oldwang6/cloud-backup:armv8\n\n\tdocker manifest create oldwang6/cloud-backup:latest \\\n           oldwang6/cloud-backup:amd64 \\\n           oldwang6/cloud-backup:arm64 \\\n           oldwang6/cloud-backup:armv7 \\\n           oldwang6/cloud-backup:armv8\n\n\tdocker manifest push oldwang6/cloud-backup:${IMAGE_TAG}\n\tdocker manifest push oldwang6/cloud-backup:latest\n\nhelp: ## 查看帮助\n\t@awk 'BEGIN {FS = \":.*?## \"} /^[a-zA-Z_-]+:.*?## / {sub(\"\\\\\\\\n\",sprintf(\"\\n%22c\",\" \"), $$2);printf \" \\033[36m%-20s\\033[0m  %s\\n\", $$1, $$2}' $(MAKEFILE_LIST)\n```\n\n### 3.2 yaml 模板\n\n{% note warning %}\n\n下面为 .github/workflows/build.yml 文件内容。\n\n{% endnote %}\n\n```yaml\nname: Build and Cache Binary\n\non: [push]\n\njobs:\n  go-build-amd64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 amd64 二进制\n        run: |\n          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-amd64\n          mv cloud-backup-amd64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ${{ runner.workspace }}/bin\n  go-build-arm64:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm64 二进制\n        run: |\n          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-arm64\n          mv cloud-backup-arm64 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv7:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v7 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv7\n          mv cloud-backup-armv7 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ${{ runner.workspace }}/bin\n\n  go-build-armv8:\n    runs-on: ubuntu-latest\n\n    steps:\n      - uses: actions/checkout@v3\n      - uses: actions/setup-go@v4\n        with:\n          go-version: \"1.20\"\n\n      - name: Go版本信息\n        run: go version\n\n      - name: 编译 arm v8 二进制\n        run: |\n          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go\n          mkdir -p ${{ runner.workspace }}/bin\n          chmod +x cloud-backup-armv8\n          mv cloud-backup-armv8 ${{ runner.workspace }}/bin/\n\n      - name: 上传二进制\n        uses: actions/upload-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ${{ runner.workspace }}/bin\n\n  docker-build-amd64:\n    needs: go-build-amd64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-amd64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 amd64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-amd64\n          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup\n          make docker-build-amd64\n\n  docker-build-arm64:\n    needs: go-build-arm64\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-arm64\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm64 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-arm64\n          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup\n          make docker-build-arm64\n\n  docker-build-armv7:\n    needs: go-build-armv7\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv7\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v7 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv7\n          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup\n          make docker-build-armv7\n\n  docker-build-armv8:\n    needs: go-build-armv8\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 下载缓存二进制\n        uses: actions/download-artifact@v2\n        with:\n          name: cloud-backup-armv8\n          path: ./bin\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 编译 arm v8 镜像\n        run: |\n          chmod +x ./bin/cloud-backup-armv8\n          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup\n          make docker-build-armv8\n\n  manifest:\n    needs:\n      [\n        docker-build-amd64,\n        docker-build-arm64,\n        docker-build-armv7,\n        docker-build-armv8,\n      ]\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n\n      - name: 登陆 hub 仓库\n        run: docker login --username=oldwang6 -p ${{ secrets.HUB_PASSWORD }}\n\n      - name: 使用 manifest 合并镜像并推送\n        run: make manifest\n```\n\n### 3.3 慎用缓存\n{% note warning %}\n\n慎用缓存！！！真坑。\n\n如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。\n\n\n始作俑者：chatgpt推荐的配置文件。\n\n排查许久。。。\n\n{% endnote %}\n\n```yaml\n      - name: 缓存二进制\n        uses: actions/cache@v2\n        with:\n          path: ${{ runner.workspace }}/bin\n          key: binaries-${{ runner.os }}\n```\n\n## 4. xui 客户端\n\n{% note warning %}\n\n只适用于linux环境，下载 [v2ray-core](https://github.com/v2ray/v2ray-core/releases)，解压后替换 config.yaml 如下。执行 ./v2ray\n\n{% endnote %}\n\n### 4.1. 客户端配置\n```yaml\n{\n    \"log\": {\n        \"loglevel\": \"warning\"\n    },\n    \"routing\": {\n        \"domainStrategy\": \"AsIs\",\n        \"rules\": [\n            {\n                \"ip\": [\n                    \"geoip:private\"\n                ],\n                \"outboundTag\": \"direct\",\n                \"type\": \"field\"\n            }\n        ]\n    },\n    \"inbounds\": [\n        {\n            \"port\": 1080,\n            \"protocol\": \"socks\",\n            \"settings\": {\n                \"auth\": \"noauth\",\n                \"udp\": true\n            },\n            \"tag\": \"socks\"\n        }\n    ],\n    \"outbounds\": [\n        {\n            \"protocol\": \"vmess\",\n            \"settings\": {\n                \"vnext\": [\n                    {\n                        \"users\": [\n                            {\n                                \"id\": \"<uuid>\"\n                            }\n                        ],\n                        \"port\": <服务端端口>,\n                        \"address\": \"<服务端IP>\"\n                    }\n                ]\n            }\n        },\n        {\n            \"protocol\": \"freedom\",\n            \"tag\": \"direct\"\n        }\n    ]\n}\n```\n\n### 4.2 命令行设置代理\n```sh\nexport https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080\n```\n\n### 4.3 取消设置代理\n```sh\nunset https_proxy\nunset http_proxy\nunset all_proxy\n```\n\n## 5. chatgpt 测试 apikey\n\n```sh\ncurl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s $API_KEY\n```\n\n## 6. frp\n\n### 6.1 frpc\n\n#### 6.1.1 docker-compose\n```yaml\nversion: '3'\nservices:\n  frps:\n    image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest\n    volumes:\n      - /root/k3s/frps.ini:/root/frps.ini\n    restart: always\n```\n\n#### 6.1.2 k8s\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: frps\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: frps\n  template:\n    metadata:\n      labels:\n        app: frps\n    spec:\n      imagePullSecrets:\n      - name: hub-ali\n      containers:\n      - name: frps\n        image: registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest\n        volumeMounts:\n        - name: config\n          mountPath: /root/frps.ini\n      volumes:\n      - name: config\n        hostPath:\n          path: /root/k3s/frps.ini  # 将 /etc/x-ui 替换为实际的主机路径\n```\n\n\n\n### 6.2 frps","slug":"linux/常用服务模板","published":1,"updated":"2023-09-01T07:21:06.510Z","_id":"cllupbr650000zd4w0ebj4zyq","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>存放一些常用的模板。</p>\n          </div>\n\n<span id=\"more\"></span>\n\n<h2 id=\"1-Makefile\"><a href=\"#1-Makefile\" class=\"headerlink\" title=\"1. Makefile\"></a>1. Makefile</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: git_push docker_build all help</span><br><br><span class=\"hljs-comment\"># 获取 git 项目 COMMIT_HASH</span><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">git_push: ## 上传代码到 Github</span><br>\tgit add .<br>\tgit commit -m <span class=\"hljs-string\">&quot;`date &#x27;+%Y/%m/%d %H:%M:%S&#x27;`&quot;</span><br>\tgit push origin dev<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>指定参数</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">commit: </span><br>\tgit commit -m <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(msg)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">make commit msg=<span class=\"hljs-string\">&quot;makefile 测试&quot;</span>              <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Dockerfile\"><a href=\"#2-Dockerfile\" class=\"headerlink\" title=\"2. Dockerfile\"></a>2. Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> golang:<span class=\"hljs-number\">1.20</span> as builder<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> . .</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go</span><br><br><span class=\"hljs-comment\"># =================================== 分层编译 ==============================================</span><br><span class=\"hljs-keyword\">FROM</span> alpine AS final<br><br><span class=\"hljs-comment\"># 国内使用的goproxy</span><br><span class=\"hljs-keyword\">ENV</span> GOPROXY=https://goproxy.cn<br><br><span class=\"hljs-comment\"># 设置时区</span><br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><br><span class=\"hljs-comment\"># 复制 builder 的产物</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=builder /root/app .</span><br><br><span class=\"hljs-comment\"># 复制本地文件夹</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./mydir/  ./mydir/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x app \\</span><br><span class=\"language-bash\">    &amp;&amp; apk update \\</span><br><span class=\"language-bash\">    &amp;&amp; apk add --no-cache tzdata</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/root/app&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-Github-Build-Action\"><a href=\"#3-Github-Build-Action\" class=\"headerlink\" title=\"3. Github Build Action\"></a>3. Github Build Action</h2><div class=\"note note-warning\">\n            <p>buildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 <code>manifest</code> 来进行合并镜像。</p><p>下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 <code>docker manifest</code> 进行合并镜像。</p><p>可以配合 <code>Makefile</code> 来看。</p>\n          </div>\n\n<h3 id=\"3-1-Makefile-模板\"><a href=\"#3-1-Makefile-模板\" class=\"headerlink\" title=\"3.1 Makefile 模板\"></a>3.1 Makefile 模板</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help</span><br><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">docker-build-amd64: ## 编译 amd64 镜像</span><br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:amd64<br><br><span class=\"hljs-section\">docker-build-arm64: ## 编译 arm64 镜像</span><br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:arm64<br><br><span class=\"hljs-section\">docker-build-armv7: ## 编译 armv7 镜像</span><br>\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv7<br><br><span class=\"hljs-section\">docker-build-armv8: ## 编译 armv8 镜像</span><br>\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv8<br><br><span class=\"hljs-comment\"># ================================= 本地测试 =================================</span><br><span class=\"hljs-section\">docker-build-amd64-local: ## 编译 amd64 镜像</span><br>\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go<br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .<br>\tdocker push oldwang6/cloud-backup:amd64-local<br>\trm -f cloud-backup-amd64-local<br><br><span class=\"hljs-section\">docker-build-arm64-local: ## 编译 arm64 镜像</span><br>\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go<br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .<br>\tdocker push oldwang6/cloud-backup:arm64-local<br>\trm -f cloud-backup-arm64-local<br><br><span class=\"hljs-section\">manifest: ## 合并镜像</span><br>\tdocker manifest create oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125; \\<br>           oldwang6/cloud-backup:amd64 \\<br>\t\t   oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>\t\t   oldwang6/cloud-backup:armv8<br><br>\tdocker manifest create oldwang6/cloud-backup:latest \\<br>           oldwang6/cloud-backup:amd64 \\<br>           oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>           oldwang6/cloud-backup:armv8<br><br>\tdocker manifest push oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125;<br>\tdocker manifest push oldwang6/cloud-backup:latest<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-yaml-模板\"><a href=\"#3-2-yaml-模板\" class=\"headerlink\" title=\"3.2 yaml 模板\"></a>3.2 yaml 模板</h3><div class=\"note note-warning\">\n            <p>下面为 .github&#x2F;workflows&#x2F;build.yml 文件内容。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">Binary</span><br><br><span class=\"hljs-attr\">on:</span> [<span class=\"hljs-string\">push</span>]<br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">go-build-amd64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv cloud-backup-amd64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>  <span class=\"hljs-attr\">go-build-arm64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv cloud-backup-arm64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv7:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv cloud-backup-armv7 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv8:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv cloud-backup-armv8 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">docker-build-amd64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-amd64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-amd64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-arm64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-arm64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-arm64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv7:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv7</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv7</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv8:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv8</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv8</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">manifest:</span><br>    <span class=\"hljs-attr\">needs:</span><br>      [<br>        <span class=\"hljs-string\">docker-build-amd64</span>,<br>        <span class=\"hljs-string\">docker-build-arm64</span>,<br>        <span class=\"hljs-string\">docker-build-armv7</span>,<br>        <span class=\"hljs-string\">docker-build-armv8</span>,<br>      ]<br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">使用</span> <span class=\"hljs-string\">manifest</span> <span class=\"hljs-string\">合并镜像并推送</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">make</span> <span class=\"hljs-string\">manifest</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-慎用缓存\"><a href=\"#3-3-慎用缓存\" class=\"headerlink\" title=\"3.3 慎用缓存\"></a>3.3 慎用缓存</h3><div class=\"note note-warning\">\n            <p>慎用缓存！！！真坑。</p><p>如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。</p><p>始作俑者：chatgpt推荐的配置文件。</p><p>排查许久。。。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">缓存二进制</span><br>  <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>  <span class=\"hljs-attr\">with:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>    <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">binaries-$&#123;&#123;</span> <span class=\"hljs-string\">runner.os</span> <span class=\"hljs-string\">&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-xui-客户端\"><a href=\"#4-xui-客户端\" class=\"headerlink\" title=\"4. xui 客户端\"></a>4. xui 客户端</h2><div class=\"note note-warning\">\n            <p>只适用于linux环境，下载 <a href=\"https://github.com/v2ray/v2ray-core/releases\">v2ray-core</a>，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray</p>\n          </div>\n\n<h3 id=\"4-1-客户端配置\"><a href=\"#4-1-客户端配置\" class=\"headerlink\" title=\"4.1. 客户端配置\"></a>4.1. 客户端配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">&#123;<br>    <span class=\"hljs-attr\">&quot;log&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;loglevel&quot;:</span> <span class=\"hljs-string\">&quot;warning&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;routing&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;domainStrategy&quot;:</span> <span class=\"hljs-string\">&quot;AsIs&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;rules&quot;:</span> [<br>            &#123;<br>                <span class=\"hljs-attr\">&quot;ip&quot;:</span> [<br>                    <span class=\"hljs-string\">&quot;geoip:private&quot;</span><br>                ],<br>                <span class=\"hljs-attr\">&quot;outboundTag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;type&quot;:</span> <span class=\"hljs-string\">&quot;field&quot;</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;inbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-number\">1080</span>,<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;auth&quot;:</span> <span class=\"hljs-string\">&quot;noauth&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;udp&quot;:</span> <span class=\"hljs-literal\">true</span><br>            &#125;,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;outbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;vmess&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;vnext&quot;:</span> [<br>                    &#123;<br>                        <span class=\"hljs-attr\">&quot;users&quot;:</span> [<br>                            &#123;<br>                                <span class=\"hljs-attr\">&quot;id&quot;:</span> <span class=\"hljs-string\">&quot;&lt;uuid&gt;&quot;</span><br>                            &#125;<br>                        ],<br>                        <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-string\">&lt;服务端端口&gt;</span>,<br>                        <span class=\"hljs-attr\">&quot;address&quot;:</span> <span class=\"hljs-string\">&quot;&lt;服务端IP&gt;&quot;</span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;freedom&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-命令行设置代理\"><a href=\"#4-2-命令行设置代理\" class=\"headerlink\" title=\"4.2 命令行设置代理\"></a>4.2 命令行设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-取消设置代理\"><a href=\"#4-3-取消设置代理\" class=\"headerlink\" title=\"4.3 取消设置代理\"></a>4.3 取消设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">unset</span> https_proxy<br><span class=\"hljs-built_in\">unset</span> http_proxy<br><span class=\"hljs-built_in\">unset</span> all_proxy<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-chatgpt-测试-apikey\"><a href=\"#5-chatgpt-测试-apikey\" class=\"headerlink\" title=\"5. chatgpt 测试 apikey\"></a>5. chatgpt 测试 apikey</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s <span class=\"hljs-variable\">$API_KEY</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-frp\"><a href=\"#6-frp\" class=\"headerlink\" title=\"6. frp\"></a>6. frp</h2><h3 id=\"6-1-frpc\"><a href=\"#6-1-frpc\" class=\"headerlink\" title=\"6.1 frpc\"></a>6.1 frpc</h3><h4 id=\"6-1-1-docker-compose\"><a href=\"#6-1-1-docker-compose\" class=\"headerlink\" title=\"6.1.1 docker-compose\"></a>6.1.1 docker-compose</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">frps:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/root/k3s/frps.ini:/root/frps.ini</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-1-2-k8s\"><a href=\"#6-1-2-k8s\" class=\"headerlink\" title=\"6.1.2 k8s\"></a>6.1.2 k8s</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">imagePullSecrets:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hub-ali</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest</span><br>        <span class=\"hljs-attr\">volumeMounts:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/root/frps.ini</span><br>      <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>        <span class=\"hljs-attr\">hostPath:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/root/k3s/frps.ini</span>  <span class=\"hljs-comment\"># 将 /etc/x-ui 替换为实际的主机路径</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-2-frps\"><a href=\"#6-2-frps\" class=\"headerlink\" title=\"6.2 frps\"></a>6.2 frps</h3>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>存放一些常用的模板。</p>\n          </div>","more":"<h2 id=\"1-Makefile\"><a href=\"#1-Makefile\" class=\"headerlink\" title=\"1. Makefile\"></a>1. Makefile</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: git_push docker_build all help</span><br><br><span class=\"hljs-comment\"># 获取 git 项目 COMMIT_HASH</span><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">git_push: ## 上传代码到 Github</span><br>\tgit add .<br>\tgit commit -m <span class=\"hljs-string\">&quot;`date &#x27;+%Y/%m/%d %H:%M:%S&#x27;`&quot;</span><br>\tgit push origin dev<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>指定参数</strong></p>\n<figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-section\">commit: </span><br>\tgit commit -m <span class=\"hljs-string\">&quot;<span class=\"hljs-variable\">$(msg)</span>&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p>使用如下</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">make commit msg=<span class=\"hljs-string\">&quot;makefile 测试&quot;</span>              <br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Dockerfile\"><a href=\"#2-Dockerfile\" class=\"headerlink\" title=\"2. Dockerfile\"></a>2. Dockerfile</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">FROM</span> golang:<span class=\"hljs-number\">1.20</span> as builder<br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> . .</span><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o app main.go</span><br><br><span class=\"hljs-comment\"># =================================== 分层编译 ==============================================</span><br><span class=\"hljs-keyword\">FROM</span> alpine AS final<br><br><span class=\"hljs-comment\"># 国内使用的goproxy</span><br><span class=\"hljs-keyword\">ENV</span> GOPROXY=https://goproxy.cn<br><br><span class=\"hljs-comment\"># 设置时区</span><br><span class=\"hljs-keyword\">ENV</span> TZ=Asia/Shanghai<br><br><span class=\"hljs-keyword\">WORKDIR</span><span class=\"language-bash\"> /root/</span><br><br><span class=\"hljs-comment\"># 复制 builder 的产物</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> --from=builder /root/app .</span><br><br><span class=\"hljs-comment\"># 复制本地文件夹</span><br><span class=\"hljs-keyword\">COPY</span><span class=\"language-bash\"> ./mydir/  ./mydir/</span><br><br><span class=\"hljs-keyword\">RUN</span><span class=\"language-bash\"> <span class=\"hljs-built_in\">chmod</span> +x app \\</span><br><span class=\"language-bash\">    &amp;&amp; apk update \\</span><br><span class=\"language-bash\">    &amp;&amp; apk add --no-cache tzdata</span><br><br><span class=\"hljs-keyword\">EXPOSE</span> <span class=\"hljs-number\">8080</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;/root/app&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-Github-Build-Action\"><a href=\"#3-Github-Build-Action\" class=\"headerlink\" title=\"3. Github Build Action\"></a>3. Github Build Action</h2><div class=\"note note-warning\">\n            <p>buildx在编译时巨慢，可以通过docker指定架构去同时编译不同架构镜像并推送至 hub ，然后使用 <code>manifest</code> 来进行合并镜像。</p><p>下面这个实例首先通过 1.20 版本 golang 在不同平台进行 go build，将产生的二进制传递给对应的下一个 job，经过 make build-xx 并 push 镜像后，使用 <code>docker manifest</code> 进行合并镜像。</p><p>可以配合 <code>Makefile</code> 来看。</p>\n          </div>\n\n<h3 id=\"3-1-Makefile-模板\"><a href=\"#3-1-Makefile-模板\" class=\"headerlink\" title=\"3.1 Makefile 模板\"></a>3.1 Makefile 模板</h3><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs makefile\"><span class=\"hljs-meta\"><span class=\"hljs-keyword\">.PHONY</span>: docker-build-amd64 docker-build-arm64 docker-build-armv7 docker-build-armv8 manifest help</span><br><br>COMMIT_HASH = <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git rev-parse --short=7 HEAD)</span><br>TAG := <span class=\"hljs-variable\">$(<span class=\"hljs-built_in\">shell</span> git describe --exact-match --abbrev=0 --tags 2&gt;/dev/null)</span><br><br><span class=\"hljs-keyword\">ifdef</span> TAG<br>    IMAGE_TAG := <span class=\"hljs-variable\">$(TAG)</span><br><span class=\"hljs-keyword\">else</span><br>    IMAGE_TAG := <span class=\"hljs-variable\">$(COMMIT_HASH)</span><br><span class=\"hljs-keyword\">endif</span><br><br><span class=\"hljs-section\">docker-build-amd64: ## 编译 amd64 镜像</span><br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:amd64<br><br><span class=\"hljs-section\">docker-build-arm64: ## 编译 arm64 镜像</span><br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:arm64<br><br><span class=\"hljs-section\">docker-build-armv7: ## 编译 armv7 镜像</span><br>\tdocker build --platform linux/arm/v7 -t oldwang6/cloud-backup:armv7 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv7<br><br><span class=\"hljs-section\">docker-build-armv8: ## 编译 armv8 镜像</span><br>\tdocker build --platform linux/arm/v8 -t oldwang6/cloud-backup:armv8 -f build/Dockerfile .<br>\tdocker push oldwang6/cloud-backup:armv8<br><br><span class=\"hljs-comment\"># ================================= 本地测试 =================================</span><br><span class=\"hljs-section\">docker-build-amd64-local: ## 编译 amd64 镜像</span><br>\tGOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64-local main.go<br>\tdocker build --platform linux/amd64 -t oldwang6/cloud-backup:amd64-local -f build/Dockerfile.local.amd64 .<br>\tdocker push oldwang6/cloud-backup:amd64-local<br>\trm -f cloud-backup-amd64-local<br><br><span class=\"hljs-section\">docker-build-arm64-local: ## 编译 arm64 镜像</span><br>\tGOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64-local main.go<br>\tdocker build --platform linux/arm64 -t oldwang6/cloud-backup:arm64-local -f build/Dockerfile.local.arm64 .<br>\tdocker push oldwang6/cloud-backup:arm64-local<br>\trm -f cloud-backup-arm64-local<br><br><span class=\"hljs-section\">manifest: ## 合并镜像</span><br>\tdocker manifest create oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125; \\<br>           oldwang6/cloud-backup:amd64 \\<br>\t\t   oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>\t\t   oldwang6/cloud-backup:armv8<br><br>\tdocker manifest create oldwang6/cloud-backup:latest \\<br>           oldwang6/cloud-backup:amd64 \\<br>           oldwang6/cloud-backup:arm64 \\<br>           oldwang6/cloud-backup:armv7 \\<br>           oldwang6/cloud-backup:armv8<br><br>\tdocker manifest push oldwang6/cloud-backup:$&#123;IMAGE_TAG&#125;<br>\tdocker manifest push oldwang6/cloud-backup:latest<br><br><span class=\"hljs-section\">help: ## 查看帮助</span><br>\t@awk &#x27;BEGIN &#123;FS = <span class=\"hljs-string\">&quot;:.*?## &quot;</span>&#125; /^[a-zA-Z_-]+:.*?<span class=\"hljs-comment\">## / &#123;sub(&quot;\\\\\\\\n&quot;,sprintf(&quot;\\n%22c&quot;,&quot; &quot;), $$2);printf &quot; \\033[36m%-20s\\033[0m  %s\\n&quot;, $$1, $$2&#125;&#x27; $(MAKEFILE_LIST)</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-yaml-模板\"><a href=\"#3-2-yaml-模板\" class=\"headerlink\" title=\"3.2 yaml 模板\"></a>3.2 yaml 模板</h3><div class=\"note note-warning\">\n            <p>下面为 .github&#x2F;workflows&#x2F;build.yml 文件内容。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Build</span> <span class=\"hljs-string\">and</span> <span class=\"hljs-string\">Cache</span> <span class=\"hljs-string\">Binary</span><br><br><span class=\"hljs-attr\">on:</span> [<span class=\"hljs-string\">push</span>]<br><br><span class=\"hljs-attr\">jobs:</span><br>  <span class=\"hljs-attr\">go-build-amd64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=amd64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-amd64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv cloud-backup-amd64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>  <span class=\"hljs-attr\">go-build-arm64:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm64 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-arm64 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv cloud-backup-arm64 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv7:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv7 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv cloud-backup-armv7 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">go-build-armv8:</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/setup-go@v4</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">go-version:</span> <span class=\"hljs-string\">&quot;1.20&quot;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">Go版本信息</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">go</span> <span class=\"hljs-string\">version</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">二进制</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          env GOOS=linux GOARCH=arm GOARM=7 CGO_ENABLED=0 GOFLAGS=-mod=vendor go build -o cloud-backup-armv8 main.go</span><br><span class=\"hljs-string\">          mkdir -p $&#123;&#123; runner.workspace &#125;&#125;/bin</span><br><span class=\"hljs-string\">          chmod +x cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv cloud-backup-armv8 $&#123;&#123; runner.workspace &#125;&#125;/bin/</span><br><span class=\"hljs-string\"></span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">上传二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/upload-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br><br>  <span class=\"hljs-attr\">docker-build-amd64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-amd64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v3</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-amd64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">amd64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-amd64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-amd64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-amd64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-arm64:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-arm64</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-arm64</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm64</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-arm64</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-arm64 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-arm64</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv7:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv7</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv7</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v7</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv7</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv7 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv7</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">docker-build-armv8:</span><br>    <span class=\"hljs-attr\">needs:</span> <span class=\"hljs-string\">go-build-armv8</span><br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">下载缓存二进制</span><br>        <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/download-artifact@v2</span><br>        <span class=\"hljs-attr\">with:</span><br>          <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">cloud-backup-armv8</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">./bin</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">编译</span> <span class=\"hljs-string\">arm</span> <span class=\"hljs-string\">v8</span> <span class=\"hljs-string\">镜像</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">|</span><br><span class=\"hljs-string\">          chmod +x ./bin/cloud-backup-armv8</span><br><span class=\"hljs-string\">          mv ./bin/cloud-backup-armv8 ./bin/cloud-backup</span><br><span class=\"hljs-string\">          make docker-build-armv8</span><br><span class=\"hljs-string\"></span><br>  <span class=\"hljs-attr\">manifest:</span><br>    <span class=\"hljs-attr\">needs:</span><br>      [<br>        <span class=\"hljs-string\">docker-build-amd64</span>,<br>        <span class=\"hljs-string\">docker-build-arm64</span>,<br>        <span class=\"hljs-string\">docker-build-armv7</span>,<br>        <span class=\"hljs-string\">docker-build-armv8</span>,<br>      ]<br>    <span class=\"hljs-attr\">runs-on:</span> <span class=\"hljs-string\">ubuntu-latest</span><br>    <span class=\"hljs-attr\">steps:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/checkout@v2</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">登陆</span> <span class=\"hljs-string\">hub</span> <span class=\"hljs-string\">仓库</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">docker</span> <span class=\"hljs-string\">login</span> <span class=\"hljs-string\">--username=oldwang6</span> <span class=\"hljs-string\">-p</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">secrets.HUB_PASSWORD</span> <span class=\"hljs-string\">&#125;&#125;</span><br><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">使用</span> <span class=\"hljs-string\">manifest</span> <span class=\"hljs-string\">合并镜像并推送</span><br>        <span class=\"hljs-attr\">run:</span> <span class=\"hljs-string\">make</span> <span class=\"hljs-string\">manifest</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"3-3-慎用缓存\"><a href=\"#3-3-慎用缓存\" class=\"headerlink\" title=\"3.3 慎用缓存\"></a>3.3 慎用缓存</h3><div class=\"note note-warning\">\n            <p>慎用缓存！！！真坑。</p><p>如果下面这段缓存，github在传递文件给下一个workflow时，如果这个文件之前存在，就不会上传。</p><p>始作俑者：chatgpt推荐的配置文件。</p><p>排查许久。。。</p>\n          </div>\n\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">缓存二进制</span><br>  <span class=\"hljs-attr\">uses:</span> <span class=\"hljs-string\">actions/cache@v2</span><br>  <span class=\"hljs-attr\">with:</span><br>    <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">$&#123;&#123;</span> <span class=\"hljs-string\">runner.workspace</span> <span class=\"hljs-string\">&#125;&#125;/bin</span><br>    <span class=\"hljs-attr\">key:</span> <span class=\"hljs-string\">binaries-$&#123;&#123;</span> <span class=\"hljs-string\">runner.os</span> <span class=\"hljs-string\">&#125;&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"4-xui-客户端\"><a href=\"#4-xui-客户端\" class=\"headerlink\" title=\"4. xui 客户端\"></a>4. xui 客户端</h2><div class=\"note note-warning\">\n            <p>只适用于linux环境，下载 <a href=\"https://github.com/v2ray/v2ray-core/releases\">v2ray-core</a>，解压后替换 config.yaml 如下。执行 .&#x2F;v2ray</p>\n          </div>\n\n<h3 id=\"4-1-客户端配置\"><a href=\"#4-1-客户端配置\" class=\"headerlink\" title=\"4.1. 客户端配置\"></a>4.1. 客户端配置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\">&#123;<br>    <span class=\"hljs-attr\">&quot;log&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;loglevel&quot;:</span> <span class=\"hljs-string\">&quot;warning&quot;</span><br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;routing&quot;:</span> &#123;<br>        <span class=\"hljs-attr\">&quot;domainStrategy&quot;:</span> <span class=\"hljs-string\">&quot;AsIs&quot;</span>,<br>        <span class=\"hljs-attr\">&quot;rules&quot;:</span> [<br>            &#123;<br>                <span class=\"hljs-attr\">&quot;ip&quot;:</span> [<br>                    <span class=\"hljs-string\">&quot;geoip:private&quot;</span><br>                ],<br>                <span class=\"hljs-attr\">&quot;outboundTag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;type&quot;:</span> <span class=\"hljs-string\">&quot;field&quot;</span><br>            &#125;<br>        ]<br>    &#125;,<br>    <span class=\"hljs-attr\">&quot;inbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-number\">1080</span>,<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;auth&quot;:</span> <span class=\"hljs-string\">&quot;noauth&quot;</span>,<br>                <span class=\"hljs-attr\">&quot;udp&quot;:</span> <span class=\"hljs-literal\">true</span><br>            &#125;,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;socks&quot;</span><br>        &#125;<br>    ],<br>    <span class=\"hljs-attr\">&quot;outbounds&quot;:</span> [<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;vmess&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;settings&quot;:</span> &#123;<br>                <span class=\"hljs-attr\">&quot;vnext&quot;:</span> [<br>                    &#123;<br>                        <span class=\"hljs-attr\">&quot;users&quot;:</span> [<br>                            &#123;<br>                                <span class=\"hljs-attr\">&quot;id&quot;:</span> <span class=\"hljs-string\">&quot;&lt;uuid&gt;&quot;</span><br>                            &#125;<br>                        ],<br>                        <span class=\"hljs-attr\">&quot;port&quot;:</span> <span class=\"hljs-string\">&lt;服务端端口&gt;</span>,<br>                        <span class=\"hljs-attr\">&quot;address&quot;:</span> <span class=\"hljs-string\">&quot;&lt;服务端IP&gt;&quot;</span><br>                    &#125;<br>                ]<br>            &#125;<br>        &#125;,<br>        &#123;<br>            <span class=\"hljs-attr\">&quot;protocol&quot;:</span> <span class=\"hljs-string\">&quot;freedom&quot;</span>,<br>            <span class=\"hljs-attr\">&quot;tag&quot;:</span> <span class=\"hljs-string\">&quot;direct&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-2-命令行设置代理\"><a href=\"#4-2-命令行设置代理\" class=\"headerlink\" title=\"4.2 命令行设置代理\"></a>4.2 命令行设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> https_proxy=http://127.0.0.1:1080 http_proxy=http://127.0.0.1:1080 all_proxy=socks5://127.0.0.1:1080<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"4-3-取消设置代理\"><a href=\"#4-3-取消设置代理\" class=\"headerlink\" title=\"4.3 取消设置代理\"></a>4.3 取消设置代理</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">unset</span> https_proxy<br><span class=\"hljs-built_in\">unset</span> http_proxy<br><span class=\"hljs-built_in\">unset</span> all_proxy<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"5-chatgpt-测试-apikey\"><a href=\"#5-chatgpt-测试-apikey\" class=\"headerlink\" title=\"5. chatgpt 测试 apikey\"></a>5. chatgpt 测试 apikey</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">curl -sfL https://raw.githubusercontent.com/oldwang12/oldwang12.github.io/master/source/shells/chatgpt_test.sh | bash -s <span class=\"hljs-variable\">$API_KEY</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"6-frp\"><a href=\"#6-frp\" class=\"headerlink\" title=\"6. frp\"></a>6. frp</h2><h3 id=\"6-1-frpc\"><a href=\"#6-1-frpc\" class=\"headerlink\" title=\"6.1 frpc\"></a>6.1 frpc</h3><h4 id=\"6-1-1-docker-compose\"><a href=\"#6-1-1-docker-compose\" class=\"headerlink\" title=\"6.1.1 docker-compose\"></a>6.1.1 docker-compose</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">version:</span> <span class=\"hljs-string\">&#x27;3&#x27;</span><br><span class=\"hljs-attr\">services:</span><br>  <span class=\"hljs-attr\">frps:</span><br>    <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frpc:latest</span><br>    <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">/root/k3s/frps.ini:/root/frps.ini</span><br>    <span class=\"hljs-attr\">restart:</span> <span class=\"hljs-string\">always</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-1-2-k8s\"><a href=\"#6-1-2-k8s\" class=\"headerlink\" title=\"6.1.2 k8s\"></a>6.1.2 k8s</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-attr\">apiVersion:</span> <span class=\"hljs-string\">apps/v1</span><br><span class=\"hljs-attr\">kind:</span> <span class=\"hljs-string\">Deployment</span><br><span class=\"hljs-attr\">metadata:</span><br>  <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br><span class=\"hljs-attr\">spec:</span><br>  <span class=\"hljs-attr\">replicas:</span> <span class=\"hljs-number\">1</span><br>  <span class=\"hljs-attr\">selector:</span><br>    <span class=\"hljs-attr\">matchLabels:</span><br>      <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>  <span class=\"hljs-attr\">template:</span><br>    <span class=\"hljs-attr\">metadata:</span><br>      <span class=\"hljs-attr\">labels:</span><br>        <span class=\"hljs-attr\">app:</span> <span class=\"hljs-string\">frps</span><br>    <span class=\"hljs-attr\">spec:</span><br>      <span class=\"hljs-attr\">imagePullSecrets:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">hub-ali</span><br>      <span class=\"hljs-attr\">containers:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">frps</span><br>        <span class=\"hljs-attr\">image:</span> <span class=\"hljs-string\">registry.cn-hangzhou.aliyuncs.com/oldwang12/frps:latest</span><br>        <span class=\"hljs-attr\">volumeMounts:</span><br>        <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>          <span class=\"hljs-attr\">mountPath:</span> <span class=\"hljs-string\">/root/frps.ini</span><br>      <span class=\"hljs-attr\">volumes:</span><br>      <span class=\"hljs-bullet\">-</span> <span class=\"hljs-attr\">name:</span> <span class=\"hljs-string\">config</span><br>        <span class=\"hljs-attr\">hostPath:</span><br>          <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/root/k3s/frps.ini</span>  <span class=\"hljs-comment\"># 将 /etc/x-ui 替换为实际的主机路径</span><br></code></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"6-2-frps\"><a href=\"#6-2-frps\" class=\"headerlink\" title=\"6.2 frps\"></a>6.2 frps</h3>"},{"layout":"docker","title":"Dockerfile 命令","date":"2023-07-27T07:34:10.000Z","_content":"\n{% note primary%}\n\n一个适用于我自己的模板，附带一些命令讲解。\n\n{% endnote %}\n\n<!-- more -->\n## 1. 模板\n\n## 2. COPY vs ADD\n\n没有特殊需求情况下，建议使用`COPY`\n\n**ADD会自动解压压缩文件**\n  \n\n**ADD 支持源文件URL形式**\n\n```dockerfile\nADD http://example.com/example.txt /app/\n```\n\n## 3. CMD vs ENTRYPOINT\n\n**docker run 如果指定了命令会覆盖**\n\n**下面是等价的**\n```dockerfile\nCMD [\"python\", \"app.py\"]\n```\n\n```dockerfile\nENTRYPOINT [\"python\", \"app.py\"]\n```\n\n```dockerfile\n# 由 CMD 指令指定默认的可选参数：\nENTRYPOINT [\"python\"]\nCMD [\"app.py\"]\n```","source":"_posts/docker/Dockerfile命令.md","raw":"---\nlayout: docker\ntitle: Dockerfile 命令\ndate: 2023-07-27 15:34:10\ntags: [docker,dockerfile]\ncategories: docker\n---\n\n{% note primary%}\n\n一个适用于我自己的模板，附带一些命令讲解。\n\n{% endnote %}\n\n<!-- more -->\n## 1. 模板\n\n## 2. COPY vs ADD\n\n没有特殊需求情况下，建议使用`COPY`\n\n**ADD会自动解压压缩文件**\n  \n\n**ADD 支持源文件URL形式**\n\n```dockerfile\nADD http://example.com/example.txt /app/\n```\n\n## 3. CMD vs ENTRYPOINT\n\n**docker run 如果指定了命令会覆盖**\n\n**下面是等价的**\n```dockerfile\nCMD [\"python\", \"app.py\"]\n```\n\n```dockerfile\nENTRYPOINT [\"python\", \"app.py\"]\n```\n\n```dockerfile\n# 由 CMD 指令指定默认的可选参数：\nENTRYPOINT [\"python\"]\nCMD [\"app.py\"]\n```","slug":"docker/Dockerfile命令","published":1,"updated":"2023-08-28T09:56:55.834Z","_id":"cllupfgsb0003zd4w3t719x40","comments":1,"photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>一个适用于我自己的模板，附带一些命令讲解。</p>\n          </div>\n\n<span id=\"more\"></span>\n<h2 id=\"1-模板\"><a href=\"#1-模板\" class=\"headerlink\" title=\"1. 模板\"></a>1. 模板</h2><h2 id=\"2-COPY-vs-ADD\"><a href=\"#2-COPY-vs-ADD\" class=\"headerlink\" title=\"2. COPY vs ADD\"></a>2. COPY vs ADD</h2><p>没有特殊需求情况下，建议使用<code>COPY</code></p>\n<p><strong>ADD会自动解压压缩文件</strong></p>\n<p><strong>ADD 支持源文件URL形式</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> http://example.com/example.txt /app/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-CMD-vs-ENTRYPOINT\"><a href=\"#3-CMD-vs-ENTRYPOINT\" class=\"headerlink\" title=\"3. CMD vs ENTRYPOINT\"></a>3. CMD vs ENTRYPOINT</h2><p><strong>docker run 如果指定了命令会覆盖</strong></p>\n<p><strong>下面是等价的</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 由 CMD 指令指定默认的可选参数：</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>]</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<div class=\"note note-primary\">\n            <p>一个适用于我自己的模板，附带一些命令讲解。</p>\n          </div>","more":"<h2 id=\"1-模板\"><a href=\"#1-模板\" class=\"headerlink\" title=\"1. 模板\"></a>1. 模板</h2><h2 id=\"2-COPY-vs-ADD\"><a href=\"#2-COPY-vs-ADD\" class=\"headerlink\" title=\"2. COPY vs ADD\"></a>2. COPY vs ADD</h2><p>没有特殊需求情况下，建议使用<code>COPY</code></p>\n<p><strong>ADD会自动解压压缩文件</strong></p>\n<p><strong>ADD 支持源文件URL形式</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ADD</span><span class=\"language-bash\"> http://example.com/example.txt /app/</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-CMD-vs-ENTRYPOINT\"><a href=\"#3-CMD-vs-ENTRYPOINT\" class=\"headerlink\" title=\"3. CMD vs ENTRYPOINT\"></a>3. CMD vs ENTRYPOINT</h2><p><strong>docker run 如果指定了命令会覆盖</strong></p>\n<p><strong>下面是等价的</strong></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>, <span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\"><span class=\"hljs-comment\"># 由 CMD 指令指定默认的可选参数：</span><br><span class=\"hljs-keyword\">ENTRYPOINT</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;python&quot;</span>]</span><br><span class=\"hljs-keyword\">CMD</span><span class=\"language-bash\"> [<span class=\"hljs-string\">&quot;app.py&quot;</span>]</span><br></code></pre></td></tr></table></figure>"},{"title":"Sql 操作","category":"linux","date":"2023-08-28T10:55:08.000Z","_content":"{% note primary%}\n\nsql整理\n\n{% endnote %}\n\n## 1. Mysql\n### 删除数据库\n```\ndrop database <数据库名>;\n```\n### 创建表\n```\nCREATE TABLE table_name (column_name column_type)\n```\n### 插入数据\n```\nINSERT INTO table_name ( field1, field2,...fieldN ) values( value1, value2,...valueN );\n```\n### 更新数据\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n### 删除数据\n```\nDELETE FROM table_name [WHERE Clause]\n```\n### like\naddress 表中获取 domain 字段中以 COM 为结尾的的所有记录\n```\nselect * from address where domain like '%COM';\n```\n### order by (排序)\n```\nselect * from table order by age ASC;\n```\nASC: 升序       DESC:降序\n\n默认为 ASC\n### alert\n| Field | Type    | Null | Key | Default | Extra |\n| ----- | ------- | ---- | --- | ------- | ----- |\n| i     | int(11) | YES  |     | NULL    |       |\n| c     | char(1) | YES  |     | NULL    |       |\n\n```\n alert table leesin  drop i;    删除表的 i 字段\n alert table leesin  aaa i INT; 增加表的 i 字段\n```\n### mysqldump (mysql 外部执行)\n```\nmysqldump -u <user> -h <host> -P <port> -p<passward> <table> > text.sql\n```\n### 导入 DB\n```\nmysql -u <user> -h <host> -P <port> -p<passward> <table> < text.sql\n```\n\n## 2. Postgres\n\n### 备份\n```sh\npg_dumpall -U postgres > /var/lib/postgresql/dump.sql\n```\n\n### 恢复\n```sh\npsql -U postgres -f /var/lib/postgresql/dump.sql\n```\n\n### 删除数据库\n```sh\ndropdb -U postgres postgres\n```\n\n### 新建数据库\n```sh\ncreatedb  -U postgres postgres\n```\n","source":"_posts/linux/Sql-操作.md","raw":"---\ntitle: Sql 操作\ncategory: linux\ndate: 2023-08-28 18:55:08\ntags: sql\ncategories: linux\n---\n{% note primary%}\n\nsql整理\n\n{% endnote %}\n\n## 1. Mysql\n### 删除数据库\n```\ndrop database <数据库名>;\n```\n### 创建表\n```\nCREATE TABLE table_name (column_name column_type)\n```\n### 插入数据\n```\nINSERT INTO table_name ( field1, field2,...fieldN ) values( value1, value2,...valueN );\n```\n### 更新数据\n```\nUPDATE table_name SET field1=new-value1, field2=new-value2 [WHERE Clause]\n```\n### 删除数据\n```\nDELETE FROM table_name [WHERE Clause]\n```\n### like\naddress 表中获取 domain 字段中以 COM 为结尾的的所有记录\n```\nselect * from address where domain like '%COM';\n```\n### order by (排序)\n```\nselect * from table order by age ASC;\n```\nASC: 升序       DESC:降序\n\n默认为 ASC\n### alert\n| Field | Type    | Null | Key | Default | Extra |\n| ----- | ------- | ---- | --- | ------- | ----- |\n| i     | int(11) | YES  |     | NULL    |       |\n| c     | char(1) | YES  |     | NULL    |       |\n\n```\n alert table leesin  drop i;    删除表的 i 字段\n alert table leesin  aaa i INT; 增加表的 i 字段\n```\n### mysqldump (mysql 外部执行)\n```\nmysqldump -u <user> -h <host> -P <port> -p<passward> <table> > text.sql\n```\n### 导入 DB\n```\nmysql -u <user> -h <host> -P <port> -p<passward> <table> < text.sql\n```\n\n## 2. Postgres\n\n### 备份\n```sh\npg_dumpall -U postgres > /var/lib/postgresql/dump.sql\n```\n\n### 恢复\n```sh\npsql -U postgres -f /var/lib/postgresql/dump.sql\n```\n\n### 删除数据库\n```sh\ndropdb -U postgres postgres\n```\n\n### 新建数据库\n```sh\ncreatedb  -U postgres postgres\n```\n","slug":"linux/Sql-操作","published":1,"updated":"2023-08-29T09:27:34.901Z","_id":"cllurjc5g00022k4w92pn96jf","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>sql整理</p>\n          </div>\n\n<h2 id=\"1-Mysql\"><a href=\"#1-Mysql\" class=\"headerlink\" title=\"1. Mysql\"></a>1. Mysql</h2><h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-built_in\">table_name</span> (<span class=\"hljs-built_in\">column_name</span> column_type)<br></code></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">INSERT <span class=\"hljs-keyword\">INTO</span> table_name ( field1, field2,<span class=\"hljs-params\">...</span>fieldN ) values( value1, value2,<span class=\"hljs-params\">...</span>valueN );<br></code></pre></td></tr></table></figure>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">table_name</span> <span class=\"hljs-keyword\">SET</span> field1=<span class=\"hljs-built_in\">new</span>-value1, field2=<span class=\"hljs-built_in\">new</span>-value2 [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-built_in\">table_name</span> [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h3><p>address 表中获取 domain 字段中以 COM 为结尾的的所有记录</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> address <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">domain</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%COM&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"order-by-排序\"><a href=\"#order-by-排序\" class=\"headerlink\" title=\"order by (排序)\"></a>order by (排序)</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> age <span class=\"hljs-keyword\">ASC</span>;<br></code></pre></td></tr></table></figure>\n<p>ASC: 升序       DESC:降序</p>\n<p>默认为 ASC</p>\n<h3 id=\"alert\"><a href=\"#alert\" class=\"headerlink\" title=\"alert\"></a>alert</h3><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Null</th>\n<th>Key</th>\n<th>Default</th>\n<th>Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>int(11)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>char(1)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">alert <span class=\"hljs-selector-tag\">table</span> leesin  drop <span class=\"hljs-selector-tag\">i</span>;    删除表的 <span class=\"hljs-selector-tag\">i</span> 字段<br>alert <span class=\"hljs-selector-tag\">table</span> leesin  aaa <span class=\"hljs-selector-tag\">i</span> INT; 增加表的 <span class=\"hljs-selector-tag\">i</span> 字段<br></code></pre></td></tr></table></figure>\n<h3 id=\"mysqldump-mysql-外部执行\"><a href=\"#mysqldump-mysql-外部执行\" class=\"headerlink\" title=\"mysqldump (mysql 外部执行)\"></a>mysqldump (mysql 外部执行)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysqldump -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &gt; text.sql<br></code></pre></td></tr></table></figure>\n<h3 id=\"导入-DB\"><a href=\"#导入-DB\" class=\"headerlink\" title=\"导入 DB\"></a>导入 DB</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysql -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &lt; text.sql<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Postgres\"><a href=\"#2-Postgres\" class=\"headerlink\" title=\"2. Postgres\"></a>2. Postgres</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pg_dumpall -U postgres &gt; /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">psql -U postgres -f /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据库-1\"><a href=\"#删除数据库-1\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dropdb -U postgres postgres<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"新建数据库\"><a href=\"#新建数据库\" class=\"headerlink\" title=\"新建数据库\"></a>新建数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">createdb  -U postgres postgres<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note note-primary\">\n            <p>sql整理</p>\n          </div>\n\n<h2 id=\"1-Mysql\"><a href=\"#1-Mysql\" class=\"headerlink\" title=\"1. Mysql\"></a>1. Mysql</h2><h3 id=\"删除数据库\"><a href=\"#删除数据库\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight n1ql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs n1ql\"><span class=\"hljs-keyword\">drop</span> <span class=\"hljs-keyword\">database</span> &lt;数据库名&gt;;<br></code></pre></td></tr></table></figure>\n<h3 id=\"创建表\"><a href=\"#创建表\" class=\"headerlink\" title=\"创建表\"></a>创建表</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">CREATE</span> <span class=\"hljs-keyword\">TABLE</span> <span class=\"hljs-built_in\">table_name</span> (<span class=\"hljs-built_in\">column_name</span> column_type)<br></code></pre></td></tr></table></figure>\n<h3 id=\"插入数据\"><a href=\"#插入数据\" class=\"headerlink\" title=\"插入数据\"></a>插入数据</h3><figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs lasso\">INSERT <span class=\"hljs-keyword\">INTO</span> table_name ( field1, field2,<span class=\"hljs-params\">...</span>fieldN ) values( value1, value2,<span class=\"hljs-params\">...</span>valueN );<br></code></pre></td></tr></table></figure>\n<h3 id=\"更新数据\"><a href=\"#更新数据\" class=\"headerlink\" title=\"更新数据\"></a>更新数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">UPDATE</span> <span class=\"hljs-built_in\">table_name</span> <span class=\"hljs-keyword\">SET</span> field1=<span class=\"hljs-built_in\">new</span>-value1, field2=<span class=\"hljs-built_in\">new</span>-value2 [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"删除数据\"><a href=\"#删除数据\" class=\"headerlink\" title=\"删除数据\"></a>删除数据</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">DELETE</span> <span class=\"hljs-keyword\">FROM</span> <span class=\"hljs-built_in\">table_name</span> [<span class=\"hljs-keyword\">WHERE</span> Clause]<br></code></pre></td></tr></table></figure>\n<h3 id=\"like\"><a href=\"#like\" class=\"headerlink\" title=\"like\"></a>like</h3><p>address 表中获取 domain 字段中以 COM 为结尾的的所有记录</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> address <span class=\"hljs-keyword\">where</span> <span class=\"hljs-keyword\">domain</span> <span class=\"hljs-keyword\">like</span> <span class=\"hljs-string\">&#x27;%COM&#x27;</span>;<br></code></pre></td></tr></table></figure>\n<h3 id=\"order-by-排序\"><a href=\"#order-by-排序\" class=\"headerlink\" title=\"order by (排序)\"></a>order by (排序)</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\"><span class=\"hljs-keyword\">select</span> * <span class=\"hljs-keyword\">from</span> <span class=\"hljs-keyword\">table</span> <span class=\"hljs-keyword\">order</span> <span class=\"hljs-keyword\">by</span> age <span class=\"hljs-keyword\">ASC</span>;<br></code></pre></td></tr></table></figure>\n<p>ASC: 升序       DESC:降序</p>\n<p>默认为 ASC</p>\n<h3 id=\"alert\"><a href=\"#alert\" class=\"headerlink\" title=\"alert\"></a>alert</h3><table>\n<thead>\n<tr>\n<th>Field</th>\n<th>Type</th>\n<th>Null</th>\n<th>Key</th>\n<th>Default</th>\n<th>Extra</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>int(11)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n<tr>\n<td>c</td>\n<td>char(1)</td>\n<td>YES</td>\n<td></td>\n<td>NULL</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\">alert <span class=\"hljs-selector-tag\">table</span> leesin  drop <span class=\"hljs-selector-tag\">i</span>;    删除表的 <span class=\"hljs-selector-tag\">i</span> 字段<br>alert <span class=\"hljs-selector-tag\">table</span> leesin  aaa <span class=\"hljs-selector-tag\">i</span> INT; 增加表的 <span class=\"hljs-selector-tag\">i</span> 字段<br></code></pre></td></tr></table></figure>\n<h3 id=\"mysqldump-mysql-外部执行\"><a href=\"#mysqldump-mysql-外部执行\" class=\"headerlink\" title=\"mysqldump (mysql 外部执行)\"></a>mysqldump (mysql 外部执行)</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysqldump -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &gt; text.sql<br></code></pre></td></tr></table></figure>\n<h3 id=\"导入-DB\"><a href=\"#导入-DB\" class=\"headerlink\" title=\"导入 DB\"></a>导入 DB</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\">mysql -u <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">user</span>&gt;</span> -h <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">host</span>&gt;</span> -P <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">port</span>&gt;</span> -p<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">passward</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">table</span>&gt;</span> &lt; text.sql<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-Postgres\"><a href=\"#2-Postgres\" class=\"headerlink\" title=\"2. Postgres\"></a>2. Postgres</h2><h3 id=\"备份\"><a href=\"#备份\" class=\"headerlink\" title=\"备份\"></a>备份</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">pg_dumpall -U postgres &gt; /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"恢复\"><a href=\"#恢复\" class=\"headerlink\" title=\"恢复\"></a>恢复</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">psql -U postgres -f /var/lib/postgresql/dump.sql<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除数据库-1\"><a href=\"#删除数据库-1\" class=\"headerlink\" title=\"删除数据库\"></a>删除数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">dropdb -U postgres postgres<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"新建数据库\"><a href=\"#新建数据库\" class=\"headerlink\" title=\"新建数据库\"></a>新建数据库</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">createdb  -U postgres postgres<br></code></pre></td></tr></table></figure>\n"},{"title":"工具大全","date":"2023-08-29T09:33:28.000Z","updated":"2023-08-29T09:54:16.598Z","_content":"\n{% note primary%}\n\n要想下班早，工具用的好。\n\n{% endnote %}\n\n# iterm2 跳板机避免重复验证\n\n比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~/.ssh/config 文件中加上下面配置\n```yaml\nHost ujump\n     HostName jump1.xxxx.com\n     Port 22\n     User lee\n     IdentityFile ~/.ssh/id_rsa\n     ServerAliveInterval 300\n     ControlMaster auto\n     ControlPath ~/.ssh/master-%r@%h:%p\n     StrictHostKeyChecking no\n```\n\n这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile\n\n![](iterm.png)\n\n# ssh 免密登陆\n\n## 本地\n```sh\n# 生成公钥\n$ ssh-keygen\n```\n\ncat ~/.ssh/id_rsa.pub\n```sh\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR\n```\n\n## 服务器\n将上一步的key 放入 ~/.ssh/authorized_keys\n\n# 屏蔽浏览器网络请求\n\n{% note warning%}\n\n在 F12 调试时很不方便，故屏蔽掉不相关的请求。\n\n{% endnote %}\n\n```sh\n-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/\n```\n\n# Mac 工具推荐\n\n#### 翻译工具\n```\n沙拉查词\n```\n\n#### 截屏\n```\nsnipaste\n```\n\n#### 剪切板（复制多个）\n```\nicopy\n```\n\n#### 内存、CPU、磁盘占用\n```\niStat Menus\n```\n\n\n# Vscode 插件\n#### markdone 预览\n```\nMarkdown Preview Enhanced\n```\n\n#### git 查看历史提交\n```\nGit History\n```\n\n#### yaml自动补全\n```\n* git: line\n* kubernetes、yaml\n```\n\n#### 自动生成图\n```\nmarkmap\n```\n\n#### 远程开发\n```\nRemote - SSH\n```\n\n#### html 预览\n```\nHTML Preview\n```\n\n#### 生成脑图\n```\nMarkMap\n```\n\n#### 粘贴图片\n```\nPasts Image\n```\n\n#### 坤坤鼓励师\n```\n坤坤鼓励师\n```","source":"_posts/工具/工具大全.md","raw":"---\ntitle: 工具大全\ncategory: 工具\ndate: 2023-08-29 17:33:28\nupdated:\ntags: [工具,ssh]\n---\n\n{% note primary%}\n\n要想下班早，工具用的好。\n\n{% endnote %}\n\n# iterm2 跳板机避免重复验证\n\n比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~/.ssh/config 文件中加上下面配置\n```yaml\nHost ujump\n     HostName jump1.xxxx.com\n     Port 22\n     User lee\n     IdentityFile ~/.ssh/id_rsa\n     ServerAliveInterval 300\n     ControlMaster auto\n     ControlPath ~/.ssh/master-%r@%h:%p\n     StrictHostKeyChecking no\n```\n\n这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile\n\n![](iterm.png)\n\n# ssh 免密登陆\n\n## 本地\n```sh\n# 生成公钥\n$ ssh-keygen\n```\n\ncat ~/.ssh/id_rsa.pub\n```sh\nssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR\n```\n\n## 服务器\n将上一步的key 放入 ~/.ssh/authorized_keys\n\n# 屏蔽浏览器网络请求\n\n{% note warning%}\n\n在 F12 调试时很不方便，故屏蔽掉不相关的请求。\n\n{% endnote %}\n\n```sh\n-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/\n```\n\n# Mac 工具推荐\n\n#### 翻译工具\n```\n沙拉查词\n```\n\n#### 截屏\n```\nsnipaste\n```\n\n#### 剪切板（复制多个）\n```\nicopy\n```\n\n#### 内存、CPU、磁盘占用\n```\niStat Menus\n```\n\n\n# Vscode 插件\n#### markdone 预览\n```\nMarkdown Preview Enhanced\n```\n\n#### git 查看历史提交\n```\nGit History\n```\n\n#### yaml自动补全\n```\n* git: line\n* kubernetes、yaml\n```\n\n#### 自动生成图\n```\nmarkmap\n```\n\n#### 远程开发\n```\nRemote - SSH\n```\n\n#### html 预览\n```\nHTML Preview\n```\n\n#### 生成脑图\n```\nMarkMap\n```\n\n#### 粘贴图片\n```\nPasts Image\n```\n\n#### 坤坤鼓励师\n```\n坤坤鼓励师\n```","slug":"工具/工具大全","published":1,"_id":"cllw426uw000a2k4wgh9lb4u6","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"note note-primary\">\n            <p>要想下班早，工具用的好。</p>\n          </div>\n\n<h1 id=\"iterm2-跳板机避免重复验证\"><a href=\"#iterm2-跳板机避免重复验证\" class=\"headerlink\" title=\"iterm2 跳板机避免重复验证\"></a>iterm2 跳板机避免重复验证</h1><p>比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~&#x2F;.ssh&#x2F;config 文件中加上下面配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">ujump</span><br>     <span class=\"hljs-string\">HostName</span> <span class=\"hljs-string\">jump1.xxxx.com</span><br>     <span class=\"hljs-string\">Port</span> <span class=\"hljs-number\">22</span><br>     <span class=\"hljs-string\">User</span> <span class=\"hljs-string\">lee</span><br>     <span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>     <span class=\"hljs-string\">ServerAliveInterval</span> <span class=\"hljs-number\">300</span><br>     <span class=\"hljs-string\">ControlMaster</span> <span class=\"hljs-string\">auto</span><br>     <span class=\"hljs-string\">ControlPath</span> <span class=\"hljs-string\">~/.ssh/master-%r@%h:%p</span><br>     <span class=\"hljs-string\">StrictHostKeyChecking</span> <span class=\"hljs-literal\">no</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile</p>\n<p><img src=\"iterm.png\"></p>\n<h1 id=\"ssh-免密登陆\"><a href=\"#ssh-免密登陆\" class=\"headerlink\" title=\"ssh 免密登陆\"></a>ssh 免密登陆</h1><h2 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成公钥</span><br>$ ssh-keygen<br></code></pre></td></tr></table></figure>\n\n<p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>将上一步的key 放入 ~&#x2F;.ssh&#x2F;authorized_keys</p>\n<h1 id=\"屏蔽浏览器网络请求\"><a href=\"#屏蔽浏览器网络请求\" class=\"headerlink\" title=\"屏蔽浏览器网络请求\"></a>屏蔽浏览器网络请求</h1><div class=\"note note-warning\">\n            <p>在 F12 调试时很不方便，故屏蔽掉不相关的请求。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Mac-工具推荐\"><a href=\"#Mac-工具推荐\" class=\"headerlink\" title=\"Mac 工具推荐\"></a>Mac 工具推荐</h1><h4 id=\"翻译工具\"><a href=\"#翻译工具\" class=\"headerlink\" title=\"翻译工具\"></a>翻译工具</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">沙拉查词<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">snipaste</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"剪切板（复制多个）\"><a href=\"#剪切板（复制多个）\" class=\"headerlink\" title=\"剪切板（复制多个）\"></a>剪切板（复制多个）</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">icopy</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"内存、CPU、磁盘占用\"><a href=\"#内存、CPU、磁盘占用\" class=\"headerlink\" title=\"内存、CPU、磁盘占用\"></a>内存、CPU、磁盘占用</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">iStat Menus</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"Vscode-插件\"><a href=\"#Vscode-插件\" class=\"headerlink\" title=\"Vscode 插件\"></a>Vscode 插件</h1><h4 id=\"markdone-预览\"><a href=\"#markdone-预览\" class=\"headerlink\" title=\"markdone 预览\"></a>markdone 预览</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Markdown Preview Enhanced</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"git-查看历史提交\"><a href=\"#git-查看历史提交\" class=\"headerlink\" title=\"git 查看历史提交\"></a>git 查看历史提交</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Git History</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"yaml自动补全\"><a href=\"#yaml自动补全\" class=\"headerlink\" title=\"yaml自动补全\"></a>yaml自动补全</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>git: line<br><span class=\"hljs-bullet\">* </span>kubernetes、yaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动生成图\"><a href=\"#自动生成图\" class=\"headerlink\" title=\"自动生成图\"></a>自动生成图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">markmap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"远程开发\"><a href=\"#远程开发\" class=\"headerlink\" title=\"远程开发\"></a>远程开发</h4><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-comment\">Remote - SSH</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"html-预览\"><a href=\"#html-预览\" class=\"headerlink\" title=\"html 预览\"></a>html 预览</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">HTML</span> Preview<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"生成脑图\"><a href=\"#生成脑图\" class=\"headerlink\" title=\"生成脑图\"></a>生成脑图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">MarkMap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"粘贴图片\"><a href=\"#粘贴图片\" class=\"headerlink\" title=\"粘贴图片\"></a>粘贴图片</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Pasts Image</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坤坤鼓励师\"><a href=\"#坤坤鼓励师\" class=\"headerlink\" title=\"坤坤鼓励师\"></a>坤坤鼓励师</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">坤坤鼓励师<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<div class=\"note note-primary\">\n            <p>要想下班早，工具用的好。</p>\n          </div>\n\n<h1 id=\"iterm2-跳板机避免重复验证\"><a href=\"#iterm2-跳板机避免重复验证\" class=\"headerlink\" title=\"iterm2 跳板机避免重复验证\"></a>iterm2 跳板机避免重复验证</h1><p>比如登陆公司跳板机每次需要输入验证码，对开发很不友好，可以在本地环境 ~&#x2F;.ssh&#x2F;config 文件中加上下面配置</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-string\">Host</span> <span class=\"hljs-string\">ujump</span><br>     <span class=\"hljs-string\">HostName</span> <span class=\"hljs-string\">jump1.xxxx.com</span><br>     <span class=\"hljs-string\">Port</span> <span class=\"hljs-number\">22</span><br>     <span class=\"hljs-string\">User</span> <span class=\"hljs-string\">lee</span><br>     <span class=\"hljs-string\">IdentityFile</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span><br>     <span class=\"hljs-string\">ServerAliveInterval</span> <span class=\"hljs-number\">300</span><br>     <span class=\"hljs-string\">ControlMaster</span> <span class=\"hljs-string\">auto</span><br>     <span class=\"hljs-string\">ControlPath</span> <span class=\"hljs-string\">~/.ssh/master-%r@%h:%p</span><br>     <span class=\"hljs-string\">StrictHostKeyChecking</span> <span class=\"hljs-literal\">no</span><br></code></pre></td></tr></table></figure>\n\n<p>这样就可以免验证登陆，但在使用时还是不友好，因为每次新打开的窗口仍然需要输入ssh xxxx，Mac 可以在iTerm2中进行配置new profile</p>\n<p><img src=\"iterm.png\"></p>\n<h1 id=\"ssh-免密登陆\"><a href=\"#ssh-免密登陆\" class=\"headerlink\" title=\"ssh 免密登陆\"></a>ssh 免密登陆</h1><h2 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a>本地</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 生成公钥</span><br>$ ssh-keygen<br></code></pre></td></tr></table></figure>\n\n<p>cat ~&#x2F;.ssh&#x2F;id_rsa.pub</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCkHYTZDNfsSbanDwlJODoGAx9py6sQpdf/bfR<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"服务器\"><a href=\"#服务器\" class=\"headerlink\" title=\"服务器\"></a>服务器</h2><p>将上一步的key 放入 ~&#x2F;.ssh&#x2F;authorized_keys</p>\n<h1 id=\"屏蔽浏览器网络请求\"><a href=\"#屏蔽浏览器网络请求\" class=\"headerlink\" title=\"屏蔽浏览器网络请求\"></a>屏蔽浏览器网络请求</h1><div class=\"note note-warning\">\n            <p>在 F12 调试时很不方便，故屏蔽掉不相关的请求。</p>\n          </div>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">-/.*.js|.*.php|.*.png|.*.ico|.*.css|.*.gif/<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Mac-工具推荐\"><a href=\"#Mac-工具推荐\" class=\"headerlink\" title=\"Mac 工具推荐\"></a>Mac 工具推荐</h1><h4 id=\"翻译工具\"><a href=\"#翻译工具\" class=\"headerlink\" title=\"翻译工具\"></a>翻译工具</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">沙拉查词<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"截屏\"><a href=\"#截屏\" class=\"headerlink\" title=\"截屏\"></a>截屏</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">snipaste</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"剪切板（复制多个）\"><a href=\"#剪切板（复制多个）\" class=\"headerlink\" title=\"剪切板（复制多个）\"></a>剪切板（复制多个）</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">icopy</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"内存、CPU、磁盘占用\"><a href=\"#内存、CPU、磁盘占用\" class=\"headerlink\" title=\"内存、CPU、磁盘占用\"></a>内存、CPU、磁盘占用</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">iStat Menus</span><br></code></pre></td></tr></table></figure>\n\n\n<h1 id=\"Vscode-插件\"><a href=\"#Vscode-插件\" class=\"headerlink\" title=\"Vscode 插件\"></a>Vscode 插件</h1><h4 id=\"markdone-预览\"><a href=\"#markdone-预览\" class=\"headerlink\" title=\"markdone 预览\"></a>markdone 预览</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Markdown Preview Enhanced</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"git-查看历史提交\"><a href=\"#git-查看历史提交\" class=\"headerlink\" title=\"git 查看历史提交\"></a>git 查看历史提交</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Git History</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"yaml自动补全\"><a href=\"#yaml自动补全\" class=\"headerlink\" title=\"yaml自动补全\"></a>yaml自动补全</h4><figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-bullet\">* </span>git: line<br><span class=\"hljs-bullet\">* </span>kubernetes、yaml<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"自动生成图\"><a href=\"#自动生成图\" class=\"headerlink\" title=\"自动生成图\"></a>自动生成图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">markmap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"远程开发\"><a href=\"#远程开发\" class=\"headerlink\" title=\"远程开发\"></a>远程开发</h4><figure class=\"highlight basic\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs basic\"><span class=\"hljs-comment\">Remote - SSH</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"html-预览\"><a href=\"#html-预览\" class=\"headerlink\" title=\"html 预览\"></a>html 预览</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">HTML</span> Preview<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"生成脑图\"><a href=\"#生成脑图\" class=\"headerlink\" title=\"生成脑图\"></a>生成脑图</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">MarkMap</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"粘贴图片\"><a href=\"#粘贴图片\" class=\"headerlink\" title=\"粘贴图片\"></a>粘贴图片</h4><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ebnf\"><span class=\"hljs-attribute\">Pasts Image</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"坤坤鼓励师\"><a href=\"#坤坤鼓励师\" class=\"headerlink\" title=\"坤坤鼓励师\"></a>坤坤鼓励师</h4><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs\">坤坤鼓励师<br></code></pre></td></tr></table></figure>"}],"PostAsset":[{"_id":"source/_posts/k8s/使用kubeadm安装集群/master-worker.png","slug":"master-worker.png","post":"clkkk2yo20003e94w2emv7j83","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cni-plugins.png","slug":"cni-plugins.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/cri-cni.png","slug":"cri-cni.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-host-gw-1.png","slug":"flannel-host-gw-1.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-modes.jpg","slug":"flannel-modes.jpg","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-1.png","slug":"flannel-vxlan-1.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-2.png","slug":"flannel-vxlan-2.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/flannel-vxlan-3.png","slug":"flannel-vxlan-3.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/pod-allow-ip.png","slug":"pod-allow-ip.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-1.png","slug":"calico-ipip-1.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-ipip-2.png","slug":"calico-ipip-2.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/k8s/容器网络接口（CNI）/calico-bgp-1.png","slug":"calico-bgp-1.png","post":"cll4tbb4o00007o4w3uae1uwd","modified":0,"renderable":0},{"_id":"source/_posts/golang/golang垃圾回收/1.png","slug":"1.png","post":"clldiv8m300021r4w8kbcdwc1","modified":0,"renderable":0},{"_id":"source/_posts/linux/linux-命令大全/top-01.png","slug":"top-01.png","post":"cllfzsnkz0000074w7tuz16xg","modified":0,"renderable":0},{"_id":"source/_posts/linux/linux-命令大全/top-02.png","slug":"top-02.png","post":"cllfzsnkz0000074w7tuz16xg","modified":0,"renderable":0},{"_id":"source/_posts/工具/工具大全/iterm.png","slug":"iterm.png","post":"cllw426uw000a2k4wgh9lb4u6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clkgr6kqj0000ga4w8w9sggqw","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlfbdf0002le4wea8fgfhd"},{"post_id":"clke8lpvj000h3w4w3l9oegjr","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlfsok0003le4wgeyng0uz"},{"post_id":"clkuugyqu0001pz4wffm89frr","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlfup80004le4w0fgvhezs"},{"post_id":"clkku9oxq0000ou4w9a5bfsd1","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlfz0r0006le4w9bs68jyv"},{"post_id":"clldiv8m300021r4w8kbcdwc1","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlg1ys0007le4w1zzy4oyg"},{"post_id":"clldg4fa40000st4w2ad5374y","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlg3s80008le4wb2oeckiz"},{"post_id":"clkqp0e2000006o4wblmweesx","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlg5nr0009le4wh6n54c6j"},{"post_id":"clknkuzvd0002yu4wdxz3hh7x","category_id":"clldlfbdb0001le4wglv8hsyd","_id":"clldlg7oe000ale4wct4f8i0p"},{"post_id":"clkutyww60000vb4w1je99qus","category_id":"clldlgf78000ble4w2xbte8ec","_id":"clldlgf79000cle4w9pq6bwki"},{"post_id":"clke8jrxr00033w4w3v7o1h18","category_id":"clldlgf78000ble4w2xbte8ec","_id":"clldlgi7n000dle4w6mamgd94"},{"post_id":"clld4i0h900005w4wd45v70da","category_id":"clldlgtwu000fle4wgtauhj31","_id":"clldlgx7v000ile4w87o70chp"},{"post_id":"clldiv8lw00001r4w39gu5jjo","category_id":"clldlgtwu000fle4wgtauhj31","_id":"clldlh1ut000kle4w97o4gbsb"},{"post_id":"clknkuzve0009yu4whaiuak41","category_id":"clldlgtwu000fle4wgtauhj31","_id":"clldlh47a000lle4w9s3p0dxj"},{"post_id":"clknkuzvd0003yu4wdiyu6ntn","category_id":"clldlhiog000ole4w3dlgcrr3","_id":"clldlhiog000ple4w78bcam9n"},{"post_id":"clkkk2yo00001e94w72lxehna","category_id":"clldlhiog000ole4w3dlgcrr3","_id":"clldlhqzy000sle4w2hkpddel"},{"post_id":"clkkk2yo20003e94w2emv7j83","category_id":"clldlhiog000ole4w3dlgcrr3","_id":"clldlhsy8000tle4wa9vi4mpd"},{"post_id":"clke8k2dq00053w4whx9jgpie","category_id":"clldlhiog000ole4w3dlgcrr3","_id":"clldlhv72000ule4w5w217koq"},{"post_id":"cll4tbb4o00007o4w3uae1uwd","category_id":"clldlhiog000ole4w3dlgcrr3","_id":"clletimsr0004s14w2y8vdkbr"},{"post_id":"clletq882000gs14w2bive0fm","category_id":"clldli0yp000vle4wdhdm33lj","_id":"clletq883000hs14w3no0a2z6"},{"post_id":"cllfzsnkz0000074w7tuz16xg","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllfzsnl10002074w6el4hll6"},{"post_id":"cllhonhy80000a94w8xahahk6","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllhonhyc0002a94w8jbaadv6"},{"post_id":"cllhp4oa10000sh4wei0c4jwf","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllhp4oa70002sh4w0hyeek93"},{"post_id":"cllp0j61u00001f4w02ok3v24","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllp0j61z00031f4w9rqxd2y4"},{"post_id":"cllupbr650000zd4w0ebj4zyq","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllupbr670002zd4w2le5gudp"},{"post_id":"cllupfgsb0003zd4w3t719x40","category_id":"clldlgf78000ble4w2xbte8ec","_id":"cllupfgsc0005zd4w3oup14la"},{"post_id":"cllurjc5g00022k4w92pn96jf","category_id":"clldli0yp000vle4wdhdm33lj","_id":"cllurjc5h00032k4wg18797c0"},{"post_id":"cllw426uw000a2k4wgh9lb4u6","category_id":"clldlgtwu000fle4wgtauhj31","_id":"cllw426ux000b2k4wd7tadfv3"}],"PostTag":[{"post_id":"clke8jrxr00033w4w3v7o1h18","tag_id":"clke896pe0002vp4w40if892l","_id":"clke8jrxs00043w4wg4x0dtng"},{"post_id":"clke8k2dq00053w4whx9jgpie","tag_id":"clke84yod0000s54w9waz3nx8","_id":"clke8k2dr00063w4wa1hh216t"},{"post_id":"clke8lpvj000h3w4w3l9oegjr","tag_id":"clke85ik80002s54w46c8hn90","_id":"clke8lpvk000i3w4w9w6agxm9"},{"post_id":"clkgr6kqj0000ga4w8w9sggqw","tag_id":"clke85ik80002s54w46c8hn90","_id":"clkgr6kqm0001ga4wdwde3qro"},{"post_id":"clkkk2yo00001e94w72lxehna","tag_id":"clke84yod0000s54w9waz3nx8","_id":"clkkk2yo20002e94w05n1e4rt"},{"post_id":"clkkk2yo20003e94w2emv7j83","tag_id":"clke84yod0000s54w9waz3nx8","_id":"clkkk2yo30005e94w0mq1ex3s"},{"post_id":"clknkuzvd0002yu4wdxz3hh7x","tag_id":"clke85ik80002s54w46c8hn90","_id":"clknkuzvd0004yu4w51ph0yhj"},{"post_id":"clkqp0e2000006o4wblmweesx","tag_id":"clke85ik80002s54w46c8hn90","_id":"clkqp0e2300016o4waznce1yb"},{"post_id":"clkutyww60000vb4w1je99qus","tag_id":"clke896pe0002vp4w40if892l","_id":"clkuugyqv0002pz4w1phabu56"},{"post_id":"clkuugyqu0001pz4wffm89frr","tag_id":"clke85ik80002s54w46c8hn90","_id":"clkuugyqv0003pz4w525u4suz"},{"post_id":"cll4tbb4o00007o4w3uae1uwd","tag_id":"clke84yod0000s54w9waz3nx8","_id":"cll4tbb4p00017o4wdf8c3yve"},{"post_id":"clld4i0h900005w4wd45v70da","tag_id":"clke8knpo00093w4wbyph0dex","_id":"clld4i0hb00015w4w965h2jzr"},{"post_id":"clldg4fa40000st4w2ad5374y","tag_id":"clke85ik80002s54w46c8hn90","_id":"clldg4fa40001st4wb2ac2qka"},{"post_id":"clldiv8m300021r4w8kbcdwc1","tag_id":"clke85ik80002s54w46c8hn90","_id":"clldiv8m800031r4w60tvdspp"},{"post_id":"clkku9oxq0000ou4w9a5bfsd1","tag_id":"clke85ik80002s54w46c8hn90","_id":"clldlfz0r0005le4w1il8hsr0"},{"post_id":"clldiv8lw00001r4w39gu5jjo","tag_id":"clldlpneu001jle4w81bycqsc","_id":"clldlpneu001kle4w73u8enqg"},{"post_id":"clknkuzvd0003yu4wdiyu6ntn","tag_id":"clldljps30019le4w61dk36s4","_id":"cller3xba0001s14wauzdgg31"},{"post_id":"clknkuzvd0003yu4wdiyu6ntn","tag_id":"cller3xb90000s14wb53sc8gj","_id":"cller3xba0002s14w8lr78xiw"},{"post_id":"clknkuzvd0003yu4wdiyu6ntn","tag_id":"clke84yod0000s54w9waz3nx8","_id":"cller4ctm0003s14wggyx9t14"},{"post_id":"clletq882000gs14w2bive0fm","tag_id":"clke8i6k900031d4wcuj66xud","_id":"clletz0jw000ls14wdqr21gdj"},{"post_id":"clletq882000gs14w2bive0fm","tag_id":"clletz0jv000ks14wgd04e1an","_id":"clletz0jw000ms14wffaiewvk"},{"post_id":"clldiv8lw00001r4w39gu5jjo","tag_id":"cllew8tl7000ns14wc8a8gtnx","_id":"cllew8tl7000ps14wesgld8vu"},{"post_id":"clldiv8lw00001r4w39gu5jjo","tag_id":"cllew8tl7000os14w59stbwgk","_id":"cllew8tl8000qs14wbrh9gaqc"},{"post_id":"clknkuzve0009yu4whaiuak41","tag_id":"clke8knpo00093w4wbyph0dex","_id":"cllew9ugl000zs14w7xb7279d"},{"post_id":"clknkuzve0009yu4whaiuak41","tag_id":"cllew9fu8000vs14wfuwg5btg","_id":"cllew9ugl0010s14w7zos7rfv"},{"post_id":"clld4i0h900005w4wd45v70da","tag_id":"cllewxuv30011s14w1ldyf9zm","_id":"cllewxuv40012s14w7993as6h"},{"post_id":"clke8lpvj000h3w4w3l9oegjr","tag_id":"clke84yod0000s54w9waz3nx8","_id":"clleyj10a0013s14wbv7gfd1m"},{"post_id":"clke8lpvj000h3w4w3l9oegjr","tag_id":"clleyj8u20014s14w4jck5kwe","_id":"clleyj8u30015s14w4vedduk2"},{"post_id":"cll4tbb4o00007o4w3uae1uwd","tag_id":"clleynb2q0016s14w6bq6hms8","_id":"clleynb2q0017s14w1zjhhlhn"},{"post_id":"cllfzsnkz0000074w7tuz16xg","tag_id":"clke8i6k900031d4wcuj66xud","_id":"cllfzsnl10001074w74x2avwk"},{"post_id":"cllhonhy80000a94w8xahahk6","tag_id":"cllhonhy90001a94w76el6v2u","_id":"cllhonhyc0004a94w57f3b244"},{"post_id":"cllhonhy80000a94w8xahahk6","tag_id":"cllhonhyc0003a94wg5he4h6d","_id":"cllhonhyc0005a94waqf54wcl"},{"post_id":"cllhp4oa10000sh4wei0c4jwf","tag_id":"cllhp4oa40001sh4w1n8t5ogj","_id":"cllhp4oa70003sh4wdfqdfr1g"},{"post_id":"cllhp4oa10000sh4wei0c4jwf","tag_id":"cllezdfxe0018s14wfvfzgd7d","_id":"cllhp4oa70004sh4wfpboe2x7"},{"post_id":"cllp0j61u00001f4w02ok3v24","tag_id":"clldljdir0017le4w0ka6ewx2","_id":"cllp0j61z00011f4wco5phr7f"},{"post_id":"cllp0j61u00001f4w02ok3v24","tag_id":"cllezdfxe0018s14wfvfzgd7d","_id":"cllp0j61z00021f4w53up2gqs"},{"post_id":"cllp0j61u00001f4w02ok3v24","tag_id":"cllew96vh000rs14wg1kzg6tk","_id":"cllp0j61z00041f4wgfcz7plx"},{"post_id":"cllupfgsb0003zd4w3t719x40","tag_id":"clke896pe0002vp4w40if892l","_id":"cllupgeid000kzd4w2sebgert"},{"post_id":"cllupfgsb0003zd4w3t719x40","tag_id":"cllupgeib000jzd4w99tg5dsi","_id":"cllupgeid000lzd4w9g6875uy"},{"post_id":"cllupbr650000zd4w0ebj4zyq","tag_id":"cllupgnly000mzd4w8uzz9d5v","_id":"cllupgnlz000ozd4wharc5d06"},{"post_id":"cllupbr650000zd4w0ebj4zyq","tag_id":"cllupgnlz000nzd4w7y883u9d","_id":"cllupgnlz000pzd4wb0okgn3n"},{"post_id":"cllurjc5g00022k4w92pn96jf","tag_id":"cllurjmf800042k4wdjv74iz1","_id":"cllurjmf900052k4w0wvy3r90"},{"post_id":"cllw426uw000a2k4wgh9lb4u6","tag_id":"clke8knpo00093w4wbyph0dex","_id":"cllw42dat000c2k4wa5peh5uf"},{"post_id":"cllw426uw000a2k4wgh9lb4u6","tag_id":"cllw42j16000d2k4w6jcggmu4","_id":"cllw42j16000e2k4wctol8vs7"}],"Tag":[{"name":"k8s","_id":"clke84yod0000s54w9waz3nx8"},{"name":"golang","_id":"clke85ik80002s54w46c8hn90"},{"name":"docker","_id":"clke896pe0002vp4w40if892l"},{"name":"tools","_id":"clke8htdw00011d4wfxuweb52"},{"name":"linux","_id":"clke8i6k900031d4wcuj66xud"},{"name":"工具","_id":"clke8knpo00093w4wbyph0dex"},{"name":"linux,shell","_id":"clldljayh0015le4w3i7fegv5"},{"name":"shell","_id":"clldljdir0017le4w0ka6ewx2"},{"name":"kubectl","_id":"clldljps30019le4w61dk36s4"},{"name":"kubectl,alias","_id":"clldlk4hn001ble4w9upm8p2b"},{"name":"kubectl、alias","_id":"clldlkk2r001dle4wdl5q6zq1"},{"name":"kubectlalias","_id":"clldlko9i001fle4wfnafg4rm"},{"name":"kubectl alias","_id":"clldlkosj001hle4wgiuce16y"},{"name":"markdown","_id":"clldlpneu001jle4w81bycqsc"},{"name":"alias","_id":"cller3xb90000s14wb53sc8gj"},{"name":"linux、fzf","_id":"clletqyzv000is14wd5acdjdb"},{"name":"fzf","_id":"clletz0jv000ks14wgd04e1an"},{"name":"fluid","_id":"cllew8tl7000ns14wc8a8gtnx"},{"name":"hexo","_id":"cllew8tl7000os14w59stbwgk"},{"name":"alist","_id":"cllew96vh000rs14wg1kzg6tk"},{"name":"oh my zsh","_id":"cllew9fu8000vs14wfuwg5btg"},{"name":"工具 oh my zsh","_id":"cllew9qen000xs14wgzcy3su5"},{"name":"git","_id":"cllewxuv30011s14w1ldyf9zm"},{"name":"mod","_id":"clleyj8u20014s14w4jck5kwe"},{"name":"cni","_id":"clleynb2q0016s14w6bq6hms8"},{"name":"nas","_id":"cllezdfxe0018s14wfvfzgd7d"},{"name":"玩客云","_id":"cllhonhy90001a94w76el6v2u"},{"name":"armbian","_id":"cllhonhyc0003a94wg5he4h6d"},{"name":"frp","_id":"cllhp4oa40001sh4w1n8t5ogj"},{"name":"docker dock e","_id":"cllupfor10006zd4w0dg9ahlu"},{"name":"docker dock","_id":"cllupfpoh0008zd4whw1s7b8m"},{"name":"docker dockerfile","_id":"cllupfr35000azd4wgay7gkvh"},{"name":"makefile、","_id":"cllupg3op000czd4wd6mbgc2f"},{"name":"makefile","_id":"cllupg5eg000ezd4w7ngp70lf"},{"name":"docker dockerfile]","_id":"cllupgaxi000gzd4w5o60aq04"},{"name":"dockerfile","_id":"cllupgeib000jzd4w99tg5dsi"},{"name":"Makefile","_id":"cllupgnly000mzd4w8uzz9d5v"},{"name":"Dockerfile","_id":"cllupgnlz000nzd4w7y883u9d"},{"name":"sql","_id":"cllurjmf800042k4wdjv74iz1"},{"name":"ssh","_id":"cllw42j16000d2k4w6jcggmu4"}]}}